import os
import re
import sys
import logging
from dotenv import load_dotenv
from sqlalchemy import create_engine
from datetime import datetime
from sqlalchemy.exc import SQLAlchemyError
import pandas as pd
import numpy as np
import zipfile


def update_db(cursor, engine):
    try:
        # clear table
        cursor.execute("TRUNCATE urlhaus")
        # update table
        col_names = ['id', 'dateadded', 'url', 'url_status', 'tags', 'urlhaus_link',
                     'reporter']


        zf = zipfile.ZipFile('abusechurl.csv.zip')
        data = pd.read_csv(zf.open('csv.txt'), header=0, names=col_names)
        data['dateadded'] = pd.to_datetime(data['dateadded'])
        data.to_sql('urlhaus', engine, if_exists='append', index=False)
    except SQLAlchemyError as e:
        error = str(e.__dict__['orig']).replace('\n', ' ')
        logging.error('SQL error at insert: {}'.format(error))

# Setup
load_dotenv("/app/.env")
log_path = os.path.join(os.environ.get("BACKEND_PROC_LOG_DIR"), "abusechdb.log")
os.makedirs(os.path.dirname(log_path), exist_ok=True)
logging.basicConfig(filename=log_path, filemode='a', format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)


if __name__== "__main__":
    logging.info('STARTED {}'.format(os.path.basename(__file__)))

    # Get database url from .env file
    try:
        db_url = os.environ.get("DATABASE_URL")
    except Exception as e:
        logging.error('Could not get env variables: {}'.format(e))

    # Connect to DB
    try:
        engine = create_engine(db_url)
        cursor = engine.connect()
    except Exception as e:
        logging.error('Could not connect to db: {}'.format(e))

    update_db(cursor, engine)

    logging.info('FINISHED')
