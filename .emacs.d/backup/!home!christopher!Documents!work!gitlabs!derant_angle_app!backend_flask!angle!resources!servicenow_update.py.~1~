from angle import check_api
from angle.models import UserModel, FirmModel
from flask_restful import Resource
from flask import current_app as app
from flask_mail import Message, Mail
from flask import render_template
from .send_sms import send_sms
import datetime
from datetime import datetime as dt
import phonenumbers as pn
import os

image_url = os.path.join(app.config['CURRENT_IMAGE_SITE'], app.config['IMAGE_FOLDER'])

def sendMail(subject, recipients, head, body, mail):
    msg = Message(subject, recipients = recipients)
    msg.html = render_template('email_template.html', icon=os.path.join(image_url, "danger.png"), head=head, message=body, color="orange", dlogo=os.path.join(image_url, "dlogo.png"))
    mail.send(msg)
    return True

def send_info(user, sensor, log_msg):
    if user.mobile and app.config['SMS_ACTIVE'] and app.config['NOTIFY_USERS']:
        number = pn.parse(user.mobile, user.country_code)
        if pn.is_valid_number(number) and app.config['NOTIFY_USERS_SENSOR'] and app.config['SMS_ACTIVE']:
            send_sms("Sensor {0} is inactive or does not receive data".format(sensor.name), [str(number.country_code) + str(number.national_number)])
            app.logger.info("SMS about sensor status sent to userid - {0}".format(user.id))
    if user.config['MAIL_ACTIVE'] and app.config['NOTIFY_USERS_SENSOR']:
        mail = Mail(app)
        try:
            sendMail('Sensor is down', [user.username], 'The following sensor is down:', ("Sensor {0} is inactive"+log_msg).format(sensor.name), mail)
            app.logger.info("Email about sensor status sent to userid - {0}".format(user.id))
        except:
            app.logger.error('Tried to send mail to {0} - {1} but failed'.format(user.name, user.id))

def send_admin(msg):
    sys_users = UserModel.find_users_with_role('sys_admin')

    admin_sms = []
    admin_mail = []

    for i in sys_users:
        admin_mail.append(i.username)
        if i.mobile:
            number = pn.parse(i.mobile, i.country_code)
            if pn.is_valid_number(number):
                admin_sms.append(str(number.country_code) + str(number.national_number))

    if app.config['SMS_ACTIVE'] and admin_sms:
        send_sms("The following sensors are inactive:\n \n {}".format(msg), admin_sms)
        app.logger.info("SMS about sensor status sent to sysadmins")
    if app.config['MAIL_ACTIVE']:
        mail = Mail(app)
        sendMail('Sensors are down', admin_mail, 'The following sensors are down', msg, mail)
        app.logger.info("Email about sensor status sent to sysadmins")

class sensorStatus(Resource):
    @check_api("APIKEY")
    def post(self):
        sensor_time = app.config['SENSOR_STATUS'] * 60
        minTime = dt.now() - datetime.timedelta(seconds=sensor_time)
        log_list = app.config['SENSOR_CHECK_LOGS']


        all_firms = FirmModel.get_all_firms()
        sensor_list = []

        for firm in all_firms:
            inactive_sensors = firm.get_inactive_sensors(minTime, log_list)

            for sensor in inactive_sensors:
                logs = [v.log_type for v in sensor.get_entries(minTime, log_list)]
                log_msg = ". It has stopped receiving data from the following log types: "+','.join(logs) if logs else ""
                sensor_list.append(i[0].firm.name + ' - ' + i[1].name + log_msg)

                sensor.sent_sms = current_time
                sensor.update_entries(dt.now(), minTime, log_list)
                sensor.save_to_db()

                for user in firm.get_notifiable_users():
                    send_info(user, sensor, log_msg)

        msg = '\n'.join(sensor_list)
        if msg:
            send_admin(msg)

        # # finds all sensors that havent received a package in a given period of time, the sensor_timelaps
        # users = UserModel.sd_userlist(minTime, log_list)

        # sensor_list = []

        # current_time = dt.now()

        # # goes through alle users who's sensors are inactive, sends an sms
        # for i in users:
        #     logs = [i.log_type for i in i[1].get_entries(minTime, log_list)]

        #     log_msg = ""
        #     if logs:
        #         log_msg = ". It has stopped receiving data from the following log types: "+','.join(logs)


        #     sensor_list.append(i[0].firm.name + ' - ' + i[1].name + log_msg)
        #     if i[0].mobile and app.config['SMS_ACTIVE'] and app.config['NOTIFY_USERS']:
        #         number = pn.parse(i[0].mobile, i[0].country_code)
        #         if pn.is_valid_number(number) and app.config['NOTIFY_USERS_SENSOR'] and app.config['SMS_ACTIVE']:
        #             send_sms("Sensor {0} is inactive or does not receive data".format(i[1].name), [str(number.country_code) + str(number.national_number)])
        #             app.logger.info("SMS about sensor status sent to userid - {0}".format(i[0].id))
        #     if app.config['MAIL_ACTIVE'] and app.config['NOTIFY_USERS_SENSOR']:
        #         mail = Mail(app)
        #         try:
        #             sendMail('Sensor is down', [i[0].username], 'The following sensor is down:', ("Sensor {0} is inactive"+log_msg).format(i[1].name), mail)
        #             app.logger.info("Email about sensor status sent to userid - {0}".format(i[0].id))
        #         except:
        #             app.logger.error('Tried to send mail to {0} - {1} but failed'.format(i[0].name, i[0].id))
        #             # return {'message': 'mailFail'}, 500

        #     i[1].sent_sms = current_time
        #     i[1].update_entries(current_time, minTime, log_list)
        #     i[1].save_to_db()


        ## send notis to the sys admins:
        # sys_users = UserModel.find_users_with_role('sys_admin')
        # msg = '\n'.join(sensor_list)

        # admin_sms = []
        # admin_mail = []

        # for i in sys_users:
        #     admin_mail.append(i.username)
        #     if i.mobile:
        #         number = pn.parse(i.mobile, i.country_code)
        #         if pn.is_valid_number(number):
        #             admin_sms.append(str(number.country_code) + str(number.national_number))
        # if msg:
        #     if app.config['SMS_ACTIVE'] and admin_sms:
        #         send_sms("The following sensors are inactive:\n \n {}".format(msg), admin_sms)
        #         app.logger.info("SMS about sensor status sent to sysadmins")
        #     if app.config['MAIL_ACTIVE']:
        #         mail = Mail(app)
        #         sendMail('Sensors are down', admin_mail, 'The following sensors are down', msg, mail)
        #         app.logger.info("Email about sensor status sent to sysadmins")

        return {'message': 'Sensors checked'}, 200
