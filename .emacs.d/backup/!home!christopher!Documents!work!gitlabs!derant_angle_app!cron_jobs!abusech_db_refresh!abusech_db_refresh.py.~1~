import os
import re
import sys
import logging
from dotenv import load_dotenv
from sqlalchemy import create_engine
from datetime import datetime
from sqlalchemy.exc import SQLAlchemyError
import pandas as pd
import numpy as np


def update_db(cursor, engine):
    try:
        # clear table
        cursor.execute("TRUNCATE iana_ports")
        # update table
        col_names = ['service_name', 'port_number', 'transport_protocol', 'description', 'assignee', 'contact',
                     'registration_date', 'modification_date', 'reference', 'service_code', 'unauthorized_use_reported',
                     'assignment_notes']
        data = pd.read_csv('ianaport.csv', header=0, names=col_names)
        data['registration_date'] = pd.to_datetime(data['registration_date'])
        data['modification_date'] = pd.to_datetime(data['modification_date'])
        d2 = data[data['port_number'].notnull()]
        d2['port_range'] = None

        port_ranges = d2[d2['port_number'].str.contains("-")]
        port_ranges['port_range'] = '('+port_ranges['port_number'].str.replace('-', ',')+')'
        port_ranges['port_number'] = None

        d2 = d2[~d2['port_number'].str.contains("-")]
        d2 = pd.concat([d2, port_ranges])
        d2['id'] = d2.index +1

        d2.to_sql('iana_ports', engine, if_exists='append', index=False)
    except SQLAlchemyError as e:
        error = str(e.__dict__['orig']).replace('\n', ' ')
        logging.error('SQL error at insert: {}'.format(error))

# Setup
load_dotenv("/app/.env")
log_path = os.path.join(os.environ.get("BACKEND_PROC_LOG_DIR"), "ianadb.log")
os.makedirs(os.path.dirname(log_path), exist_ok=True)
logging.basicConfig(filename=log_path, filemode='a', format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)


if __name__== "__main__":
    logging.info('STARTED {}'.format(os.path.basename(__file__)))

    # Get database url from .env file
    try:
        db_url = os.environ.get("DATABASE_URL")
    except Exception as e:
        logging.error('Could not get env variables: {}'.format(e))

    # Connect to DB
    try:
        engine = create_engine(db_url)
        cursor = engine.connect()
    except Exception as e:
        logging.error('Could not connect to db: {}'.format(e))

    # Get stats and insert into DB
    #try:
    update_db(cursor, engine)
    #except Exception as e:
    #    logging.error("Error while inserting db: {}".format(e))

    logging.info('FINISHED')
