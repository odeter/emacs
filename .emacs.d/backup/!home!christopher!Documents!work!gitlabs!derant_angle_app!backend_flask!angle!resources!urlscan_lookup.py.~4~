from flask_jwt_extended import get_jwt_identity
from flask_restful import Resource, reqparse
from angle.models import UserModel
from flask import current_app as app
from angle import role_required
import ast
import time
import requests
import base64
import json
import os

def urlscanio_request(url):
    data = {
        'url': url,
        "visibility": "public"
    }

    headers = {
        'Content-Type': 'application/json',
        'API-Key': os.getenv('URLSCAN_API_KEY')
    }

    response = requests.post('https://urlscan.io/api/v1/scan/',headers=headers, data=json.dumps(data))

    # Formatted output
    decodedResponse = response.json()
    print(decodedResponse)

    if decodedResponse['message'] == 'Submission successful' and decodedResponse['uuid']:
        return urlscanio_getdata(decodedResponse['uuid'])
    else:
        return {'message': decodedResponse['message']}, 500

def urlscanio_getdata(q_uuid):
    result_obj = None
    result_dom_img = None
    result_png_img = None
    print("QUIID:", q_uuid)
    for x in range(10):
        try:
            ## Check for url data
            res = requests.get('https://urlscan.io/api/v1/result/'+q_uuid+'/')
            res.raise_for_status()
            result_obj = res.json()
            break
        except requests.HTTPError as e:
            if e.response.status_code == 404:
                time.sleep(5)
                continue
            else:
                print(e)
                return {'message': 'The url request went wrong: '+e.response.message}, 500

    # Set url object
    url_object = {}
    url_object['Time of Scan'] = result_obj['task']['time']
    url_object['Scan UUID'] = result_obj['task']['uuid']
    url_object['Domain Name'] = result_obj['page']['domain']
    url_object['Domain IP'] = result_obj['page']['ip']
    url_object['Domain Country'] = result_obj['page']['country']
    url_object['Domain Maliciousness Score'] = result_obj['verdicts']['overall']['score']
    url_object['Domain Maliciousness Catagory'] = result_obj['verdicts']['overall']['categories']

    # See if dom snapshot is available
    result_dom_img = None
    try:
        # Check for dom image
        dom_res = requests.get('https://urlscan.io/screenshots/'+q_uuid+'.png')
        dom_res.raise_for_status()
        result_dom_img = (base64.b64encode(dom_res.content)).decode('utf-8')
    except requests.HTTPError as e:
        if e.response.status_code == 404:
            print('Dom image couldn\'t be found')

    # See if png snapshot is available
    result_png_img = None
    try:
        # Check for png image
        png_res = requests.get('https://urlscan.io/dom/'+q_uuid+'.png')
        png_res.raise_for_status()
        result_png_img = (base64.b64encode(png_res.content)).decode('utf-8')
    except requests.HTTPError as e:
        if e.response.status_code == 404:
            print('Png image couldn\'t be found')

    if result_obj:
        return {'message': 'url found', 'url_info': url_object, 'img_dom': result_dom_img, 'img_png': result_png_img}, 200
    else:
        return {'message': 'Url request did not return or timed out'}, 500


class URLScanLookup(Resource):
    @role_required(["admin", "mssp_it_sec", "mssp_admin", "it_sec",  "it_man", "op_man", "sys_admin"])
    def post(self):
        userID = get_jwt_identity()
        current_user = UserModel.find_by_id(userID)

        parser = reqparse.RequestParser()
        parser.add_argument('row', help = 'This field cannot be blank', required = True)
        data = parser.parse_args()

        # Format string to be read as dictionary
        try:
            row = ast.literal_eval(data["row"])
        except:
            app.logger.error('user with ID: {0} tried getting whois data, but parsing of data row failed'.format(userID))
            return {'message': 'User not set'}, 500

        if not current_user:
            app.logger.error('user with ID: {0} tried getting whois data, without permissions'.format(userID))
            return {'message': 'User not set'}, 403

        # Search row for valid url column
        src_url = None
        src_url_col_names = ["server_name", "host"]
        for col_name in src_url_col_names:
            if col_name in row:
                if col_name == "host":
                    src_url = row[col_name] + row['uri']
                else:
                    src_url = row[col_name]
                break

        if src_url:
            return urlscanio_request(src_url)
        else:
            return {'message': 'URL row couldn\'t be found', 'notfound': True}, 500
