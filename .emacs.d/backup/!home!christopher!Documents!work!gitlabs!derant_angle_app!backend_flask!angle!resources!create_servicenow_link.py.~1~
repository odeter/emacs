from flask_jwt_extended import get_jwt_identity
from angle.models import UserModel, AzureModel
from flask_restful import Resource, reqparse
from flask import current_app as app
from angle import role_required

class CreateAzureLink(Resource):
    @role_required(["admin", "op_man"])
    def post(self):
        parser = reqparse.RequestParser()
        parser.add_argument('tenantID', help = 'This field cannot be blank', required = True)
        parser.add_argument('subID', help = 'This field cannot be blank', required = True)
        parser.add_argument('workspace', help = 'This field cannot be blank', required = True)
        parser.add_argument('group', help = 'This field cannot be blank', required = True)
        data = parser.parse_args()
        userID = get_jwt_identity()
        current_user = UserModel.find_by_id(userID)

        if current_user:
            exisiting_link = current_user.firm.azure_link
            if exisiting_link:
                exisiting_link.tenant_id = data['tenantID']
                exisiting_link.subscription_id = data['subID']
                exisiting_link.workspace = data['workspace']
                exisiting_link.group = data['group']

                mm = 'Link to azure updated'

            else:
                exisiting_link = AzureModel(tenant_id = data['tenantID'], subscription_id = data['subID'], workspace = data['workspace'], group = data['group'])
                exisiting_link.firm = current_user.firm
                mm = 'Link to azure created'

            try:
                exisiting_link.save_to_db()
                app.logger.info('{0} - {1} created or modified an azure link'.format(current_user.name, current_user.id))
                return {'message': mm}, 200
            except:
                app.logger.error('{0} - {1} tried creating an azure link, but failed when saving to db'.format(current_user.name, current_user.id))
                return {'message': 'Something went wrong'}, 500
        else:
            return {'message': 'User nout found'}, 500

    @role_required(["admin", "op_man"])
    def get(self):

        userID = get_jwt_identity()
        current_user = UserModel.find_by_id(userID)

        if current_user:
            exisiting_link = current_user.firm.azure_link
            if exisiting_link:
                return {'ten_id': exisiting_link.tenant_id,
                        'sub_id': exisiting_link.subscription_id,
                        'workspace': exisiting_link.workspace,
                        'group': exisiting_link.group
                        }, 200
            else:
                return {'message': 'No link'}, 200


        else:
            return {'message': 'User nout found'}, 500
