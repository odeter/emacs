import os
import re
import sys
import logging
from sqlalchemy import create_engine
from datetime import datetime
from sqlalchemy.exc import SQLAlchemyError

def fix_inet(cursor):
    # Find tables with columns id_orig_h, id_resp_h, src_ip, dst_ip
    tables_sql = (
    "SELECT id, table_name, column_names, field_types "
    "FROM dto "
    "WHERE column_names LIKE '%%id_orig_h%%' OR "
        "column_names LIKE '%%id_resp_h%%' OR "
        "column_names LIKE '%%src_ip%%' OR "
        "column_names LIKE '%%dst_ip%%' OR "
        "column_names LIKE '%%client_addr%%'"
    )
    tables = cursor.execute(tables_sql)
    for table in tables:
        id, table_name, column_names, field_types = table
        column_names_list = column_names.split(",")
        field_types_list = field_types.split(",")

        t = "inet"
        new_type = {"id_orig_h": t, "id_resp_h": t, "src_ip": t, "dest_ip": t, "client_addr": t}

        for i in range(len(column_names_list)):
            try:
                col = column_names_list[i]
                typ = field_types_list[i]
                field_types_list[i] = new_type[col]

                # ALTER table
                sql = "ALTER TABLE {table_name} ALTER COLUMN {col} TYPE {t} USING {col}::inet".format(table_name=table_name, col=col, t=new_type[col])
                cursor.execute(sql)

                print(table_name + "." + col + ": " + typ + " -> " + new_type[col])
            except SQLAlchemyError as e:
                error = str(e.__dict__['orig']).replace('\n', ' ')
                logging.error('SQL error at insert field_types: {}'.format(error))
                exit('SQL error')
            except KeyError:
                continue

        # UPDATE dto
        field_types = ",".join(field_types_list)
        sql = "UPDATE dto SET field_types = '{field_types}' WHERE id = '{id}'".format(field_types=field_types, id=id)
        try:
            cursor.execute(sql)
        except SQLAlchemyError as e:
            error = str(e.__dict__['orig']).replace('\n', ' ')
            logging.error('SQL error at insert field_types: {}'.format(error))
            exit('SQL error')

# Setup
#load_dotenv("/app/.env")
log_path = os.path.join(os.environ.get("BACKEND_PROC_LOG_DIR"), "fix_inet.log")
os.makedirs(os.path.dirname(log_path), exist_ok=True)
logging.basicConfig(filename=log_path, filemode='a', format='%(levelname)s - %(asctime)s - %(message)s', level=logging.INFO)


if __name__== "__main__":
    logging.info('STARTED {}'.format(os.path.basename(__file__)))

    # Get database url
    try:
        db_url = os.environ.get("DATABASE_URL")
    except Exception as e:
        logging.error('Could not get env variables: {}'.format(e))

    # Connect to DB
    try:
        engine = create_engine(db_url)
        cursor = engine.connect()
    except Exception as e:
        logging.error('Could not connect to db: {}'.format(e))

    # Fix inet types
    try:
        fix_inet(cursor)
    except Exception as e:
        logging.error("Error while altering types: {}".format(e))


    logging.info('FINISHED')
