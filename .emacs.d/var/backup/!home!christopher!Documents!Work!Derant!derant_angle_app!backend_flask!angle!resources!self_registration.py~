from angle.models import UserModel, FirmModel, RegkeysModel
from flask_restful import Resource, reqparse
from angle import role_required
from flask import current_app as app
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut, GeocoderUnavailable
import re
from flask_jwt_extended import create_access_token, create_refresh_token
from .reg_helper import geocoder, check_email
from .dbi_creator import create_combo

class KeyUserRegistration(Resource):

    def post(self):
        parserK = reqparse.RequestParser()
        parserK.add_argument('username', help = 'This field cannot be blank', required = True)
        parserK.add_argument('password', help = 'This field cannot be blank', required = True)
        parserK.add_argument('key', help = 'This field cannot be blank', required = True)
        parserK.add_argument('zipcode', help = 'This field cannot be blank', required = True)
        parserK.add_argument('address', help = 'This field cannot be blank', required = True)
        parserK.add_argument('mobile', help = 'This field cannot be blank', required = True)
        parserK.add_argument('countryCode', help = 'This field cannot be blank', required = True)
        parserK.add_argument('name', help = 'This field cannot be blank', required = True)
        parserK.add_argument('firmname', help = 'This field cannot be blank', required = True)
        parserK.add_argument('country', help = 'This field cannot be blank', required = True)
        parserK.add_argument('cvr', help = 'This field cannot be blank', required = True)
        parserK.add_argument('foundLngLat')
        parserK.add_argument('force')
        data = parserK.parse_args()

        force = data["force"] == 'True'

        reg_key = RegkeysModel.check_key(data['key'])
        if not reg_key:
            app.logger.error('Someone tried registering with an invalid registration key')
            return {'key': 'Registration key is not valid'}, 500
        elif UserModel.find_by_username(data['username']):
            app.logger.error('Someone tried registering with username: {0}, but a user with that name already exists'.format(data['username']))
            return {'userN': 'User {} already exists'.format(data['username'])}, 500
        elif FirmModel.find_by_name(data['firmname']):
            app.logger.error('Someone tried registering with firm: {0}, but that firm already exists'.format(data['firmname']))
            return {'firmN': 'Firm already exists'}, 500
        elif not check_email(data['username']):
            app.logger.error('Someone tried registering with an invalid email')
            return {'userN': 'User name have to be an email'.format(data['username'])}, 500

        reg_key_role = reg_key.role


        if (reg_key_role.un in ['admin', 'group_moderator']):
            location = geocoder(data['address'], data['zipcode'], data['country'])

            latitude = None
            longitude = None
            if data['foundLngLat'] == 'False':
                if not(location):
                    app.logger.error('User: {0} registered with an address that could not be found'.format(data['username']))
                    return {'address': 'Address not found'}, 500
                latitude = location.latitude
                longitude = location.longitude

            new_user = UserModel(
                username = data['username'],
                password = UserModel.generate_hash(data['password']),
                mobile = data['mobile'],
                country_code = data['countryCode'],
                name = data['name']
            )

            if (reg_key_role.un == 'admin' and app.config['USE_DBI']):
                try:
                    dbi_id = create_combo(data['firmname'], new_user, data['password'])
                except Exception as e:
                    print(not force)
                    if not force:
                        return {'message': 'Something went wrong with the DBI creation', 'dbi': 'User could not be created in DBI'}, 500


            new_user.roles.append(reg_key_role)

            firm = FirmModel(
                name = data['firmname'],
                zipcode = data['zipcode'],
                address = data['address'],
                country = data['country'],
                cvr = data['cvr'],
                latitude = latitude,
                longitude = longitude
            )
            firm.add_user(new_user)
            group = reg_key.group
            group.add_firm(firm)
        reg_key.active = False


        try:
            new_user.save_to_db()
            current_user = UserModel.find_by_username(data['username'])
            access_token = create_access_token(identity = current_user.get_ID())
            refresh_token = create_refresh_token(identity = current_user.get_ID())
            app.logger.info('User: {0} - {1} registered succesfully'.format(current_user.name, current_user.id))
            return {
                'message': 'User {} was created'.format(data['username']),
                'access_token': access_token,
                'refresh_token': refresh_token
            }
        except:
            app.logger.error('Someone tried registering but it could not be saved to db')
            return {'message': 'Something went wrong'}, 500
