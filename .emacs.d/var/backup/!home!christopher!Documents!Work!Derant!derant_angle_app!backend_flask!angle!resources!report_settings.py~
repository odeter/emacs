from .dbi_creator import create_user
from flask_restful import Resource, reqparse
from flask_jwt_extended import get_jwt_identity
from angle import role_required
from flask import current_app as app
from angle.models import UserModel
import json
import re

def check_email(email):
    regex = '^[a-øA-Ø0-9]+([\.-]?\w+)*@[a-øA-Ø0-9]+([\.-]?\w+)*(\.\w{2,3})+$'
    return re.search(regex, email)

class UserRegistration(Resource):
    @role_required(["admin"])
    def post(self):
        parser = reqparse.RequestParser()
        parser.add_argument('username', help = 'This field cannot be blank', required = True)
        parser.add_argument('password', help = 'This field cannot be blank', required = True)
        parser.add_argument('roles', help = 'This field cannot be blank', required = True)
        parser.add_argument('mobile', help = 'This field cannot be blank', required = True)
        parser.add_argument('force')
        data = parser.parse_args()

        roles = json.loads(data["roles"])
        userID = get_jwt_identity()
        current_user = UserModel.find_by_id(userID)
        firm = current_user.firm
        force = data["force"] == 'True'

        if not current_user:
            app.logger.error('user with ID: {0} tried creating a new user, without permissions'.format(userID))

        if UserModel.find_by_username(data['username']):
            app.logger.error('user: {0} - {1} tried creating a new user, but username already exists'.format(current_user.name, current_user.id))
            return {'userN': 'ErrorMessages.error_10'}, 500
        elif not check_email(data['username']):
            app.logger.error('user: {0} - {1} tried creating a new user, but username was not an email'.format(current_user.name, current_user.id))
            return {'userN': 'ErrorMessages.error_11'}, 500

        t_list = [d.id for d in current_user.get_createable_roles()]
        for i in roles:
            if i not in t_list:
                app.logger.error('user: {0} - {1} tried creating a new user, but has not permission to give role'.format(current_user.name, current_user.id))
                return {'role': 'ErrorMessages.error_12'}, 500

        new_user = UserModel(
            username = data['username'],
            password = UserModel.generate_hash(data['password']),
            mobile = data['mobile']
        )

        if app.config['USE_DBI']:
            try:
                create_user(firm.dbi_id, new_user, data['password'])
            except Exception as e:
                print(not force)
                if not force:
                    return {'message': 'Something went wrong with the DBI creation', 'dbi': 'User could not be created in DBI'}, 500
        new_user.append_roles(roles)
        current_user.append_child(new_user)
        firm.add_user(new_user)

        newUser = UserModel.find_by_username(data['username'])
        #group = current_user.group
        #group.add_user(new_user)

        try:
            new_user.save_to_db()
            app.logger.info('user: {0} - {1} created a new user: {2} - {3}'.format(current_user.name, current_user.id, newUser.name, newUser.id))
            return {'message': 'User {} was created'.format(data['username'])}, 200
        except:
            app.logger.error('user: {0} - {1} tried creating a new user, but could not save to db'.format(current_user.name, current_user.id))
            return {'message': 'Something went wrong internally'}, 500
