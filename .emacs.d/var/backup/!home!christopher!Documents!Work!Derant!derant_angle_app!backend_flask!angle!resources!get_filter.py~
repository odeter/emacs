from flask_jwt_extended import get_jwt_identity, jwt_required
from angle.models import db, UserModel, FilterModel
from flask_restful import Resource, reqparse
from angle import role_required
import json

class SaveFilter(Resource):
    @jwt_required
    def post(self):
        filterParser = reqparse.RequestParser()
        filterParser.add_argument('name', help = 'This field cannot be blank', required = True)
        filterParser.add_argument('log_type', help = 'This field cannot be blank', required = True)
        filterParser.add_argument('filter', help = 'This field cannot be blank', required = True)
        new_filter = filterParser.parse_args()

        # name = json.loads(new_filter["name"])
        # log_type = json.loads(new_filter["log_type"])
        # filter = json.loads(new_filter["filter"])

        userID = get_jwt_identity()
        current_user = UserModel.find_by_id(userID)

        if not current_user:
            return {'message': 'User not properly set'}, 403

        # Check that filter name doesnt exist for the current user
        filters = FilterModel.get_filters(userID, new_filter["log_type"])
        filterNames = [f.name for f in filters]
        if new_filter["name"] in filterNames:
            return {'message': 'Filter name already exists'}, 400 # Should overwrite/update be possible

        # verify logtype
        log_types = [t.log_type for t in current_user.get_possible_logtypes()]
        if new_filter["log_type"] not in log_types:
            return {'message': 'Log type not available'}, 400

        try:
            new_filter = FilterModel(name = new_filter["name"],
                                     user_id = userID,
                                     log_type = new_filter["log_type"],
                                     filter = new_filter["filter"])
            new_filter.save_to_db()
            return {'message': 'Filter saved'}, 200
        except:
            return {'message': 'Something went wrong'}, 500
