import gzip
import json
import pandas as pd
import numpy as np
from pandas import json_normalize
import os
import io
import sys
import psycopg2
import secrets
import re
from sqlalchemy import create_engine
from collections import OrderedDict
from datetime import datetime

def check_alarms(start_ts, end_ts, cursor, sid_frame):
    sigid_list = sid_frame['signature_id'].astype(str).tolist()
    sig_dict = sid_frame.set_index('signature_id').T.to_dict('list')
    tables_q = "SELECT id, table_name FROM dto WHERE log_type='suricata'"
    tables = (cursor.execute(tables_q)).fetchall()
    alarm_level = (cursor.execute("SELECT id FROM alarm_level WHERE name='riskCritical'")).first()
    alarms_call = []
    params = []
    for i in tables:
        alarms = "SELECT '"+str(i.id)+"' as table_id, "+i.table_name+".id, "+i.table_name+\
            ".ts, "+i.table_name+".sensor_id, "+i.table_name+".alert_signature_id from "\
            +i.table_name+" LEFT JOIN alarm ON table_id=alarm.table_id AND "+i.table_name+\
            ".id=alarm.data_serial WHERE alarm.table_id is null and alarm.data_serial is null and alert_signature_id IN ("+','.join(sigid_list)+") AND ts >= %s AND ts <= %s"
        alarms_call.append(alarms)
        params.extend([start_ts, end_ts])
    sql_query = ' UNION '.join(alarms_call)
    poss_alarms = (cursor.execute(sql_query, params)).fetchall()
    new_alarms = []
    for i in poss_alarms:
        new_alarms.append((i.sensor_id, i.table_id, alarm_level.id, 'Auto Raised', sig_dict[i.alert_signature_id][0],
                           i.ts, i.id, 'Suricata Auto', 0, datetime.now()))
    print(new_alarms)
    if new_alarms:
        cursor.execute("INSERT INTO alarm (sensor_id, table_id, al_id, alarm_name, "+
                       "description, data_ts, data_serial, alarm_type, status, toc) "+
                       "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)", new_alarms)


if __name__== "__main__":
    args = sys.argv
    if not len(args) == 3:
        exit("number of arguments not right")
    start_ts = args[1]
    end_ts = args[2]
    print(start_ts)
    print(end_ts)
    db_url = os.environ['DATABASE_URL']
    engine = create_engine(db_url)
    cursor = engine.connect()
    sid_frame = pd.read_csv("sid_autoalert.csv")
    check_alarms(start_ts, end_ts, cursor, sid_frame)
