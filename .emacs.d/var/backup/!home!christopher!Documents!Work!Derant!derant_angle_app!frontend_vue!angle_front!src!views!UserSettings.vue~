<template>
  <v-container ma-0 pa-3 bg grid-list-xs text-xs-center fluid>
    <v-layout wrap align-center fluid pb-5>
        <v-flex>
          <v-subheader>User Settings:</v-subheader>
          <v-divider></v-divider>
        </v-flex>
    </v-layout>
    <v-form ref="sform">
      <v-layout wrap fluid>
        <v-flex>
          <v-text-field
              v-model="password"
              :type="'password'"
              placeholder="New password"
              label="New Password"
              :counter="120"
              :rules="passRules"
              prepend-icon="mdi-key-plus"
              :error-messages="p_error"
              :success="form_succ"
              :success-messages ="form_sucT"
              outlined
              required
          ></v-text-field>
          <v-text-field
              v-model="password2"
              :type="'password'"
              placeholder="Repeat new password"
              label="New Password Validation"
              :counter="120"
              :rules="passRules2"
              prepend-icon="mdi-key-plus"
              :error-messages="p_error"
              :success="form_succ"
              :success-messages ="form_sucT"
              outlined
              required
          ></v-text-field>
        </v-flex>
      </v-layout>
      <v-layout wrap align-center fluid>
        <v-flex md6>
          <v-btn block class="mr-4" @click="registerUser">Save Changes</v-btn>
        </v-flex>
        <v-flex md6>
          <v-btn block class="mr-4" @click="clear">clear</v-btn>
        </v-flex>
      </v-layout>
    </v-form>
  </v-container>
</template>

<script>
  import authservice from '@/services/BackendService.js'

  export default {
    data() {
      return {
        roles: [],
        form_succ: false,
        form_sucT: '',
        password: '',
        password2: '',
        p_error: '',
        passRules2: [
          v => !!v || 'Please Repeat Password',
          v => (v && v.length <= 120) || 'Password must be less than 120 characters',
          v => (v == this.password) || 'The two passwords have to match'
        ],
        passRules: [
          v => !!v || 'Password is required',
          v => (v && v.length <= 120) || 'Password must be less than 120 characters'
        ]
      }
    },
    methods: {
      registerUser() {
        if (this.$refs.sform.validate()) {
          authservice
               .userSettings(this.password)
               .then(result => {
                 this.clear_msg()
                 this.form_succ = true
                 this.form_sucT = 'User information changed'
               })
               .catch(error => {
                 this.clear_msg()
                 var feedback = error.response.data
                 if ('pass' in feedback) {
                   this.p_error = error.response.data['pass']
                 }
                 else {
                   var errmsg = 'Something went wrong'
                   this.p_error = errmsg
                 }
               })
        }
      },
      clear_msg() {
        this.p_error = ''
        this.form_sucT = ''
        this.form_succ = false
      },
      clear() {
        this.$refs.sform.reset()
        this.password = ''
        this.password2 = ''
        this.clear_msg()
      }
    }
  }
</script>

<style></style>
