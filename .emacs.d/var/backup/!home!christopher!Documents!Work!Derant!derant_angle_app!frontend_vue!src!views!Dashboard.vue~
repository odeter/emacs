<template>
  <v-container ma-0 pa-5 bg grid-list-md text-xs-center fluid>
    <v-row>
      <v-subheader>Dashboard</v-subheader>
    </v-row>
    <v-divider></v-divider>
    <v-row>
      <v-col>
        <div>
          <apexchart type="line" :options="AlarmsOG" :series="AlarmsG"></apexchart>
        </div>
      </v-col>
      <v-col>
        <apexchart type="line" :options="AlarmsOL" :series="AlarmsL"></apexchart>
      </v-col>
    </v-row>
    <v-row>
      <v-col>
        <apexchart type="line" :options="ConnCO" :series="ConnC"></apexchart>
      </v-col>
      <v-col>
        <apexchart type="donut" :options="ConnDO" :series="ConnD"></apexchart>
      </v-col>
    </v-row>
    <v-row>
      <v-col>
        <apexchart type="line" :options="AttacksO" :series="AttacksD"></apexchart>
      </v-col>
      <v-col>
        <v-card>
          <v-card-title>
            Attacker Server Location
            <v-spacer></v-spacer>
            <v-text-field
                v-model="SearchA"
                append-icon="fas fa-search"
                label="Search"
                single-line
                hide-details
            ></v-text-field>
          </v-card-title>
          <v-data-table
              fixed-header
              :items-per-page="20"
              :headers="AttH"
              :items="AttD"
              :search="SearchA"
          >
          </v-data-table>
          <template slot="items" slot-scope="myprops">
            <td v-for="header in headers" v-bind:key="header.value">
              {{ myprops.item[header.value] }}
            </td>
          </template>
        </v-card>
      </v-col>
    </v-row>
  </v-container>
</template>

<script>

  import VueApexCharts from 'vue-apexcharts'
  const cloneDeep = require('clone-deep')
  import 'vuejs-noty/dist/vuejs-noty.css'
  import Noty from 'noty';

  export default {
    name: 'Dashboard',
    components: {
      apexchart: VueApexCharts
    },
    data() {
      return {
        SearchA: '',
        AttH: [{ text: '# of Attacks', value: 'number' },
               { text: 'Server Location', value: 'sl' }],
        AttD: [{ number: '656', sl: 'China'},
               { number: '76', sl: 'Russia'},
               { number: '52', sl: 'U.S.A'},
               { number: '36', sl: 'Germany'},
               { number: '24', sl: 'Ireland'}],
        AttacksO: {},
        AttacksD: [
          {
            name: 'Number of Attacks',
            data: [523, 243, 325, 421, 233, 352, 404]
          }
        ],
        ConnD: [],
        ConnDO: {},
        ConnDL: ['CONN', 'HTTP', 'SSL', 'DNS'],
        ConnC: [
          {
            name: 'CONN',
            data: [10023, 25000, 12389, 17893, 15203, 15932, 10230]
          },
          {
            name: 'HTTP',
            data: [5224, 2399, 1048, 2348, 9234, 1233, 4321]
          },
          {
            name: 'SSL',
            data: [1950, 1603, 1742, 1629, 1934, 1743, 1404]
          },
          {
            name: 'DNS',
            data: [1292, 2391, 2375, 1843, 2923, 4857, 2938]
          }
        ],
        AlarmsG: [
          {
            name: 'Critical',
            data: [30, 25, 14, 29, 44, 20, 34]
          },
          {
            name: 'High Risk',
            data: [70, 89, 55, 123, 90, 55, 66]
          },
          {
            name: 'Caution',
            data: [214, 255, 190, 283, 194, 273, 140]
          }
        ],
        AlarmsL: [
          {
            name: 'Critical',
            data: [0, 0, 10, 5, 2, 8, 1]
          },
          {
            name: 'High Risk',
            data: [12, 11, 14, 18, 17, 13, 13]
          },
          {
            name: 'Caution',
            data: [25, 15, 20, 23, 17, 13, 20]
          }
        ],
        AlarmsOL: {},
        AlarmsOG: {},
        ConnCO: {}
      }
    },
    methods: {
      simSum: function(tt, num) {
        return tt+num
      },
      calcD: function() {
        var arr = this.ConnC
        var dd = []
        var i = 0
        for (i = 0; i < arr.length; i++) {
          var t1 = arr[i]['data']
          dd.push(t1.reduce(this.simSum, 0))
        }
        this.ConnD = dd
      }
    },
    mounted() {
      var donutDiaO = {
        chart: {
          type: 'donut',
          height: '400'
        },
        labels: this.ConnDL,
        plotOptions: {
          pie: {
            customScale: 1.0,
            donut: {
              labels: {
                show: true,
                total: {
                  showAlways: true,
                  show: true
                }
              }
            }
          }
        },
        title: {
          text: "Connections Distribution"
        },
        legend: {
          offsetX: 190,
          offsetY: -20,
          position: 'right',
          horizontalAlign: 'Center',
          verticalAlign: 'middle',
        },
        responsive: [{
          options: {
            legend: {
              position: 'bottom'
            }
          }
        }]
      }
      var lineDiaO = {
        chart: {type: 'line',
                height: '400',
                dropShadow: {
                  enabled: true,
                  color: '#000',
                  top: 18,
                  left: 7,
                  blur: 10,
                  opacity: 0.2
                },
                toolbar: {show: true}
        },
        colors: ['#EC200D', '#FF9900', '#E5DD00'],
        dataLabels: {enabled: true},
        stroke: {curve: 'smooth'},
        title: {text: 'Alarms in local Network', align: 'left'},
        grid: {borderColor: '#e7e7e7',
               row: {
                 colors: ['#f3f3f3', 'transparent'],
                 opacity: 0.5
               }},
        markers: {size: 1},
        xaxis: {
          categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],
          title: {text: 'Month'}
        },
        yaxis: {
          title: {text: 'Count of Attacks'},
          forceNiceScale: true,
        },
        legend: {
          position: 'top',
          horizontalAlign: 'center',
          floating: true,
          offsetY: -10,
          offsetX: -5
        }
      }
      this.AlarmsOL = cloneDeep(lineDiaO)
      this.AlarmsOG = cloneDeep(lineDiaO)
      this.ConnCO = cloneDeep(lineDiaO)
      this.AttacksO = cloneDeep(lineDiaO)
      this.AlarmsOG['title']['text'] = 'Alarms in global Network'
      // connection optoin setup

      this.AttacksO['title']['text'] = 'Attack Attemps'
      this.AttacksO['yaxis']['title']['text'] = 'Number of Attemps'
      this.AttacksO['legend']['hide'] = false
      this.ConnCO['title']['text'] = 'Connections Checked'
      this.ConnCO['colors'] = ['#0066e2', '#00e216', '#e2005e', '#9e00e2']
      this.ConnCO['yaxis']['title']['text'] = 'Number of Connections'

      this.ConnDO = donutDiaO
      this.ConnDO['colors'] = this.ConnCO['colors']
      this.calcD()

      new Noty({
        type: 'error',
        layout: 'topCenter',
        theme: 'metroui',
        text: '<h1>ALARM:<br> Your network is under attack!<br> Please click here and follow the guidelines.</h1>'
      }).show()
    }
  }

</script>
