from .dbi_creator import create_user
from flask_restful import Resource, reqparse
from flask_jwt_extended import get_jwt_identity
from angle import role_required
from flask import current_app as app
from angle.models import UserModel, FirmModel, MailPusherModel
import json
from datetime import datetime as dt

def sublist(lst1, lst2):
    return set(lst1) <= set(lst2)

class ReportSettings(Resource):
    @role_required(["admin"])
    def post(self):
        parser = reqparse.RequestParser()
        parser.add_argument('users', help = 'This field cannot be blank', required = True)
        parser.add_argument('startdate', help = 'This field cannot be blank', required = True)
        parser.add_argument('repeat', help = 'This field cannot be blank', required = True)

        users = json.loads(data["users"])
        start_date = dt.strptime(json.loads(data["start_date"]), "%Y-%m-%d")

        current_user = UserModel.find_by_id(userID)
        if not current_user:
            app.logger.error('user with ID: {0} tried creating a report setting, without permissions'.format(userID))
            return {'message': 'User not logged in properly'}, 500

        firm = current_user.firm

        ## check user list

        user_list = firm.get_user_list()

        if not sublist(user_list, users):
            app.logger.error('user with ID: {0} tried creating report settings for users not part of their firm'.format(userID))
            return {'message': 'users not part of firm'}, 500

        ## check repeat value
        repeat = data["repeat"]

        for i in users:
            mail_setting = MailPusherModel.find_by_id(i)
            if mail_setting:
                mail_setting.start_date = start_date
                mail_setting.repeat = repeat
                mail_setting.add_to_db()
            else:
                new_setting = MailPusherModel(
                    start_date = start_date,
                    user_id = i,
                    repeat = repeat
                )
                new_setting.add_to_db()

        try:
            MailPusherModel.save_to_db()
            app.logger.info('user: {0} - {1} created new report settings for users: {2}'.format(current_user.name, current_user.id, ','.join(users)))
            return {'message': 'report settings was saved'.format(data['username'])}, 200
        except:
            app.logger.error('user: {0} - {1} tried creating new report settings, but could not save to db'.format(current_user.name, current_user.id))
            return {'message': 'Something went wrong internally'}, 500
