from matplotlib import rc
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
import datetime as dt
import pandas as pd
import calendar
import numpy as np
import os
from fpdf import FPDF

# path definitions
dir_path = os.path.dirname(os.path.realpath(__file__))
img_path = os.path.join(dir_path, "img/")
plot_path = os.path.join(dir_path, "gen_data/plots/")


def print_table(datam, th, col_width, pdf, x_pos=None, y_pos=None):
    if(y_pos != None):
        pdf.set_y(y_pos)
    for x in range(0,len(datam)):
        row = datam[x]
        b = "LR"
        if(x == 0):
            b = 1
        if(x == len(datam)-1):
            b = "LRB"

        if(x_pos != None):
            pdf.set_x(x_pos)
        for datum in row:
            pdf.cell(col_width, th, str(datum[0]), border=b, ln=0, align=datum[1])
        pdf.ln(th)


def create_MonthL(weeks, year):
    monthL = {}
    for i in weeks:
        d = str(year)+'-W'+str(i)
        r = dt.datetime.strptime(d + '-1', "%Y-W%W-%w").month
        if r not in monthL:
            monthL[r] = [i]
        else:
            monthL[r].append(i)
    return monthL

def risk_Dia(r,r_h,r_vh, year):
    ml = create_MonthL(risks['week'], year)
    print(ml)
    vv = []
    for i in ml.keys():
        risk_S = (r[(r['week'].isin(ml[i]))])["number"].sum()
        riskH_S = (r_h[(r_h['week'].isin(ml[i]))])["number"].sum()
        riskVH_S = (r_vh[(r_vh['week'].isin(ml[i]))])["number"].sum()
        vv.append([i, [risk_S, riskH_S,  riskVH_S]])
    rs = sorted(vv, key=lambda x: x[0])
    return rs


def gen_Bars(risk_D,name, path=plot_path):
    fig = figure(num=None, figsize=(15, 6), dpi=80, facecolor='w', edgecolor='k')

    ax = plt.axes()
    # Setting the background color
    ax.set_facecolor("#e6e6e6")

    # Values of each group
    bars1 = []
    bars2 = []
    bars3 = []
    names = []
    r = range(0,len(risk_D))

    for i in risk_D:
        names.append(calendar.month_name[i[0]])
        data = i[1]
        print(data)
        bars1.append(data[1])
        bars2.append(data[0])
        bars3.append(data[2])

    # Heights of bars1 + bars2
    bars = np.add(bars1, bars2).tolist()

    barWidth = 0.3


    # Very High Risk
    plt.bar(r, bars3, bottom=bars, color='#D12B0A', edgecolor='white', width=barWidth)
    # High risk bar
    plt.bar(r, bars1, color='#FF9933', edgecolor='white', width=barWidth)
    # RIsk bar
    plt.bar(r, bars2, bottom=bars1, color='#FFE633', edgecolor='white', width=barWidth)

    # Custom X axis
    plt.xticks(r, names, fontweight='bold')
    plt.xlabel("Risks")

    # save_graf
    fig.savefig(os.path.join(path, name), bbox_inches='tight')


# global values
start_W = 44
end_W = 46
year = 2019
weekNum = str(start_W)+'-'+str(end_W)
start_Page = 1
plot_size = 10

# data readings
risks = pd.read_csv("data/results/risks.csv")
risks_H = pd.read_csv("data/results/high_risks.csv")
risks_VH = pd.read_csv("data/results/very_high_risks.csv")

risks_P = risks[(risks['week'].isin(range(start_W, end_W)))]
risks_PH = risks_H[(risks_H['week'].isin(range(start_W, end_W)))]
risks_PVH = risks_VH[(risks_VH['week'].isin(range(start_W, end_W)))]


period_res = [[("Risk severtiy", ''), ("Number", '')],
              [("Very High Risk", ''), (risks_PVH["number"].sum(), 'C')],
              [("High Risk", ''),      (risks_PH["number"].sum(), 'C')],
              [("Risk", ''),           (risks_P["number"].sum(), 'C')]]

to_date = [[("Risk severtiy", ''), ("Number", '')],
           [("Very High Risk", ''), (risks_VH["number"].sum(), 'C')],
           [("High Risk", ''),      (risks_H["number"].sum(), 'C')],
           [("Risk", ''),           (risks["number"].sum(), 'C')]]


f = risk_Dia(risks, risks_H, risks_VH, year)
gen_Bars(f, "bars1.png")



class PDF(FPDF):
    #FPDF.add_font("xxxx", "", pathdd, uni=True)
    def header(self):
        # Logo
        # self.image('logo_pb.png', 10, 8, 33)
        # Arial bold 15
        #self.add_font("Calibril", "", pathdd, uni=True)
        self.set_font('Open_Sans', '', 14)
        self.set_fill_color(95, 95, 86)
        self.set_text_color(255, 255, 255)
        # Move to the right
        # Title
        self.cell(0, 10, '      Risk & Network Overview Week '+weekNum, border=1, ln=0, fill=True)
        # Line break
        self.ln(20)

    # Page footer
    def footer(self):
        # Position at 1.5 cm from bottom
        self.set_y(-15)
        # Arial italic 8
        #self.add_font("Calibril", "", pathdd, uni=True)
        if(self.page_no() > start_Page):
            self.set_font('Calibri', '', 7)
            offset = self.x + 5
            self.cell(45, 3, 'Overview of findings Week '+weekNum+', V01.00', 0, 0, '')
            self.set_x(0)
            self.cell(0, 3, 'info@derant.com', 0, 0, 'C')
            self.image(os.path.join(img_path, "Derant_logo.png"),
                       x = 170, y=None, w = 26.77, h = 3.08, type = '', link = '')
            self.cell(0, 0,'',0,1)
            self.cell(0, 3, 'November 17, 2019', 0, 0, '')
            self.set_x(0)

            if(self.page_no() <= start_Page):
                self.cell(0, 3, '', 0, 1, 'C')
            else:
                self.cell(0, 3, 'Page ' + str(self.page_no()) + '/{nb}', 0, 1, 'C')
            self.cell(90, 3, 'Prep.: RJH, CMG. Approver: JRJ', 0, 0, '')
        else:
            self.image(os.path.join(img_path, "Derant_logo.png"),
                       x = 170, y=None, w = 26.77, h = 3.08, type = '', link = '')


def gen_pdf():
    # Instantiation of inherited class
    pdf = PDF()

    ## page margin stuff
    epw = pdf.w - 2*pdf.l_margin
    col_width = epw/5

    # Font loading
    pdf.add_font("Calibri", "", os.path.join(dir_path, "fonts/calibri/Calibri_Light.ttf"), uni=True)
    pdf.add_font("Calibri_B", "", os.path.join(dir_path, "fonts/calibri/Calibri_Bold.ttf"), uni=True)
    pdf.add_font("Calibri_I", "", os.path.join(dir_path, "fonts/calibri/Calibri_Light_Italic.ttf"), uni=True)
    pdf.add_font("Open_Sans", "", os.path.join(dir_path, "fonts/open_sans/OpenSans-Light.ttf"), uni=True)
    pdf.alias_nb_pages()

    #front page
    pdf.set_font('Calibri_B', '', 16)
    pdf.add_page()
    pdf.set_y(50)
    pdf.cell(0, 10, 'Rick and Network Security Findings', 0, 1, 'C')

    pdf.set_font('Calibri_B', '', 12)
    pdf.cell(0, 10, 'To be kept restricted', 0, 1, 'C')
    pdf.set_y(220)
    pdf.cell(0,40, '', 1,1,'')
    pdf.set_xy(15,222.5)
    pdf.cell(50, 7, 'Author:', 0, 0)
    pdf.cell(50, 7, 'Bob', 0, 1)
    pdf.set_x(15)
    pdf.cell(50, 7, 'Approver:', 0, 0)
    pdf.cell(50, 7, 'Bob 2', 0, 1)
    pdf.set_x(15)
    pdf.cell(50, 7, 'Date:', 0, 0)
    pdf.cell(50, 7, 'Bob 2', 0, 1)
    pdf.set_x(15)
    pdf.cell(50, 7, 'Version:', 0, 0)
    pdf.cell(50, 7, 'Bob 2', 0, 1)
    pdf.set_x(15)
    pdf.cell(50, 7, 'Doc. Ref.:', 0, 0)
    pdf.cell(50, 7, 'Bob 2', 0, 1)

    # blank page
    pdf.add_page()
    pdf.set_y(50)
    pdf.set_font('Calibri', '', 11)
    pdf.cell(0,7, 'Intentionally left blank', 0 , 0, 'C')

    #content
    pdf.add_page()
    th = pdf.font_size + 1
    pdf.cell(0,10, 'Risks Detected inside Network', 0, 1)
    pdf.ln(5)

    pdf.set_font_size(7)
    pdf.set_x(15)
    pdf.cell(50,5,'This period', 0, 0)
    pdf.set_x(110)
    pdf.cell(50,5,'To date', 0, 1)
    print_table(period_res, th, col_width, pdf, 15, None)
    print_table(to_date, th, col_width, pdf, 110, 50)
    pdf.ln(20)
    pdf.cell(0,10,"Risks inside network to date",0,1)

    pdf.image(os.path.join(plot_path, "bars1.png"),
              x = 25, y=None, w = 15*plot_size, h = 6*plot_size, type = '', link = '')

    #Generate and close
    pdf.output('report.pdf', 'F')


gen_pdf()
