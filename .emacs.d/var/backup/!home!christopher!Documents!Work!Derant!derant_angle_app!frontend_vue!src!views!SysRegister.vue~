<template>
  <v-container ma-0 pa-3 bg grid-list-xs text-xs-center fluid>
    <v-container ma-0 pa-5 bg grid-list-md text-xs-center fluid>
      <v-card>
        <v-card-title>
          {{ $t('KeyRegister.regiNewOrg') }}
        </v-card-title>
        <v-card-text>
          <v-form ref="kform" autocomplete="off">
            <v-layout wrap align-center fluid pb-5>
              <v-flex>
                <v-subheader>{{ $t('KeyRegister.userInfo') }}</v-subheader>
                <v-divider></v-divider>
              </v-flex>
            </v-layout>
            <v-layout wrap fluid>
              <v-flex md6>
                <v-text-field
                  v-model="username"
                  v-bind:label="$t('KeyRegister.userEmail')"
                  v-bind:placeholder="$t('KeyRegister.userEmailPlaceholder')"
                  :counter="120"
                  :rules="nameRules"
                  prepend-icon="mdi-account-plus"
                  :success="r_form_succ"
                  :success-messages ="r_form_sucT"
                  :error-messages="user_error"
                  outlined
                  required
                ></v-text-field>
              </v-flex>
              <v-flex md6>
                <v-select
                  :items="roles"
                  v-model="roles_k"
                  outlined
                  hint="Role"
                  :rules="groupRules"
                  prepend-icon="mdi-account-star"
                  label="Role"
                  :error-messages="server_error"
                  :success="r_form_succ"
                  :success-messages ="r_form_sucT"
                ></v-select>
              </v-flex>
            </v-layout>
            <v-layout wrap fluid>
              <v-flex md6>
                <v-text-field
                  v-model="password"
                  :type="'password'"
                  v-bind:placeholder="$t('KeyRegister.passwordPlaceholder')"
                  v-bind:label="$t('KeyRegister.password')"
                  :counter="120"
                  :rules="passRules"
                  prepend-icon="mdi-key-plus"
                  :success="r_form_succ"
                  :success-messages ="r_form_sucT"
                  :error-messages="p_error"
                  outlined
                  required
                  autocomplete="new-password"
                ></v-text-field>
              </v-flex>
              <v-flex md6>
                <v-text-field
                  v-model="password2"
                  :type="'password'"
                  v-bind:placeholder="$t('KeyRegister.passwordValidationPlaceholder')"
                  v-bind:label="$t('KeyRegister.passwordValidation')"
                  :counter="120"
                  :rules="passRules2"
                  prepend-icon="mdi-key-plus"
                  :success="r_form_succ"
                  :success-messages ="r_form_sucT"
                  :error-messages="p_error"
                  outlined
                  required
                ></v-text-field>
              </v-flex>
            </v-layout>
            <v-layout wrap fluid>
              <v-flex md6>
                <v-text-field
                  v-model="uname"
                  v-bind:label="$t('KeyRegister.name')"
                  v-bind:placeholder="$t('KeyRegister.namePlaceholder')"
                  :counter="120"
                  :rules="unameRules"
                  prepend-icon="mdi-account"
                  :success="r_form_succ"
                  :success-messages ="r_form_sucT"
                  outlined
                  required
                ></v-text-field>
              </v-flex>
              <v-flex md6>
                <v-text-field
                  v-model="mobile"
                  v-bind:label="$t('KeyRegister.mobileNumber')"
                  v-bind:placeholder="$t('KeyRegister.mobileNumberPlaceholder')"
                  :counter="20"
                  :rules="mobileRules"
                  prepend-icon="mdi-phone"
                  :success="r_form_succ"
                  :success-messages ="r_form_sucT"
                  outlined
                  required
                ></v-text-field>
              </v-flex>
            </v-layout>
            <v-layout wrap align-center fluid pb-5>
              <v-flex>
                <v-subheader>{{ $t('KeyRegister.orgInfo') }}</v-subheader>
                <v-divider></v-divider>
              </v-flex>
            </v-layout>
            <v-layout wrap fluid>
              <v-flex md4>
                <v-text-field
                  v-model="firmname"
                  :rules="firmnameRules"
                  v-bind:label="$t('KeyRegister.firmName')"
                  v-bind:placeholder="$t('KeyRegister.firmName')"
                  prepend-icon="mdi-office-building"
                  :success="r_form_succ"
                  :success-messages="r_form_sucT"
                  :error-messages="firm_error"
                  :counter="120"
                  required
                  outlined
                ></v-text-field>
              </v-flex>
              <v-flex md4>
                <v-select
                  :items="groups"
                  v-model="groups_k"
                  outlined
                  v-bind:hint="$t('RegiKey.userGroupHint')"
                  :rules="groupRules"
                  prepend-icon="mdi-account-network"
                  v-bind:label="$t('RegiKey.userGroup')"
                  :error-messages="server_error"
                  :success="r_form_succ"
                  :success-messages ="r_form_sucT"
                ></v-select>
              </v-flex>
              <v-flex md4>
                <v-autocomplete
                  outlined
                  v-model="country"
                  :items="countries"
                  :rules="countryRules"
                  item-text="country"
                  item-value="abbreviation"
                  prepend-icon="mdi-flag"
                  v-bind:label="$t('KeyRegister.country')"
                  v-bind:placeholder="$t('KeyRegister.country')"
                  :error-messages="address_error"
                >
                  <template v-slot:item="data">
                    <country-flag :country="data.item.abbreviation"/>
                    {{ data.item.country }}
                  </template>
                  <template v-slot:selection="data">
                    <country-flag :country="data.item.abbreviation"/>
                    {{ data.item.country }}
                  </template>
                </v-autocomplete>
              </v-flex>
            </v-layout>
            <v-layout wrap fluid>
              <v-flex md6>
                <v-text-field
                  v-model="zipcode"
                  v-bind:label="$t('KeyRegister.zipCode')"
                  v-bind:placeholder="$t('KeyRegister.zipCodePlaceholder')"
                  prepend-icon="mdi-home-variant"
                  :success="r_form_succ"
                  :success-messages ="r_form_sucT"
                  :error-messages="address_error"
                  :counter="20"
                  :rules="zipRules"
                  required
                  outlined
                ></v-text-field>
              </v-flex>
              <v-flex md6>
                <v-text-field
                  v-model="address"
                  v-bind:label="$t('KeyRegister.firmAddress')"
                  v-bind:placeholder="$t('KeyRegister.firmAddressPlaceholder')"
                  prepend-icon="mdi-home-variant"
                  :success="r_form_succ"
                  :success-messages ="r_form_sucT"
                  :error-messages="address_error"
                  :counter="120"
                  :rules="addressRules"
                  required
                  outlined
                ></v-text-field>
              </v-flex>
            </v-layout>
            <v-layout wrap fluid>
              <v-flex md6>
                <v-btn block color="primary" class="mr-4" @click="registerUser">{{ $t('KeyRegister.registerUserBtn') }}</v-btn>
              </v-flex>
              <v-flex md6>
                <v-btn block class="mr-4" @click="clear_r">{{ $t('KeyRegister.clearBtn') }}</v-btn>
              </v-flex>
            </v-layout>
          </v-form>
        </v-card-text>
      </v-card>
      <v-dialog v-model="dialogNote" max-width="600px">
        <v-card>
          <v-card-title>
            <span class="headline">{{ $t('KeyRegister.addressNotFound')}}</span>
          </v-card-title>
          <v-card-text>
            {{ $t('KeyRegister.continueAnyways') }}
          </v-card-text>
          <v-card-actions>
            <v-btn color="blue darken-1" text @click="dialogNote = false">{{ $t('KeyRegister.changeAddress') }}</v-btn>
            <v-spacer/>
            <v-btn color="blue darken-1" text @click="foundLngLat = true; registerUser()">{{ $t('KeyRegister.continue') }}</v-btn>
          </v-card-actions>
        </v-card>
      </v-dialog>
    </v-container>
  </v-container>
</template>

<script>
  import authservice from '@/services/BackendService.js'
  import buttonMixin from '@/mixins/buttonMix'
  import countriesJSON from '@/mixins/Countries.json'

  export default {
    mixins: [buttonMixin],
    data() {
      return {
        // User registration
        groups_k: null,
        groups: [],
        roles: [],
        roles_k: null,
        username: null,
        password: null,
        password2: null,
        zipcode: null,
        address: null,
        mobile: null,
        uname: null,
        firmname: null,
        country: '',
        countries: countriesJSON,
        firm_error: '',
        server_error: null,
        user_error: '',
        p_error: '',
        address_error: '',
        form_succ: false,
        form_sucT: '',
        register_re: null,
        dialogNote: false,
        foundLngLat: false,
        countryRules: [
          (v) => !!v || this.$t('KeyRegister.countryReq')
        ],
        firmnameRules: [
          v => !!v || this.$t('KeyRegister.nameRequired'),
          v => (v && v.length <= 120) || this.$t('KeyRegister.nameLength')
        ],
        unameRules: [
          v => !!v || this.$t('KeyRegister.nameRequired'),
          v => (v && v.length <= 120) || this.$t('KeyRegister.nameLength')
        ],
        mobileRules: [
          v => !!v || this.$t('KeyRegister.mobileRequired'),
          v => (v && v.length <= 20) || this.$t('KeyRegister.mobileRequired')
        ],
        addressRules: [
          v => !!v || this.$t('KeyRegister.addressRequired'),
          v => (v && v.length <= 120) || this.$t('KeyRegister.addressLength')
        ],
        zipRules: [
          v => !!v || this.$t('KeyRegister.zipRequired'),
          v => (v && v.length <= 20) || this.$t('KeyRegister.zipLength')
        ],
        passRules2: [
          v => !!v || this.$t('KeyRegister.passwordRepeat'),
          v => (v && v.length <= 120) || this.$t('KeyRegister.passwordLength'),
          v => (v == this.password) || this.$t('KeyRegister.passwordMatch')
        ],
        passRules: [
          v => !!v || this.$t('KeyRegister.passwordRequired'),
          v => (v && v.length <= 120) || this.$t('KeyRegister.passwordLength')
        ],
        nameRules: [
          v => !!v || this.$t('KeyRegister.emailRequired'),
          v => (v && v.length <= 120) || this.$t('KeyRegister.emailLength'),
          v => /.+@.+\..+/.test(v) || this.$t('KeyRegister.emailValid')
        ]
      }
    },
    methods: {
      // user registration
      getgroups() {
        authservice
          .getGroups()
          .then(result => {
            var data = result.data['groups']
            console.log(data)
            this.groups = []
            var i
            for (i = 0; i < data.length; i++) {
              var dd = {text: data[i][0], value: data[i][2]}
              this.groups.push(dd)
            }
            console.log(this.groups)
          })
          .catch(error => {
            console.log('Error')
            console.log(error)
            this.server_error = error.response.data['message']
          })
      },
      getRoles() {
        authservice.getRoles().then(result => {
          var data = result.data['roles']
          var i
          for (i = 0; i < data.length; i++) {
            var dd = {text: data[i][0], value: data[i][1]}
            this.roles.push(dd)
          }
          console.log(this.roles)
        })
      },
      registerUser() {
        console.log('In Register.')
        if (this.$refs.kform.validate()) {
          authservice
            .registerFirmSys(this.username, this.password, this.zipcode, this.address,
                             this.mobile, this.uname, this.country, this.foundLngLat,
                             this.firmname, this.groups_k, this.roles_k)
            .then(result => {
              this.clear_msg_r()
              this.r_form_succ = true
              this.r_form_sucT = this.$t('KeyRegister.userRegistrered')
              //router.push('/login')
            })
            .catch(error => {
              console.log(error)
              this.clear_msg_r()
              var feedback = error.response.data
              if ('userN' in feedback) {
                this.user_error = this.$t('KeyRegister.userError')
              }
              else if ('key' in feedback) {
                this.key_error = this.$t('KeyRegister.keyError')
              }
              else if ('address' in feedback) {
                this.dialogNote = true
                this.address_error = error.response.data['address']
              }
              else if ('firmN' in feedback) {
                this.firm_error = this.$t('KeyRegister.firmError')
              }
              else {
                var errmsg = this.$t('KeyRegister.errMsg')
                this.user_error = errmsg
                this.key_error = errmsg
                this.p_error = errmsg
              }
            })
        }
      },
      clear_msg_r() {
        this.user_error = ''
        this.key_error = ''
        this.p_error = ''
        this.r_form_sucT = ''
        this.r_form_succ = false
      },
      clear_r() {
        this.$refs.kform.reset()
        this.password2 = ''
        this.password = ''
        this.username = ''
        this.key = ''
        this.clear_msg()
      }
    },
    mounted() {
      this.getgroups()
      this.getRoles()
    }
  }
</script>

<style></style>
