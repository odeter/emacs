from flask import request
from flask_jwt_extended import get_jwt_identity
from angle.models import db, UserModel, MapGroupingModel, FirmModel
from flask_restful import Resource, reqparse
from angle import role_required
import werkzeug
from flask import current_app as app
import csv
import pandas as pd
import csv

class UploadUserData(Resource):
    @role_required(['group_moderator'])
    def post(self):
        parser = reqparse.RequestParser()
        parser.add_argument('file', type=werkzeug.datastructures.FileStorage, location="files", help = 'This field cannot be blank', required = True)

        data = parser.parse_args()

        current_ID = get_jwt_identity()
        current_user = UserModel.find_by_id(current_ID)
        userGroupID = current_user.firm.group_id

        if not current_user:
            app.logger.error('user with ID: {0} tried creating creating mapgroupings via CSV data'.format(current_ID))
            return {'message': "User not logged in"}, 403

        f = data['file']

        groups = {
            "0-16.999": [],
            "17.000-99.999": [],
            "100.000-199.999": [],
            "200.000-399.999": [],
            "400.000-799.999": [],
            "800.000>": [],
            "Region Øst": [],
            "Region Fyn": [],
            "Region Nord": [],
            "Region Midt": [],
            "Region Syd": []
        }

        try:
            line = (f.readline()).decode("utf-8")
            dlm = (csv.Sniffer().sniff(line)).delimiter
            header_names = (line.strip()).split(dlm)
        except:
            return {'message': "noParse"}, 500

        csvData = pd.read_csv(f.stream, sep=dlm, names=header_names)
        csvIter = csvData.iterrows()
        for i, row in csvIter:
            if "CVR-nr." in row:
                print(row["CVR-nr."])
                if not pd.isnull(row["CVR-nr."]):
                    # Get Firm based on CVR
                    firm = FirmModel.find_by_cvr(int(row["CVR-nr."]))
                    if firm:
                        firm = firm.name
                        water = int(row['Udpumpet m3'].replace(',', ''))
                        dCode = row['Distriktskode']

                        if water > 0 and water < 16999:
                            groups["0-16.999"].append(firm)
                        elif water < 99999:
                            groups["17.000-99.999"].append(firm)
                        elif water < 199999:
                            groups["100.000-199.999"].append(firm)
                        elif water < 399999:
                            groups["200.000-399.999"].append(firm)
                        elif water < 799999:
                            groups["400.000-799.999"].append(firm)
                        else:
                            groups["800.000>"].append(firm)

                        if dCode == 2:
                            groups["Region Øst"].append(firm)
                        elif dCode == 3:
                            groups["Region Fyn"].append(firm)
                        elif dCode == 4:
                            groups["Region Nord"].append(firm)
                        elif dCode == 5:
                            groups["Region Midt"].append(firm)
                        elif dCode == 6:
                            groups["Region Syd"].append(firm)
            else:
                return {'message': "noCVR"}, 500

        for group in groups:
            mapGroup = MapGroupingModel.find_by_name(group, userGroupID)
            if not mapGroup:
                MapGroupingModel.create_grouping(group, userGroupID, groups[group])
            else:
                firmList = [FirmModel.find_by_name(i) for i in groups[group]]
                mapGroup.firms = firmList
                mapGroup.save_to_db()
        return {'message': 'Succes'}, 200
