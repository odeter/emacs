import gzip
import json
import pandas as pd
from pandas.io.json import json_normalize
import os
import io
import sys
import psycopg2
import secrets
import re

def sanitize(u_input):
    return re.sub(r"[^a-zA-Z0-9_.]", "", u_input)

def find_ft(input_type):
    if input_type in ["port", "count"]:
        return "int"
    elif input_type in ["bool"]:
        return "boolean"
    else:
        return "text"

def insert_db(dt_frame, user_id, table_type, field_dict):
    db_url = os.environ['DATABASE_URL']
    print(db_url)
    print(field_dict)
    conn = psycopg2.connect(db_url)
    # create a configured "Session" class
    conn.set_session()

    cursor = conn.cursor()
    field_list = list(field_dict.keys())
    field_list.sort()
    print(field_list)
    fields_text = ','.join(field_list)

    if field_list:
        getDT = "SELECT * FROM dto WHERE field_types=%s AND cols_number=%s"
        #s = session.table.keys()
        #s = session.query(dto).filter(dto.cols_number == len(field_list).filter(field_types == fields_text))
        rows = cursor.execute(getDT, (fields_text, len(field_list)))
        if rows:
            print("heyo got rows")
            print(rows)
        else:
            ex_f = True
            while ex_f:
                table_name = sanitize(table_type)+"_"+secrets.token_hex(10)
                cursor.execute("select exists(select * from information_schema.tables where table_name=%s)", (table_name,))
                ex_f = cursor.fetchone()[0]
                print(ex_f)
                print(table_name)

            updated_ft = {k: find_ft(v) for k, v in field_dict.items()}
            print(updated_ft)
            c_D = ""
            for i in field_list:
                c_D = c_D + ", " + i + " " + updated_ft[i]
            columns = "(id integer PRIMARY KEY, user_id INTEGER REFERENCES users(id)%s)" % c_D
            c_table = "CREATE TABLE %s %s" % (table_name, columns)

            dto_up = "INSERT INTO dto (table_name, cols_number, field_types) VALUES(%s, %s, %s)"
            print(c_table)
            print("no match")

    else:
        exit("field list can't be empty")

def get_dtframe(file_path, user_id):

    dt_frame = pd.DataFrame()
    error = [False, ""]
    with gzip.open(file_path, 'rb') as f_in:
        content = (f_in.read())
        if len(content) > 0:
            try:
                json_read = json.loads(content)
                dt_frame = json_normalize(json_read)
            except ValueError as e:
                #print("heyo", content)
                csv_con = content.decode('unicode_escape')
                sett_list = csv_con.splitlines()
                comments = list(filter(lambda x: x.startswith('#'), sett_list))
                find_sep = (list(filter(lambda x: x.startswith('#separator'),
                                          comments)))
                if find_sep:
                    seperator = find_sep[0].replace('#separator','').strip(" ")
                    settings = {x[0]:x[1:] for x in
                                [x.replace('#','').split(seperator) for x in comments]}

                    if "ts" in settings['fields']:
                        dt_frame = pd.read_csv(io.StringIO(csv_con), sep=seperator, comment='#', names=settings['fields'])
                        field_dict = dict(zip(settings['fields'], settings['types']))
                        insert_db(dt_frame, user_id, settings['path'][0], field_dict)
                    else:
                        error = [True, "does not contain a 'ts' column"]
                else:
                    error = [True, "wrong filetype"]
        else:
            error = [True, "empty file"]
        f_in.close()
        if error[0]:
            exit(error[1])
        else:
            dt_frame['user_id'] = user_id
            return dt_frame


# def go_through(data_path):
#     for subdir, dirs, files in os.walk(data_path):
#         for filename in files:
#             if filename.endswith(".gz"):
#                 path = os.path.join(subdir, filename)
#                 print(path)
#                 res = get_dtframe(path)
#                 print(res)
#             else:
#                 continue

if __name__== "__main__":
    args = sys.argv
    if not len(args) == 3:
        exit("number of arguments not right")
    file_path = args[1]
    user_id = args[2]
    print(file_path)
    if os.path.exists(file_path):
        file_DT = get_dtframe(file_path, user_id)
        print(file_DT)
    else:
        exit("path does not exists")
        #go_through('done')
