module ElaboratorImpl where

import Absyn
-- add other imports
import Data.Text (pack, toLower)
import Data.List as DL (lookup, find, sortBy)
import Control.Monad
import Data.Map as MO (lookup, Map, unionWith, delete, insert, fromList, toList)

-- debugging
-- import Debug.Trace

-- sortby

sortRes :: Resource -> Resource -> Ordering
sortRes (R b1) (R b2)
  | b1 > b2 = GT
  | b1 < b2 = LT
  | b1 == b2 = EQ
sortRes _ _ = EQ

sortC :: (CName, RProf) -> (CName, RProf) -> Ordering
sortC (n1, _) (n2, _)
  | n1 > n2 = GT
  | n1 < n2 = LT
  | n1 == n2 = EQ
sortC _ _ = EQ

sortPro :: (Resource, (Int, Int)) -> (Resource, (Int, Int)) -> Ordering
sortPro ((R n1), _) ((R n2), _)
  | n1 > n2 = GT
  | n1 < n2 = LT
  | n1 == n2 = EQ
sortPro _ _ = EQ

sortRP :: [(CName, RProf)] -> [(CName, RProf)]
sortRP l = let nl = map (\(s, xl) -> (s, sortBy sortPro xl)) l
           in sortBy sortC nl

-- Monad Def

type StateData = DB

newtype ELA a = ELA {runELA :: StateData -> (Either ErrMsg (a, StateData))}
instance Monad ELA where
  return a = ELA (\s -> Right (a, s))
  m >>= f = ELA (\s0 -> case runELA m s0 of
                     (Left e) -> (Left e)
                     (Right (a1, s1)) -> case runELA (f a1) s1 of
                       (Left e) -> (Left e)
                       (Right (a2, s2)) -> (Right (a2, s2)))

instance Functor ELA where
  fmap = liftM
instance Applicative ELA where
  pure = return; (<*>) = ap


-- Helper Functions

combineCR :: (CName, RProf) -> [(CName, RProf)] -> [(CName, RProf)]
combineCR (cn, rp) d = toList $ insert cn rp (fromList d)


genName :: [Resource] -> Map CName RProf -> Int -> String
genName stR stC n = let gn = ("#" ++ show n)
                    in case (lookres stR gn, MO.lookup gn stC) of
                         (Right _, _) -> genName stR stC (n+1)
                         (_, Just _) -> genName stR stC (n+1)
                         (_, _) -> gn


-- Monad Functions

getName :: ELA String
getName = ELA (\(stR, stC) -> let gn = genName stR (fromList $ stC) 1
                              in (Right (gn, (stR, stC))))


addRL :: [Resource] -> ELA a -> ELA a
addRL rl m = ELA (\(_, stC) -> let newS = (rl, stC)
                               in runELA m newS)

getP :: ELA StateData
getP = ELA (\s -> (Right (s, s)))

addComR :: Resource -> ELA ()
addComR (R r) = ELA (\(stR, stC) -> case (lookres stR r) of
                                      Right _ -> (Left "auto-generated name already taken")
                                      Left _ -> (Right (mempty, (((R r) : stR), stC))))

addC :: (CName, RProf) -> ELA ()
addC c = ELA (\(stR, stC) -> let nstC = combineCR c stC
                             in (Right (mempty, (stR, nstC))))

abort :: ErrMsg -> ELA a
abort err = (ELA (\_ -> (Left err)))

look :: RName -> ELA Resource
look rn = (ELA (\(stR, stC) -> case (lookres stR rn) of
                        Right x -> (Right (x, (stR, stC)))
                        Left _ -> (Left $ "Resource not found:" ++ rn)))


findC :: CName -> ELA RProf -- not checking for exact comparison
findC cn = (ELA (\(stR, stC) -> case (DL.lookup cn stC) of
                                  Just x -> (Right (x, (stR,stC)))
                                  Nothing -> case (lookcom stC cn) of
                                               Nothing -> (Right ([],(stR,stC)))
                                               Just (x, _) -> Left $ "component not matching exactly with: "++x))



checkR :: CName -> ELA ()
checkR rn = (ELA (\(stR, stC) -> case (lookres stR rn) of
                                   Right _ -> (Left "Component has same name as resource")
                                   Left _ -> (Right ((), (stR,stC)))))


lookcom :: [(CName, RProf)] -> CName -> Maybe (CName, RProf)
lookcom rs s = find (\(x, _) -> compareR x s) rs

--- %% core Functions

lookres :: [Resource] -> RName -> Either ErrMsg Resource
lookres rs s = case find (\(R x) -> compareR x s) rs of
                 Just i -> Right i
                 Nothing -> Left $ "element not found: "++s

-- Lookres helper function

compareR :: String -> String -> Bool
compareR rs rn = let n1 = toLower $ pack rs
                     n2 = toLower $ pack rn
                 in n1 == n2


elaborate :: IDB -> Either ErrMsg DB
elaborate idb = let res = runELA (exec idb) ([], [])
                in case res of
                     Right ((rl, rpos), _) -> Right (sortBy sortRes rl, sortRP rpos)
                     Left s -> Left s

-- Elaborate helper functions

makeRList :: [RName] -> [Resource] -> ELA ([Resource])
makeRList [] rl = return rl
makeRList (rn : rnl) rl = case lookres rl rn of
                            Right (R i) -> abort $ "Resource declard twice: "++i
                            Left _ -> makeRList (rnl) ((R rn) : rl)

exec :: IDB -> ELA StateData
exec ([], []) = getP
exec ([], (c : ic)) = do nn <- calcn c
                         addC nn
                         (exec ([], ic))
exec (rn, ic) = do l <- makeRList rn []
                   addRL l (exec ([], ic))


calcn :: IComp -> ELA (CName, RProf)
calcn (IC s cl) = do checkR s
                     cur <- findC s
                     ncl <- getRP cl cur
                     return (s, ncl)

getRP :: [Clause] -> RProf -> ELA RProf
getRP [] rl = return rl
getRP (c : cl) rl = do nf <- getNRP c
                       ncl <- combineRP nf (fromList rl)
                       getRP cl ncl


getNRP :: Clause -> ELA (CKind, [(Resource, Int)])
getNRP (c, r) = do x <- getR c r
                   return (c, x)

getR :: CKind -> RSpec -> ELA [(Resource, Int)]
getR _ (RSRes n) = do x <- look n
                      return [(x, 1)]
getR c (RSNum mul rs) = do rest <- getR c rs
                           return $ map (\(n, i) -> (n, i * mul)) rest
getR c (RSAnd ns rs) = do ns1 <- getR c ns
                          rs1 <- getR c rs
                          return $ toList $ unionWith (+) (fromList $ ns1) (fromList $ rs1)
getR CKProvides (RSOr ns rs) = do  ns1 <- getR CKProvides ns
                                   rs1 <- getR CKProvides rs
                                   nres <- getName
                                   addComR $ (R nres)
                                   rp1 <- combineRP (CKProvides, ns1) (fromList [])
                                   cp1 <- getName
                                   addC (cp1, (((R nres), (-1,0)) : rp1))
                                   rp2 <- combineRP (CKProvides, rs1) (fromList [])
                                   cp2 <- getName
                                   addC (cp2, (((R nres), (-1,0)) : rp2))
                                   return $ [((R nres), 1)]
getR CKUses (RSOr ns rs) = do  ns1 <- getR CKUses ns
                               rs1 <- getR CKUses rs
                               nres <- getName
                               addComR $ (R nres)
                               rp1 <- combineRP (CKUses, ns1) (fromList [])
                               cp1 <- getName
                               addC (cp1, (((R nres), (1,0)) : rp1))
                               rp2 <- combineRP (CKUses, rs1) (fromList [])
                               cp2 <- getName
                               addC (cp2, (((R nres), (1,0)) : rp2))
                               return $ [((R nres), 1)]
getR CKRequires (RSOr ns rs) = do  ns1 <- getR CKRequires ns
                                   rs1 <- getR CKRequires rs
                                   nres <- getName
                                   addComR $ (R nres)
                                   rp1 <- combineRP (CKRequires, ns1) (fromList [])
                                   cp1 <- getName
                                   addC (cp1, (((R nres), (1,0)) : rp1))
                                   rp2 <- combineRP (CKRequires, rs1) (fromList [])
                                   cp2 <- getName
                                   addC (cp2, (((R nres), (1,0)) : rp2))
                                   return $ [((R nres), 1)]



combineRP :: (CKind, [(Resource, Int)]) -> Map Resource (Int, Int) -> ELA RProf
combineRP (_, []) rp = return $ toList rp
combineRP (CKProvides, ((rn, i): rl)) rp =
  case MO.lookup rn rp of
    Just (con, req)
      | (con + i) == 0 && (req == 0) ->
          let newRS = delete rn rp
          in combineRP (CKProvides, rl) newRS
      | otherwise ->
          let newRS = insert rn (con + i, req) rp
          in combineRP (CKProvides, rl) newRS
    Nothing -> combineRP (CKProvides, rl) (insert rn (i,0) rp)
combineRP (CKRequires, ((rn, i): rl)) rp =
  case MO.lookup rn rp of
    Just (con, req) ->
      let newRS = insert rn (con, req + i) rp
      in combineRP (CKRequires, rl) newRS
    Nothing -> combineRP (CKRequires, rl) (insert rn (0,i) rp)
combineRP (CKUses, ((rn, i): rl)) rp = -- uses should sometime result in a require FIX
  case MO.lookup rn rp of
    Just (con, req)
      | (con - i) == 0 && (req == 0) ->
          let newRS = delete rn rp
          in combineRP (CKUses, rl) newRS
      | otherwise ->
          let newRS = insert rn (con - i, req) rp
          in combineRP (CKUses, rl) newRS
    Nothing -> combineRP (CKUses, rl) (insert rn (0,i) rp)
