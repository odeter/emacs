from flask import Flask
from flask_restful import Api
from flask_sqlalchemy import SQLAlchemy
from flask_jwt_extended import JWTManager
from flask_cors import CORS, cross_origin

app = Flask(__name__, static_url_path='/static')

app.config.from_object('config')
#app.config['CORS_HEADERS'] = 'Content-Type'
#CORS(app, resources={r"/*": {"origins": "*"}})
CORS(app)
api = Api(app)

db = SQLAlchemy(app)

import angle.views as views
import angle.models as models
import angle.resources as resources

##############################################################
# app.config['PROPAGATE_EXCEPTIONS'] = True                  #
#                                                            #
# app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///app.db' #
# app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False       #
# app.config['SECRET_KEY'] = 'some-secret-string'            #
##############################################################

@app.before_first_request
def create_tables():
    db.create_all()

#app.config['JWT_SECRET_KEY'] = 'kowmcuitr8s2c97'
jwt = JWTManager(app)

# Development conf, change before production launch
####################################################################
# app.config['JWT_ACCESS_TOKEN_EXPIRES'] = False                   #
#                                                                  #
# app.config['JWT_BLACKLIST_ENABLED'] = True                       #
# app.config['JWT_BLACKLIST_TOKEN_CHECKS'] = ['access', 'refresh'] #
####################################################################

@jwt.token_in_blacklist_loader
def check_if_token_in_blacklist(decrypted_token):
    jti = decrypted_token['jti']
    return models.RevokedTokenModel.is_jti_blacklisted(jti)

api.add_resource(resources.UserRegistration, '/registration')
api.add_resource(resources.UserLogin, '/login')
api.add_resource(resources.UserLogoutAccess, '/logout/access')
api.add_resource(resources.UserLogoutRefresh, '/logout/refresh')
api.add_resource(resources.TokenRefresh, '/token/refresh')
#api.add_resource(resources.AllUsers, '/users')
#api.add_resource(resources.SecretResource, '/secret')
#api.add_resource(resources.JWTTestResource, '/jwttest')
#api.add_resource(resources.ConnLog, '/connlog')
api.add_resource(resources.UploadPcap, '/uploadpcap')
api.add_resource(resources.Pcap_unpro, '/pcapunpro')
api.add_resource(resources.BroLogs, '/brologs')
api.add_resource(resources.BroLog, '/brolog/<string:brologuuid>')
api.add_resource(resources.GetHelp, '/getHelp')
