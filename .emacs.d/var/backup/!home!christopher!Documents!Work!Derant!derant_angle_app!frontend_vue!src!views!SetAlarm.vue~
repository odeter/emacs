<template>
  <v-container ma-0 pa-5 bg grid-list-md text-xs-center fluid>
    <v-layout wrap align-center fluid pb-5>
      <v-flex>
        <v-subheader>Raise Alarm:</v-subheader>
        <v-divider></v-divider>
      </v-flex>
    </v-layout>
    <v-form ref="sform">
      <v-layout wrap fluid>
        <v-flex md6>
          <v-text-field
              v-model="alarm_N"
              outlined
              label="Notify Name"
              prepend-icon="mdi-pen"
              :counter="120"
              :rules="nameRules"
              placeholder="Name of new Alarm Notits"
              required
              :error-messages="server_error"
              :success="form_succ"
              :success-messages ="form_sucT"
          ></v-text-field>
        </v-flex>
        <v-flex md6>

          <v-text-field
              v-model="alarm_T"
              outlined
              label="Alarm Type"
              prepend-icon="mdi-pen"
              :counter="120"
              :rules="typeRules"
              placeholder="Type of the alarm"
              required
              :error-messages="server_error"
              :success="form_succ"
              :success-messages ="form_sucT"
          ></v-text-field>
        </v-flex>
      </v-layout>
      <v-layout wrap fluid>
        <v-flex md6>
          <v-textarea
              v-model="alarm_D"
              outlined
              prepend-icon="mdi-format-align-justify"
              label="Alarm Description"
              placeholder="Description of the alarm"
              :error-messages="server_error"
              :success="form_succ"
              :success-messages ="form_sucT"
          ></v-textarea>
        </v-flex>
        <v-flex md6>
          <v-layout wrap fluid>
            <v-select
                :items="alarm_Noti"
                v-model="alarm_NC"
                outlined
                hint="Choose 'Do not notify' to avoid using an alarm notifier"
                :rules="anRules"
                prepend-icon="mdi-bell"
                label="Alarm Notify"
                :error-messages="server_error"
                :success="form_succ"
                :success-messages ="form_sucT"
            ></v-select>
          </v-layout>
          <v-layout wrap fluid>
            <v-select
                :items="alarm_Level"
                v-model="alarm_LC"
                outlined
                :rules="alRules"
                prepend-icon="mdi-fire"
                label="Alarm Level"
                :error-messages="server_error"
                :success="form_succ"
                :success-messages ="form_sucT"
            ></v-select>
          </v-layout>
        </v-flex>
      </v-layout>
      <v-layout wrap fluid>
        <v-flex md6>
          <v-btn block class="mr-4" @click="setAlarm()">Raise Alarm</v-btn>
        </v-flex>
        <v-flex md6>
          <v-btn block class="mr-4" @click="clear()">Clear</v-btn>
        </v-flex>
      </v-layout>
    </v-form>
    <v-layout row wrap align-center>
      <v-flex>
        <v-data-table
            :items-per-page="20"
            disable-filtering
            disable-pagination
            disable-sort
            hide-default-footer
            :headers="row_head"
            :items="row_data">
        </v-data-table>
      </v-flex>
    </v-layout>
  </v-container>
</template>

<script>
  import authservice from '@/services/BackendService.js'
  import buttonMixin from '@/mixins/buttonMix'

  export default {
    mixins: [buttonMixin],

    data() {
      return {
        form_succ: false,
        form_sucT: '',
        server_error: '',
        alarm_N: '',
        alarm_D: '',
        alarm_T: '',
        alarm_Sensor: '',
        alarm_NC: null,
        alarm_LC: null,
        alarm_Log: '',
        alarm_DTS: '',
        alarm_Noti: [],
        alarm_Level: [],
        row_data: [],
        row_head: [],
        alRules: [
          v => !!v || 'Alarm Level is required'
        ],
        anRules: [
          v => !!v || 'Alarm Notifier have to be chosen'
        ],
        nameRules: [
          v => !!v || 'Alarm Name is required',
          v => (v && v.length <= 50) || 'The alarm name must be less than 50 characters'
        ],
        typeRules: [
          v => !!v || 'Alarm Type is required',
          v => (v && v.length <= 120) || 'The alarm type cannot be more than 120 characters'
        ]
      }
    },
    mounted() {
      this.getAlarmNoti()
      this.getAlarmLevel()
      var data = authservice.getAData()
      var f_list = this.dataToTable([data[1], data[0]])
      console.log(f_list)
      this.row_head = f_list[0]
      this.row_data = f_list[1]
      this.alarm_Sensor = data[2]
      this.alarm_Log = data[3]
      this.alarm_DTS = data[4]
    },
    methods: {
      select_Noti(data) {
        this.alarm_Noti = [{text: '-- Do not notify --', value: -1}]
        var i
        for (i = 0; i < data.length; i++) {
          var dd = {text: data[i][0], value: data[i][2]}
          this.alarm_Noti.push(dd)
        }
      },
      select_Level(data) {
        this.alarm_Level = []
        var i
        for (i = 0; i < data.length; i++) {
          var dd = {text: data[i][0], value: data[i][2]}
          this.alarm_Level.push(dd)
        }
      },
      getAlarmLevel() {
        authservice
               .getAlarmLevels()
               .then(result => {
                 if (result.status == 200) {
                   var data = result.data['alarms_levels']
                   this.select_Level(data)
                 }
                 else {
                   this.aLM = 'No Levels created'
                 }
               })
               .catch(error => {
                 console.log('Error')
                 console.log(error)
                 this.aLM = error.response.data['message']
               })
      },
      getAlarmNoti() {
        authservice
               .getAlarmNoti()
               .then(result => {
                 if (result.status == 200) {
                   var data = result.data['alarms_notify']
                   this.select_Noti(data)
                 }
                 else {
                   this.select_Noti([])
                   this.aLM = 'No Notifiers created'
                 }
               })
               .catch(error => {
                 console.log('Error')
                 console.log(error)
                 this.aLM = error.response.data['message']
               })
      },
      setAlarm() {
        if (this.$refs.sform.validate()) {
          authservice
               .setAlarm(this.alarm_N, this.alarm_D, this.alarm_T, this.alarm_LC,
                         this.alarm_Sensor, this.alarm_Log, this.alarm_DTS, this.alarm_NC)
               .then(result => {
                 this.server_error = ''
                 this.form_succ = true
                 this.form_sucT = 'Alarm created'
               })
               .catch(error => {
                 this.server_error = error.response.data['message']
               })
        }
      },
      clear() {
        this.$refs.sform.reset()
        this.form_succ = false
        this.form_sucT = ''
        this.server_error = ''
      }
    }
  }
</script>

<style></style>
