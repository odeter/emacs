<template>
  <v-container ma-0 pa-5 bg grid-list-md text-xs-center fluid>
    <v-card>
      <v-card-title>
        {{ $t('KeyRegister.regiNewOrg') }}
      </v-card-title>
      <v-card-text>
        <v-form ref="kform" autocomplete="off" @submit.prevent="registerUser">
          <v-layout wrap align-center fluid pb-5>
            <v-flex>
              <v-subheader>{{ $t('KeyRegister.userInfo') }}</v-subheader>
              <v-divider></v-divider>
            </v-flex>
          </v-layout>
          <v-layout wrap fluid>
            <v-flex md6>
              <v-text-field
                v-model="username"
                v-bind:label="$t('KeyRegister.userEmail')"
                v-bind:placeholder="$t('KeyRegister.userEmailPlaceholder')"
                :counter="120"
                :rules="nameRules"
                prepend-icon="mdi-account-plus"
                :success="form_succ"
                :success-messages ="form_sucT"
                :error-messages="user_error"
                outlined
                required
              ></v-text-field>
            </v-flex>
            <v-flex md6>
              <v-text-field
                v-model="key"
                v-bind:label="$t('KeyRegister.registrationKey')"
                v-bind:placeholder="$t('KeyRegister.registrationKeyPlaceholder')"
                prepend-icon="mdi-account-key"
                :success="form_succ"
                :success-messages ="form_sucT"
                :error-messages="key_error"
                :counter="30"
                :rules="keyRules"
                required
                outlined
              ></v-text-field>
            </v-flex>
          </v-layout>

          <v-layout wrap fluid>
            <v-flex md6>
              <v-text-field
                v-model="password"
                :type="'password'"
                v-bind:placeholder="$t('KeyRegister.passwordPlaceholder')"
                v-bind:label="$t('KeyRegister.password')"
                :counter="120"
                :rules="passRules"
                prepend-icon="mdi-key-plus"
                :success="form_succ"
                :success-messages ="form_sucT"
                :error-messages="p_error"
                outlined
                required
                autocomplete="new-password"
              ></v-text-field>
            </v-flex>
            <v-flex md6>
              <v-text-field
                v-model="password2"
                :type="'password'"
                v-bind:placeholder="$t('KeyRegister.passwordValidationPlaceholder')"
                v-bind:label="$t('KeyRegister.passwordValidation')"
                :counter="120"
                :rules="passRules2"
                prepend-icon="mdi-key-plus"
                :success="form_succ"
                :success-messages ="form_sucT"
                :error-messages="p_error"
                outlined
                required
              ></v-text-field>
            </v-flex>
          </v-layout>
          <v-layout wrap fluid>
            <v-flex md6>
              <v-text-field
                v-model="uname"
                v-bind:label="$t('KeyRegister.name')"
                v-bind:placeholder="$t('KeyRegister.namePlaceholder')"
                :counter="120"
                :rules="unameRules"
                prepend-icon="mdi-account"
                :success="form_succ"
                :success-messages ="form_sucT"
                outlined
                required
              ></v-text-field>
            </v-flex>
            <v-flex md6>
              <div class="d-inline-block pr-1">
                <v-icon>mdi-phone</v-icon>
              </div>
              <div class="d-inline-block ma-0 pa-0" style="width: 94%">
                <vue-tel-input-vuetify
                  v-model="mobile"
                  v-bind:label="$t('KeyRegister.mobileNumber')"
                  v-bind:placeholder="$t('KeyRegister.mobileNumberPlaceholder')"
                  prepend-icon="mdi-phone"
                  :success="form_succ"
                  :success-messages="form_sucT"
                  :error-messages="mobile_error"
                  :hint="$t('KeyRegister.mobileHint')"
                  persistent-hint
                  outlined
                  required
                  :valid-characters-only="true"
                  @validate="setCountryCode"
                  @input="checkValid"
                  :rules="mobileRules"
                ></vue-tel-input-vuetify>
              </div>
            </v-flex>
          </v-layout>
          <v-layout wrap align-center fluid pb-5>
            <v-flex>
              <v-subheader>{{ $t('KeyRegister.orgInfo') }}</v-subheader>
              <v-divider></v-divider>
            </v-flex>
          </v-layout>
          <v-layout wrap fluid>
            <v-flex md6>
              <v-text-field
                v-model="firmname"
                :rules="firmnameRules"
                v-bind:label="$t('KeyRegister.firmName')"
                v-bind:placeholder="$t('KeyRegister.firmName')"
                prepend-icon="mdi-office-building"
                :success="form_succ"
                :success-messages ="form_sucT"
                :error-messages="firm_error"
                :counter="120"
                required
                outlined
              ></v-text-field>
            </v-flex>
            <v-flex md6>
              <v-autocomplete
                outlined
                v-model="country"
                :items="countries"
                :rules="countryRules"
                item-text="country"
                item-value="abbreviation"
                prepend-icon="mdi-flag"
                v-bind:label="$t('KeyRegister.country')"
                v-bind:placeholder="$t('KeyRegister.country')"
                :error-messages="address_error"
              >
                <template v-slot:item="data">
                  <country-flag :country="data.item.abbreviation"/>
                  {{ data.item.country }}
                </template>
                <template v-slot:selection="data">
                  <country-flag :country="data.item.abbreviation"/>
                  {{ data.item.country }}
                </template>
              </v-autocomplete>
            </v-flex>
          </v-layout>
          <v-layout wrap fluid>
            <v-flex md6>
              <v-text-field
                v-model="zipcode"
                v-bind:label="$t('KeyRegister.zipCode')"
                v-bind:placeholder="$t('KeyRegister.zipCodePlaceholder')"
                prepend-icon="mdi-home-variant"
                :success="form_succ"
                :success-messages ="form_sucT"
                :error-messages="address_error"
                :counter="20"
                :rules="zipRules"
                required
                outlined
              ></v-text-field>
            </v-flex>
            <v-flex md6>
              <v-text-field
                v-model="address"
                v-bind:label="$t('KeyRegister.firmAddress')"
                v-bind:placeholder="$t('KeyRegister.firmAddressPlaceholder')"
                prepend-icon="mdi-home-variant"
                :success="form_succ"
                :success-messages ="form_sucT"
                :error-messages="address_error"
                :counter="120"
                :rules="addressRules"
                required
                outlined
              ></v-text-field>
            </v-flex>
          </v-layout>
          <v-layout wrap fluid>
            <v-flex md6>
              <v-text-field
                v-model="cvrcode"
                v-bind:label="'CVR'"
                v-bind:placeholder="'CVR'"
                prepend-icon="mdi-home-variant"
                :success="form_succ"
                :success-messages ="form_sucT"
                :error-messages="address_error"
                :counter="8"
                :rules="cvrRules"
                required
                outlined
              ></v-text-field>
            </v-flex>
          </v-layout>
          <v-layout wrap fluid>
            <v-flex md6>
              <v-btn
                block
                color="primary"
                class="mr-4"
                :loading="loading_button"
                :disabled="loading_button"
                @click="registerUser">
                {{ $t('KeyRegister.registerUserBtn') }}
              </v-btn>
            </v-flex>
            <v-flex md6>
              <v-btn block class="mr-4" @click="clear">{{ $t('KeyRegister.clearBtn') }}</v-btn>
            </v-flex>
          </v-layout>
        </v-form>
      </v-card-text>
    </v-card>
    <v-dialog v-model="dialogNote" max-width="600px">
      <v-card>
        <v-card-title>
          <span class="headline">{{ $t('KeyRegister.addressNotFound')}}</span>
        </v-card-title>
        <v-card-text>
          {{ $t('KeyRegister.continueAnyways') }}
        </v-card-text>
        <v-card-actions>
          <v-btn color="primary" @click="dialogNote = false">{{ $t('KeyRegister.changeAddress') }}</v-btn>
          <v-spacer/>
          <v-btn color="white" @click="foundLngLat = true; registerUser(); dialogNote = false">{{ $t('KeyRegister.continue') }}</v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>
    <v-dialog v-model="dialogCheck" max-width="600px">
      <v-card>
        <v-card-title>
          <span class="headline">{{ $t('KeyRegister.dbiError')}}</span>
        </v-card-title>
        <v-card-text>
          {{ $t('KeyRegister.continueAnyways') }}
        </v-card-text>
        <v-card-actions>
          <v-btn color="primary" @click="force = true; registerUser(); dialogCheck = false">{{ $t('KeyRegister.continue') }}</v-btn>
          <v-spacer/>
          <v-btn color="white" @click="dialogCheck = false">{{ $t('General.close') }}</v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>
  </v-container>
</template>

<script>
  import authservice from '@/services/BackendService.js'
  import router from '@/router'
  import { EventBus } from '../services/user_status'
  import countriesJSON from '@/mixins/Countries.json'

  export default {
    data() {
      return {
        // force registration dialog
        force: false,
        dialogCheck: false,
        loading_button: null,
        // firm registration
        username: null,
        password: null,
        password2: null,
        zipcode: null,
        cvrcode: null,
        address: null,
        mobile: null,
        countryCode: null,
        validMobile: false,
        mobile_error: '',
        uname: null,
        firmname: null,
        key: this.$route.query.key,
        country: '',
        countries: countriesJSON,
        firm_error: '',
        user_error: '',
        key_error: '',
        p_error: '',
        address_error: '',
        form_succ: false,
        form_sucT: '',
        register_re: null,
        dialogNote: false,
        foundLngLat: false,
        countryRules: [
          (v) => !!v || this.$t('KeyRegister.countryReq')
        ],
        firmnameRules: [
          v => !!v || this.$t('KeyRegister.nameRequired'),
          v => (v && v.length <= 120) || this.$t('KeyRegister.nameLength')
        ],
        unameRules: [
          v => !!v || this.$t('KeyRegister.nameRequired'),
          v => (v && v.length <= 120) || this.$t('KeyRegister.nameLength')
        ],
        mobileRules: [
          v => !!v || this.$t('KeyRegister.mobileRequired'),
          v => (v && v.length <= 20) || this.$t('KeyRegister.mobileRequired')
        ],
        addressRules: [
          v => !!v || this.$t('KeyRegister.addressRequired'),
          v => (v && v.length <= 120) || this.$t('KeyRegister.addressLength')
        ],
        zipRules: [
          v => !!v || this.$t('KeyRegister.zipRequired'),
          v => (v && v.length <= 20) || this.$t('KeyRegister.zipLength')
        ],
        cvrRules: [
          v => !!v || this.$t('KeyRegister.zipRequired'),
          v => ((v && v.length <= 8) && (!isNaN(v) && !isNaN(parseFloat(v)))) || this.$t('KeyRegister.zipLength')
        ],
        passRules2: [
          v => !!v || this.$t('KeyRegister.passwordRepeat'),
          v => (v && v.length <= 120) || this.$t('KeyRegister.passwordLength'),
          v => (v == this.password) || this.$t('KeyRegister.passwordMatch')
        ],
        passRules: [
          v => !!v || this.$t('KeyRegister.passwordRequired'),
          v => (v && v.length <= 120) || this.$t('KeyRegister.passwordLength')
        ],
        nameRules: [
          v => !!v || this.$t('KeyRegister.emailRequired'),
          v => (v && v.length <= 120) || this.$t('KeyRegister.emailLength'),
          v => /.+@.+\..+/.test(v) || this.$t('KeyRegister.emailValid')
        ],
        keyRules: [
          v => !!v || this.$t('KeyRegister.registrationKeyRequired'),
          v => (v && v.length <= 30) || this.$t('KeyRegister.registrationKeyLength')
        ]
      }
    },
    methods: {
      testCall() {
        console.log('isnumber: ', parseInt(this.zipcode) + ' - ' + isNaN(123))
      },
      checkValid(s, p) {
        this.validMobile = p.valid
        if (!this.validMobile) {
          this.mobile_error = 'Number not valid'
        } else {
          this.mobile_error = ''
        }
      },
      setCountryCode(countryCode) {
        this.countryCode = countryCode.regionCode
      },
      registerUser() {
        if (this.$refs.kform.validate() && this.validMobile) {
          this.loading_button = true
          authservice
            .keyRegister(this.username, this.password, this.key,
                         this.zipcode, this.address, this.mobile, this.countryCode,
                         this.uname, this.country, this.foundLngLat, this.firmname, this.cvrcode, this.force)
            .then(result => {
              this.clear_msg()
              this.form_succ = true
              this.form_sucT = this.$t('KeyRegister.userRegistrered')
              this.loading_button = null
              router.push('/login')
            })
            .catch(error => {
              this.clear_msg()
              const feedback = error.response.data
              if ('userN' in feedback) {
                this.user_error = this.$t('KeyRegister.userError')
              }
              else if ('key' in feedback) {
                this.key_error = this.$t('KeyRegister.keyError')
              }
              else if ('address' in feedback) {
                this.dialogNote = true
                this.address_error = error.response.data['address']
              }
              else if ('firmN' in feedback) {
                this.firm_error = this.$t('KeyRegister.firmError')
              }
              else if ('dbi' in feedback) {
                this.dialogCheck = true
                this.firm_error = this.$t('KeyRegister.dbiError')
              }
              else {
                const errmsg = this.$t('KeyRegister.errMsg')
                this.user_error = errmsg
                this.key_error = errmsg
                this.p_error = errmsg
              }
              this.loading_button = null
            })
        }
      },
      clear_msg() {
        this.user_error = ''
        this.key_error = ''
        this.p_error = ''
        this.form_sucT = ''
        this.form_succ = false
      },
      clear() {
        this.$refs.kform.reset()
        this.password2 = ''
        this.password = ''
        this.username = ''
        this.key = ''
        this.loading_button = null
        this.clear_msg()
      }
    },
    mounted() {
      EventBus.$emit('user_logged_in', false)
    }
  }
</script>
