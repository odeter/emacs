<template>
  <v-container ma-0 pa-5 bg grid-list-md text-xs-center fluid>
    <v-layout row wrap align-center>
      <v-flex>
	<v-row>
	  <!-- <nav>
	       <router-link :to="{ name: 'analysis-network' }"
	       >Back to Network Analysis</router-link
	       >
	       </nav> -->
	  <v-btn v-bind:to="an_P">Back to Network Analysis</v-btn>
	</v-row>
	<v-row>
	  <v-col>
	    <v-checkbox
		label="Adjust all headers at
		       once"
		v-model="adjustallheaders"
	    ></v-checkbox>
	    <!-- <input v-model="adjustallheaders" type="checkbox" /> Adjust all headers at
		 once -->
	  </v-col>
	</v-row>
	<v-row>
	  <v-flex style="overflow:auto">
            <table v-for="(header, index) in mheader" :key="`header-${index}`">
              <tr v-show="currentindex == index">
                <td v-for="(hcell, hindex) in header" :key="`hcell-${hindex}`">
                  <div
                      :id="'H' + index + 'C' + hindex"
                      v-resize:throttle="onHeaderResize"
                      v-resize:initial="onHeaderResize"
                      v-bind:style="{
                                    width: divsizeTC[filesidlist[header[0]]][hindex] + 'px'
                                    }"
                      style="resize: horizontal; overflow: hidden;"
                  >
                    {{ hcell }}
                  </div>
                </td>
              </tr>
            </table>

            <table v-for="(row, index) in swmdata" :key="`row-${index}`">
              <tr>
                <div
                    v-bind:style="{ 'background-color': rowcolor[filesidlist[row[0]]] }"
                >
                  <td v-for="(cell, rindex) in row" :key="`cell-${rindex}`">
                    <div
                        v-bind:id="swcursorY == index && cursorX == rindex ? 'activeEL' : ''"
                        v-bind:style="{
                                      width: divsizeTC[filesidlist[row[0]]][rindex] + 'px',
                                      'background-color':
                                      swcursorY == index && cursorX == rindex ? 'Aqua' : ''
                                      }"
                        style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"
                    >
                      {{ cell }}
                    </div>
                  </td>
                </div>
              </tr>
            </table>
	  </v-flex>
	</v-row>
	<v-row class="d-flex flex-row">
	  <v-col class="ma-1 pa-1">
	    <p class="font-weight-light" v-if="sf">From file: {{ sf }}</p>
	    <p class="font-weight-light" v-if="!sf">No file selected.</p>
	  </v-col>
	</v-row>
        <v-row>
          <v-btn @click="resetLayout">Reset Column Width</v-btn>
        </v-row>
        <v-row>
          <v-col>
            <v-simple-table fixed-header height="500px">
              <template v-slot:default>
                <thead>
                  <tr>
                    <th>
                      hidden
                    </th>
                    <th>
                      file type
                    </th>
                    <th>
                      file header
                    </th>
                    <th>
                      Column number
                    </th>
                  </tr>
                </thead>
                <tbody>
                  <tr v-for="(file_type, idx) in filescM"
                      :key="idx"
                      @click="file_type.is_set = !file_type.is_set; sethideC(file_type.file_h, file_type.head_n, file_type.index)">
                    <td>
                      <v-checkbox
                          label=""
                          v-model="file_type.is_set"
                          @change="sethideC(file_type.file_h, file_type.head_n, file_type.index)"
                      ></v-checkbox>
                    </td>
                    <td>{{file_type.file_h}}</td>
                    <td>{{file_type.head_n}}</td>
                    <td>{{(file_type.index+1)}}</td>
                  </tr>
                </tbody>
              </template>
            </v-simple-table>
          </v-col>
        </v-row>
      </v-flex>
    </v-layout>
  </v-container>
</template>

<script>
  import authservice from '@/services/BackendService.js'
  import gethideC from '@/views/AnalysisNetwork'
  import resize from 'vue-resize-directive'

export default {
  directives: {
    resize
  },
  data() {
    return {
      pagination: {
        sortBy: 'name'
      },
      hidec_Head: [{ text: 'Hidden', value: 'hidCheck' }, { text: 'File Type', value: 'row_type' },
                   { text: 'Header Title', value: 'h_title' },],

      an_P: null,
      hide_c: {},
      filesColumns: [],
      filescM: null,
      adjustallheaders: false,
      cursorX: 0,
      cursorY: 0,
      swsize: 8,
      sf: null,
      brologdata: null,
      maxHL: null,
      filters: {},
      mdata: [], //merged data
      mheader: [], //merged headers
      rowcolor: [
        'LightSalmon',
        'green',
        'LightCyan',
        'Thistle',
        'AliceBlue',
        'Beige',
        'HoneyDew',
        'Thistle'
      ],
      divsize: 100,
      divsizeTC: [],
      divTCSS: [],
      filesidlist: {},
      currentindex: 5,
      ds: null
    }
  },
    created(){
      this.an_P = this.$router.options.mainRoutes[1].path
      this.divTCSS = Array.from({length:14},() => (Array(40).fill(100)))
      this.divsizeTC = this.divTCSS //Array.from({length:14},() => (Array(40).fill(100)))
      // get current hidden columns
      this.gethideC()
    },
    computed: {
    swmdata: function() {
      var startindex =
        this.cursorY - this.swsize < 0 ? 0 : this.cursorY - this.swsize
      var endindex = startindex + 2 * this.swsize + 1
      return this.mdata.slice(startindex, endindex)
    },
    swcursorY: function() {
      return Math.min(this.cursorY, this.swsize)
    }
  },
    methods: {

      gethideC: function(){
        var ff = authservice.gethiddenC()
        this.hide_c = {}
        if(ff != null){
          var val_A = Object.keys(ff)
          for (var i = 0; i < val_A.length; i++) {
            var item = val_A[i]
            this.hide_c[item] = ff[item]
          }
        }
      },
      sethideC: function(file_h, head_n, c_id){
        var nw = {}
        if (this.hide_c[file_h]) {
          nw = this.hide_c[file_h]
          if (head_n in nw){
            delete nw[head_n]
          } else{
            nw[head_n] = c_id
          }
        }
        else{
          nw[head_n] = c_id
        }
        if ((Object.values(nw)).length < 1) {
          delete this.hide_c[file_h]
        }
        else{
          this.hide_c[file_h] = nw
        }
        authservice.sethiddenC(this.hide_c)
        this.getdata(false)
      },
      resetLayout: function(){
        authservice.saveDivsize(this.divTCSS)
        this.reloadL()
      },
      reloadL: function(){
        this.ds = authservice.getDivsize()
        if (this.ds) {
          this.divsizeTC = this.ds
        }
      },
      scrollHorizontal: function() {
        // Used to center horizontal on active element in data window
        var element = this.$el.querySelector("#activeEL");
        element.scrollIntoView({inline: "center", block: "nearest"});
      },
      getdata(reload) {
        authservice.getBrologWithFilter(this.sf, null, this.hide_c).then(result => {
	  var bdata = result.data["bdata"]
	  var maxH = result.data["maxHL"]
          var hh = result.data["headers"]
          authservice.brologdataraw = bdata /* result.data */
          this.brologdata = bdata /* result.data */
	  this.maxHL = maxH
          if(reload){
            this.filesColumns = hh
            this.filescM = this.filesColumns.map(function(item) {
              return {
                index: item.index,
                head_n: item.head_n,
                file_h: item.file_h,
                is_set: item.is_set
              };
            });
          }
          this.mergedata()
        })
      },
      mergedata() {
        var filenumber = 0
        this.mheader = []
        for (var filen in this.brologdata.files) {
          // Add headers to the merged header (mheader) variable
          var filH = this.brologdata.files[filen].header
          var new_mheader = filH.length == this.maxHL ? filH :
                            filH.concat(Array(this.maxHL - filH.length).fill("-"))
          this.mheader.push([filen].concat(new_mheader))

          // Add filename to filesidlist and give it a consequitive number
          this.filesidlist[filen] = filenumber

          /* var fc = []
             var hc = this.hide_c
             filH.forEach(function (item, index) {
             var ss = false
             if (filen in hc){
             if(item in hc[filen]){
             ss = true
             }
             }
             fc.push({file_h: filen, head_n: item, id: index, is_set: ss}); */
          /* }); */
          //this.filesColumns = this.filesColumns.concat(fc)
          filenumber++
        }
        this.mdata = []
        var connlen = this.brologdata.files['conn.log'].rows.length
        var connrows = this.brologdata.files['conn.log'].rows
        //console.log(connlen)

        // Search for orphans
        var connuids = {}
        var orphanmergelist = {}
        for (var ci = 0; ci < connlen; ci++) {
          connuids[connrows[ci][1]] = ''
        }
        for (var osubfile in this.brologdata.files) {
          //console.log(subfile)
          if (osubfile == 'conn.log') {
            continue
          }
          // Go through rows and check each uid
          var osublen = this.brologdata.files[osubfile].rows.length
          var osubrows = this.brologdata.files[osubfile].rows
          var lastnonorphanuid = ''
          for (var oj = 0; oj < osublen; oj++) {
            if (osubrows[oj][1] in connuids) {
              // Row is a non-orphan
              lastnonorphanuid = osubrows[oj][1]
            } else {
              //console.log('Found orphan')
              //console.log(osubrows[oj])
              if (lastnonorphanuid in orphanmergelist) {
                orphanmergelist[lastnonorphanuid].push(
                  [osubfile].concat(osubrows[oj])
                )
              } else {
                orphanmergelist[lastnonorphanuid] = [
                  [osubfile].concat(osubrows[oj])
                ]
              }
            }
          }
        }
        //console.log("here is the ophan merge list:")
        //console.log(orphanmergelist)
        // Start orphans, seen before any conn-log entries has been seen
        if ('' in orphanmergelist) {
          for (
            var startorphanindex = 0;
            startorphanindex < orphanmergelist[''].length;
            startorphanindex++
          ) {
            var orp = orphanmergelist[''][startorphanindex]

            //console.log("Orphan Data!")
            var orpMD = orp.length == (this.maxHL+1) ? orp :
                        orp.concat(Array((this.maxHL+1) - orp.length).fill("-"))
            //console.log(orpMD)
            this.mdata.push(orpMD)
          }
        }

        for (var i = 0; i < connlen; i++) {

          var conMD = connrows[i].length == this.maxHL ? connrows[i] :
                      connrows[i].concat(Array(this.maxHL - connrows[i].length).fill("-"))
          this.mdata.push(['conn.log'].concat(conMD))
          var connuid = connrows[i][1] //Hardcoded uid position, can be calculated from header
          // Find sub rows in all files
          for (var subfile in this.brologdata.files) {
            //console.log(subfile)
            if (subfile == 'conn.log') {
              continue
            }
            // Go through rows and add the ones needed
            var sublen = this.brologdata.files[subfile].rows.length
            var subrows = this.brologdata.files[subfile].rows
            for (var j = 0; j < sublen; j++) {
              if (subrows[j][1] == connuid) {
                var subMD = subrows[j].length == this.maxHL ? subrows[j] :
                            subrows[j].concat(Array(this.maxHL - subrows[j].length).fill("-"))
                //Hardcoded uid position, can be calculated from subheader
                this.mdata.push([subfile].concat(subMD))
                //this.mdata.push([subfile].concat(subrows[j]))
              }
            }
          }
          // Merge orphans in if any exists under this conn uid
          if (connuid in orphanmergelist) {
            for (
              var orphanindex = 0;
              orphanindex < orphanmergelist[connuid].length;
              orphanindex++
            ) {
              //console.log(orphanmergelist[connuid][orphanindex])
              this.mdata.push(orphanmergelist[connuid][orphanindex])
            }
          }
        }
        if (this.mdata.length > 0 && this.cursorY > this.mdata.length - 1) {
          this.cursorY = this.mdata.length - 1
        }
        //console.log(this.mdata)
        console.log("mergedata run")
        this.updateActiveHeader()
      },
    onHeaderResize(event) {
      /*       console.log('onHeaderResize()')
      console.log(event)
      console.log('Id: ' + event.id)
      console.log(event.clientWidth)
 */
      if (event.clientWidth == 0) return

      this.divsize = event.clientWidth
      var H = event.id.substr(1, event.id.indexOf('C') - 1)
      var C = event.id.substr(event.id.indexOf('C') + 1)
      //console.log(H)
      /*       console.log(H)
      console.log(C)
 */
      //this.divsizeTC[H][C] = event.clientWidth
      if (this.adjustallheaders) {
        var dslen = this.divsizeTC.length
        for (var i = 0; i < dslen; i++) {
          this.divsizeTC[i].splice(C, 1, event.clientWidth)
	  //console.log("multiple header")
        }
      } else {
        //console.log(this.divsizeTC)
        this.divsizeTC[H].splice(C, 1, event.clientWidth)
	//console.log("single Headers")
	//console.log(this.divsizeTC[H])
      }
      /*       console.log(this.divsizeTC)
       */
      //console.log('Saving divsize...')
      //console.log(this.divsizeTC)
      authservice.saveDivsize(this.divsizeTC)
    },
    updateActiveHeader() {
      //console.log('updating active header')
      if (this.mdata.length != 0) {
        this.currentindex = this.filesidlist[this.mdata[this.cursorY][0]]
      }
      //console.log(this.currentindex)
    }
  },
  mounted() {
    this.cursorX = authservice.getCursorX()
    this.cursorY = authservice.getCursorY()
    this.sf = authservice.getSelectedFile()
    if (this.sf) {
      this.getdata(true)
      /* authservice.getBrologWithFilter(this.sf, null, this.hide_c).then(result => {
         console.log('AnNet mounted:')
         console.log(result)
	 var bdata = result.data["bdata"]
	 var maxH = result.data["maxHL"]
         var hh = result.data["headers"]
         authservice.brologdataraw = bdata
         this.brologdata = bdata
	 this.maxHL = maxH
         this.filesColumns = hh
         console.log("here comes the headers")
         console.log(this.filesColumns)
         this.mergedata()
         }) */
    }
    window.addEventListener('keydown', e => {
      /* console.log('key down')
      console.log(e) */
      if (
        e.key == 'ArrowDown' ||
        e.key == 'ArrowUp' ||
        e.key == 'ArrowLeft' ||
        e.key == 'ArrowRight' ||
        e.key == 'PageDown' ||
        e.key == 'PageUp'
      ) {
        if (e.key == 'PageDown') {
          this.cursorY < this.mdata.length - this.swsize * 2
            ? (this.cursorY = this.cursorY + this.swsize * 2)
            : (this.cursorY = this.mdata.length - 1)
        }
        if (e.key == 'PageUp') {
          this.cursorY = this.cursorY - this.swsize * 2
          if (this.cursorY < 0) this.cursorY = 0
        }
        if (e.key == 'ArrowDown') {
          this.cursorY < this.mdata.length - 1
            ? (this.cursorY = this.cursorY + 1)
            : true
        }
        if (e.key == 'ArrowUp') {
          if (this.cursorY > 0) this.cursorY = this.cursorY - 1
        }
        if (e.key == 'ArrowRight') {
          this.cursorX < this.maxHL ? this.cursorX++ : true
        }
        if (e.key == 'ArrowLeft') {
          if (this.cursorX > 0) this.cursorX = this.cursorX - 1
        }
        authservice.setCursorX(this.cursorX)
        authservice.setCursorY(this.cursorY)
        e.preventDefault()
        if (
          e.key == 'ArrowDown' ||
          e.key == 'ArrowUp' ||
          e.key == 'PageDown' ||
          e.key == 'PageUp'
        ) {
          this.updateActiveHeader()
        }
        if (
          e.key =="ArrowLeft" ||
          e.key =="ArrowRight"
        ) {
          this.scrollHorizontal()
        }
      }
    })
    //console.log('Calling updateActiveHeader()...')
    this.updateActiveHeader()
    //console.log('Getting divsize from authservice...')
    this.reloadL()
    //console.log('Finished mount()...')
  }
}
</script>

<style></style>
