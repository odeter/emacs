import platform    # For getting the operating system name
# import subprocess  # For executing a shell command
from subprocess import Popen, PIPE
import itertools
import sys
import time
from threading import Thread
import textwrap
import re
import pprint
import os
import requests
import json

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

website = 'http://localhost:5000/'
password = 'ez6457ErEcNpT97CCgv'
name = 'maltester_1'
mal_api = '29ca91842b9022a56cea37b6828915d8a36cc1963f5fa5f2970739878961eccb94bc64cf9b253d91'

ip_res = {}

done = False
def animate():
    for c in itertools.cycle(['|', '/', '-', '\\']):
        if done:
            break
        sys.stdout.write('\rWaiting ' + c)
        sys.stdout.flush()
        time.sleep(0.1)
    sys.stdout.write('\rWaiting - Done\n')

def startWait():
    global done
    done = False
    t = Thread(target=animate)
    t.start()
    return t

def stopWait(t):
    global done
    done = True
    t.join()


file_res = {}

def sendresult(file_name):
    global website
    global name
    with open(file_name, 'rb') as f:
        try:
            r = requests.post(website+'resultfilereceive',
                              files={'file': f}, data={'password' : password, 'name' : name})
            res = json.loads(r.text)
            response = [str(r.status_code) + " - "+ res['message'], True]
        except requests.exceptions.RequestException as e:
            response = [e.response, False]
    return response

def readiplist(file_name):
    with open(file_name) as f:
        lines = f.read().splitlines()

    return lines[:10]

def filePost(file_name):
    global website
    with open(file_name, 'rb') as f:
        try:
            r = requests.post(website+'testfilereceive',
                              files={'file': f}, data={'password' : password})
            res = json.loads(r.text)
            file_res[file_name] = [str(r.status_code) + " - "+ res['message'], True, file_name]
        except requests.exceptions.RequestException as e:
            file_res[file_name] = [e.response, False, file_name]

def ping(host, index):

    # Option for the number of packets as a function of
    param = '-n' if platform.system().lower()=='windows' else '-c'

    # Building the command. Ex: "ping -c 1 google.com"
    command = ['ping', param, '1', host]

    #ss = subprocess.call(command) == 0
    p = Popen(command, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    output, err = p.communicate(b"input data that is passed to subprocess' stdin")
    rc = p.returncode
    if rc == 0:
        dd = (output.decode("utf-8"))[:-1]
        message = (re.sub('\n---[^>]+---\n', '', dd)).replace('\n', ' | ')
        ip_res[index] = [message, True, host]
    else:
        dd = (err.decode("utf-8"))[:-1]
        message = (re.sub('\n---[^>]+---\n', '', dd)).replace('\n', ' | ')
        ip_res[index] = [message, False, host]

def writeToFile(item, f):
    user = item[2]
    message = ""
    if item[0]:
        message = user +" : " + item[0] + "\n"
    else:
        message = user +" : " + "No response\n"
    f.write(message)

def prettyPrint(item, max_len):
    user = item[2]
    prefix = user +" "*(max_len - len(user)) + " : "
    preferredWidth = 90
    wrapper = textwrap.TextWrapper(initial_indent=prefix, width=preferredWidth,
                                   subsequent_indent=' '*len(prefix))
    if item[0]:
        message = item[0]
    else:
        message = "No response"

    if item[1]:
        print (bcolors.OKGREEN + wrapper.fill(message) + bcolors.ENDC)
    else:
        print (bcolors.FAIL + wrapper.fill(message) + bcolors.ENDC)


def main():

    f = open("results.txt", 'w')
    global done
    pp = pprint.PrettyPrinter(indent=4, compact=True)
    ip_list = readiplist('ip_list.txt')
    pp.pprint(ip_list)
    max_len =  len(max(ip_list, key=len))
    threads = []
    print(" -- ping test -- ")
    print("Getting Ping results...")
    tt = startWait()

    for i in range(len(ip_list)):
        process = Thread(target=ping, args=[ip_list[i], i])
        process.start()
        threads.append(process)

    for process in threads:
        process.join()

    stopWait(tt)

    print("Ping Results:\n")
    f.write("Ping Resulst:\n")
    for i in ip_res.values():
        prettyPrint(i, max_len)
        writeToFile(i, f)
    print(" -- File Transfer test -- ")

    files = [['file_1mb', 1048576], ['file_10mb', 10485760], ['file_100mb', 104857600]]
    max_len =  len(max([t[0] for t in files], key=len))
    f.write("\n")
    print("Writing Files...")

    tt = startWait()

    for i in files:
        with open(i[0], 'wb') as fout:
            fout.write(os.urandom(i[1]))


    stopWait(tt)

    print("Sending Files...")

    tt = startWait()

    for i in files:
        process = Thread(target=filePost, args=[i[0]])
        process.start()
        threads.append(process)

    for process in threads:
        process.join()

    stopWait(tt)
    print("File Results Writing...")
    tt = startWait()
    f.write("File Results:\n")
    for i in file_res.values():
        prettyPrint(i, max_len)
        writeToFile(i, f)

    f.close()
    stopWait(tt)

    print("Send Result file...")
    tt = startWait()

    res = sendresult("results.txt")
    if res[1]:
        print("File Succesfully send - "+res[0])
    else:
        print("File could not be send - error: " + res[0])

    stopWait(tt)


    print("Cleanup...")
    tt = startWait()
    for i in files:
        os.remove(i[0])

    stopWait(tt)

if __name__ == "__main__":
    getbadiplist()
    #main()
