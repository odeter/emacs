export default {
  methods: {
    filtertostring(filter) {
      const idxobj = { i: 0 }
      const filList = (this.filtertotextlist(filter, idxobj, false)).map(x => x.value)
      return filList.join(' ')
    },
    filtertotextlist(filt, idxobj, setcurfil = true) {
      if (setcurfil) {
        if (this.filtercursordetail == idxobj['i']) {
          this.currentsubfilter = filt
        }
      }

      let result = []
      if (Object.keys(filt).length == 0) {
        result.push({ value: 'empty', index: idxobj['i'] })
        idxobj['i'] = idxobj['i'] + 1
      }
      if (
        'condition' in filt &&
        (filt['condition'] == 'and' || filt['condition'] == 'or')
      ) {
        const andidx = idxobj['i']
        idxobj['i'] = idxobj['i'] + 1
        result.push({ value: '(', index: andidx })
        let firstand = true
        for (let index = 0; index < filt['rules'].length; index++) {
          if (firstand) {
            firstand = false
          }
          else {
            if (filt['condition'] == 'or') {
              result.push({ value: 'OR', index: andidx })
            }
            else {
              result.push({ value: 'AND', index: andidx })
            }
          }
          result = result.concat(
            this.filtertotextlist(filt['rules'][index], idxobj, setcurfil)
          )
        }
        result.push({ value: ')', index: andidx })
      }
      if ('condition' in filt && filt['condition'] == 'not') {
        const notidx = idxobj['i']
        idxobj['i'] = idxobj['i'] + 1
        result.push({ value: 'NOT(', index: notidx })
        result = result.concat(this.filtertotextlist(filt['rule'], idxobj, setcurfil))
        result.push({ value: ')', index: notidx })
      }
      if (
        'condition' in filt &&
        (filt['condition'] == 'subcountmin' ||
         filt['condition'] == 'subcountmax')
      ) {
        const subcountidx = idxobj['i']
        let sctype = 'MIN'
        if (filt['condition'] == 'subcountmax') {
          sctype = 'MAX'
        }
        idxobj['i'] = idxobj['i'] + 1
        result.push({
          value:
          'SUBCOUNT' +
          sctype +
          '(' +
          filt['subtype'] +
          ',' +
          filt['subcount'] +
          ')',
          index: subcountidx
        })
      }
      if ('operator' in filt) {
        // switch over operators
        if (this.operator_list.includes(filt['operator'])) {
          result.push({
            value: filt['field'] + ' ' + filt['operator'] + ' ' + filt['value'],
            index: idxobj['i']
          })
          idxobj['i'] = idxobj['i'] + 1
        }
      }
      return result
    },
  }
}
