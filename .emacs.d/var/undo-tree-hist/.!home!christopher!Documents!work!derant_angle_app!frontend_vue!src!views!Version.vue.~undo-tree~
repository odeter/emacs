(undo-tree-save-format-version . 1)
"46e94fb65e8facf0d50880cb5a9c35dbf7e7ffcc"
[nil nil nil nil (25331 42012 646871 321000) 0 nil]
([nil nil ((1109 . 1111) (#("(" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . -1109) (1109 . 1110) (t 25232 37438 639103 887000)) nil (25331 42012 646869 138000) 0 nil])
([nil nil ((#(")" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . 1110)) nil (25331 42012 646866 698000) 0 nil])
([nil nil ((1119 . 1125)) nil (25331 42012 646864 898000) 0 nil])
([nil nil ((#("c" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1171) (undo-tree-id0 . -1) (#("h" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1172) (undo-tree-id1 . -1) (#("a" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1173) (undo-tree-id2 . -1) (#("n" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1174) (undo-tree-id3 . -1) (#("g" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1175) (undo-tree-id4 . -1) (#("e" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1176) (undo-tree-id5 . -1) (#("l" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1177) (undo-tree-id6 . -1) (#("o" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1178) (undo-tree-id7 . -1) (#("g" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1179) (undo-tree-id8 . -1) 1180) nil (25331 42012 646860 497000) 0 nil])
([nil nil ((1171 . 1174)) nil (25331 42012 646825 939000) 0 nil])
([nil nil ((395 . 398) (t 25331 42012 649587 172000)) nil (25331 42527 624144 477000) 0 nil])
([nil nil ((#("a" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -397) (undo-tree-id9 . -1) (undo-tree-id10 . -1) 398) nil (25331 42527 624141 148000) 0 nil])
([nil nil ((397 . 400)) nil (25331 42527 624110 503000) 0 nil])
([nil nil ((400 . 403) (t 25331 42527 658791 864000)) nil (25331 42549 969589 974000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -395) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("m" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -396) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#("r" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -397) (undo-tree-id15 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -398) (undo-tree-id16 . -1) (#("8" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -399) (undo-tree-id17 . -1) (#(" " 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -400) (undo-tree-id18 . -1) (#("m" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -401) (undo-tree-id19 . -1) (#("r" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -402) (undo-tree-id20 . -1) 403) nil (25331 42549 969585 524000) 0 nil])
([nil nil ((395 . 402)) nil (25331 42549 969562 297000) 0 nil])
([nil nil ((402 . 405)) nil (25331 42549 969555 6000) 0 nil])
([nil nil ((308 . 317) (t 25331 42550 7018 689000)) nil (25331 42640 169453 675000) 0 nil])
([nil nil ((317 . 324)) nil (25331 42640 169452 247000) 0 nil])
([nil nil ((#(" " 0 1 (tag-name "v-card" tag-type start)) . -323) (undo-tree-id25 . -1) 324) nil (25331 42640 169450 695000) 0 nil])
([nil nil ((476 . 478) (469 . 478)) nil (25331 42640 169448 17000) 0 nil])
([nil nil ((#("g" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -477) (undo-tree-id24 . -1) 478) nil (25331 42640 169446 115000) 0 nil])
([nil nil ((477 . 498)) nil (25331 42640 169442 717000) 0 nil])
([nil nil ((498 . 501)) nil (25331 42640 169441 233000) 0 nil])
([nil nil ((#("M" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -499) (undo-tree-id22 . -1) (#(" " 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -500) (undo-tree-id23 . -1) 501) nil (25331 42640 169438 606000) 0 nil])
([nil nil ((499 . 500)) nil (25331 42640 169432 628000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -499) (undo-tree-id21 . -1) 500) nil (25331 42640 169427 378000) 0 nil])
([nil nil ((443 . 445) (t 25331 42640 203934 667000)) nil (25331 42836 976881 428000) 0 nil])
([nil nil ((#("a" 0 1 (tag-attr-beg 0 tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -444) (undo-tree-id42 . -1) 445) nil (25331 42836 976879 674000) 0 nil])
([nil nil ((444 . 460)) nil (25331 42836 976876 971000) 0 nil])
([nil nil ((#("b" 0 1 (tag-attr-beg 0 tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -444) (undo-tree-id26 . -1) (#("a" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -445) (undo-tree-id27 . -1) (#("c" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -446) (undo-tree-id28 . -1) (#("k" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -447) (undo-tree-id29 . -1) (#("g" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -448) (undo-tree-id30 . -1) (#("r" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -449) (undo-tree-id31 . -1) (#("o" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -450) (undo-tree-id32 . -1) (#("u" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -451) (undo-tree-id33 . -1) (#("n" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -452) (undo-tree-id34 . -1) (#("d" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -453) (undo-tree-id35 . -1) (#("-" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -454) (undo-tree-id36 . -1) (#("c" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -455) (undo-tree-id37 . -1) (#("o" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -456) (undo-tree-id38 . -1) (#("l" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -457) (undo-tree-id39 . -1) (#("o" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -458) (undo-tree-id40 . -1) (#("r" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -459) (undo-tree-id41 . -1) 460) nil (25331 42842 844061 9000) 0 nil])
([nil nil ((#("
        <v-container >" 9 10 (tag-name "v-container" tag-type start tag-beg 18 font-lock-face web-mode-html-tag-bracket-face) 10 21 (tag-name "v-container" tag-type start font-lock-face web-mode-html-tag-custom-face) 21 22 (tag-name "v-container" tag-type start) 22 23 (tag-name "v-container" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 422) (undo-tree-id47 . -23) (undo-tree-id48 . -1) (undo-tree-id49 . -23) (undo-tree-id50 . -21) (undo-tree-id51 . -22) (undo-tree-id52 . -23)) nil (25331 42885 397673 213000) 0 nil] [nil nil ((nil rear-nonsticky nil 474 . 475) (nil tag-attr t 474 . 475) (nil tag-attr-end 5 474 . 475) (nil tag-name "v-container" 474 . 475) (nil tag-type start 474 . 475) (nil font-lock-face web-mode-html-attr-value-face 474 . 475) (nil tag-attr t 450 . 474) (nil tag-name "v-container" 450 . 474) (nil tag-type start 450 . 474) (nil font-lock-face web-mode-html-attr-value-face 450 . 474) (nil tag-attr t 449 . 450) (nil tag-name "v-container" 449 . 450) (nil tag-type start 449 . 450) (nil font-lock-face web-mode-html-attr-equal-face 449 . 450) (nil tag-attr t 445 . 449) (nil tag-name "v-container" 445 . 449) (nil tag-type start 445 . 449) (nil font-lock-face web-mode-html-attr-name-face 445 . 449) (nil tag-attr-beg 0 444 . 445) (nil tag-attr t 444 . 445) (nil tag-name "v-container" 444 . 445) (nil tag-type start 444 . 445) (nil font-lock-face web-mode-html-attr-name-face 444 . 445) (444 . 475)) ((#("style=\"background-color: blue;\"" 0 1 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 1 5 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 5 6 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-equal-face) 6 30 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 30 31 (rear-nonsticky nil tag-attr t tag-attr-end 5 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . 444) (undo-tree-id43 . -31) (nil tag-name "v-container" 444 . 445) (nil tag-name "v-container" 445 . 449) (nil tag-name "v-container" 449 . 450) (nil tag-name "v-container" 450 . 474) (nil tag-name "v-container" 474 . 475) (nil rear-nonsticky t 474 . 475) (t 25331 42837 21935 791000)) (25331 42836 976831 960000) 0 nil])
([nil nil ((#("
        </v-container>" 9 10 (tag-name "v-container" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 10 11 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-bracket-face) 11 22 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-custom-face) 22 23 (tag-name "v-container" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 1721) (undo-tree-id44 . -23) (undo-tree-id45 . -1) (undo-tree-id46 . -23)) nil (25331 42885 397663 858000) 0 nil])
nil
([nil nil (("  " . -1604) ("    " . -1585) ("    " . -1564) ("    " . -1547) ("    " . -1474) ("    " . -1453) (#("    " 0 4 (tag-name "v-chip" tag-type start)) . -1413) (#("    " 0 4 (tag-name "v-chip" tag-type start)) . -1380) (#("    " 0 4 (tag-name "v-chip" tag-type start)) . -1329) (#("    " 0 4 (tag-name "v-chip" tag-type start)) . -1285) (#("    " 0 4 (tag-name "v-chip" tag-type start)) . -1263) ("    " . -1239) ("    " . -1207) (#("    " 0 4 (tag-name "v-row" tag-type start)) . -1193) (#("    " 0 4 (tag-name "v-row" tag-type start)) . -1157) (#("    " 0 4 (tag-name "v-row" tag-type start)) . -1134) (#("    " 0 4 (tag-name "v-row" tag-type start)) . -1075) ("    " . -1056) ("    " . -1037) ("    " . -930) ("    " . -828) ("    " . -787) ("    " . -763) ("    " . -741) ("    " . -656) ("    " . -626) ("    " . -548) ("    " . -415) (#("  " 0 2 (tag-name "v-card" tag-type start)) . -385) (#("  " 0 2 (tag-name "v-card" tag-type start)) . -356) (#("  " 0 2 (tag-name "v-card" tag-type start)) . -322) (#("  " 0 2 (tag-name "v-card" tag-type start)) . -309) (#("  " 0 2 (tag-name "v-card" tag-type start)) . -298) (#("  " 0 2 (tag-name "v-card" tag-type start)) . -283) ("  " . -269) 249) nil (25331 42885 397639 153000) 0 nil])
([nil nil ((#("
      <v-divider></v-divider>" 7 8 (tag-name "v-divider" tag-type start tag-beg 18 font-lock-face web-mode-html-tag-bracket-face) 8 17 (tag-name "v-divider" tag-type start font-lock-face web-mode-html-tag-custom-face) 17 18 (tag-name "v-divider" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 18 19 (tag-name "v-divider" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 19 20 (tag-name "v-divider" tag-type end font-lock-face web-mode-html-tag-bracket-face) 20 29 (tag-name "v-divider" tag-type end font-lock-face web-mode-html-tag-custom-face) 29 30 (tag-name "v-divider" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 619) (undo-tree-id53 . -30) (undo-tree-id54 . -1) (undo-tree-id55 . -30) (t 25331 42885 434428 435000)) nil (25331 42914 923726 806000) 0 nil])
([nil nil ((626 . 713) (#("<v-card-title class=\"text-left\">{{ $t(\"VersionPage.changes\") }}</v-card-title>" 0 1 (tag-name "v-card-title" tag-type start tag-beg 19 font-lock-face web-mode-html-tag-bracket-face) 1 13 (tag-name "v-card-title" tag-type start font-lock-face web-mode-html-tag-custom-face) 13 14 (tag-name "v-card-title" tag-type start) 14 15 (tag-attr-beg 0 tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-name-face) 15 19 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-name-face) 19 20 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-equal-face) 20 30 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face) 30 31 (tag-attr t tag-attr-end 5 tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face) 31 32 (tag-name "v-card-title" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 32 33 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 33 34 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 34 36 (block-side t) 36 37 (block-side t face web-mode-variable-name-face) 37 38 (block-side t face (rainbow-delimiters-depth-3-face)) 38 39 (block-side t) 39 40 (block-side t face web-mode-variable-name-face) 40 41 (block-side t face web-mode-variable-name-face) 41 42 (block-side t face web-mode-variable-name-face) 42 43 (block-side t face web-mode-variable-name-face) 43 44 (block-side t face web-mode-variable-name-face) 44 45 (block-side t face web-mode-variable-name-face) 45 46 (block-side t face web-mode-variable-name-face) 46 47 (block-side t face web-mode-variable-name-face) 47 48 (block-side t face web-mode-variable-name-face) 48 49 (block-side t face web-mode-variable-name-face) 49 50 (block-side t face web-mode-variable-name-face) 50 51 (block-side t) 51 52 (block-side t face web-mode-variable-name-face) 52 53 (block-side t face web-mode-variable-name-face) 53 54 (block-side t face web-mode-variable-name-face) 54 55 (block-side t face web-mode-variable-name-face) 55 56 (block-side t face web-mode-variable-name-face) 56 57 (block-side t face web-mode-variable-name-face) 57 58 (block-side t face web-mode-variable-name-face) 58 59 (block-side t) 59 60 (block-side t face (rainbow-delimiters-depth-3-face)) 60 61 (block-side t) 61 62 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 62 63 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 63 64 (tag-name "v-card-title" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 64 65 (tag-name "v-card-title" tag-type end font-lock-face web-mode-html-tag-bracket-face) 65 77 (tag-name "v-card-title" tag-type end font-lock-face web-mode-html-tag-custom-face) 77 78 (tag-name "v-card-title" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 626) (undo-tree-id56 . -78) (undo-tree-id57 . -78) (t 25331 42914 962728 979000)) nil (25331 42942 264206 902000) 0 nil])
([nil nil ((468 . 470) (t 25331 42942 307007 342000)) nil (25331 42953 66313 803000) 0 nil])
([nil nil ((470 . 472)) nil (25331 42953 66312 216000) 0 nil])
([nil nil ((#("1" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -471) (undo-tree-id59 . -1) 472) nil (25331 42953 66310 657000) 0 nil])
([nil nil ((471 . 472)) nil (25331 42953 66306 983000) 0 nil])
([nil nil ((#("5" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -471) (undo-tree-id58 . -1) 472) nil (25331 42953 66304 120000) 0 nil])
([nil nil ((471 . 472)) nil (25331 42953 66288 91000) 0 nil])
([nil nil ((#("m" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -468) (undo-tree-id76 . -1) (#("b" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -469) (undo-tree-id77 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -470) (undo-tree-id78 . -1) (#("4" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -471) (undo-tree-id79 . -1) 472 (t 25331 42953 103122 438000)) nil (25331 42963 693106 609000) 0 nil])
([nil nil ((468 . 470)) nil (25331 42963 693099 686000) 0 nil])
([nil nil ((#("a" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -469) (undo-tree-id75 . -1) 470) nil (25331 42963 693098 266000) 0 nil])
([nil nil ((469 . 471)) nil (25331 42963 693095 809000) 0 nil])
([nil nil ((#("v" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -469) (undo-tree-id73 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -470) (undo-tree-id74 . -1) 471) nil (25331 42963 693094 131000) 0 nil])
([nil nil ((469 . 471)) nil (25331 42963 693090 124000) 0 nil])
([nil nil ((#("v" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -470) (undo-tree-id72 . -1) 471) nil (25331 42963 693088 745000) 0 nil])
([nil nil ((470 . 473)) nil (25331 42963 693085 906000) 0 nil])
([nil nil ((#("5" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -471) (undo-tree-id70 . -1) (#(" " 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -472) (undo-tree-id71 . -1) 473) nil (25331 42963 693084 52000) 0 nil])
([nil nil ((471 . 473)) nil (25331 42963 695977 126000) 0 nil])
([nil nil ((#("p" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -468) (undo-tree-id83 . -1) (#("b" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -469) (undo-tree-id84 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -470) (undo-tree-id85 . -1) (#("4" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -471) (undo-tree-id86 . -1) (#(" " 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -472) (undo-tree-id87 . -1) 473) nil (25331 42977 687316 788000) 0 nil] [nil nil ((#("\"" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -467) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#("p" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -468) (undo-tree-id65 . -1) (#("b" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -469) (undo-tree-id66 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -470) (undo-tree-id67 . -1) (#("4" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -471) (undo-tree-id68 . -1) (#(" " 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -472) (undo-tree-id69 . -1) 473) ((467 . 473)) (25331 42963 693071 948000) 0 nil])
([nil nil ((572 . 574)) nil (25331 42977 687308 165000) 0 nil])
nil
([nil nil ((574 . 575)) nil (25331 42977 687306 806000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . -574) (undo-tree-id82 . -1) 575) nil (25331 42977 687305 50000) 0 nil])
([nil nil ((574 . 577)) nil (25331 42977 687301 441000) 0 nil])
([nil nil ((#("5" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . -575) (undo-tree-id80 . -1) (#("4" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . -576) (undo-tree-id81 . -1) 577) nil (25331 42977 687298 299000) 0 nil])
([nil nil ((575 . 577)) nil (25331 42977 687280 116000) 0 nil])
([nil nil ((#("p" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . -572) (undo-tree-id88 . -1) (#("b" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . -573) (undo-tree-id89 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . -574) (undo-tree-id90 . -1) (#("4" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . -575) (undo-tree-id91 . -1) (#(" " 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . -576) (undo-tree-id92 . -1) 577 (t 25331 42977 731480 618000)) nil (25331 43002 28562 69000) 0 nil])
([nil nil ((581 . 583)) nil (25331 43008 278600 228000) 0 nil] [nil nil ((468 . 474)) ((#("mb-10 " 0 6 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . 468) (undo-tree-id93 . -6) (t 25331 42997 247761 279000)) (25331 42997 210482 34000) 0 nil])
([nil nil ((#("m" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . -581) (undo-tree-id94 . -1) (#("a" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . -582) (undo-tree-id95 . -1) 583) nil (25331 43008 278597 113000) 0 nil])
nil
([nil nil ((581 . 587)) nil (25331 43008 278579 963000) 0 nil])
([nil nil ((#("m" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . -582) (undo-tree-id101 . -1) (#("b" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . -583) (undo-tree-id102 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . -584) (undo-tree-id103 . -1) (#("1" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . -585) (undo-tree-id104 . -1) (#("0" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . -586) (undo-tree-id105 . -1) 587 (t 25331 43008 315919 248000)) nil (25331 43014 460863 832000) 0 nil])
([nil nil ((582 . 585)) nil (25331 43014 460804 620000) 0 nil])
([nil nil ((#("a" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . -583) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . -584) (undo-tree-id100 . -1) 585) nil (25331 43014 460802 863000) 0 nil])
([nil nil ((583 . 585)) nil (25331 43014 460796 587000) 0 nil])
([nil nil ((#("v" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . -583) (undo-tree-id96 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . -584) (undo-tree-id97 . -1) 585) nil (25331 43014 460793 745000) 0 nil])
([nil nil ((583 . 587)) nil (25331 43014 460775 746000) 0 nil])
([nil nil ((#("blue" 0 4 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . 454) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (t 25331 43014 492007 26000)) nil (25331 43082 646837 687000) 0 nil])
([nil nil ((nil rear-nonsticky nil 460 . 461) (nil tag-attr t 454 . 461) (nil tag-name "v-card-title" 454 . 461) (nil tag-type start 454 . 461) (nil font-lock-face web-mode-html-attr-value-face 454 . 461) (454 . 461)) nil (25331 43082 646820 301000) 0 nil])
([nil nil ((471 . 483) (t 25331 43082 684959 592000)) nil (25331 43115 852613 780000) 0 nil])
([nil nil ((602 . 603) (t 25331 43115 885413 58000)) nil (25331 43126 578580 925000) 0 nil])
([nil nil ((nil rear-nonsticky nil 613 . 614) (nil tag-attr t 603 . 614) (nil tag-name "v-card-subtitle" 603 . 614) (nil tag-type start 603 . 614) (nil font-lock-face web-mode-html-attr-value-face 603 . 614) (603 . 614)) nil (25331 43126 578573 67000) 0 nil])
([nil nil ((408 . 415) (t 25331 43126 613558 251000)) nil (25331 43217 952627 996000) 0 nil])
([nil nil ((420 . 421) (415 . 426)) nil (25331 43217 952626 502000) 0 nil])
([nil nil ((" " . -420) (undo-tree-id130 . -1) 421) nil (25331 43217 952624 893000) 0 nil])
([nil nil ((421 . 429) (422 . 428) (#("        " 0 8 (face whitespace-trailing)) . 421) (421 . 429) (421 . 422) ("      " . 421) (420 . 427)) nil (25331 43217 952621 582000) 0 nil])
([nil nil ((#("      <v-card-title style=\"background-color: #1976D2;\" class=\"white--text text-left font-weight-bold\">Version: {{ version.version }}</v-card-title>
" 6 7 (tag-name "v-card-title" tag-type start tag-beg 19 font-lock-face web-mode-html-tag-bracket-face) 7 19 (tag-name "v-card-title" tag-type start font-lock-face web-mode-html-tag-custom-face) 19 20 (tag-name "v-card-title" tag-type start) 20 21 (tag-attr-beg 0 tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-name-face) 21 25 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-name-face) 25 26 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-equal-face) 26 45 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face) 45 51 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face) 51 52 (rear-nonsticky t tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face) 52 53 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face) 53 54 (tag-attr t tag-attr-end 5 tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face) 54 55 (tag-name "v-card-title" tag-type start) 55 56 (tag-attr-beg 0 tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-name-face) 56 60 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-name-face) 60 61 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-equal-face) 61 74 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face) 74 82 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face) 82 83 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face) 83 84 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face) 84 85 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face) 85 100 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face) 100 101 (tag-attr t tag-attr-end 5 tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face) 101 102 (tag-name "v-card-title" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 111 112 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 112 113 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 113 114 (block-side t) 114 115 (block-side t face web-mode-variable-name-face) 115 116 (block-side t face web-mode-variable-name-face) 116 117 (block-side t face web-mode-variable-name-face) 117 118 (block-side t face web-mode-variable-name-face) 118 119 (block-side t face web-mode-variable-name-face) 119 120 (block-side t face web-mode-variable-name-face) 120 121 (block-side t face web-mode-variable-name-face) 121 122 (block-side t) 122 123 (block-side t face web-mode-variable-name-face) 123 124 (block-side t face web-mode-variable-name-face) 124 125 (block-side t face web-mode-variable-name-face) 125 126 (block-side t face web-mode-variable-name-face) 126 127 (block-side t face web-mode-variable-name-face) 127 128 (block-side t face web-mode-variable-name-face) 128 129 (block-side t face web-mode-variable-name-face) 129 130 (block-side t) 130 131 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 131 132 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 132 133 (tag-name "v-card-title" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 133 134 (tag-name "v-card-title" tag-type end font-lock-face web-mode-html-tag-bracket-face) 134 146 (tag-name "v-card-title" tag-type end font-lock-face web-mode-html-tag-custom-face) 146 147 (tag-name "v-card-title" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 591) (undo-tree-id125 . -54) (undo-tree-id126 . -45) (undo-tree-id127 . -45) (undo-tree-id128 . -73) (578 . 591) (#("      </div>
" 6 7 (tag-name "div" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 7 8 (tag-name "div" tag-type end font-lock-face web-mode-html-tag-bracket-face) 8 11 (tag-name "div" tag-type end font-lock-face web-mode-html-tag-face) 11 12 (tag-name "div" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 430) (undo-tree-id129 . -8) (443 . 591) 438) nil (25331 43217 952618 282000) 0 nil])
([nil nil ((#("      <v-card-subtitle class=\"text-left pb-10 white--text\">{{ version.date }}</v-card-subtitle>
" 6 7 (tag-name "v-card-subtitle" tag-type start tag-beg 19 font-lock-face web-mode-html-tag-bracket-face) 7 22 (tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-tag-custom-face) 22 23 (tag-name "v-card-subtitle" tag-type start) 23 24 (tag-attr-beg 0 tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-name-face) 24 28 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-name-face) 28 29 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-equal-face) 29 46 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face) 46 56 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face) 56 57 (rear-nonsticky t tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face) 57 58 (tag-attr t tag-attr-end 5 tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face) 58 59 (tag-name "v-card-subtitle" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 59 60 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 60 61 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 61 62 (block-side t) 62 63 (block-side t face web-mode-variable-name-face) 63 64 (block-side t face web-mode-variable-name-face) 64 65 (block-side t face web-mode-variable-name-face) 65 66 (block-side t face web-mode-variable-name-face) 66 67 (block-side t face web-mode-variable-name-face) 67 68 (block-side t face web-mode-variable-name-face) 68 69 (block-side t face web-mode-variable-name-face) 69 70 (block-side t) 70 71 (block-side t face web-mode-variable-name-face) 71 72 (block-side t face web-mode-variable-name-face) 72 73 (block-side t face web-mode-variable-name-face) 73 74 (block-side t face web-mode-variable-name-face) 74 75 (block-side t) 75 76 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 76 77 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 77 78 (tag-name "v-card-subtitle" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 78 79 (tag-name "v-card-subtitle" tag-type end font-lock-face web-mode-html-tag-bracket-face) 79 94 (tag-name "v-card-subtitle" tag-type end font-lock-face web-mode-html-tag-custom-face) 94 95 (tag-name "v-card-subtitle" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 687) (undo-tree-id121 . -46) (undo-tree-id122 . -95) (undo-tree-id123 . -41) (674 . 687) (#("      </div>
" 6 7 (tag-name "div" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 7 8 (tag-name "div" tag-type end font-lock-face web-mode-html-tag-bracket-face) 8 11 (tag-name "div" tag-type end font-lock-face web-mode-html-tag-face) 11 12 (tag-name "div" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 578) (undo-tree-id124 . -8) (591 . 687) 586) nil (25331 43217 952609 861000) 0 nil])
([nil nil ((#("      <!-- <v-card-title class=\"text-left\">{{ $t(\"VersionPage.changes\") }}</v-card-title> -->
" 6 7 (tag-type comment tag-beg 0 font-lock-face web-mode-comment-face) 7 43 (tag-type comment font-lock-face web-mode-comment-face) 43 44 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg tag-type comment font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 44 45 (block-side t block-token delimiter-beg tag-type comment font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 45 47 (block-side t tag-type comment) 47 48 (block-side t tag-type comment face web-mode-variable-name-face) 48 49 (block-side t tag-type comment face (rainbow-delimiters-depth-3-face)) 49 50 (block-side t tag-type comment) 50 51 (block-side t tag-type comment face web-mode-variable-name-face) 51 52 (block-side t tag-type comment face web-mode-variable-name-face) 52 53 (block-side t tag-type comment face web-mode-variable-name-face) 53 54 (block-side t tag-type comment face web-mode-variable-name-face) 54 55 (block-side t tag-type comment face web-mode-variable-name-face) 55 56 (block-side t tag-type comment face web-mode-variable-name-face) 56 57 (block-side t tag-type comment face web-mode-variable-name-face) 57 58 (block-side t tag-type comment face web-mode-variable-name-face) 58 59 (block-side t tag-type comment face web-mode-variable-name-face) 59 60 (block-side t tag-type comment face web-mode-variable-name-face) 60 61 (block-side t tag-type comment face web-mode-variable-name-face) 61 62 (block-side t tag-type comment) 62 63 (block-side t tag-type comment face web-mode-variable-name-face) 63 64 (block-side t tag-type comment face web-mode-variable-name-face) 64 65 (block-side t tag-type comment face web-mode-variable-name-face) 65 66 (block-side t tag-type comment face web-mode-variable-name-face) 66 67 (block-side t tag-type comment face web-mode-variable-name-face) 67 68 (block-side t tag-type comment face web-mode-variable-name-face) 68 69 (block-side t tag-type comment face web-mode-variable-name-face) 69 70 (block-side t tag-type comment) 70 71 (block-side t tag-type comment face (rainbow-delimiters-depth-3-face)) 71 72 (block-side t tag-type comment) 72 73 (block-side t block-token delimiter-end tag-type comment font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 73 74 (block-side t block-end t block-token delimiter-end tag-type comment font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 74 92 (tag-type comment font-lock-face web-mode-comment-face) 92 93 (tag-type comment tag-end t font-lock-face web-mode-comment-face)) . 781) (undo-tree-id118 . -6) (undo-tree-id119 . -6) (768 . 781) (#("      </div>
" 6 7 (tag-name "div" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 7 8 (tag-name "div" tag-type end font-lock-face web-mode-html-tag-bracket-face) 8 11 (tag-name "div" tag-type end font-lock-face web-mode-html-tag-face) 11 12 (tag-name "div" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 674) (undo-tree-id120 . -8) (687 . 781) 682) nil (25331 43217 952602 868000) 0 nil])
([nil nil ((#("      </div>
" 6 7 (tag-name "div" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 7 8 (tag-name "div" tag-type end font-lock-face web-mode-html-tag-bracket-face) 8 11 (tag-name "div" tag-type end font-lock-face web-mode-html-tag-face) 11 12 (tag-name "div" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 781) (undo-tree-id114 . -13) (undo-tree-id115 . -8) (undo-tree-id116 . -13) (undo-tree-id117 . -13) (687 . 781) (#("      <!-- <v-card-title class=\"text-left\">{{ $t(\"VersionPage.changes\") }}</v-card-title> -->
" 6 7 (tag-type comment tag-beg 0 font-lock-face web-mode-comment-face) 7 43 (tag-type comment font-lock-face web-mode-comment-face) 43 44 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg tag-type comment font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 44 45 (block-side t block-token delimiter-beg tag-type comment font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 45 47 (block-side t tag-type comment) 47 48 (block-side t tag-type comment face web-mode-variable-name-face) 48 49 (block-side t tag-type comment face (rainbow-delimiters-depth-3-face)) 49 50 (block-side t tag-type comment) 50 51 (block-side t tag-type comment face web-mode-variable-name-face) 51 52 (block-side t tag-type comment face web-mode-variable-name-face) 52 53 (block-side t tag-type comment face web-mode-variable-name-face) 53 54 (block-side t tag-type comment face web-mode-variable-name-face) 54 55 (block-side t tag-type comment face web-mode-variable-name-face) 55 56 (block-side t tag-type comment face web-mode-variable-name-face) 56 57 (block-side t tag-type comment face web-mode-variable-name-face) 57 58 (block-side t tag-type comment face web-mode-variable-name-face) 58 59 (block-side t tag-type comment face web-mode-variable-name-face) 59 60 (block-side t tag-type comment face web-mode-variable-name-face) 60 61 (block-side t tag-type comment face web-mode-variable-name-face) 61 62 (block-side t tag-type comment) 62 63 (block-side t tag-type comment face web-mode-variable-name-face) 63 64 (block-side t tag-type comment face web-mode-variable-name-face) 64 65 (block-side t tag-type comment face web-mode-variable-name-face) 65 66 (block-side t tag-type comment face web-mode-variable-name-face) 66 67 (block-side t tag-type comment face web-mode-variable-name-face) 67 68 (block-side t tag-type comment face web-mode-variable-name-face) 68 69 (block-side t tag-type comment face web-mode-variable-name-face) 69 70 (block-side t tag-type comment) 70 71 (block-side t tag-type comment face (rainbow-delimiters-depth-3-face)) 71 72 (block-side t tag-type comment) 72 73 (block-side t block-token delimiter-end tag-type comment font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 73 74 (block-side t block-end t block-token delimiter-end tag-type comment font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 74 92 (tag-type comment font-lock-face web-mode-comment-face) 92 93 (tag-type comment tag-end t font-lock-face web-mode-comment-face)) . 674) (768 . 781) 776) nil (25331 43217 952596 510000) 0 nil])
([nil nil ((#("style=\"background-color: #1976D2;\"" 0 1 (tag-attr-beg 0 tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-name-face) 1 5 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-name-face) 5 6 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-equal-face) 6 25 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face) 25 31 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face) 31 32 (rear-nonsticky t tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face) 32 33 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face) 33 34 (tag-attr t tag-attr-end 5 tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . 450) (undo-tree-id112 . -34) (undo-tree-id113 . -34)) nil (25331 43217 952589 374000) 0 nil])
([nil nil ((#(" " 0 1 (tag-name "v-card-title" tag-type start)) . -449) (undo-tree-id110 . -1) (undo-tree-id111 . -1) 450) nil (25331 43217 952585 255000) 0 nil])
([nil nil ((419 . 420)) nil (25331 43217 952580 948000) 0 nil])
([nil nil ((nil rear-nonsticky nil 453 . 454) (nil tag-attr t 453 . 454) (nil tag-attr-end 5 453 . 454) (nil tag-name "div" 453 . 454) (nil tag-type start 453 . 454) (nil font-lock-face web-mode-html-attr-value-face 453 . 454) (nil tag-attr t 452 . 453) (nil tag-name "div" 452 . 453) (nil tag-type start 452 . 453) (nil font-lock-face web-mode-html-attr-value-face 452 . 453) (nil rear-nonsticky t 451 . 452) (nil tag-attr t 451 . 452) (nil tag-name "div" 451 . 452) (nil tag-type start 451 . 452) (nil font-lock-face web-mode-html-attr-value-face 451 . 452) (nil tag-attr t 445 . 451) (nil tag-name "div" 445 . 451) (nil tag-type start 445 . 451) (nil font-lock-face web-mode-html-attr-value-face 445 . 451) (nil tag-attr t 426 . 445) (nil tag-name "div" 426 . 445) (nil tag-type start 426 . 445) (nil font-lock-face web-mode-html-attr-value-face 426 . 445) (nil tag-attr t 425 . 426) (nil tag-name "div" 425 . 426) (nil tag-type start 425 . 426) (nil font-lock-face web-mode-html-attr-equal-face 425 . 426) (nil tag-attr t 421 . 425) (nil tag-name "div" 421 . 425) (nil tag-type start 421 . 425) (nil font-lock-face web-mode-html-attr-name-face 421 . 425) (nil tag-attr-beg 0 420 . 421) (nil tag-attr t 420 . 421) (nil tag-name "div" 420 . 421) (nil tag-type start 420 . 421) (nil font-lock-face web-mode-html-attr-name-face 420 . 421) (420 . 454)) nil (25331 43217 952577 373000) 0 nil])
([nil nil (("
" . 464) (undo-tree-id108 . -1) (undo-tree-id109 . 1)) nil (25331 43217 952567 302000) 0 nil])
([nil nil (("      " . -464)) nil (25331 43217 952555 385000) 0 nil])
([nil nil ((571 . 579) ("      " . 571) 579) nil (25331 43217 952548 146000) 0 nil])
([nil nil ((485 . 492) (t 25331 43217 990770 624000)) nil (25331 43254 107593 572000) 0 nil])
([nil nil ((#("1" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -489) (undo-tree-id131 . -1) (#("0" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -490) (undo-tree-id132 . -1) (#(" " 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -491) (undo-tree-id133 . -1) 492) nil (25331 43254 107589 743000) 0 nil])
([nil nil ((489 . 491)) nil (25331 43254 107569 576000) 0 nil])
([nil nil ((491 . 496) (t 25331 43254 151239 424000)) nil (25331 43262 276894 867000) 0 nil])
([nil nil ((#("0" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -494) (undo-tree-id141 . -1) (#(" " 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -495) (undo-tree-id142 . -1) 496) nil (25331 43262 276892 878000) 0 nil])
([nil nil ((494 . 495)) nil (25331 43262 276889 184000) 0 nil])
([nil nil ((#("a" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -492) (undo-tree-id138 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -493) (undo-tree-id139 . -1) (#(" " 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -494) (undo-tree-id140 . -1) 495) nil (25331 43262 276887 229000) 0 nil])
([nil nil ((492 . 495)) nil (25331 43262 276881 651000) 0 nil])
([nil nil ((#("0" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -493) (undo-tree-id136 . -1) (#(" " 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -494) (undo-tree-id137 . -1) 495) nil (25331 43262 276879 952000) 0 nil])
([nil nil ((493 . 496)) nil (25331 43262 276875 114000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -494) (undo-tree-id134 . -1) (#("0" 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -495) (undo-tree-id135 . -1) 496) nil (25331 43262 276872 388000) 0 nil])
([nil nil ((494 . 495)) nil (25331 43262 276859 435000) 0 nil])
([nil nil ((495 . 496)) nil (25331 43262 276852 518000) 0 nil])
([nil nil ((#("mb-0 pb-0" 0 9 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . 486) (undo-tree-id145 . -9) (undo-tree-id146 . -9) (t 25331 43262 315344 477000)) nil (25331 43273 958605 900000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . -485) (undo-tree-id143 . -1) (undo-tree-id144 . -1) 486) nil (25331 43273 958601 239000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-card-title" tag-type start font-lock-face web-mode-html-attr-value-face)) . 485)) nil (25331 43273 958588 846000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . 613) (#("0" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . 613) (#("1" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . 613) (#("-" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . 613) (#("b" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . 613) (#("p" 0 1 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face)) . 613)) nil (25331 43576 415577 928000) 0 nil])
([nil nil ((#("4" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -395) (undo-tree-id161 . -1) 396) nil (25331 43585 627704 286000) 0 nil] [nil nil ((#("4" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -395) (undo-tree-id147 . -1) 396 (t 25331 43274 3494 390000)) ((395 . 396)) (25331 43573 401600 145000) 0 nil])
([nil nil ((395 . 396)) nil (25331 43585 627687 377000) 0 nil])
([nil nil ((395 . 396)) ((#("6" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . 395)) (25331 43572 653927 748000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . -1211) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("p" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . -1212) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("t" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . -1213) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("-" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . -1214) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("4" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . -1215) (undo-tree-id170 . -1) (undo-tree-id171 . -1) 1216 (t 25331 43585 663319 602000)) nil (25331 43647 516199 686000) 0 nil])
([nil nil ((#("
            class=\"bottomBorder pt-4\"" 0 13 (tag-name "v-row" tag-type start) 13 14 (tag-attr-beg 0 tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-name-face) 14 18 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-name-face) 18 19 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-equal-face) 19 37 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face) 37 38 (tag-attr t tag-attr-end 5 tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . 1179) (undo-tree-id149 . -38) (undo-tree-id150 . -1) (undo-tree-id151 . -38) (t 25331 43326 384159 491000)) ((1179 . 1217)) (25331 43572 290084 465000) 0 nil])
([nil nil ((1392 . 1397) (t 25331 43651 212091 242000)) nil (25331 43654 636880 260000) 0 nil] [nil nil ((1392 . 1398) (t 25331 43621 67737 502000)) ((#(" pt-2 " 0 5 (tag-attr t tag-name "v-chip" tag-type start font-lock-face web-mode-html-attr-value-face) 5 6 (tag-attr t tag-name "v-chip" tag-type start font-lock-face web-mode-html-attr-value-face)) . 1392) (undo-tree-id173 . -6)) (25331 43646 977443 431000) 0 nil])
([nil nil ((1552 . 1563)) (("
          " . 1552) (undo-tree-id157 . -11) (undo-tree-id158 . -1) (undo-tree-id159 . -11) (undo-tree-id160 . -1)) (25331 43571 844577 897000) 0 nil] [nil nil ((1533 . 1546)) (("
            " . 1533) (undo-tree-id153 . -13) (undo-tree-id154 . -1) (undo-tree-id155 . -13) (undo-tree-id156 . -1)) (25331 43513 291220 102000) 0 nil])
([nil nil ((#("2" 0 1 (tag-attr t tag-name "v-chip" tag-type start font-lock-face web-mode-html-attr-value-face)) . -1396) (undo-tree-id174 . -1) 1397 (t 25331 43654 672131 726000)) nil (25331 43660 893758 172000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-chip" tag-type start font-lock-face web-mode-html-attr-value-face)) . -1397) (undo-tree-id172 . -1) 1398) ((1397 . 1398) (t 25331 43642 791992 624000)) (25331 43642 759822 56000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1585 . 1586) (nil tag-name "v-divider" 1585 . 1586) (nil tag-type end 1585 . 1586) (nil tag-end t 1585 . 1586) (nil font-lock-face web-mode-html-tag-bracket-face 1585 . 1586) (nil tag-name "v-divider" 1576 . 1585) (nil tag-type end 1576 . 1585) (nil font-lock-face web-mode-html-tag-custom-face 1576 . 1585) (nil tag-name "v-divider" 1575 . 1576) (nil tag-type end 1575 . 1576) (nil font-lock-face web-mode-html-tag-bracket-face 1575 . 1576) (nil tag-name "v-divider" 1574 . 1575) (nil tag-type end 1574 . 1575) (nil tag-beg 22 1574 . 1575) (nil font-lock-face web-mode-html-tag-bracket-face 1574 . 1575) (nil tag-name "v-divider" 1573 . 1574) (nil tag-type start 1573 . 1574) (nil tag-end t 1573 . 1574) (nil font-lock-face web-mode-html-tag-bracket-face 1573 . 1574) (nil tag-name "v-divider" 1564 . 1573) (nil tag-type start 1564 . 1573) (nil font-lock-face web-mode-html-tag-custom-face 1564 . 1573) (nil tag-name "v-divider" 1563 . 1564) (nil tag-type start 1563 . 1564) (nil tag-beg 18 1563 . 1564) (nil font-lock-face web-mode-html-tag-bracket-face 1563 . 1564) (1563 . 1586)) ((#("<v-divider></v-divider>" 0 1 (tag-name "v-divider" tag-type start tag-beg 18 font-lock-face web-mode-html-tag-bracket-face) 1 10 (tag-name "v-divider" tag-type start font-lock-face web-mode-html-tag-custom-face) 10 11 (tag-name "v-divider" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 11 12 (tag-name "v-divider" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 12 13 (tag-name "v-divider" tag-type end font-lock-face web-mode-html-tag-bracket-face) 13 22 (tag-name "v-divider" tag-type end font-lock-face web-mode-html-tag-custom-face) 22 23 (rear-nonsticky nil tag-name "v-divider" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 1563) (nil tag-name "v-divider" 1563 . 1564) (nil tag-name "v-divider" 1564 . 1573) (nil tag-name "v-divider" 1573 . 1574) (nil tag-name "v-divider" 1574 . 1575) (nil tag-name "v-divider" 1575 . 1576) (nil tag-name "v-divider" 1576 . 1585) (nil tag-name "v-divider" 1585 . 1586) (nil rear-nonsticky t 1585 . 1586) (t 25331 43516 770498 195000)) (25331 43516 735214 18000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1568 . 1569) (nil tag-name "v-divider" 1568 . 1569) (nil tag-type end 1568 . 1569) (nil tag-end t 1568 . 1569) (nil font-lock-face web-mode-html-tag-bracket-face 1568 . 1569) (nil tag-name "v-divider" 1559 . 1568) (nil tag-type end 1559 . 1568) (nil font-lock-face web-mode-html-tag-custom-face 1559 . 1568) (nil tag-name "v-divider" 1558 . 1559) (nil tag-type end 1558 . 1559) (nil font-lock-face web-mode-html-tag-bracket-face 1558 . 1559) (nil tag-name "v-divider" 1557 . 1558) (nil tag-type end 1557 . 1558) (nil tag-beg 22 1557 . 1558) (nil font-lock-face web-mode-html-tag-bracket-face 1557 . 1558) (nil tag-name "v-divider" 1556 . 1557) (nil tag-type start 1556 . 1557) (nil tag-end t 1556 . 1557) (nil font-lock-face web-mode-html-tag-bracket-face 1556 . 1557) (nil tag-name "v-divider" 1547 . 1556) (nil tag-type start 1547 . 1556) (nil font-lock-face web-mode-html-tag-custom-face 1547 . 1556) (nil tag-name "v-divider" 1546 . 1547) (nil tag-type start 1546 . 1547) (nil tag-beg 18 1546 . 1547) (nil font-lock-face web-mode-html-tag-bracket-face 1546 . 1547) (1546 . 1569)) ((#("<v-divider></v-divider>" 0 1 (tag-name "v-divider" tag-type start tag-beg 18 font-lock-face web-mode-html-tag-bracket-face) 1 10 (tag-name "v-divider" tag-type start font-lock-face web-mode-html-tag-custom-face) 10 11 (tag-name "v-divider" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 11 12 (tag-name "v-divider" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 12 13 (tag-name "v-divider" tag-type end font-lock-face web-mode-html-tag-bracket-face) 13 22 (tag-name "v-divider" tag-type end font-lock-face web-mode-html-tag-custom-face) 22 23 (rear-nonsticky nil tag-name "v-divider" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 1546) (undo-tree-id152 . -23) (nil tag-name "v-divider" 1546 . 1547) (nil tag-name "v-divider" 1547 . 1556) (nil tag-name "v-divider" 1556 . 1557) (nil tag-name "v-divider" 1557 . 1558) (nil tag-name "v-divider" 1558 . 1559) (nil tag-name "v-divider" 1559 . 1568) (nil tag-name "v-divider" 1568 . 1569) (nil rear-nonsticky t 1568 . 1569) (t 25331 43483 986103 139000)) (25331 43483 951739 654000) 0 nil])
([nil nil ((1396 . 1397)) nil (25331 43660 893741 450000) 0 nil])
nil
nil
nil
([nil nil ((#(" mt-1" 0 5 (tag-attr t tag-name "v-chip" tag-type start font-lock-face web-mode-html-attr-value-face)) . 1392) (undo-tree-id175 . -5) (undo-tree-id176 . -5) (t 25331 43660 924204 824000)) nil (25331 43698 133397 122000) 0 nil])
([nil nil ((1211 . 1216) (t 25331 43698 164638 712000)) nil (25331 43852 630617 604000) 0 nil])
([nil nil ((1192 . 1193)) nil (25331 43852 630616 347000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1225 . 1226) (nil block-side t 1225 . 1226) (nil tag-name "v-row" 1225 . 1226) (nil tag-type start 1225 . 1226) (nil face web-mode-variable-name-face 1225 . 1226) (nil block-side t 1224 . 1225) (nil tag-name "v-row" 1224 . 1225) (nil tag-type start 1224 . 1225) (nil face web-mode-variable-name-face 1224 . 1225) (nil block-side t 1223 . 1224) (nil tag-name "v-row" 1223 . 1224) (nil tag-type start 1223 . 1224) (nil face web-mode-variable-name-face 1223 . 1224) (nil block-side t 1222 . 1223) (nil tag-name "v-row" 1222 . 1223) (nil tag-type start 1222 . 1223) (nil face web-mode-variable-name-face 1222 . 1223) (nil block-side t 1221 . 1222) (nil tag-name "v-row" 1221 . 1222) (nil tag-type start 1221 . 1222) (nil face web-mode-variable-name-face 1221 . 1222) (nil block-side t 1220 . 1221) (nil tag-name "v-row" 1220 . 1221) (nil tag-type start 1220 . 1221) (nil face web-mode-variable-name-face 1220 . 1221) (nil block-side t 1219 . 1220) (nil tag-name "v-row" 1219 . 1220) (nil tag-type start 1219 . 1220) (nil face web-mode-variable-name-face 1219 . 1220) (nil block-side t 1218 . 1219) (nil tag-name "v-row" 1218 . 1219) (nil tag-type start 1218 . 1219) (nil face web-mode-variable-name-face 1218 . 1219) (nil block-side t 1217 . 1218) (nil tag-name "v-row" 1217 . 1218) (nil tag-type start 1217 . 1218) (nil face web-mode-variable-name-face 1217 . 1218) (nil block-side t 1216 . 1217) (nil tag-name "v-row" 1216 . 1217) (nil tag-type start 1216 . 1217) (nil face web-mode-variable-name-face 1216 . 1217) (nil block-side t 1215 . 1216) (nil tag-name "v-row" 1215 . 1216) (nil tag-type start 1215 . 1216) (nil face web-mode-variable-name-face 1215 . 1216) (nil block-side t 1214 . 1215) (nil tag-name "v-row" 1214 . 1215) (nil tag-type start 1214 . 1215) (nil face web-mode-variable-name-face 1214 . 1215) (1214 . 1226)) nil (25331 43852 630612 135000) 0 nil])
([nil nil ((1226 . 1227)) nil (25331 43852 630598 695000) 0 nil])
([nil nil ((1214 . 1215)) nil (25331 43852 630597 640000) 0 nil])
([nil nil ((#(" " 0 1 (block-side t tag-name "v-row" tag-type start)) . 1227)) nil (25331 43852 630596 388000) 0 nil])
([nil nil ((#("b" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1200) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#("o" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1201) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (#("t" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1202) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (#("t" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1203) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (#("o" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1204) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#("m" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1205) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#("B" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1206) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#("o" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1207) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (#("r" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1208) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (#("d" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1209) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#("e" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1210) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#("r" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . -1211) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) 1212) nil (25331 43852 630590 526000) 0 nil])
([nil nil ((1200 . 1203)) nil (25331 43852 630546 289000) 0 nil])
([nil nil ((1203 . 1216)) nil (25331 43852 630545 162000) 0 nil])
([nil nil ((#(" " 0 1 (block-side t tag-name "v-row" tag-type start)) . -1215) (undo-tree-id186 . -1) 1216) nil (25331 43852 630543 823000) 0 nil])
([nil nil ((1215 . 1222)) nil (25331 43852 630541 344000) 0 nil])
([nil nil ((#(" " 0 1 (block-side t tag-name "v-row" tag-type start)) . -1221) (undo-tree-id185 . -1) 1222) nil (25331 43852 630539 977000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1225 . 1226) (nil block-side t 1225 . 1226) (nil tag-name "v-row" 1225 . 1226) (nil tag-type start 1225 . 1226) (nil face web-mode-variable-name-face 1225 . 1226) (nil block-side t 1224 . 1225) (nil tag-name "v-row" 1224 . 1225) (nil tag-type start 1224 . 1225) (nil face web-mode-variable-name-face 1224 . 1225) (nil block-side t 1223 . 1224) (nil tag-name "v-row" 1223 . 1224) (nil tag-type start 1223 . 1224) (nil face web-mode-variable-name-face 1223 . 1224) (nil block-side t 1222 . 1223) (nil tag-name "v-row" 1222 . 1223) (nil tag-type start 1222 . 1223) (nil face web-mode-variable-name-face 1222 . 1223) (nil block-side t 1221 . 1222) (nil tag-name "v-row" 1221 . 1222) (nil tag-type start 1221 . 1222) (nil face web-mode-variable-name-face 1221 . 1222) (nil block-side t 1220 . 1221) (nil tag-name "v-row" 1220 . 1221) (nil tag-type start 1220 . 1221) (nil face web-mode-variable-name-face 1220 . 1221) (nil block-side t 1219 . 1220) (nil tag-name "v-row" 1219 . 1220) (nil tag-type start 1219 . 1220) (nil face web-mode-variable-name-face 1219 . 1220) (nil block-side t 1218 . 1219) (nil tag-name "v-row" 1218 . 1219) (nil tag-type start 1218 . 1219) (nil face web-mode-variable-name-face 1218 . 1219) (nil block-side t 1217 . 1218) (nil tag-name "v-row" 1217 . 1218) (nil tag-type start 1217 . 1218) (nil face web-mode-variable-name-face 1217 . 1218) (nil block-side t 1216 . 1217) (nil tag-name "v-row" 1216 . 1217) (nil tag-type start 1216 . 1217) (nil face web-mode-variable-name-face 1216 . 1217) (nil block-side t 1215 . 1216) (nil tag-name "v-row" 1215 . 1216) (nil tag-type start 1215 . 1216) (1215 . 1226)) nil (25331 43852 630534 534000) 0 nil])
([nil nil ((#("." 0 1 (block-side t tag-name "v-row" tag-type start)) . -1215) (undo-tree-id184 . -1) 1216) nil (25331 43852 630522 988000) 0 nil])
([nil nil ((1225 . 1226)) nil (25331 43852 630520 370000) 0 nil])
([nil nil ((#("=" 0 1 (block-side t tag-name "v-row" tag-type start)) . -1204) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("=" 0 1 (block-side t tag-name "v-row" tag-type start)) . -1205) (undo-tree-id182 . -1) (undo-tree-id183 . -1) 1206) nil (25331 43852 630518 430000) 0 nil])
([nil nil ((1204 . 1205)) nil (25331 43852 630512 208000) 0 nil])
([nil nil ((#(">" 0 1 (block-side t tag-name "v-row" tag-type start)) . -1204) (undo-tree-id179 . -1) 1205) nil (25331 43852 630510 895000) 0 nil])
([nil nil ((1204 . 1205)) nil (25331 43852 630508 102000) 0 nil])
([nil nil ((#("<" 0 1 (block-side t tag-name "v-row" tag-type start)) . -1204) (undo-tree-id178 . -1) 1205) nil (25331 43852 630506 504000) 0 nil])
([nil nil ((1204 . 1205)) nil (25331 43852 630503 401000) 0 nil])
([nil nil ((#(">" 0 1 (block-side t tag-name "v-row" tag-type start)) . -1204) (undo-tree-id177 . -1) 1205) nil (25331 43852 630500 719000) 0 nil])
([nil nil ((1204 . 1205)) nil (25331 43852 630485 507000) 0 nil])
([nil nil ((1248 . 1253) (t 25331 43852 666414 95000)) nil (25331 43872 892860 316000) 0 nil])
([nil nil ((1267 . 1280) (t 25331 43872 930644 387000)) nil (25331 43886 161809 233000) 0 nil])
([nil nil ((1282 . 1285) (1281 . 1283) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face))) . -1281) (1281 . 1282) (1280 . 1282) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face))) . -1280) (1280 . 1281)) nil (25331 43886 161801 26000) 0 nil])
([nil nil ((1287 . 1300) (t 25331 43886 198794 885000)) nil (25331 43901 38369 896000) 0 nil])
([nil nil ((1301 . 1303) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face))) . -1301) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (1301 . 1302) (1300 . 1302) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face))) . -1300) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (1300 . 1301)) nil (25331 43901 38366 231000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1326 . 1327) (nil block-side t 1326 . 1327) (nil face web-mode-variable-name-face 1326 . 1327) (nil block-side t 1325 . 1326) (nil face web-mode-variable-name-face 1325 . 1326) (nil block-side t 1324 . 1325) (nil face web-mode-variable-name-face 1324 . 1325) (nil block-side t 1323 . 1324) (nil face web-mode-variable-name-face 1323 . 1324) (nil block-side t 1322 . 1323) (nil face web-mode-variable-name-face 1322 . 1323) (nil block-side t 1321 . 1322) (nil face web-mode-variable-name-face 1321 . 1322) (nil block-side t 1320 . 1321) (nil rear-nonsticky t 1319 . 1320) (nil block-side t 1319 . 1320) (nil face web-mode-variable-name-face 1319 . 1320) (nil block-side t 1318 . 1319) (nil face web-mode-variable-name-face 1318 . 1319) (nil block-side t 1317 . 1318) (nil face web-mode-variable-name-face 1317 . 1318) (nil block-side t 1316 . 1317) (nil face web-mode-variable-name-face 1316 . 1317) (nil block-side t 1315 . 1316) (nil face web-mode-variable-name-face 1315 . 1316) (nil block-side t 1314 . 1315) (nil face web-mode-variable-name-face 1314 . 1315) (nil block-side t 1313 . 1314) (nil face web-mode-variable-name-face 1313 . 1314) (nil block-side t 1312 . 1313) (nil face web-mode-variable-name-face 1312 . 1313) (nil block-side t 1311 . 1312) (nil face web-mode-variable-name-face 1311 . 1312) (nil block-side t 1310 . 1311) (nil face web-mode-variable-name-face 1310 . 1311) (nil block-side t 1309 . 1310) (nil block-side t 1308 . 1309) (nil face web-mode-variable-name-face 1308 . 1309) (nil block-side t 1307 . 1308) (nil face web-mode-variable-name-face 1307 . 1308) (nil block-side t 1306 . 1307) (nil face web-mode-variable-name-face 1306 . 1307) (nil block-side t 1305 . 1306) (nil face web-mode-variable-name-face 1305 . 1306) (nil block-side t 1304 . 1305) (nil face web-mode-variable-name-face 1304 . 1305) (nil block-side t 1303 . 1304) (nil face web-mode-variable-name-face 1303 . 1304) (nil block-side t 1302 . 1303) (nil face web-mode-variable-name-face 1302 . 1303) (1302 . 1327)) nil (25331 43901 38343 123000) 0 nil])
([nil nil ((#("idx < version.changelogs.length ?" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 1 2 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 2 3 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 3 6 (block-side t tag-name "v-row" tag-type start) 6 7 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 7 8 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 8 9 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 9 10 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 10 11 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 11 12 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 12 13 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 13 14 (block-side t tag-name "v-row" tag-type start) 14 15 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 15 16 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 16 17 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 17 18 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 18 19 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 19 20 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 20 21 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 21 22 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 22 23 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 23 24 (rear-nonsticky t block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 24 25 (block-side t tag-name "v-row" tag-type start) 25 26 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 26 27 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 27 28 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 28 29 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 29 30 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 30 31 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face) 31 33 (block-side t tag-name "v-row" tag-type start)) . 1200) (undo-tree-id232 . -33) (undo-tree-id233 . -27) (undo-tree-id234 . -33) (undo-tree-id235 . -14) (undo-tree-id236 . -31) (undo-tree-id237 . -33) (t 25331 43901 74963 362000)) nil (25331 43951 176299 325000) 0 nil])
([nil nil ((#("e" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . 1216) (#("n" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . 1216) (#("o" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . 1216) (#("n" 0 1 (block-side t tag-name "v-row" tag-type start face web-mode-variable-name-face)) . 1216)) nil (25331 43951 176290 624000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1248 . 1249) (nil block-side t 1247 . 1249) (nil tag-name "v-row" 1247 . 1249) (nil tag-type start 1247 . 1249) (nil block-side t 1246 . 1247) (nil tag-name "v-row" 1246 . 1247) (nil tag-type start 1246 . 1247) (nil face web-mode-variable-name-face 1246 . 1247) (nil block-side t 1245 . 1246) (nil tag-name "v-row" 1245 . 1246) (nil tag-type start 1245 . 1246) (nil face web-mode-variable-name-face 1245 . 1246) (nil block-side t 1244 . 1245) (nil tag-name "v-row" 1244 . 1245) (nil tag-type start 1244 . 1245) (nil face web-mode-variable-name-face 1244 . 1245) (nil block-side t 1243 . 1244) (nil tag-name "v-row" 1243 . 1244) (nil tag-type start 1243 . 1244) (nil face web-mode-variable-name-face 1243 . 1244) (nil block-side t 1242 . 1243) (nil tag-name "v-row" 1242 . 1243) (nil tag-type start 1242 . 1243) (nil face web-mode-variable-name-face 1242 . 1243) (nil block-side t 1241 . 1242) (nil tag-name "v-row" 1241 . 1242) (nil tag-type start 1241 . 1242) (nil face web-mode-variable-name-face 1241 . 1242) (nil block-side t 1240 . 1241) (nil tag-name "v-row" 1240 . 1241) (nil tag-type start 1240 . 1241) (nil rear-nonsticky t 1239 . 1240) (nil block-side t 1239 . 1240) (nil tag-name "v-row" 1239 . 1240) (nil tag-type start 1239 . 1240) (nil face web-mode-variable-name-face 1239 . 1240) (nil block-side t 1238 . 1239) (nil tag-name "v-row" 1238 . 1239) (nil tag-type start 1238 . 1239) (nil face web-mode-variable-name-face 1238 . 1239) (nil block-side t 1237 . 1238) (nil tag-name "v-row" 1237 . 1238) (nil tag-type start 1237 . 1238) (nil face web-mode-variable-name-face 1237 . 1238) (nil block-side t 1236 . 1237) (nil tag-name "v-row" 1236 . 1237) (nil tag-type start 1236 . 1237) (nil face web-mode-variable-name-face 1236 . 1237) (nil block-side t 1235 . 1236) (nil tag-name "v-row" 1235 . 1236) (nil tag-type start 1235 . 1236) (nil face web-mode-variable-name-face 1235 . 1236) (nil block-side t 1234 . 1235) (nil tag-name "v-row" 1234 . 1235) (nil tag-type start 1234 . 1235) (nil face web-mode-variable-name-face 1234 . 1235) (nil block-side t 1233 . 1234) (nil tag-name "v-row" 1233 . 1234) (nil tag-type start 1233 . 1234) (nil face web-mode-variable-name-face 1233 . 1234) (nil block-side t 1232 . 1233) (nil tag-name "v-row" 1232 . 1233) (nil tag-type start 1232 . 1233) (nil face web-mode-variable-name-face 1232 . 1233) (nil block-side t 1231 . 1232) (nil tag-name "v-row" 1231 . 1232) (nil tag-type start 1231 . 1232) (nil face web-mode-variable-name-face 1231 . 1232) (nil block-side t 1230 . 1231) (nil tag-name "v-row" 1230 . 1231) (nil tag-type start 1230 . 1231) (nil face web-mode-variable-name-face 1230 . 1231) (nil block-side t 1229 . 1230) (nil tag-name "v-row" 1229 . 1230) (nil tag-type start 1229 . 1230) (nil block-side t 1228 . 1229) (nil tag-name "v-row" 1228 . 1229) (nil tag-type start 1228 . 1229) (nil face web-mode-variable-name-face 1228 . 1229) (nil block-side t 1227 . 1228) (nil tag-name "v-row" 1227 . 1228) (nil tag-type start 1227 . 1228) (nil face web-mode-variable-name-face 1227 . 1228) (nil block-side t 1226 . 1227) (nil tag-name "v-row" 1226 . 1227) (nil tag-type start 1226 . 1227) (nil face web-mode-variable-name-face 1226 . 1227) (nil block-side t 1225 . 1226) (nil tag-name "v-row" 1225 . 1226) (nil tag-type start 1225 . 1226) (nil face web-mode-variable-name-face 1225 . 1226) (nil block-side t 1224 . 1225) (nil tag-name "v-row" 1224 . 1225) (nil tag-type start 1224 . 1225) (nil face web-mode-variable-name-face 1224 . 1225) (nil block-side t 1223 . 1224) (nil tag-name "v-row" 1223 . 1224) (nil tag-type start 1223 . 1224) (nil face web-mode-variable-name-face 1223 . 1224) (nil block-side t 1222 . 1223) (nil tag-name "v-row" 1222 . 1223) (nil tag-type start 1222 . 1223) (nil face web-mode-variable-name-face 1222 . 1223) (nil block-side t 1219 . 1222) (nil tag-name "v-row" 1219 . 1222) (nil tag-type start 1219 . 1222) (nil block-side t 1218 . 1219) (nil tag-name "v-row" 1218 . 1219) (nil tag-type start 1218 . 1219) (nil face web-mode-variable-name-face 1218 . 1219) (nil block-side t 1217 . 1218) (nil tag-name "v-row" 1217 . 1218) (nil tag-type start 1217 . 1218) (nil face web-mode-variable-name-face 1217 . 1218) (nil block-side t 1216 . 1217) (nil tag-name "v-row" 1216 . 1217) (nil tag-type start 1216 . 1217) (nil face web-mode-variable-name-face 1216 . 1217) (1216 . 1249)) nil (25331 43951 176281 323000) 0 nil])
([nil nil ((#(" " 0 1 (block-side t tag-name "v-row" tag-type start)) . -1247) (undo-tree-id229 . -1) (#("?" 0 1 (rear-nonsticky t block-side t tag-name "v-row" tag-type start)) . -1248) (undo-tree-id230 . -1) (#(" " 0 1 (block-side t tag-name "v-row" tag-type start)) . -1249) (undo-tree-id231 . -1) 1250) nil (25331 43951 176251 357000) 0 nil])
([nil nil ((#(" " 0 1 (block-side t tag-name "v-row" tag-type start)) . -1200) (undo-tree-id227 . -1) (undo-tree-id228 . -1) 1201) nil (25331 43951 176241 359000) 0 nil])
([nil nil ((1200 . 1202) (#("{" 0 1 (block-side t tag-name "v-row" tag-type start)) . -1200) (1200 . 1201) (t 25331 43951 215529 298000)) nil (25331 43968 829090 911000) 0 nil])
([nil nil ((#("}" 0 1 (block-side t tag-name "v-row" tag-type start)) . 1201)) nil (25331 43968 829085 638000) 0 nil])
([nil nil ((1247 . 1248)) nil (25331 43968 829076 632000) 0 nil])
([nil nil ((#("
            {{idx}}
            {{version.changelogs.length}}" 13 14 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 14 15 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 15 16 (block-side t face web-mode-variable-name-face) 16 17 (block-side t face web-mode-variable-name-face) 17 18 (block-side t face web-mode-variable-name-face) 18 19 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 19 20 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 33 34 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 34 35 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 35 36 (block-side t face web-mode-variable-name-face) 36 37 (block-side t face web-mode-variable-name-face) 37 38 (block-side t face web-mode-variable-name-face) 38 39 (block-side t face web-mode-variable-name-face) 39 40 (block-side t face web-mode-variable-name-face) 40 41 (block-side t face web-mode-variable-name-face) 41 42 (block-side t face web-mode-variable-name-face) 42 43 (block-side t) 43 44 (block-side t face web-mode-variable-name-face) 44 45 (block-side t face web-mode-variable-name-face) 45 46 (block-side t face web-mode-variable-name-face) 46 47 (block-side t face web-mode-variable-name-face) 47 48 (block-side t face web-mode-variable-name-face) 48 49 (block-side t face web-mode-variable-name-face) 49 50 (block-side t face web-mode-variable-name-face) 50 51 (block-side t face web-mode-variable-name-face) 51 52 (block-side t face web-mode-variable-name-face) 52 53 (block-side t face web-mode-variable-name-face) 53 54 (block-side t) 54 55 (block-side t face web-mode-variable-name-face) 55 56 (block-side t face web-mode-variable-name-face) 56 57 (block-side t face web-mode-variable-name-face) 57 58 (block-side t face web-mode-variable-name-face) 58 59 (block-side t face web-mode-variable-name-face) 59 60 (rear-nonsticky t block-side t face web-mode-variable-name-face) 60 61 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 61 62 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face))) . 1261) (undo-tree-id238 . -62) (undo-tree-id239 . -1) (undo-tree-id240 . -35) (undo-tree-id241 . -62) (undo-tree-id242 . -62) (t 25331 43968 871727 913000)) nil (25331 43985 180473 575000) 0 nil])
([nil nil ((1219 . 1221) (t 25331 43985 211911 435000)) nil (25331 44000 227910 509000) 0 nil])
([nil nil ((#("a" 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -28) (undo-tree-id247 . -1) 29 (t 25331 44000 260080 201000)) nil (25331 44069 834554 224000) 0 nil])
([nil nil ((28 . 29)) nil (25331 44069 834550 583000) 0 nil])
([nil nil ((31 . 34)) nil (25331 44069 834549 418000) 0 nil])
([nil nil ((#("t" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33) (undo-tree-id245 . -1) (undo-tree-id246 . -1) 34) nil (25331 44069 834547 644000) 0 nil])
([nil nil ((33 . 44)) nil (25331 44069 834542 122000) 0 nil])
([nil nil ((#("-" 0 1 (tag-attr-beg 0 tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -42) (undo-tree-id243 . -1) (#("b" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -43) (undo-tree-id244 . -1) 44) nil (25331 44069 834538 780000) 0 nil])
([nil nil ((42 . 47)) nil (25331 44145 443368 830000) 0 nil])
([nil nil ((1421 . 1426) (t 25331 44148 197728 316000)) nil (25331 44153 231959 578000) 0 nil] [nil nil ((1421 . 1426) (t 25331 44069 872858 96000)) ((#("mt-1 " 0 5 (tag-attr t tag-name "v-chip" tag-type start font-lock-face web-mode-html-attr-value-face)) . 1421) (undo-tree-id248 . -5) (t 25331 44136 429597 875000)) (25331 44136 387846 605000) 0 nil])
([nil nil ((270 . 279) (#("    " 0 4 (tag-type comment font-lock-face web-mode-comment-face)) . 270) (259 . 260) (#(" " 0 1 (tag-type comment font-lock-face web-mode-comment-face)) . -227) (#(" " 0 1 (tag-type comment font-lock-face web-mode-comment-face)) . -177) (158 . 159) (95 . 289) (#("<v-layout wrap align-center text-left fluid pb-5>
        <v-flex>
          <h2 class=\"pl-7 pb-0 ma-0\">Versions</h2>
          <v-divider></v-divider>
        </v-flex>
    </v-layout>" 0 1 (tag-name "v-layout" tag-type start tag-beg 19 font-lock-face web-mode-html-tag-bracket-face) 1 9 (tag-name "v-layout" tag-type start font-lock-face web-mode-html-tag-custom-face) 9 10 (tag-name "v-layout" tag-type start) 10 11 (tag-attr-beg 0 tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 11 13 (tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 13 14 (tag-attr t tag-attr-end 0 tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 14 15 (tag-name "v-layout" tag-type start) 15 16 (tag-attr-beg 0 tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 16 26 (tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 26 27 (tag-attr t tag-attr-end 0 tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 27 28 (tag-name "v-layout" tag-type start) 28 29 (tag-attr-beg 0 tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 29 36 (tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 36 37 (tag-attr t tag-attr-end 0 tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 37 38 (tag-name "v-layout" tag-type start) 38 39 (tag-attr-beg 0 tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 39 42 (tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 42 43 (tag-attr t tag-attr-end 0 tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 43 44 (tag-name "v-layout" tag-type start) 44 45 (tag-attr-beg 0 tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 45 47 (tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 47 48 (tag-attr t tag-attr-end 0 tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 48 49 (tag-name "v-layout" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 58 59 (tag-name "v-flex" tag-type start tag-beg 18 font-lock-face web-mode-html-tag-bracket-face) 59 65 (tag-name "v-flex" tag-type start font-lock-face web-mode-html-tag-custom-face) 65 66 (tag-name "v-flex" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 77 78 (tag-name "h2" tag-type start tag-beg 17 font-lock-face web-mode-html-tag-bracket-face) 78 80 (tag-name "h2" tag-type start font-lock-face web-mode-html-tag-face) 80 81 (tag-name "h2" tag-type start) 81 82 (tag-attr-beg 0 tag-attr t tag-name "h2" tag-type start font-lock-face web-mode-html-attr-name-face) 82 86 (tag-attr t tag-name "h2" tag-type start font-lock-face web-mode-html-attr-name-face) 86 87 (tag-attr t tag-name "h2" tag-type start font-lock-face web-mode-html-attr-equal-face) 87 102 (tag-attr t tag-name "h2" tag-type start font-lock-face web-mode-html-attr-value-face) 102 103 (tag-attr t tag-attr-end 5 tag-name "h2" tag-type start font-lock-face web-mode-html-attr-value-face) 103 104 (tag-name "h2" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 112 113 (tag-name "h2" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 113 114 (tag-name "h2" tag-type end font-lock-face web-mode-html-tag-bracket-face) 114 116 (tag-name "h2" tag-type end font-lock-face web-mode-html-tag-face) 116 117 (tag-name "h2" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face) 128 129 (tag-name "v-divider" tag-type start tag-beg 18 font-lock-face web-mode-html-tag-bracket-face) 129 138 (tag-name "v-divider" tag-type start font-lock-face web-mode-html-tag-custom-face) 138 139 (tag-name "v-divider" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 139 140 (tag-name "v-divider" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 140 141 (tag-name "v-divider" tag-type end font-lock-face web-mode-html-tag-bracket-face) 141 150 (tag-name "v-divider" tag-type end font-lock-face web-mode-html-tag-custom-face) 150 151 (tag-name "v-divider" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face) 160 161 (tag-name "v-flex" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 161 162 (tag-name "v-flex" tag-type end font-lock-face web-mode-html-tag-bracket-face) 162 168 (tag-name "v-flex" tag-type end font-lock-face web-mode-html-tag-custom-face) 168 169 (tag-name "v-flex" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face) 174 175 (tag-name "v-layout" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 175 176 (tag-name "v-layout" tag-type end font-lock-face web-mode-html-tag-bracket-face) 176 184 (tag-name "v-layout" tag-type end font-lock-face web-mode-html-tag-custom-face) 184 185 (tag-name "v-layout" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 95) (undo-tree-id249 . -185) (undo-tree-id250 . -151) (undo-tree-id251 . -50) (undo-tree-id252 . -185) (undo-tree-id253 . -185) (undo-tree-id254 . -185) (t 25331 44153 273784 548000)) nil (25331 44942 282563 512000) 0 nil])
nil
([nil nil ((587 . 589) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face))) . -587) (587 . 588) (586 . 588) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face))) . -586) (585 . 587) (t 25331 44942 322378 239000)) nil (25331 45048 363729 834000) 0 nil])
([nil nil ((nil rear-nonsticky nil 635 . 636) (nil block-side t 635 . 636) (nil face web-mode-variable-name-face 635 . 636) (nil block-side t 634 . 635) (nil face web-mode-variable-name-face 634 . 635) (nil block-side t 633 . 634) (nil face web-mode-variable-name-face 633 . 634) (nil block-side t 632 . 633) (nil face web-mode-variable-name-face 632 . 633) (nil block-side t 631 . 632) (nil face web-mode-variable-name-face 631 . 632) (nil block-side t 630 . 631) (nil face web-mode-variable-name-face 630 . 631) (nil block-side t 629 . 630) (nil block-side t 628 . 629) (nil face web-mode-variable-name-face 628 . 629) (nil block-side t 627 . 628) (nil face web-mode-variable-name-face 627 . 628) (nil block-side t 626 . 627) (nil face web-mode-variable-name-face 626 . 627) (nil block-side t 625 . 626) (nil face web-mode-variable-name-face 625 . 626) (nil block-side t 624 . 625) (nil face web-mode-variable-name-face 624 . 625) (nil block-side t 623 . 624) (nil face web-mode-variable-name-face 623 . 624) (nil block-side t 622 . 623) (nil face web-mode-variable-name-face 622 . 623) (nil block-side t 621 . 622) (nil face web-mode-variable-name-face 621 . 622) (nil block-side t 620 . 621) (nil face web-mode-variable-name-face 620 . 621) (nil block-side t 619 . 620) (nil face web-mode-variable-name-face 619 . 620) (nil block-side t 618 . 619) (nil block-side t 617 . 618) (nil face web-mode-variable-name-face 617 . 618) (nil block-side t 616 . 617) (nil face web-mode-variable-name-face 616 . 617) (nil block-side t 615 . 616) (nil face web-mode-variable-name-face 615 . 616) (nil block-side t 614 . 615) (nil face web-mode-variable-name-face 614 . 615) (nil block-side t 613 . 614) (nil face web-mode-variable-name-face 613 . 614) (nil block-side t 612 . 613) (nil face web-mode-variable-name-face 612 . 613) (nil block-side t 611 . 612) (nil face web-mode-variable-name-face 611 . 612) (nil block-side t 608 . 611) (nil block-side t 606 . 608) (nil block-side t 605 . 606) (nil face web-mode-variable-name-face 605 . 606) (nil block-side t 604 . 605) (nil face web-mode-variable-name-face 604 . 605) (nil block-side t 603 . 604) (nil face web-mode-variable-name-face 603 . 604) (nil block-side t 600 . 603) (nil rear-nonsticky t 599 . 600) (nil block-side t 599 . 600) (nil face web-mode-variable-name-face 599 . 600) (nil block-side t 598 . 599) (nil face web-mode-variable-name-face 598 . 599) (nil block-side t 597 . 598) (nil face web-mode-variable-name-face 597 . 598) (nil block-side t 596 . 597) (nil face web-mode-variable-name-face 596 . 597) (nil block-side t 595 . 596) (nil face web-mode-variable-name-face 595 . 596) (nil block-side t 594 . 595) (nil face web-mode-variable-name-face 594 . 595) (nil block-side t 593 . 594) (nil face web-mode-variable-name-face 593 . 594) (nil block-side t 592 . 593) (nil face web-mode-variable-name-face 592 . 593) (nil block-side t 591 . 592) (nil face web-mode-variable-name-face 591 . 592) (nil block-side t 590 . 591) (nil face web-mode-variable-name-face 590 . 591) (nil block-side t 589 . 590) (nil face web-mode-variable-name-face 589 . 590) (nil block-side t 588 . 589) (nil face web-mode-variable-name-face 588 . 589) (588 . 636)) nil (25331 45048 363721 920000) 0 nil])
([nil nil ((#("bottomBorder" 0 1 (block-side t face web-mode-variable-name-face) 1 2 (block-side t face web-mode-variable-name-face) 2 3 (block-side t face web-mode-variable-name-face) 3 4 (block-side t face web-mode-variable-name-face) 4 5 (block-side t face web-mode-variable-name-face) 5 6 (block-side t face web-mode-variable-name-face) 6 7 (block-side t face web-mode-variable-name-face) 7 8 (block-side t face web-mode-variable-name-face) 8 9 (block-side t face web-mode-variable-name-face) 9 10 (block-side t face web-mode-variable-name-face) 10 11 (block-side t face web-mode-variable-name-face) 11 12 (block-side t face web-mode-variable-name-face)) . 588) (undo-tree-id276 . -12) (undo-tree-id277 . -12)) nil (25331 45048 363699 69000) 0 nil])
([nil nil ((588 . 590)) nil (25331 45048 363695 208000) 0 nil])
([nil nil ((589 . 599)) nil (25331 45048 363693 853000) 0 nil])
([nil nil ((#(" " 0 1 (block-side t)) . -598) (undo-tree-id275 . -1) 599) nil (25331 45048 363692 589000) 0 nil])
([nil nil ((#("+" 0 1 (block-side t)) . -605) (undo-tree-id273 . -1) (#("1" 0 1 (block-side t)) . -606) (undo-tree-id274 . -1) 607) nil (25331 45048 363689 785000) 0 nil])
([nil nil ((605 . 606)) nil (25331 45048 363685 981000) 0 nil])
([nil nil ((359 . 361) (#("(" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -359) (359 . 360)) nil (25331 45048 363684 655000) 0 nil])
([nil nil ((#(")" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . 360)) nil (25331 45048 363682 986000) 0 nil])
([nil nil ((367 . 373)) nil (25331 45048 363681 924000) 0 nil])
([nil nil ((#("v" 0 1 (block-side t tag-name "v-card" tag-type start face web-mode-variable-name-face)) . -399) (undo-tree-id258 . -1) (#("e" 0 1 (block-side t tag-name "v-card" tag-type start face web-mode-variable-name-face)) . -400) (undo-tree-id259 . -1) (#("r" 0 1 (block-side t tag-name "v-card" tag-type start face web-mode-variable-name-face)) . -401) (undo-tree-id260 . -1) (#("s" 0 1 (block-side t tag-name "v-card" tag-type start face web-mode-variable-name-face)) . -402) (undo-tree-id261 . -1) (#("i" 0 1 (block-side t tag-name "v-card" tag-type start face web-mode-variable-name-face)) . -403) (undo-tree-id262 . -1) (#("o" 0 1 (block-side t tag-name "v-card" tag-type start face web-mode-variable-name-face)) . -404) (undo-tree-id263 . -1) (#("n" 0 1 (block-side t tag-name "v-card" tag-type start face web-mode-variable-name-face)) . -405) (undo-tree-id264 . -1) (#("." 0 1 (block-side t tag-name "v-card" tag-type start)) . -406) (undo-tree-id265 . -1) (#("v" 0 1 (block-side t tag-name "v-card" tag-type start face web-mode-variable-name-face)) . -407) (undo-tree-id266 . -1) (#("e" 0 1 (block-side t tag-name "v-card" tag-type start face web-mode-variable-name-face)) . -408) (undo-tree-id267 . -1) (#("r" 0 1 (block-side t tag-name "v-card" tag-type start face web-mode-variable-name-face)) . -409) (undo-tree-id268 . -1) (#("s" 0 1 (block-side t tag-name "v-card" tag-type start face web-mode-variable-name-face)) . -410) (undo-tree-id269 . -1) (#("i" 0 1 (block-side t tag-name "v-card" tag-type start face web-mode-variable-name-face)) . -411) (undo-tree-id270 . -1) (#("o" 0 1 (block-side t tag-name "v-card" tag-type start face web-mode-variable-name-face)) . -412) (undo-tree-id271 . -1) (#("n" 0 1 (block-side t tag-name "v-card" tag-type start face web-mode-variable-name-face)) . -413) (undo-tree-id272 . -1) 414) nil (25331 45048 363677 713000) 0 nil])
([nil nil ((399 . 403)) nil (25331 45048 363656 161000) 0 nil])
([nil nil ((#(" " 0 1 (block-side t tag-name "v-card" tag-type start)) . -402) (undo-tree-id257 . -1) 403) nil (25331 45048 363654 767000) 0 nil])
([nil nil ((601 . 606)) nil (25331 45048 363651 990000) 0 nil])
([nil nil ((#(" " 0 1 (block-side t)) . -605) (undo-tree-id256 . -1) 606) nil (25331 45048 363650 104000) 0 nil])
([nil nil ((#("s" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("g" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("o" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("l" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("e" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("g" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("n" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("a" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("h" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("c" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("." 0 1 (block-side t)) . 605) (#("n" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("o" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("i" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("s" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("r" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("e" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("v" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#(" " 0 1 (block-side t)) . 605) (#("<" 0 1 (block-side t)) . 605) (#(" " 0 1 (block-side t)) . 605) (undo-tree-id255 . -1)) nil (25331 45048 363643 470000) 0 nil])
([nil nil ((#("g" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("n" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("e" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("l" 0 1 (block-side t face web-mode-variable-name-face)) . 605) (#("." 0 1 (block-side t)) . 605)) nil (25331 45048 363614 168000) 0 nil])
([nil nil ((#("h" 0 1 (rear-nonsticky t block-side t face web-mode-variable-name-face)) . 605) (#("t" 0 1 (block-side t face web-mode-variable-name-face)) . 605)) nil (25331 45048 363605 99000) 0 nil])
([nil nil ((#("}" 0 1 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face))) . -605) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) 606 (t 25331 45048 403411 215000)) nil (25331 45062 973238 541000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-2-face))) . -582) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) 583) nil (25331 45062 973228 907000) 0 nil])
([nil nil ((#("{'- Current' : idx == 0}" 0 1 (face (rainbow-delimiters-depth-1-face)) 23 24 (face (rainbow-delimiters-depth-1-face))) . 581) (undo-tree-id290 . -24) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -24) (t 25331 45063 15537 160000)) nil (25331 45126 603355 457000) 0 nil])
([nil current ((" " . -580) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) 581) nil (25331 45126 603345 433000) 0 nil])
nil
