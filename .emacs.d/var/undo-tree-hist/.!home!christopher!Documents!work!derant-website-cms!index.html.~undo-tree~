(undo-tree-save-format-version . 1)
"718b1ef6d6a08b3957ac7bdfaa4329d0ad431e33"
[nil nil nil nil (25265 54215 161148 179000) 0 nil]
([nil nil ((224 . 226) (t 25265 48621 269745 349000)) nil (25265 54215 161146 120000) 0 nil])
([nil nil ((nil rear-nonsticky nil 262 . 263) (nil block-side t 262 . 263) (nil block-end t 262 . 263) (nil block-token delimiter-end 262 . 263) (nil font-lock-face web-mode-block-delimiter-face 262 . 263) (nil face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) 262 . 263) (nil block-side t 261 . 262) (nil block-token delimiter-end 261 . 262) (nil font-lock-face web-mode-block-delimiter-face 261 . 262) (nil block-side t 260 . 261) (nil block-side t 246 . 260) (nil face web-mode-variable-name-face 246 . 260) (nil block-side t 245 . 246) (nil block-side t 237 . 245) (nil face web-mode-variable-name-face 237 . 245) (nil block-side t 236 . 237) (nil block-side t 229 . 236) (nil face web-mode-block-control-face 229 . 236) (nil block-side t 228 . 229) (nil block-side t 227 . 228) (nil block-token delimiter-beg 227 . 228) (nil font-lock-face web-mode-block-delimiter-face 227 . 228) (nil block-beg 0 226 . 227) (nil block-controls 0 226 . 227) (nil block-side t 226 . 227) (nil block-token delimiter-beg 226 . 227) (nil font-lock-face web-mode-block-delimiter-face 226 . 227) (nil face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) 226 . 227) (226 . 263)) nil (25265 54215 161142 314000) 0 nil])
([nil nil ((#("r" 0 1 (block-side t face web-mode-variable-name-face)) . -246) (undo-tree-id0 . -1) (#("e" 0 1 (block-side t face web-mode-variable-name-face)) . -247) (undo-tree-id1 . -1) (#("s" 0 1 (block-side t face web-mode-variable-name-face)) . -248) (undo-tree-id2 . -1) (#("o" 0 1 (block-side t face web-mode-variable-name-face)) . -249) (undo-tree-id3 . -1) (#("u" 0 1 (block-side t face web-mode-variable-name-face)) . -250) (undo-tree-id4 . -1) (#("r" 0 1 (block-side t face web-mode-variable-name-face)) . -251) (undo-tree-id5 . -1) (#("c" 0 1 (block-side t face web-mode-variable-name-face)) . -252) (undo-tree-id6 . -1) (#("e" 0 1 (block-side t face web-mode-variable-name-face)) . -253) (undo-tree-id7 . -1) (#("s" 0 1 (block-side t face web-mode-variable-name-face)) . -254) (undo-tree-id8 . -1) 255) nil (25265 54215 161130 7000) 0 nil])
([nil nil ((246 . 250)) nil (25265 54215 161098 652000) 0 nil])
([nil nil ((302 . 303) 250) nil (25266 56930 88148 175000) 0 nil])
([nil nil ((39 . 42) (t 25265 54215 163681 79000)) nil (25266 57108 678595 985000) 0 nil] [nil nil ((39 . 43) (t 25265 54215 163681 79000)) (("



" . 39) (undo-tree-id0 . -2) (undo-tree-id1 . -3) (undo-tree-id2 . -2)) (25266 56930 87540 959000) 0 nil] [nil nil ((41 . 42) (75 . 76) (t 25265 54215 163681 79000)) (("#" . 75) (#("#" 0 1 (font-lock-face web-mode-comment-face block-token comment block-side t)) . 41)) (25266 56924 639012 61000) 0 nil])
([nil nil ((nil block-side t 76 . 77) (nil block-end t 76 . 77) (nil block-token delimiter-end 76 . 77) (nil font-lock-face web-mode-block-delimiter-face 76 . 77) (nil face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) 76 . 77) (nil block-side t 75 . 76) (nil block-token delimiter-end 75 . 76) (nil font-lock-face web-mode-block-delimiter-face 75 . 76) (nil block-side t 74 . 75) (nil block-side t 73 . 74) (nil face web-mode-variable-name-face 73 . 74) (nil block-side t 72 . 73) (nil block-side t 67 . 72) (nil face web-mode-variable-name-face 67 . 72) (nil block-side t 66 . 67) (nil block-side t 56 . 66) (nil face web-mode-variable-name-face 56 . 66) (nil block-side t 55 . 56) (nil block-side t 53 . 55) (nil face web-mode-keyword-face 53 . 55) (nil block-side t 52 . 53) (nil block-side t 48 . 52) (nil face web-mode-variable-name-face 48 . 52) (nil block-side t 47 . 48) (nil block-side t 44 . 47) (nil face web-mode-block-control-face 44 . 47) (nil block-side t 43 . 44) (nil block-side t 42 . 43) (nil block-token delimiter-beg 42 . 43) (nil font-lock-face web-mode-block-delimiter-face 42 . 43) (nil block-beg 0 41 . 42) (nil block-controls 0 41 . 42) (nil block-side t 41 . 42) (nil block-token delimiter-beg 41 . 42) (nil font-lock-face web-mode-block-delimiter-face 41 . 42) (nil face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) 41 . 42) (41 . 78)) nil (25266 57108 678591 830000) 0 nil])
nil
nil
([nil nil ((80 . 82) ("  " . 79) (undo-tree-id13 . -2) (79 . 82) ("  " . 78) (undo-tree-id14 . -2) (77 . 81)) nil (25266 57108 678579 359000) 0 nil])
([nil nil (("  " . -80) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (nil rear-nonsticky nil 93 . 94) (nil block-side t 93 . 94) (nil block-end t 93 . 94) (nil block-token delimiter-end 93 . 94) (nil font-lock-face web-mode-block-delimiter-face 93 . 94) (nil face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) 93 . 94) (nil block-side t 92 . 93) (nil block-token delimiter-end 92 . 93) (nil font-lock-face web-mode-block-delimiter-face 92 . 93) (nil block-side t 91 . 92) (nil block-side t 85 . 91) (nil face web-mode-block-control-face 85 . 91) (nil block-side t 84 . 85) (nil block-side t 83 . 84) (nil block-token delimiter-beg 83 . 84) (nil font-lock-face web-mode-block-delimiter-face 83 . 84) (nil block-beg 0 82 . 83) (nil block-controls 0 82 . 83) (nil block-side t 82 . 83) (nil block-token delimiter-beg 82 . 83) (nil font-lock-face web-mode-block-delimiter-face 82 . 83) (nil face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) 82 . 83) (82 . 94)) nil (25266 57110 111037 276000) 0 nil])
([nil nil ((#("{% for post in site.posts limit:3 %}


{% endfor %}" 0 1 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 1 2 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face) 2 3 (block-side t) 3 6 (block-side t face web-mode-block-control-face) 6 7 (block-side t) 7 11 (block-side t face web-mode-variable-name-face) 11 12 (block-side t) 12 14 (block-side t face web-mode-keyword-face) 14 15 (block-side t) 15 20 (block-side t face web-mode-variable-name-face) 20 21 (block-side t face web-mode-variable-name-face) 21 22 (block-side t face web-mode-variable-name-face) 22 23 (block-side t face web-mode-variable-name-face) 23 24 (block-side t face web-mode-variable-name-face) 24 25 (block-side t face web-mode-variable-name-face) 25 26 (block-side t) 26 27 (block-side t face web-mode-variable-name-face) 27 28 (block-side t face web-mode-variable-name-face) 28 29 (block-side t face web-mode-variable-name-face) 29 30 (block-side t face web-mode-variable-name-face) 30 31 (block-side t face web-mode-variable-name-face) 31 32 (block-side t) 32 33 (block-side t face web-mode-variable-name-face) 33 34 (block-side t) 34 35 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face) 35 36 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 39 40 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 40 41 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face) 41 42 (block-side t) 42 48 (block-side t face web-mode-block-control-face) 48 49 (block-side t) 49 50 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face) 50 51 (rear-nonsticky t block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face))) . 41) (undo-tree-id58 . -20) (undo-tree-id59 . -51) (undo-tree-id60 . -36) (undo-tree-id61 . -36) (undo-tree-id62 . -39) (undo-tree-id63 . -11) (undo-tree-id64 . -51) (undo-tree-id65 . -20) (undo-tree-id66 . -51) (undo-tree-id67 . -37) (undo-tree-id68 . -51) (undo-tree-id69 . -51) (undo-tree-id70 . -11) (undo-tree-id71 . -51)) nil (25266 57197 538147 896000) 0 nil] [nil nil ((#("


{% include sections/platform.html %}

{% include sections/prices.html %}

{% include sections/services.html %}

{% include sections/story.html %}

{% include sections/resources.html %}

{% include sections/blog.html %}

{% include sections/standinContact.html %}" 3 4 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 4 5 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face) 5 6 (block-side t) 6 13 (block-side t face web-mode-block-control-face) 13 14 (block-side t) 14 22 (block-side t face web-mode-variable-name-face) 22 23 (block-side t) 23 36 (block-side t face web-mode-variable-name-face) 36 37 (block-side t) 37 38 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face) 38 39 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 41 42 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 42 43 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face) 43 44 (block-side t) 44 51 (block-side t face web-mode-block-control-face) 51 52 (block-side t) 52 60 (block-side t face web-mode-variable-name-face) 60 61 (block-side t) 61 72 (block-side t face web-mode-variable-name-face) 72 73 (block-side t) 73 74 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face) 74 75 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 77 78 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 78 79 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face) 79 80 (block-side t) 80 87 (block-side t face web-mode-block-control-face) 87 88 (block-side t) 88 96 (block-side t face web-mode-variable-name-face) 96 97 (block-side t) 97 110 (block-side t face web-mode-variable-name-face) 110 111 (block-side t) 111 112 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face) 112 113 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 115 116 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 116 117 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face) 117 118 (block-side t) 118 125 (block-side t face web-mode-block-control-face) 125 126 (block-side t) 126 134 (block-side t face web-mode-variable-name-face) 134 135 (block-side t) 135 145 (block-side t face web-mode-variable-name-face) 145 146 (block-side t) 146 147 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face) 147 148 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 150 151 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 151 152 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face) 152 153 (block-side t) 153 160 (block-side t face web-mode-block-control-face) 160 161 (block-side t) 161 169 (block-side t face web-mode-variable-name-face) 169 170 (block-side t) 170 184 (block-side t face web-mode-variable-name-face) 184 185 (block-side t) 185 186 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face) 186 187 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 189 190 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 190 191 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face) 191 192 (block-side t) 192 199 (block-side t face web-mode-block-control-face) 199 200 (block-side t) 200 208 (block-side t face web-mode-variable-name-face) 208 209 (block-side t) 209 218 (block-side t face web-mode-variable-name-face) 218 219 (block-side t) 219 220 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face) 220 221 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 223 224 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 224 225 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face) 225 226 (block-side t) 226 233 (block-side t face web-mode-block-control-face) 233 234 (block-side t) 234 242 (block-side t face web-mode-variable-name-face) 242 243 (block-side t) 243 262 (block-side t face web-mode-variable-name-face) 262 263 (block-side t) 263 264 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face) 264 265 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face))) . 92) (undo-tree-id4 . -1) (undo-tree-id5 . -265) (undo-tree-id6 . -1) (undo-tree-id7 . -222) (undo-tree-id8 . -265) (undo-tree-id9 . -222) (undo-tree-id10 . -265)) ((92 . 357)) (25266 57109 768352 632000) 0 nil])
([nil nil (("
" . -39) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) ("
" . -40) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) 41) nil (25266 57197 538125 74000) 0 nil])
([nil nil ((#("3" 0 1 (block-side t face web-mode-variable-name-face)) . 61) (#(":" 0 1 (block-side t)) . 61) (#("t" 0 1 (block-side t face web-mode-variable-name-face)) . 61) (#("i" 0 1 (block-side t face web-mode-variable-name-face)) . 61) (#("m" 0 1 (block-side t face web-mode-variable-name-face)) . 61) (#("i" 0 1 (block-side t face web-mode-variable-name-face)) . 61) (#("l" 0 1 (block-side t face web-mode-variable-name-face)) . 61) (#(" " 0 1 (block-side t)) . 61) (#("s" 0 1 (block-side t face web-mode-variable-name-face)) . 61) (#("t" 0 1 (block-side t face web-mode-variable-name-face)) . 61) (#("s" 0 1 (block-side t face web-mode-variable-name-face)) . 61) (#("o" 0 1 (block-side t face web-mode-variable-name-face)) . 61) (#("p" 0 1 (block-side t face web-mode-variable-name-face)) . 61)) ((61 . 62) (61 . 62) (61 . 62) (61 . 62) (61 . 62) (61 . 62) (61 . 62) (61 . 62) (61 . 62) (61 . 62) (61 . 62) (61 . 62) (61 . 62)) (25266 57109 477490 471000) 0 nil])
([nil nil ((#("platform.html" 0 13 (block-side t face web-mode-variable-name-face)) . 62) (undo-tree-id25 . -13) (undo-tree-id26 . -13) (undo-tree-id27 . -13)) nil (25266 57197 538085 386000) 0 nil])
([nil nil ((#("post" 0 4 (block-side t face web-mode-variable-name-face)) . 48) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4)) ((48 . 52)) (25266 57109 282505 61000) 0 nil])
([nil nil ((62 . 75)) nil (25266 57197 538079 262000) 0 nil])
([nil nil ((48 . 55)) ((#("section" 0 7 (block-side t face web-mode-variable-name-face)) . 48)) (25266 57108 992318 410000) 0 nil])
([nil nil ((#("

{% include sections/prices.html %}

{% include sections/services.html %}

{% include sections/story.html %}

{% include sections/resources.html %}

{% include sections/blog.html %}

{% include sections/standinContact.html %}" 2 3 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 3 4 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face) 4 5 (block-side t) 5 12 (block-side t face web-mode-block-control-face) 12 13 (block-side t) 13 21 (block-side t face web-mode-variable-name-face) 21 22 (block-side t) 22 33 (block-side t face web-mode-variable-name-face) 33 34 (block-side t) 34 35 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face) 35 36 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 38 39 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 39 40 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face) 40 41 (block-side t) 41 48 (block-side t face web-mode-block-control-face) 48 49 (block-side t) 49 57 (block-side t face web-mode-variable-name-face) 57 58 (block-side t) 58 71 (block-side t face web-mode-variable-name-face) 71 72 (block-side t) 72 73 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face) 73 74 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 76 77 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 77 78 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face) 78 79 (block-side t) 79 86 (block-side t face web-mode-block-control-face) 86 87 (block-side t) 87 95 (block-side t face web-mode-variable-name-face) 95 96 (block-side t) 96 106 (block-side t face web-mode-variable-name-face) 106 107 (block-side t) 107 108 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face) 108 109 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 111 112 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 112 113 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face) 113 114 (block-side t) 114 121 (block-side t face web-mode-block-control-face) 121 122 (block-side t) 122 130 (block-side t face web-mode-variable-name-face) 130 131 (block-side t) 131 145 (block-side t face web-mode-variable-name-face) 145 146 (block-side t) 146 147 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face) 147 148 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 150 151 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 151 152 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face) 152 153 (block-side t) 153 160 (block-side t face web-mode-block-control-face) 160 161 (block-side t) 161 169 (block-side t face web-mode-variable-name-face) 169 170 (block-side t) 170 179 (block-side t face web-mode-variable-name-face) 179 180 (block-side t) 180 181 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face) 181 182 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 184 185 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 185 186 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face) 186 187 (block-side t) 187 194 (block-side t face web-mode-block-control-face) 194 195 (block-side t) 195 203 (block-side t face web-mode-variable-name-face) 203 204 (block-side t) 204 223 (block-side t face web-mode-variable-name-face) 223 224 (block-side t) 224 225 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face) 225 226 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face))) . 78) (undo-tree-id18 . -226) (undo-tree-id19 . -183) (undo-tree-id20 . -226) (undo-tree-id21 . -183) (undo-tree-id22 . -1) (undo-tree-id23 . -183) (undo-tree-id24 . -226)) nil (25266 57197 538073 254000) 0 nil])
([nil nil ((64 . 73)) ((#("sections " 0 8 (block-side t face web-mode-variable-name-face) 8 9 (block-side t)) . 64) (undo-tree-id15 . -8) (undo-tree-id16 . -9) (undo-tree-id17 . -8)) (25266 57108 679065 728000) 0 nil])
([nil nil ((#("sections" 0 8 (block-side t face web-mode-variable-name-face)) . 53) (undo-tree-id72 . -8) (undo-tree-id73 . -8) (t 25266 57197 540163 819000)) nil (25266 58087 322507 878000) 0 nil])
([nil nil ((#(" " 0 1 (block-side t)) . -72) (undo-tree-id0 . -1) 73) ((72 . 73)) (25266 57108 678530 523000) 0 nil])
([nil nil ((53 . 61)) nil (25266 58087 322489 567000) 0 nil])
nil
([nil current ((#("i" 0 1 (block-side t face web-mode-variable-name-face)) . -53) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("n" 0 1 (block-side t face web-mode-variable-name-face)) . -54) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("c" 0 1 (block-side t face web-mode-variable-name-face)) . -55) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("l" 0 1 (block-side t face web-mode-variable-name-face)) . -56) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#("u" 0 1 (block-side t face web-mode-variable-name-face)) . -57) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#("d" 0 1 (block-side t face web-mode-variable-name-face)) . -58) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("e" 0 1 (block-side t face web-mode-variable-name-face)) . -59) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#("s" 0 1 (block-side t face web-mode-variable-name-face)) . -60) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("/" 0 1 (block-side t)) . -61) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) 62 (t 25266 58087 325107 54000)) nil (25266 58108 550162 136000) 0 nil])
nil
