(undo-tree-save-format-version . 1)
"6741a5038dffd78e607c69da6b2445aa4c8b8c94"
[nil nil nil nil (25354 24537 146560 634000) 0 nil]
([nil nil (("Dinosaurs are extinct today" . 26) (undo-tree-id7 . -27) (undo-tree-id8 . -27) (undo-tree-id9 . -27) (undo-tree-id10 . -27) (t 24728 130 0 0)) nil (25354 24537 146558 310000) 0 nil])
([nil nil ((26 . 30)) nil (25354 24537 146552 5000) 0 nil])
([nil nil (("S" . -29) (undo-tree-id6 . -1) 30) nil (25354 24537 146550 568000) 0 nil])
([nil nil ((29 . 42)) nil (25354 24537 146548 43000) 0 nil])
([nil nil ((" " . -41) (undo-tree-id5 . -1) 42) nil (25354 24537 146546 646000) 0 nil])
([nil nil ((41 . 43)) nil (25354 24537 146543 610000) 0 nil])
([nil nil ((" " . -42) (undo-tree-id4 . -1) 43) nil (25354 24537 146542 125000) 0 nil])
([nil nil (("because they lacked opposable thumbs and the brainpower to build a space program." . 55) (undo-tree-id1 . -81) (undo-tree-id2 . -81) (undo-tree-id3 . -81)) nil (25354 24537 146538 980000) 0 nil])
([nil nil ((55 . 76)) nil (25354 24537 146533 24000) 0 nil])
([nil nil ((76 . 97)) nil (25354 24537 146531 755000) 0 nil])
([nil nil ((97 . 99)) nil (25354 24537 146529 856000) 0 nil])
([nil nil ((" " . -98) (undo-tree-id0 . -1) 99) nil (25354 24537 146523 683000) 0 nil])
([nil nil (("
background: '/img/posts/01.jpg'" . 131) (undo-tree-id25 . -1) (undo-tree-id26 . -32) (undo-tree-id27 . -11) (undo-tree-id28 . -11) (undo-tree-id29 . -11) (undo-tree-id30 . -32) (t 25354 24537 232928 642000)) nil (25354 24704 62930 388000) 0 nil])
([nil nil ((#("

<p>Science cuts two ways, of course; its products can be used for both good and evil. But there's no turning back from science. The early warnings about technological dangers also come from science.</p>

<p>What was most significant about the lunar voyage was not that man set foot on the Moon but that they set eye on the earth.</p>

<p>A Chinese tale tells of some men sent to harm a young girl who, upon seeing her beauty, become her protectors rather than her violators. That's how I felt seeing the Earth for the first time. I could not help but love and cherish her.</p>

<p>For those who have seen the Earth from space, and for the hundreds and perhaps thousands more who will, the experience most certainly changes your perspective. The things that we share in our world are far more valuable than those which divide us.</p>

<h2 class=\"section-heading\">The Final Frontier</h2>

<p>There can be no thought of finishing for ‘aiming for the stars.’ Both figuratively and literally, it is a task to occupy the generations. And no matter how much progress one makes, there is always the thrill of just beginning.</p>

<p>There can be no thought of finishing for ‘aiming for the stars.’ Both figuratively and literally, it is a task to occupy the generations. And no matter how much progress one makes, there is always the thrill of just beginning.</p>

<blockquote class=\"blockquote\">The dreams of yesterday are the hopes of today and the reality of tomorrow. Science has not yet mastered prophecy. We predict too much for the next year and yet far too little for the next ten.</blockquote>

<p>Spaceflights cannot be stopped. This is not the work of any one man or even a group of men. It is a historical process which mankind is carrying out in accordance with the natural laws of human development.</p>

<h2 class=\"section-heading\">Reaching for the Stars</h2>

<p>As we got further and further away, it [the Earth] diminished in size. Finally it shrank to the size of a marble, the most beautiful you can imagine. That beautiful, warm, living object looked so fragile, so delicate, that if you touched it with a finger it would crumble and fall apart. Seeing this has to change a man.</p>

<img class=\"img-fluid\" src=\"https://source.unsplash.com/Mn9Fa_wQH-M/800x450\" alt=\"Demo Image\">
<span class=\"caption text-muted\">To go places and do things that have never been done before – that’s what living is all about.</span>

<p>Space, the final frontier. These are the voyages of the Starship Enterprise. Its five-year mission: to explore strange new worlds, to seek out new life and new civilizations, to boldly go where no man has gone before.</p>

<p>As I stand out here in the wonders of the unknown at Hadley, I sort of realize there’s a fundamental truth to our nature, Man must explore, and this is exploration at its greatest.</p>

<p>Placeholder text by <a href=\"http://spaceipsum.com/\">Space Ipsum</a>. Photographs by <a href=\"https://unsplash.com/\">Unsplash</a>.</p>" 2 3 (font-lock-face web-mode-html-tag-bracket-face tag-beg 16 tag-type start tag-name "p") 3 4 (font-lock-face web-mode-html-tag-face tag-type start tag-name "p") 4 5 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "p") 152 200 (face (whitespace-line)) 200 201 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 201 202 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 202 203 (face (whitespace-line web-mode-html-tag-face) font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 203 204 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p") 206 207 (font-lock-face web-mode-html-tag-bracket-face tag-beg 16 tag-type start tag-name "p") 207 208 (font-lock-face web-mode-html-tag-face tag-type start tag-name "p") 208 209 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "p") 331 332 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 332 333 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 333 334 (font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 334 335 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p") 337 338 (font-lock-face web-mode-html-tag-bracket-face tag-beg 16 tag-type start tag-name "p") 338 339 (font-lock-face web-mode-html-tag-face tag-type start tag-name "p") 339 340 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "p") 487 574 (face (whitespace-line)) 574 575 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 575 576 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 576 577 (face (whitespace-line web-mode-html-tag-face) font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 577 578 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p") 580 581 (font-lock-face web-mode-html-tag-bracket-face tag-beg 16 tag-type start tag-name "p") 581 582 (font-lock-face web-mode-html-tag-face tag-type start tag-name "p") 582 583 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "p") 730 830 (face (whitespace-line)) 830 831 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 831 832 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 832 833 (face (whitespace-line web-mode-html-tag-face) font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 833 834 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p") 836 837 (font-lock-face web-mode-html-tag-bracket-face tag-beg 17 tag-type start tag-name "h2") 837 839 (font-lock-face web-mode-html-tag-face tag-type start tag-name "h2") 839 840 (tag-type start tag-name "h2") 840 841 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "h2" tag-attr t tag-attr-beg 0) 841 845 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "h2" tag-attr t) 845 846 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "h2" tag-attr t) 846 862 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "h2" tag-attr t) 862 863 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "h2" tag-attr-end 5 tag-attr t) 863 864 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "h2") 882 883 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "h2") 883 884 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "h2") 884 886 (font-lock-face web-mode-html-tag-face tag-type end tag-name "h2") 886 887 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "h2") 889 890 (font-lock-face web-mode-html-tag-bracket-face tag-beg 16 tag-type start tag-name "p") 890 891 (font-lock-face web-mode-html-tag-face tag-type start tag-name "p") 891 892 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "p") 1039 1118 (face (whitespace-line)) 1118 1119 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 1119 1120 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 1120 1121 (face (whitespace-line web-mode-html-tag-face) font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 1121 1122 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p") 1124 1125 (font-lock-face web-mode-html-tag-bracket-face tag-beg 16 tag-type start tag-name "p") 1125 1126 (font-lock-face web-mode-html-tag-face tag-type start tag-name "p") 1126 1127 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "p") 1274 1353 (face (whitespace-line)) 1353 1354 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 1354 1355 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 1355 1356 (face (whitespace-line web-mode-html-tag-face) font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 1356 1357 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p") 1359 1360 (font-lock-face web-mode-html-tag-bracket-face tag-beg 17 tag-type start tag-name "blockquote") 1360 1370 (font-lock-face web-mode-html-tag-face tag-type start tag-name "blockquote") 1370 1371 (tag-type start tag-name "blockquote") 1371 1372 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "blockquote" tag-attr t tag-attr-beg 0) 1372 1376 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "blockquote" tag-attr t) 1376 1377 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "blockquote" tag-attr t) 1377 1388 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "blockquote" tag-attr t) 1388 1389 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "blockquote" tag-attr-end 5 tag-attr t) 1389 1390 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "blockquote") 1509 1583 (face (whitespace-line)) 1583 1584 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "blockquote") 1584 1585 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "blockquote") 1585 1595 (face (whitespace-line web-mode-html-tag-face) font-lock-face web-mode-html-tag-face tag-type end tag-name "blockquote") 1595 1596 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "blockquote") 1598 1599 (font-lock-face web-mode-html-tag-bracket-face tag-beg 16 tag-type start tag-name "p") 1599 1600 (font-lock-face web-mode-html-tag-face tag-type start tag-name "p") 1600 1601 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "p") 1748 1807 (face (whitespace-line)) 1807 1808 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 1808 1809 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 1809 1810 (face (whitespace-line web-mode-html-tag-face) font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 1810 1811 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p") 1813 1814 (font-lock-face web-mode-html-tag-bracket-face tag-beg 17 tag-type start tag-name "h2") 1814 1816 (font-lock-face web-mode-html-tag-face tag-type start tag-name "h2") 1816 1817 (tag-type start tag-name "h2") 1817 1818 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "h2" tag-attr t tag-attr-beg 0) 1818 1822 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "h2" tag-attr t) 1822 1823 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "h2" tag-attr t) 1823 1839 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "h2" tag-attr t) 1839 1840 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "h2" tag-attr-end 5 tag-attr t) 1840 1841 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "h2") 1863 1864 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "h2") 1864 1865 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "h2") 1865 1867 (font-lock-face web-mode-html-tag-face tag-type end tag-name "h2") 1867 1868 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "h2") 1870 1871 (font-lock-face web-mode-html-tag-bracket-face tag-beg 16 tag-type start tag-name "p") 1871 1872 (font-lock-face web-mode-html-tag-face tag-type start tag-name "p") 1872 1873 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "p") 1912 1913 (face (rainbow-delimiters-depth-1-face)) 1922 1923 (face (rainbow-delimiters-depth-1-face)) 2020 2193 (face (whitespace-line)) 2193 2194 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 2194 2195 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 2195 2196 (face (whitespace-line web-mode-html-tag-face) font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 2196 2197 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p") 2199 2200 (font-lock-face web-mode-html-tag-bracket-face tag-beg 17 tag-type void tag-name "img") 2200 2203 (font-lock-face web-mode-html-tag-face tag-type void tag-name "img") 2203 2204 (tag-type void tag-name "img") 2204 2205 (font-lock-face web-mode-html-attr-name-face tag-type void tag-name "img" tag-attr t tag-attr-beg 0) 2205 2209 (font-lock-face web-mode-html-attr-name-face tag-type void tag-name "img" tag-attr t) 2209 2210 (font-lock-face web-mode-html-attr-equal-face tag-type void tag-name "img" tag-attr t) 2210 2220 (font-lock-face web-mode-html-attr-value-face tag-type void tag-name "img" tag-attr t) 2220 2221 (font-lock-face web-mode-html-attr-value-face tag-type void tag-name "img" tag-attr-end 5 tag-attr t) 2221 2222 (tag-type void tag-name "img") 2222 2223 (font-lock-face web-mode-html-attr-name-face tag-type void tag-name "img" tag-attr t tag-attr-beg 0) 2223 2225 (font-lock-face web-mode-html-attr-name-face tag-type void tag-name "img" tag-attr t) 2225 2226 (font-lock-face web-mode-html-attr-equal-face tag-type void tag-name "img" tag-attr t) 2226 2274 (font-lock-face web-mode-html-attr-value-face tag-type void tag-name "img" tag-attr t) 2274 2275 (font-lock-face web-mode-html-attr-value-face tag-type void tag-name "img" tag-attr-end 3 tag-attr t) 2275 2276 (tag-type void tag-name "img") 2276 2277 (font-lock-face web-mode-html-attr-name-face tag-type void tag-name "img" tag-attr t tag-attr-beg 0) 2277 2279 (font-lock-face web-mode-html-attr-name-face tag-type void tag-name "img" tag-attr t) 2279 2280 (font-lock-face web-mode-html-attr-equal-face tag-type void tag-name "img" tag-attr t) 2280 2291 (font-lock-face web-mode-html-attr-value-face tag-type void tag-name "img" tag-attr t) 2291 2292 (font-lock-face web-mode-html-attr-value-face tag-type void tag-name "img" tag-attr-end 3 tag-attr t) 2292 2293 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type void tag-name "img") 2294 2295 (font-lock-face web-mode-html-tag-bracket-face tag-beg 17 tag-type start tag-name "span") 2295 2299 (font-lock-face web-mode-html-tag-face tag-type start tag-name "span") 2299 2300 (tag-type start tag-name "span") 2300 2301 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "span" tag-attr t tag-attr-beg 0) 2301 2305 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "span" tag-attr t) 2305 2306 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "span" tag-attr t) 2306 2325 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "span" tag-attr t) 2325 2326 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "span" tag-attr-end 5 tag-attr t) 2326 2327 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "span") 2421 2422 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "span") 2422 2423 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "span") 2423 2427 (font-lock-face web-mode-html-tag-face tag-type end tag-name "span") 2427 2428 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "span") 2430 2431 (font-lock-face web-mode-html-tag-bracket-face tag-beg 16 tag-type start tag-name "p") 2431 2432 (font-lock-face web-mode-html-tag-face tag-type start tag-name "p") 2432 2433 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "p") 2580 2650 (face (whitespace-line)) 2650 2651 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 2651 2652 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 2652 2653 (face (whitespace-line web-mode-html-tag-face) font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 2653 2654 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p") 2656 2657 (font-lock-face web-mode-html-tag-bracket-face tag-beg 16 tag-type start tag-name "p") 2657 2658 (font-lock-face web-mode-html-tag-face tag-type start tag-name "p") 2658 2659 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "p") 2806 2839 (face (whitespace-line)) 2839 2840 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 2840 2841 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 2841 2842 (face (whitespace-line web-mode-html-tag-face) font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 2842 2843 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p") 2845 2846 (font-lock-face web-mode-html-tag-bracket-face tag-beg 16 tag-type start tag-name "p") 2846 2847 (font-lock-face web-mode-html-tag-face tag-type start tag-name "p") 2847 2848 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "p") 2868 2869 (font-lock-face web-mode-html-tag-bracket-face tag-beg 17 tag-type start tag-name "a") 2869 2870 (font-lock-face web-mode-html-tag-face tag-type start tag-name "a") 2870 2871 (tag-type start tag-name "a") 2871 2872 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "a" tag-attr t tag-attr-beg 0) 2872 2875 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "a" tag-attr t) 2875 2876 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "a" tag-attr t) 2876 2899 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "a" tag-attr t) 2899 2900 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "a" tag-attr-end 4 tag-attr t) 2900 2901 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "a") 2912 2913 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "a") 2913 2914 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "a") 2914 2915 (font-lock-face web-mode-html-tag-face tag-type end tag-name "a") 2915 2916 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "a") 2933 2934 (font-lock-face web-mode-html-tag-bracket-face tag-beg 17 tag-type start tag-name "a") 2934 2935 (font-lock-face web-mode-html-tag-face tag-type start tag-name "a") 2935 2936 (tag-type start tag-name "a") 2936 2937 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "a" tag-attr t tag-attr-beg 0) 2937 2940 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "a" tag-attr t) 2940 2941 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "a" tag-attr t) 2941 2963 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "a" tag-attr t) 2963 2964 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "a" tag-attr-end 4 tag-attr t) 2964 2965 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "a") 2973 2974 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "a") 2974 2975 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "a") 2975 2976 (font-lock-face web-mode-html-tag-face tag-type end tag-name "a") 2976 2977 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "a") 2978 2979 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 2979 2980 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 2980 2981 (font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 2981 2982 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p")) . 561) (undo-tree-id19 . -1) (undo-tree-id20 . -2982) (undo-tree-id21 . -2982) (undo-tree-id22 . -157) (undo-tree-id23 . -2982) (undo-tree-id24 . -2982)) nil (25354 24704 62922 139000) 0 nil])
([nil nil ((#("Never in all their history have men been able truly to conceive of the world as one: a single sphere, a globe, having the qualities of a globe, a round earth in which all the directions eventually meet, in which there is no center because every point, or none, is center — an equal earth which all men occupy as equals. The airman's earth, if free men make it, will be truly round: a globe in practice, not in theory." 147 417 (face (whitespace-line))) . 140) (undo-tree-id17 . -417) (undo-tree-id18 . -417)) nil (25354 24704 62914 150000) 0 nil])
([nil nil ((140 . 158)) nil (25354 24704 62910 614000) 0 nil])
([nil nil ((158 . 170)) nil (25354 24704 62909 612000) 0 nil])
([nil nil ((" " . -169) (undo-tree-id16 . -1) 170) nil (25354 24704 62908 221000) 0 nil])
([nil nil ((169 . 177)) nil (25354 24704 62905 728000) 0 nil])
([nil nil ((177 . 198)) nil (25354 24704 62904 620000) 0 nil])
([nil nil ((198 . 202)) nil (25354 24704 62903 237000) 0 nil])
([nil nil ((" " . -201) (undo-tree-id15 . -1) 202) nil (25354 24704 62901 794000) 0 nil])
([nil nil ((201 . 203)) nil (25354 24704 62899 218000) 0 nil])
([nil nil ((203 . 224)) nil (25354 24704 62898 197000) 0 nil])
([nil nil ((224 . 226)) nil (25354 24704 62897 116000) 0 nil])
([nil nil ((" " . -225) (undo-tree-id14 . -1) 226) nil (25354 24704 62895 693000) 0 nil])
([nil nil ((225 . 227)) nil (25354 24704 62892 439000) 0 nil])
([nil nil ((" " . -226) (undo-tree-id13 . -1) 227) nil (25354 24704 62890 574000) 0 nil])
([nil nil (("Today is the day that the website went live" . 55) (undo-tree-id11 . -43) (undo-tree-id12 . -43)) nil (25354 24704 62886 279000) 0 nil])
([nil nil ((55 . 141)) nil (25354 24704 62869 787000) 0 nil])
([nil nil (("The website has been launched, some content has been uploaded, now the furture awaits." . 183) (undo-tree-id132 . -51) (undo-tree-id133 . -86) (undo-tree-id134 . -85) (undo-tree-id135 . -86) (undo-tree-id136 . -86) (t 25354 24704 82684 345000)) nil (25354 24785 257028 256000) 0 nil])
([nil nil ((183 . 204)) nil (25354 24785 257021 400000) 0 nil])
([nil nil ((204 . 224)) nil (25354 24785 257020 388000) 0 nil])
([nil nil ((" " . -223) (undo-tree-id131 . -1) 224) nil (25354 24785 257019 71000) 0 nil])
([nil nil ((223 . 225)) nil (25354 24785 257016 570000) 0 nil])
([nil nil ((225 . 246)) nil (25354 24785 257015 522000) 0 nil])
([nil nil ((246 . 255)) nil (25354 24785 257014 472000) 0 nil])
([nil nil ((" " . -248) (undo-tree-id119 . -1) (undo-tree-id120 . -1) ("i" . -249) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (" " . -250) (undo-tree-id123 . -1) (undo-tree-id124 . -1) ("h" . -251) (undo-tree-id125 . -1) (undo-tree-id126 . -1) ("a" . -252) (undo-tree-id127 . -1) (undo-tree-id128 . -1) ("d" . -253) (undo-tree-id129 . -1) (" " . -254) (undo-tree-id130 . -1) 255) nil (25354 24785 257011 555000) 0 nil])
([nil nil ((248 . 249)) nil (25354 24785 256996 226000) 0 nil])
([nil nil ((249 . 270)) nil (25354 24785 256994 955000) 0 nil])
([nil nil ((270 . 278)) nil (25354 24785 256993 564000) 0 nil])
([nil nil ((278 . 299)) nil (25354 24785 256992 539000) 0 nil])
([nil nil ((299 . 307)) nil (25354 24785 256991 360000) 0 nil])
([nil nil (("s" . -306) (undo-tree-id118 . -1) 307) nil (25354 24785 256990 53000) 0 nil])
([nil nil ((306 . 314)) nil (25354 24785 256987 529000) 0 nil])
([nil nil ((" " . -313) (undo-tree-id117 . -1) 314) nil (25354 24785 256986 273000) 0 nil])
([nil nil ((313 . 315)) nil (25354 24785 256983 918000) 0 nil])
([nil nil (("a" . -306) (undo-tree-id103 . -1) (undo-tree-id104 . -1) ("s" . -307) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (" " . -308) (undo-tree-id107 . -1) (undo-tree-id108 . -1) ("w" . -309) (undo-tree-id109 . -1) (undo-tree-id110 . -1) ("e" . -310) (undo-tree-id111 . -1) (undo-tree-id112 . -1) ("l" . -311) (undo-tree-id113 . -1) ("l" . -312) (undo-tree-id114 . -1) ("," . -313) (undo-tree-id115 . -1) (" " . -314) (undo-tree-id116 . -1) 315) nil (25354 24785 256980 503000) 0 nil])
([nil nil ((" " . -285) (undo-tree-id61 . -1) (undo-tree-id62 . -1) ("s" . -286) (undo-tree-id63 . -1) (undo-tree-id64 . -1) ("t" . -287) (undo-tree-id65 . -1) (undo-tree-id66 . -1) ("o" . -288) (undo-tree-id67 . -1) (undo-tree-id68 . -1) ("r" . -289) (undo-tree-id69 . -1) (undo-tree-id70 . -1) ("y" . -290) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (" " . -291) (undo-tree-id73 . -1) (undo-tree-id74 . -1) ("w" . -292) (undo-tree-id75 . -1) (undo-tree-id76 . -1) ("i" . -293) (undo-tree-id77 . -1) (undo-tree-id78 . -1) ("l" . -294) (undo-tree-id79 . -1) (undo-tree-id80 . -1) ("l" . -295) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (" " . -296) (undo-tree-id83 . -1) (undo-tree-id84 . -1) ("b" . -297) (undo-tree-id85 . -1) (undo-tree-id86 . -1) ("e" . -298) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (" " . -299) (undo-tree-id89 . -1) (undo-tree-id90 . -1) ("a" . -300) (undo-tree-id91 . -1) (undo-tree-id92 . -1) ("d" . -301) (undo-tree-id93 . -1) (undo-tree-id94 . -1) ("d" . -302) (undo-tree-id95 . -1) (undo-tree-id96 . -1) ("e" . -303) (undo-tree-id97 . -1) (undo-tree-id98 . -1) ("d" . -304) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (" " . -305) (undo-tree-id101 . -1) (undo-tree-id102 . -1) 306) nil (25354 24785 256955 948000) 0 nil])
([nil nil (("a" . -278) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (" " . -279) (undo-tree-id49 . -1) (undo-tree-id50 . -1) ("s" . -280) (undo-tree-id51 . -1) (undo-tree-id52 . -1) ("h" . -281) (undo-tree-id53 . -1) (undo-tree-id54 . -1) ("o" . -282) (undo-tree-id55 . -1) (undo-tree-id56 . -1) ("r" . -283) (undo-tree-id57 . -1) (undo-tree-id58 . -1) ("t" . -284) (undo-tree-id59 . -1) (undo-tree-id60 . -1) 285) nil (25354 24785 256887 630000) 0 nil])
([nil nil ((278 . 294)) nil (25354 24785 256869 851000) 0 nil])
([nil nil ((" " . -293) (undo-tree-id46 . -1) 294) nil (25354 24785 256868 632000) 0 nil])
([nil nil ((293 . 302)) nil (25354 24785 256866 301000) 0 nil])
([nil nil (("\\" . -295) (undo-tree-id39 . -1) ("i" . -296) (undo-tree-id40 . -1) (">" . -297) (undo-tree-id41 . -1) ("<" . -298) (undo-tree-id42 . -1) ("/" . -299) (undo-tree-id43 . -1) (#("p" 0 1 (font-lock-face web-mode-html-tag-unclosed-face tag-end t tag-type end tag-name "p")) . -300) (undo-tree-id44 . -1) (#(">" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p")) . -301) (undo-tree-id45 . -1) 302) nil (25354 24785 256863 737000) 0 nil])
([nil nil ((298 . 299) (295 . 302)) nil (25354 24785 256852 816000) 0 nil])
([nil nil ((" " . -298) (undo-tree-id38 . -1) 299) nil (25354 24785 256851 334000) 0 nil])
([nil nil ((298 . 302)) nil (25354 24785 256848 978000) 0 nil])
([nil nil (("a" . -301) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 302) nil (25354 24785 256847 593000) 0 nil])
([nil nil ((301 . 304)) nil (25354 24785 256843 851000) 0 nil])
([nil nil (("r" . -302) (undo-tree-id34 . -1) ("a" . -303) (undo-tree-id35 . -1) 304) nil (25354 24785 256842 325000) 0 nil])
([nil nil ((302 . 317)) nil (25354 24785 256838 306000) 0 nil])
([nil nil ((" " . -316) (undo-tree-id33 . -1) 317) nil (25354 24785 256836 898000) 0 nil])
([nil nil ((320 . 341)) nil (25354 24785 256834 154000) 0 nil])
([nil nil ((341 . 343)) nil (25354 24785 256833 20000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -342) (undo-tree-id32 . -1) 343) nil (25354 24785 256831 227000) 0 nil])
([nil nil ((342 . 344)) nil (25354 24785 256826 873000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -343) (undo-tree-id31 . -1) 344) nil (25354 24785 256821 309000) 0 nil])
([nil nil ((320 . 321) (t 25354 24785 279552 278000)) nil (25354 24814 582351 726000) 0 nil])
([nil nil (("some " . 86) (undo-tree-id137 . -5) (undo-tree-id138 . -5)) nil (25354 24814 582344 327000) 0 nil])
([nil nil ((339 . 340) (t 25354 24814 599867 518000)) nil (25354 24914 119026 992000) 0 nil])
([nil nil ((340 . 354)) nil (25354 24914 119025 620000) 0 nil])
([nil nil ((#("c" 0 1 (face (whitespace-line))) . -352) (undo-tree-id232 . -1) (#("e" 0 1 (face (whitespace-line))) . -353) (undo-tree-id233 . -1) 354) nil (25354 24914 119023 947000) 0 nil])
([nil nil ((352 . 373)) nil (25354 24914 119020 1000) 0 nil])
([nil nil ((373 . 384)) nil (25354 24914 119018 978000) 0 nil])
([nil nil ((#("a" 0 1 (face (whitespace-line))) . -377) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("r" 0 1 (face (whitespace-line))) . -378) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (#("a" 0 1 (face (whitespace-line))) . -379) (undo-tree-id227 . -1) (#("i" 0 1 (face (whitespace-line))) . -380) (undo-tree-id228 . -1) (#("s" 0 1 (face (whitespace-line))) . -381) (undo-tree-id229 . -1) (#("e" 0 1 (face (whitespace-line))) . -382) (undo-tree-id230 . -1) (#(" " 0 1 (face (whitespace-line))) . -383) (undo-tree-id231 . -1) 384) nil (25354 24914 119016 192000) 0 nil])
([nil nil ((377 . 387)) nil (25354 24914 119003 400000) 0 nil])
([nil nil ((#("e" 0 1 (face (whitespace-line))) . -383) (undo-tree-id219 . -1) (#("h" 0 1 (face (whitespace-line))) . -384) (undo-tree-id220 . -1) (#("d" 0 1 (face (whitespace-line))) . -385) (undo-tree-id221 . -1) (#(" " 0 1 (face (whitespace-line))) . -386) (undo-tree-id222 . -1) 387) nil (25354 24914 119001 415000) 0 nil])
([nil nil ((398 . 404) (397 . 399) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face whitespace-line))) . -397) (383 . 398)) nil (25354 24914 118986 497000) 0 nil])
([nil nil ((404 . 419)) nil (25354 24914 118984 239000) 0 nil])
([nil nil ((419 . 429)) nil (25354 24914 118983 155000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -428) (undo-tree-id218 . -1) 429) nil (25354 24914 118981 797000) 0 nil])
([nil nil ((429 . 443)) nil (25354 24914 118979 371000) 0 nil])
([nil nil ((443 . 452)) nil (25354 24914 118978 251000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -446) (undo-tree-id212 . -1) (#("c" 0 1 (face (whitespace-line))) . -447) (undo-tree-id213 . -1) (#("o" 0 1 (face (whitespace-line))) . -448) (undo-tree-id214 . -1) (#("t" 0 1 (face (whitespace-line))) . -449) (undo-tree-id215 . -1) (#("n" 0 1 (face (whitespace-line))) . -450) (undo-tree-id216 . -1) (#("e" 0 1 (face (whitespace-line))) . -451) (undo-tree-id217 . -1) 452) nil (25354 24914 118975 902000) 0 nil])
([nil nil ((446 . 467)) nil (25354 24914 118966 303000) 0 nil])
([nil nil ((467 . 474)) nil (25354 24914 118965 159000) 0 nil])
([nil nil ((#("t" 0 1 (face (whitespace-line))) . -453) (undo-tree-id191 . -1) (#(" " 0 1 (face (whitespace-line))) . -454) (undo-tree-id192 . -1) (#("s" 0 1 (face (whitespace-line))) . -455) (undo-tree-id193 . -1) (#("h" 0 1 (face (whitespace-line))) . -456) (undo-tree-id194 . -1) (#("o" 0 1 (face (whitespace-line))) . -457) (undo-tree-id195 . -1) (#("u" 0 1 (face (whitespace-line))) . -458) (undo-tree-id196 . -1) (#("l" 0 1 (face (whitespace-line))) . -459) (undo-tree-id197 . -1) (#("d" 0 1 (face (whitespace-line))) . -460) (undo-tree-id198 . -1) (#(" " 0 1 (face (whitespace-line))) . -461) (undo-tree-id199 . -1) (#("b" 0 1 (face (whitespace-line))) . -462) (undo-tree-id200 . -1) (#("e" 0 1 (face (whitespace-line))) . -463) (undo-tree-id201 . -1) (#(" " 0 1 (face (whitespace-line))) . -464) (undo-tree-id202 . -1) (#("r" 0 1 (face (whitespace-line))) . -465) (undo-tree-id203 . -1) (#("e" 0 1 (face (whitespace-line))) . -466) (undo-tree-id204 . -1) (#("a" 0 1 (face (whitespace-line))) . -467) (undo-tree-id205 . -1) (#("d" 0 1 (face (whitespace-line))) . -468) (undo-tree-id206 . -1) (#("a" 0 1 (face (whitespace-line))) . -469) (undo-tree-id207 . -1) (#("b" 0 1 (face (whitespace-line))) . -470) (undo-tree-id208 . -1) (#("l" 0 1 (face (whitespace-line))) . -471) (undo-tree-id209 . -1) (#("e" 0 1 (face (whitespace-line))) . -472) (undo-tree-id210 . -1) (#(" " 0 1 (face (whitespace-line))) . -473) (undo-tree-id211 . -1) 474) nil (25354 24914 118955 379000) 0 nil])
([nil nil ((#("c" 0 1 (face (whitespace-line))) . -447) (undo-tree-id185 . -1) (#("o" 0 1 (face (whitespace-line))) . -448) (undo-tree-id186 . -1) (#("n" 0 1 (face (whitespace-line))) . -449) (undo-tree-id187 . -1) (#("t" 0 1 (face (whitespace-line))) . -450) (undo-tree-id188 . -1) (#("e" 0 1 (face (whitespace-line))) . -451) (undo-tree-id189 . -1) (#("n" 0 1 (face (whitespace-line))) . -452) (undo-tree-id190 . -1) 453) nil (25354 24914 118924 304000) 0 nil])
([nil nil ((447 . 468)) nil (25354 24914 118915 104000) 0 nil])
([nil nil ((468 . 482)) nil (25354 24914 118914 3000) 0 nil])
([nil nil ((482 . 485)) nil (25354 24914 118912 835000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -464) (undo-tree-id164 . -1) (#("s" 0 1 (face (whitespace-line))) . -465) (undo-tree-id165 . -1) (#("h" 0 1 (face (whitespace-line))) . -466) (undo-tree-id166 . -1) (#("o" 0 1 (face (whitespace-line))) . -467) (undo-tree-id167 . -1) (#("u" 0 1 (face (whitespace-line))) . -468) (undo-tree-id168 . -1) (#("l" 0 1 (face (whitespace-line))) . -469) (undo-tree-id169 . -1) (#("d" 0 1 (face (whitespace-line))) . -470) (undo-tree-id170 . -1) (#("n" 0 1 (face (whitespace-line))) . -471) (undo-tree-id171 . -1) (#("'" 0 1 (face (whitespace-line))) . -472) (undo-tree-id172 . -1) (#("t" 0 1 (face (whitespace-line))) . -473) (undo-tree-id173 . -1) (#(" " 0 1 (face (whitespace-line))) . -474) (undo-tree-id174 . -1) (#("p" 0 1 (face (whitespace-line))) . -475) (undo-tree-id175 . -1) (#("r" 0 1 (face (whitespace-line))) . -476) (undo-tree-id176 . -1) (#("o" 0 1 (face (whitespace-line))) . -477) (undo-tree-id177 . -1) (#("v" 0 1 (face (whitespace-line))) . -478) (undo-tree-id178 . -1) (#("e" 0 1 (face (whitespace-line))) . -479) (undo-tree-id179 . -1) (#(" " 0 1 (face (whitespace-line))) . -480) (undo-tree-id180 . -1) (#("t" 0 1 (face (whitespace-line))) . -481) (undo-tree-id181 . -1) (#("o" 0 1 (face (whitespace-line))) . -482) (undo-tree-id182 . -1) (#("o" 0 1 (face (whitespace-line))) . -483) (undo-tree-id183 . -1) (#(" " 0 1 (face (whitespace-line))) . -484) (undo-tree-id184 . -1) 485) nil (25354 24914 118907 186000) 0 nil])
([nil nil ((#("c" 0 1 (face (whitespace-line))) . -457) (undo-tree-id157 . -1) (#("o" 0 1 (face (whitespace-line))) . -458) (undo-tree-id158 . -1) (#("n" 0 1 (face (whitespace-line))) . -459) (undo-tree-id159 . -1) (#("t" 0 1 (face (whitespace-line))) . -460) (undo-tree-id160 . -1) (#("e" 0 1 (face (whitespace-line))) . -461) (undo-tree-id161 . -1) (#("n" 0 1 (face (whitespace-line))) . -462) (undo-tree-id162 . -1) (#("t" 0 1 (face (whitespace-line))) . -463) (undo-tree-id163 . -1) 464) nil (25354 24914 118875 278000) 0 nil])
([nil nil ((457 . 471)) nil (25354 24914 118865 158000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -469) (undo-tree-id155 . -1) (#("b" 0 1 (face (whitespace-line))) . -470) (undo-tree-id156 . -1) 471) nil (25354 24914 118863 517000) 0 nil])
([nil nil ((469 . 483)) nil (25354 24914 118859 701000) 0 nil])
([nil nil ((#("v" 0 1 (face (whitespace-line))) . -476) (undo-tree-id148 . -1) (#("v" 0 1 (face (whitespace-line))) . -477) (undo-tree-id149 . -1) (#("e" 0 1 (face (whitespace-line))) . -478) (undo-tree-id150 . -1) (#(" " 0 1 (face (whitespace-line))) . -479) (undo-tree-id151 . -1) (#("t" 0 1 (face (whitespace-line))) . -480) (undo-tree-id152 . -1) (#("o" 0 1 (face (whitespace-line))) . -481) (undo-tree-id153 . -1) (#(" " 0 1 (face (whitespace-line))) . -482) (undo-tree-id154 . -1) 483) nil (25354 24914 118856 861000) 0 nil])
([nil nil ((476 . 480)) nil (25354 24914 118808 551000) 0 nil])
([nil nil ((#("o" 0 1 (face (whitespace-line))) . -476) (undo-tree-id144 . -1) (#("v" 0 1 (face (whitespace-line))) . -477) (undo-tree-id145 . -1) (#("e" 0 1 (face (whitespace-line))) . -478) (undo-tree-id146 . -1) (#(" " 0 1 (face (whitespace-line))) . -479) (undo-tree-id147 . -1) 480) nil (25354 24914 118806 535000) 0 nil])
([nil nil ((476 . 488)) nil (25354 24914 118799 423000) 0 nil])
([nil nil ((488 . 507)) nil (25354 24914 118798 249000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -504) (undo-tree-id141 . -1) (#("t" 0 1 (face (whitespace-line))) . -505) (undo-tree-id142 . -1) (#("h" 0 1 (face (whitespace-line))) . -506) (undo-tree-id143 . -1) 507) nil (25354 24914 118796 15000) 0 nil])
([nil nil ((504 . 513)) nil (25354 24914 118790 102000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -512) (undo-tree-id140 . -1) 513) nil (25354 24914 118788 152000) 0 nil])
([nil nil ((512 . 514)) nil (25354 24914 118783 945000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -513) (undo-tree-id139 . -1) 514) nil (25354 24914 118778 409000) 0 nil])
([nil nil ((#("p" 0 1 (face (whitespace-line))) . -473) (undo-tree-id297 . -1) (#("r" 0 1 (face (whitespace-line))) . -474) (undo-tree-id298 . -1) (#("o" 0 1 (face (whitespace-line))) . -475) (undo-tree-id299 . -1) (#("v" 0 1 (face (whitespace-line))) . -476) (undo-tree-id300 . -1) (#("e" 0 1 (face (whitespace-line))) . -477) (undo-tree-id301 . -1) (#(" " 0 1 (face (whitespace-line))) . -478) (undo-tree-id302 . -1) (#("t" 0 1 (face (whitespace-line))) . -479) (undo-tree-id303 . -1) (#("o" 0 1 (face (whitespace-line))) . -480) (undo-tree-id304 . -1) (#("o" 0 1 (face (whitespace-line))) . -481) (undo-tree-id305 . -1) (#(" " 0 1 (face (whitespace-line))) . -482) (undo-tree-id306 . -1) (#("m" 0 1 (face (whitespace-line))) . -483) (undo-tree-id307 . -1) (#("u" 0 1 (face (whitespace-line))) . -484) (undo-tree-id308 . -1) (#("c" 0 1 (face (whitespace-line))) . -485) (undo-tree-id309 . -1) (#("h" 0 1 (face (whitespace-line))) . -486) (undo-tree-id310 . -1) (#(" " 0 1 (face (whitespace-line))) . -487) (undo-tree-id311 . -1) (#("a" 0 1 (face (whitespace-line))) . -488) (undo-tree-id312 . -1) 489 (t 25354 24914 140943 931000)) nil (25354 25075 863918 423000) 0 nil])
([nil nil ((473 . 481)) nil (25354 25075 863864 294000) 0 nil])
([nil nil ((#("c" 0 1 (face (whitespace-line))) . -477) (undo-tree-id293 . -1) (#("e" 0 1 (face (whitespace-line))) . -478) (undo-tree-id294 . -1) (#(" " 0 1 (face (whitespace-line))) . -479) (undo-tree-id295 . -1) (#("t" 0 1 (face (whitespace-line))) . -480) (undo-tree-id296 . -1) 481) nil (25354 25075 863862 157000) 0 nil])
([nil nil ((477 . 494)) nil (25354 25075 863855 608000) 0 nil])
([nil nil ((494 . 502)) nil (25354 25075 863854 468000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . 502) (#("t" 0 1 (face (whitespace-line))) . 502) (#("a" 0 1 (face (whitespace-line))) . 502) (#("e" 0 1 (face (whitespace-line))) . 502) (#("f" 0 1 (face (whitespace-line))) . 502) (#(" " 0 1 (face (whitespace-line))) . 502)) nil (25354 25075 863852 573000) 0 nil])
([nil nil ((#("d" 0 1 (face (whitespace-line))) . -491) (undo-tree-id282 . -1) (#("i" 0 1 (face (whitespace-line))) . -492) (undo-tree-id283 . -1) (#("f" 0 1 (face (whitespace-line))) . -493) (undo-tree-id284 . -1) (#("f" 0 1 (face (whitespace-line))) . -494) (undo-tree-id285 . -1) (#("i" 0 1 (face (whitespace-line))) . -495) (undo-tree-id286 . -1) (#("c" 0 1 (face (whitespace-line))) . -496) (undo-tree-id287 . -1) (#("u" 0 1 (face (whitespace-line))) . -497) (undo-tree-id288 . -1) (#("l" 0 1 (face (whitespace-line))) . -498) (undo-tree-id289 . -1) (#("t" 0 1 (face (whitespace-line))) . -499) (undo-tree-id290 . -1) (#("y" 0 1 (face (whitespace-line))) . -500) (undo-tree-id291 . -1) (#(" " 0 1 (face (whitespace-line))) . -501) (undo-tree-id292 . -1) 502) nil (25354 25075 863847 846000) 0 nil])
([nil nil ((nil rear-nonsticky nil 500 . 501) (nil face (whitespace-line) 491 . 501) (491 . 501)) nil (25354 25075 863831 19000) 0 nil])
([nil nil ((501 . 502)) nil (25354 25076 498276 203000) 0 nil])
([nil nil ((524 . 526)) nil (25354 25274 721693 884000) 0 nil] [nil nil ((#(" " 0 1 (face (whitespace-line))) . -482) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (#("g" 0 1 (face (whitespace-line))) . -483) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("r" 0 1 (face (whitespace-line))) . -484) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (#("e" 0 1 (face (whitespace-line))) . -485) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (#("a" 0 1 (face (whitespace-line))) . -486) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#("t" 0 1 (face (whitespace-line))) . -487) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#(" " 0 1 (face (whitespace-line))) . -488) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (#("a" 0 1 (face (whitespace-line))) . -489) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (#(" " 0 1 (face (whitespace-line))) . -490) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (#("d" 0 1 (face (whitespace-line))) . -491) (undo-tree-id270 . -1) (#("i" 0 1 (face (whitespace-line))) . -492) (undo-tree-id271 . -1) (#("f" 0 1 (face (whitespace-line))) . -493) (undo-tree-id272 . -1) (#("f" 0 1 (face (whitespace-line))) . -494) (undo-tree-id273 . -1) (#("i" 0 1 (face (whitespace-line))) . -495) (undo-tree-id274 . -1) (#("c" 0 1 (face (whitespace-line))) . -496) (undo-tree-id275 . -1) (#("u" 0 1 (face (whitespace-line))) . -497) (undo-tree-id276 . -1) (#("l" 0 1 (face (whitespace-line))) . -498) (undo-tree-id277 . -1) (#("t" 0 1 (face (whitespace-line))) . -499) (undo-tree-id278 . -1) (#("y" 0 1 (face (whitespace-line) rear-nonsticky t)) . -500) (undo-tree-id279 . -1) (#(" " 0 1 (face (whitespace-line))) . -501) (undo-tree-id280 . -1) (#("t" 0 1 (face (whitespace-line))) . -502) (undo-tree-id281 . -1) 503) ((482 . 503)) (25354 25076 53033 70000) 0 nil])
([nil nil ((529 . 530) (526 . 533)) nil (25354 25274 721692 785000) 0 nil])
([nil nil ((#("p" 0 1 (face (whitespace-line))) . -473) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#("r" 0 1 (face (whitespace-line))) . -474) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (#("o" 0 1 (face (whitespace-line))) . -475) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (#("v" 0 1 (face (whitespace-line))) . -476) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (#("e" 0 1 (face (whitespace-line))) . -477) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (#(" " 0 1 (face (whitespace-line))) . -478) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (#("t" 0 1 (face (whitespace-line))) . -479) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("o" 0 1 (face (whitespace-line))) . -480) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (#("o" 0 1 (face (whitespace-line))) . -481) (undo-tree-id250 . -1) (undo-tree-id251 . -1) 482) ((473 . 482)) (25354 25075 864268 921000) 0 nil])
([nil nil ((" " . -529) (undo-tree-id371 . -1) 530) nil (25354 25274 721691 181000) 0 nil])
([nil nil ((473 . 493)) ((#("be too difficult to " 0 20 (face (whitespace-line))) . 473) (undo-tree-id313 . -20)) (25354 25075 863734 972000) 0 nil])
([nil nil ((528 . 529)) nil (25354 25274 721688 728000) 0 nil])
nil
([nil nil ((#(" " 0 1 (tag-type start tag-name "p")) . -528) (undo-tree-id370 . -1) 529) nil (25354 25274 721687 362000) 0 nil])
([nil nil ((529 . 531)) nil (25354 25274 721685 28000) 0 nil])
([nil nil ((" " . -529) (undo-tree-id368 . -1) ("I" . -530) (undo-tree-id369 . -1) 531) nil (25354 25274 721683 199000) 0 nil])
([nil nil ((529 . 530)) nil (25354 25274 721679 466000) 0 nil])
([nil nil ((530 . 541)) nil (25354 25274 721678 327000) 0 nil])
([nil nil ((" " . -530) (undo-tree-id357 . -1) ("H" . -531) (undo-tree-id358 . -1) ("o" . -532) (undo-tree-id359 . -1) ("p" . -533) (undo-tree-id360 . -1) ("e" . -534) (undo-tree-id361 . -1) (" " . -535) (undo-tree-id362 . -1) ("t" . -536) (undo-tree-id363 . -1) ("h" . -537) (undo-tree-id364 . -1) ("i" . -538) (undo-tree-id365 . -1) ("s" . -539) (undo-tree-id366 . -1) (" " . -540) (undo-tree-id367 . -1) 541) nil (25354 25274 721674 461000) 0 nil])
([nil nil ((530 . 531)) nil (25354 25274 721658 135000) 0 nil])
([nil nil (("h" . -530) (undo-tree-id356 . -1) 531) nil (25354 25274 721656 697000) 0 nil])
([nil nil ((530 . 549)) nil (25354 25274 721653 851000) 0 nil])
([nil nil (("o" . -547) (undo-tree-id354 . -1) ("u" . -548) (undo-tree-id355 . -1) 549) nil (25354 25274 721651 957000) 0 nil])
([nil nil ((547 . 551)) nil (25354 25274 721647 637000) 0 nil])
([nil nil ((551 . 572)) nil (25354 25274 721646 304000) 0 nil])
([nil nil ((572 . 578)) nil (25354 25274 721645 158000) 0 nil])
([nil nil ((578 . 592)) nil (25354 25274 721644 57000) 0 nil])
([nil nil (("o" . -584) (undo-tree-id346 . -1) ("m" . -585) (undo-tree-id347 . -1) ("r" . -586) (undo-tree-id348 . -1) (" " . -587) (undo-tree-id349 . -1) ("t" . -588) (undo-tree-id350 . -1) ("h" . -589) (undo-tree-id351 . -1) ("e" . -590) (undo-tree-id352 . -1) (" " . -591) (undo-tree-id353 . -1) 592) nil (25354 25274 721640 926000) 0 nil])
([nil nil ((584 . 592)) nil (25354 25274 721629 249000) 0 nil])
([nil nil ((592 . 599)) nil (25354 25274 721628 57000) 0 nil])
([nil nil ((" " . -582) (undo-tree-id317 . -1) (undo-tree-id318 . -1) ("f" . -583) (undo-tree-id319 . -1) (undo-tree-id320 . -1) ("r" . -584) (undo-tree-id321 . -1) (undo-tree-id322 . -1) ("o" . -585) (undo-tree-id323 . -1) (undo-tree-id324 . -1) ("m" . -586) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (" " . -587) (undo-tree-id327 . -1) (undo-tree-id328 . -1) ("t" . -588) (undo-tree-id329 . -1) (undo-tree-id330 . -1) ("h" . -589) (undo-tree-id331 . -1) (undo-tree-id332 . -1) ("e" . -590) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (" " . -591) (undo-tree-id335 . -1) (undo-tree-id336 . -1) ("t" . -592) (undo-tree-id337 . -1) (undo-tree-id338 . -1) ("i" . -593) (undo-tree-id339 . -1) (undo-tree-id340 . -1) ("r" . -594) (undo-tree-id341 . -1) ("i" . -595) (undo-tree-id342 . -1) ("n" . -596) (undo-tree-id343 . -1) ("g" . -597) (undo-tree-id344 . -1) (" " . -598) (undo-tree-id345 . -1) 599) nil (25354 25274 721621 280000) 0 nil])
([nil nil (("a" . -568) (undo-tree-id316 . -1) 569) nil (25354 25274 721528 190000) 0 nil])
([nil nil ((568 . 572)) nil (25354 25274 721524 940000) 0 nil])
([nil nil ((585 . 589)) nil (25354 25274 721523 764000) 0 nil])
([nil nil ((589 . 606)) nil (25354 25274 721522 650000) 0 nil])
([nil nil ((" " . -605) (undo-tree-id315 . -1) 606) nil (25354 25274 721520 893000) 0 nil])
([nil nil ((605 . 606)) nil (25354 25274 721517 54000) 0 nil])
([nil nil (("-" . -605) (undo-tree-id314 . -1) 606) nil (25354 25274 721514 360000) 0 nil])
([nil nil ((605 . 606)) nil (25354 25274 721498 719000) 0 nil])
([nil nil ((605 . 624) (t 25354 25274 744903 239000)) nil (25354 25295 10778 9000) 0 nil])
([nil nil ((" " . -623) (undo-tree-id372 . -1) 624) nil (25354 25295 10771 756000) 0 nil])
([nil nil ((605 . 606) (t 25354 25295 33128 21000)) nil (25354 25306 65894 10000) 0 nil])
([nil nil ((629 . 631) (t 25354 25306 89250 584000)) nil (25354 25508 719174 690000) 0 nil])
([nil nil ((631 . 634)) nil (25354 25508 719173 362000) 0 nil])
([nil nil ((" " . -632) (undo-tree-id484 . -1) ("p" . -633) (undo-tree-id485 . -1) 634) nil (25354 25508 719171 777000) 0 nil])
([nil nil ((632 . 644)) nil (25354 25508 719168 156000) 0 nil])
([nil nil (("w" . -643) (undo-tree-id483 . -1) 644) nil (25354 25508 719166 968000) 0 nil])
([nil nil ((643 . 657)) nil (25354 25508 719164 705000) 0 nil])
([nil nil (("c" . -656) (undo-tree-id482 . -1) 657) nil (25354 25508 719163 393000) 0 nil])
([nil nil ((656 . 669)) nil (25354 25508 719161 84000) 0 nil])
([nil nil ((669 . 679)) nil (25354 25508 719160 37000) 0 nil])
([nil nil (("a" . -676) (undo-tree-id479 . -1) ("r" . -677) (undo-tree-id480 . -1) (" " . -678) (undo-tree-id481 . -1) 679) nil (25354 25508 719158 234000) 0 nil])
([nil nil ((676 . 678)) nil (25354 25508 719153 91000) 0 nil])
([nil nil ((" " . -677) (undo-tree-id478 . -1) 678) nil (25354 25508 719151 719000) 0 nil])
([nil nil ((677 . 696)) nil (25354 25508 719149 253000) 0 nil])
([nil nil ((" " . -695) (undo-tree-id477 . -1) 696) nil (25354 25508 719147 718000) 0 nil])
([nil nil ((695 . 697)) nil (25354 25508 719145 321000) 0 nil])
([nil nil (("r" . -676) (undo-tree-id438 . -1) (undo-tree-id439 . -1) ("," . -677) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (" " . -678) (undo-tree-id442 . -1) (undo-tree-id443 . -1) ("t" . -679) (undo-tree-id444 . -1) (undo-tree-id445 . -1) ("h" . -680) (undo-tree-id446 . -1) (undo-tree-id447 . -1) ("e" . -681) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (" " . -682) (undo-tree-id450 . -1) (undo-tree-id451 . -1) ("s" . -683) (undo-tree-id452 . -1) (undo-tree-id453 . -1) ("h" . -684) (undo-tree-id454 . -1) (undo-tree-id455 . -1) ("o" . -685) (undo-tree-id456 . -1) (undo-tree-id457 . -1) ("r" . -686) (undo-tree-id458 . -1) (undo-tree-id459 . -1) ("t" . -687) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (" " . -688) (undo-tree-id462 . -1) (undo-tree-id463 . -1) ("e" . -689) (undo-tree-id464 . -1) (undo-tree-id465 . -1) ("s" . -690) (undo-tree-id466 . -1) (undo-tree-id467 . -1) ("c" . -691) (undo-tree-id468 . -1) (undo-tree-id469 . -1) ("a" . -692) (undo-tree-id470 . -1) (undo-tree-id471 . -1) ("p" . -693) (undo-tree-id472 . -1) (undo-tree-id473 . -1) ("e" . -694) (undo-tree-id474 . -1) ("," . -695) (undo-tree-id475 . -1) (" " . -696) (undo-tree-id476 . -1) 697) nil (25354 25508 719137 857000) 0 nil])
([nil nil ((" " . -655) (undo-tree-id396 . -1) (undo-tree-id397 . -1) ("a" . -656) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (" " . -657) (undo-tree-id400 . -1) (undo-tree-id401 . -1) ("b" . -658) (undo-tree-id402 . -1) (undo-tree-id403 . -1) ("r" . -659) (undo-tree-id404 . -1) (undo-tree-id405 . -1) ("e" . -660) (undo-tree-id406 . -1) (undo-tree-id407 . -1) ("a" . -661) (undo-tree-id408 . -1) (undo-tree-id409 . -1) ("t" . -662) (undo-tree-id410 . -1) (undo-tree-id411 . -1) ("h" . -663) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (" " . -664) (undo-tree-id414 . -1) (undo-tree-id415 . -1) ("o" . -665) (undo-tree-id416 . -1) (undo-tree-id417 . -1) ("f" . -666) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (" " . -667) (undo-tree-id420 . -1) (undo-tree-id421 . -1) ("f" . -668) (undo-tree-id422 . -1) (undo-tree-id423 . -1) ("r" . -669) (undo-tree-id424 . -1) (undo-tree-id425 . -1) ("e" . -670) (undo-tree-id426 . -1) (undo-tree-id427 . -1) ("s" . -671) (undo-tree-id428 . -1) (undo-tree-id429 . -1) ("h" . -672) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (" " . -673) (undo-tree-id432 . -1) (undo-tree-id433 . -1) ("a" . -674) (undo-tree-id434 . -1) (undo-tree-id435 . -1) ("i" . -675) (undo-tree-id436 . -1) (undo-tree-id437 . -1) 676) nil (25354 25508 719082 589000) 0 nil])
([nil nil (("b" . -653) (undo-tree-id392 . -1) (undo-tree-id393 . -1) ("e" . -654) (undo-tree-id394 . -1) (undo-tree-id395 . -1) 655) nil (25354 25508 719026 924000) 0 nil])
([nil nil ((653 . 674)) nil (25354 25508 719020 654000) 0 nil])
([nil nil ((674 . 685)) nil (25354 25508 719019 656000) 0 nil])
([nil nil ((" " . -684) (undo-tree-id391 . -1) 685) nil (25354 25508 719018 324000) 0 nil])
([nil nil ((684 . 695)) nil (25354 25508 719015 810000) 0 nil])
([nil nil ((695 . 714)) nil (25354 25508 719014 797000) 0 nil])
([nil nil ((" " . -713) (undo-tree-id390 . -1) 714) nil (25354 25508 719013 489000) 0 nil])
([nil nil ((713 . 715)) nil (25354 25508 719010 955000) 0 nil])
([nil nil ((686 . 691)) nil (25354 25508 719009 908000) 0 nil])
([nil nil ((684 . 705)) nil (25354 25508 719008 766000) 0 nil])
([nil nil ((705 . 708)) nil (25354 25508 719007 658000) 0 nil])
([nil nil (("a" . -703) (undo-tree-id385 . -1) ("i" . -704) (undo-tree-id386 . -1) ("l" . -705) (undo-tree-id387 . -1) ("s" . -706) (undo-tree-id388 . -1) (" " . -707) (undo-tree-id389 . -1) 708) nil (25354 25508 719005 266000) 0 nil])
([nil nil ((703 . 708)) nil (25354 25508 718997 779000) 0 nil])
([nil nil ((" " . -707) (undo-tree-id384 . -1) 708) nil (25354 25508 718996 343000) 0 nil])
([nil nil (("I hope this site will provide you with that short escape we all tend to need, from time to time." . 529) (undo-tree-id382 . -96) (undo-tree-id383 . -96)) nil (25354 25508 718993 555000) 0 nil])
([nil nil ((529 . 641)) nil (25354 25508 718989 691000) 0 nil])
([nil nil (("

i hope this site will provide you with a brief escape from your daily trials, even if only for a minute or two, " . 645) (undo-tree-id377 . -59) (undo-tree-id378 . -1) (undo-tree-id379 . -114) (undo-tree-id380 . -114) (undo-tree-id381 . -114)) nil (25354 25508 718987 782000) 0 nil])
([nil nil (("," . -639) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (" " . -640) (undo-tree-id375 . -1) (undo-tree-id376 . -1) 641) nil (25354 25508 718976 91000) 0 nil])
([nil nil ((639 . 640)) nil (25354 25508 718939 921000) 0 nil])
([nil nil ((340 . 349) (t 25354 25508 739504 620000)) nil (25354 25756 99735 168000) 0 nil])
([nil nil ((#("y" 0 1 (face (whitespace-line))) . -347) (undo-tree-id644 . -1) (#("l" 0 1 (face (whitespace-line))) . -348) (undo-tree-id645 . -1) 349) nil (25354 25756 99733 233000) 0 nil])
([nil nil ((347 . 350)) nil (25354 25756 99728 990000) 0 nil])
([nil nil ((#("t" 0 1 (face (whitespace-line))) . -348) (undo-tree-id642 . -1) (#(" " 0 1 (face (whitespace-line))) . -349) (undo-tree-id643 . -1) 350) nil (25354 25756 99727 206000) 0 nil])
([nil nil ((348 . 358)) nil (25354 25756 99721 429000) 0 nil])
([nil nil ((#("w" 0 1 (face (whitespace-line))) . -350) (undo-tree-id634 . -1) (#("e" 0 1 (face (whitespace-line))) . -351) (undo-tree-id635 . -1) (#(" " 0 1 (face (whitespace-line))) . -352) (undo-tree-id636 . -1) (#("w" 0 1 (face (whitespace-line))) . -353) (undo-tree-id637 . -1) (#("i" 0 1 (face (whitespace-line))) . -354) (undo-tree-id638 . -1) (#("l" 0 1 (face (whitespace-line))) . -355) (undo-tree-id639 . -1) (#("l" 0 1 (face (whitespace-line))) . -356) (undo-tree-id640 . -1) (#(" " 0 1 (face (whitespace-line))) . -357) (undo-tree-id641 . -1) 358) nil (25354 25756 99714 919000) 0 nil])
([nil nil ((350 . 371)) nil (25354 25756 99703 206000) 0 nil])
([nil nil ((371 . 380)) nil (25354 25756 99702 57000) 0 nil])
([nil nil ((380 . 392)) nil (25354 25756 99701 3000) 0 nil])
([nil nil ((#("p" 0 1 (face (whitespace-line))) . -391) (undo-tree-id633 . -1) 392) nil (25354 25756 99699 584000) 0 nil])
([nil nil ((391 . 396)) nil (25354 25756 99696 339000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -395) (undo-tree-id632 . -1) 396) nil (25354 25756 99694 989000) 0 nil])
([nil nil ((395 . 398)) nil (25354 25756 99692 516000) 0 nil])
([nil nil ((#("." 0 1 (face (whitespace-line))) . -396) (undo-tree-id630 . -1) (#(" " 0 1 (face (whitespace-line))) . -397) (undo-tree-id631 . -1) 398) nil (25354 25756 99691 8000) 0 nil])
([nil nil ((396 . 403)) nil (25354 25756 99687 114000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -402) (undo-tree-id629 . -1) 403) nil (25354 25756 99685 770000) 0 nil])
([nil nil ((402 . 416)) nil (25354 25756 99683 318000) 0 nil])
([nil nil ((416 . 421)) nil (25354 25756 99682 141000) 0 nil])
([nil nil ((#("o" 0 1 (face (whitespace-line))) . -418) (undo-tree-id626 . -1) (#("t" 0 1 (face (whitespace-line))) . -419) (undo-tree-id627 . -1) (#(" " 0 1 (face (whitespace-line))) . -420) (undo-tree-id628 . -1) 421) nil (25354 25756 99680 215000) 0 nil])
([nil nil ((418 . 419)) nil (25354 25756 99674 623000) 0 nil])
([nil nil ((#("s" 0 1 (face (whitespace-line))) . -417) (undo-tree-id624 . -1) (#("o" 0 1 (face (whitespace-line))) . -418) (undo-tree-id625 . -1) 419) nil (25354 25756 99672 998000) 0 nil])
([nil nil ((417 . 421)) nil (25354 25756 99669 119000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -420) (undo-tree-id623 . -1) 421) nil (25354 25756 99667 717000) 0 nil])
([nil nil ((420 . 422)) nil (25354 25756 99664 111000) 0 nil])
([nil nil ((423 . 425) ("  " . 422) (undo-tree-id621 . -2) (422 . 425) (#(" " 0 1 (face (whitespace-line))) . 421) (undo-tree-id622 . -1) (422 . 423)) nil (25354 25756 99660 285000) 0 nil])
([nil nil ((421 . 431)) nil (25354 25756 99645 179000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -430) (undo-tree-id620 . -1) 431) nil (25354 25756 99643 677000) 0 nil])
([nil nil ((430 . 440)) nil (25354 25756 99641 98000) 0 nil])
([nil nil ((440 . 453)) nil (25354 25756 99639 861000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -452) (undo-tree-id619 . -1) 453) nil (25354 25756 99638 578000) 0 nil])
([nil nil ((452 . 473)) nil (25354 25756 99636 69000) 0 nil])
([nil nil ((473 . 476)) nil (25354 25756 99634 966000) 0 nil])
([nil nil ((476 . 497)) nil (25354 25756 99633 688000) 0 nil])
([nil nil ((497 . 518)) nil (25354 25756 99632 621000) 0 nil])
([nil nil ((518 . 520)) nil (25354 25756 99631 617000) 0 nil])
([nil nil ((#("e" 0 1 (face (whitespace-line))) . -514) (undo-tree-id613 . -1) (#("o" 0 1 (face (whitespace-line))) . -515) (undo-tree-id614 . -1) (#("t" 0 1 (face (whitespace-line))) . -516) (undo-tree-id615 . -1) (#("r" 0 1 (face (whitespace-line))) . -517) (undo-tree-id616 . -1) (#("y" 0 1 (face (whitespace-line))) . -518) (undo-tree-id617 . -1) (#(" " 0 1 (face (whitespace-line))) . -519) (undo-tree-id618 . -1) 520) nil (25354 25756 99629 289000) 0 nil])
([nil nil ((514 . 516)) nil (25354 25756 99620 333000) 0 nil])
([nil nil ((#("i" 0 1 (face (whitespace-line))) . -515) (undo-tree-id612 . -1) 516) nil (25354 25756 99618 997000) 0 nil])
([nil nil ((515 . 516)) nil (25354 25756 99615 966000) 0 nil])
([nil nil ((516 . 532)) nil (25354 25756 99614 788000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -531) (undo-tree-id611 . -1) 532) nil (25354 25756 99613 350000) 0 nil])
([nil nil ((531 . 536)) nil (25354 25756 99610 919000) 0 nil])
([nil nil ((536 . 554)) nil (25354 25756 99609 686000) 0 nil])
([nil nil ((#("w" 0 1 (face (whitespace-line))) . -539) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (#("i" 0 1 (face (whitespace-line))) . -540) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (#("l" 0 1 (face (whitespace-line))) . -541) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (#("l" 0 1 (face (whitespace-line))) . -542) (undo-tree-id599 . -1) (#(" " 0 1 (face (whitespace-line))) . -543) (undo-tree-id600 . -1) (#("b" 0 1 (face (whitespace-line))) . -544) (undo-tree-id601 . -1) (#("e" 0 1 (face (whitespace-line))) . -545) (undo-tree-id602 . -1) (#(" " 0 1 (face (whitespace-line))) . -546) (undo-tree-id603 . -1) (#("a" 0 1 (face (whitespace-line))) . -547) (undo-tree-id604 . -1) (#("b" 0 1 (face (whitespace-line))) . -548) (undo-tree-id605 . -1) (#("l" 0 1 (face (whitespace-line))) . -549) (undo-tree-id606 . -1) (#("e" 0 1 (face (whitespace-line))) . -550) (undo-tree-id607 . -1) (#(" " 0 1 (face (whitespace-line))) . -551) (undo-tree-id608 . -1) (#("t" 0 1 (face (whitespace-line))) . -552) (undo-tree-id609 . -1) (#("o" 0 1 (face (whitespace-line))) . -553) (undo-tree-id610 . -1) 554) nil (25354 25756 99605 30000) 0 nil])
([nil nil ((539 . 557)) nil (25354 25756 99581 149000) 0 nil])
([nil nil ((#("r" 0 1 (face (whitespace-line))) . -556) (undo-tree-id592 . -1) 557) nil (25354 25756 99579 845000) 0 nil])
([nil nil ((556 . 577)) nil (25354 25756 99577 285000) 0 nil])
([nil nil ((577 . 578)) nil (25354 25756 99576 267000) 0 nil])
([nil nil ((578 . 599)) nil (25354 25756 99575 196000) 0 nil])
([nil nil ((599 . 616)) nil (25354 25756 99573 959000) 0 nil])
([nil nil ((342 . 344) ("  " . 341) (undo-tree-id589 . -2) (341 . 344) ("  " . 340) (undo-tree-id590 . -2) (340 . 343) (#(" " 0 1 (face (whitespace-line))) . 339) (undo-tree-id591 . -1) (340 . 341)) nil (25354 25756 99571 811000) 0 nil])
([nil nil ((#("  Minor improvements to the site might be pushed over time (such as a search functionality), but for now the amount of poems shouldn't prove too great a difficulty to manage through.</p>
" 59 60 (face (rainbow-delimiters-depth-1-face)) 90 91 (face (rainbow-delimiters-depth-1-face)) 150 151 (face (whitespace-line)) 151 152 (face (whitespace-line)) 152 153 (face (whitespace-line)) 153 154 (face (whitespace-line)) 154 155 (face (whitespace-line)) 155 156 (face (whitespace-line)) 156 157 (face (whitespace-line)) 157 158 (face (whitespace-line)) 158 159 (face (whitespace-line)) 159 160 (face (whitespace-line)) 160 161 (face (whitespace-line)) 161 162 (face (whitespace-line)) 162 163 (face (whitespace-line) rear-nonsticky t) 163 164 (face (whitespace-line)) 164 165 (face (whitespace-line)) 165 182 (face (whitespace-line)) 182 183 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 183 184 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 184 185 (face (whitespace-line web-mode-html-tag-face) font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 185 186 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p")) . 809) (undo-tree-id585 . -2) (undo-tree-id586 . -187) (undo-tree-id587 . -186) (undo-tree-id588 . -153) (808 . 809) ("
" . 621) (622 . 809) 624) nil (25354 25756 99564 766000) 0 nil])
([nil nil ((#("  Minor improvements to the site might be pushed over time (such as a search functionality), but for now the amount of poems shouldn't prove too great a difficulty to manage through.</p>
" 59 60 (face (rainbow-delimiters-depth-1-face)) 90 91 (face (rainbow-delimiters-depth-1-face)) 150 151 (face (whitespace-line)) 151 152 (face (whitespace-line)) 152 153 (face (whitespace-line)) 153 154 (face (whitespace-line)) 154 155 (face (whitespace-line)) 155 156 (face (whitespace-line)) 156 157 (face (whitespace-line)) 157 158 (face (whitespace-line)) 158 159 (face (whitespace-line)) 159 160 (face (whitespace-line)) 160 161 (face (whitespace-line)) 161 162 (face (whitespace-line)) 162 163 (face (whitespace-line) rear-nonsticky t) 163 164 (face (whitespace-line)) 164 165 (face (whitespace-line)) 165 182 (face (whitespace-line)) 182 183 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 183 184 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 184 185 (face (whitespace-line web-mode-html-tag-face) font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 185 186 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p")) . 808) (undo-tree-id582 . -2) (undo-tree-id583 . -187) (529 . 808) (#("  Currently the site is split up into three content types, poems, stories and post. The post section will constist mainly of update posts as the main content will consists of poetry and stories. Poems can be read directly on the site while stories will typically be uploaded to 
" 150 152 (face (whitespace-line)) 152 157 (face (whitespace-line)) 157 162 (face (whitespace-line)) 162 171 (face (whitespace-line)) 171 174 (face (whitespace-line)) 174 181 (face (whitespace-line)) 181 185 (face (whitespace-line)) 185 194 (face (whitespace-line)) 194 200 (face (whitespace-line)) 200 204 (face (whitespace-line)) 204 207 (face (whitespace-line)) 207 212 (face (whitespace-line)) 212 221 (face (whitespace-line)) 221 224 (face (whitespace-line)) 224 228 (face (whitespace-line)) 228 233 (face (whitespace-line)) 233 239 (face (whitespace-line)) 239 247 (face (whitespace-line)) 247 252 (face (whitespace-line)) 252 262 (face (whitespace-line)) 262 265 (face (whitespace-line)) 265 274 (face (whitespace-line)) 274 277 (face (whitespace-line)) 277 278 (face (whitespace-line whitespace-trailing))) . 342) (undo-tree-id584 . -273) (621 . 808) 623) nil (25354 25756 99556 878000) 0 nil])
([nil nil ((#("  Minor improvements to the site might be pushed over time (such as a search functionality), but for now the amount of poems shouldn't prove too great a difficulty to manage through.</p>
" 59 60 (face (rainbow-delimiters-depth-1-face)) 90 91 (face (rainbow-delimiters-depth-1-face)) 150 151 (face (whitespace-line)) 151 152 (face (whitespace-line)) 152 153 (face (whitespace-line)) 153 154 (face (whitespace-line)) 154 155 (face (whitespace-line)) 155 156 (face (whitespace-line)) 156 157 (face (whitespace-line)) 157 158 (face (whitespace-line)) 158 159 (face (whitespace-line)) 159 160 (face (whitespace-line)) 160 161 (face (whitespace-line)) 161 162 (face (whitespace-line)) 162 163 (face (whitespace-line) rear-nonsticky t) 163 164 (face (whitespace-line)) 164 165 (face (whitespace-line)) 165 182 (face (whitespace-line)) 182 183 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 183 184 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 184 185 (face (whitespace-line web-mode-html-tag-face) font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 185 186 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p")) . 529) (undo-tree-id580 . -2) (undo-tree-id581 . -187) (528 . 529) ("
" . 341) (342 . 529) 344) nil (25354 25756 99551 106000) 0 nil])
([nil nil ((#("  Minor improvements to the site might be pushed over time (such as a search functionality), but for now the amount of poems shouldn't prove too great a difficulty to manage through.</p>
" 59 60 (face (rainbow-delimiters-depth-1-face)) 90 91 (face (rainbow-delimiters-depth-1-face)) 150 151 (face (whitespace-line)) 151 152 (face (whitespace-line)) 152 153 (face (whitespace-line)) 153 154 (face (whitespace-line)) 154 155 (face (whitespace-line)) 155 156 (face (whitespace-line)) 156 157 (face (whitespace-line)) 157 158 (face (whitespace-line)) 158 159 (face (whitespace-line)) 159 160 (face (whitespace-line)) 160 161 (face (whitespace-line)) 161 162 (face (whitespace-line)) 162 163 (face (whitespace-line) rear-nonsticky t) 163 164 (face (whitespace-line)) 164 165 (face (whitespace-line)) 165 182 (face (whitespace-line)) 182 183 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 183 184 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 184 185 (face (whitespace-line web-mode-html-tag-face) font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 185 186 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p")) . 528) (undo-tree-id577 . -187) (undo-tree-id578 . -2) (undo-tree-id579 . -187) (527 . 528) ("
" . 340) (341 . 528) 343) nil (25354 25756 99545 674000) 0 nil])
([nil nil (("
" . -339) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (" " . -340) (undo-tree-id576 . -1) 341) nil (25354 25756 99539 848000) 0 nil])
([nil nil ((339 . 340)) nil (25354 25756 99534 998000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -339) (undo-tree-id573 . -1) 340) nil (25354 25756 99533 522000) 0 nil])
([nil nil ((526 . 533)) nil (25354 25756 99530 649000) 0 nil])
([nil nil ((530 . 532) (#("  " 0 2 (face whitespace-trailing)) . 530) (530 . 532) (529 . 531)) nil (25354 25756 99529 157000) 0 nil])
([nil nil ((#("  Currently the site is split up into three content types, poems, stories and post. The post section will constist mainly of update posts as the main content will consists of poetry and stories. Poems can be read directly on the site while stories will typically be uploaded to 
" 150 151 (face (whitespace-line)) 151 152 (face (whitespace-line)) 152 156 (face (whitespace-line)) 156 157 (face (whitespace-line)) 157 158 (face (whitespace-line)) 158 159 (face (whitespace-line)) 159 161 (face (whitespace-line)) 161 162 (face (whitespace-line)) 162 163 (face (whitespace-line)) 163 164 (face (whitespace-line)) 164 170 (face (whitespace-line)) 170 171 (face (whitespace-line)) 171 172 (face (whitespace-line)) 172 173 (face (whitespace-line)) 173 174 (face (whitespace-line)) 174 175 (face (whitespace-line)) 175 176 (face (whitespace-line)) 176 180 (face (whitespace-line)) 180 181 (face (whitespace-line)) 181 182 (face (whitespace-line)) 182 183 (face (whitespace-line)) 183 184 (face (whitespace-line)) 184 185 (face (whitespace-line)) 185 186 (face (whitespace-line)) 186 187 (face (whitespace-line)) 187 193 (face (whitespace-line)) 193 194 (face (whitespace-line)) 194 195 (face (whitespace-line)) 195 196 (face (whitespace-line)) 196 199 (face (whitespace-line)) 199 200 (face (whitespace-line)) 200 201 (face (whitespace-line)) 201 202 (face (whitespace-line)) 202 203 (face (whitespace-line)) 203 204 (face (whitespace-line)) 204 205 (face (whitespace-line)) 205 206 (face (whitespace-line)) 206 207 (face (whitespace-line)) 207 208 (face (whitespace-line)) 208 209 (face (whitespace-line)) 209 211 (face (whitespace-line)) 211 212 (face (whitespace-line)) 212 213 (face (whitespace-line)) 213 214 (face (whitespace-line)) 214 220 (face (whitespace-line)) 220 221 (face (whitespace-line)) 221 222 (face (whitespace-line)) 222 223 (face (whitespace-line)) 223 224 (face (whitespace-line)) 224 225 (face (whitespace-line)) 225 226 (face (whitespace-line)) 226 227 (face (whitespace-line)) 227 228 (face (whitespace-line)) 228 229 (face (whitespace-line)) 229 230 (face (whitespace-line)) 230 232 (face (whitespace-line)) 232 233 (face (whitespace-line)) 233 234 (face (whitespace-line)) 234 235 (face (whitespace-line)) 235 238 (face (whitespace-line)) 238 239 (face (whitespace-line)) 239 240 (face (whitespace-line)) 240 241 (face (whitespace-line)) 241 246 (face (whitespace-line)) 246 247 (face (whitespace-line)) 247 248 (face (whitespace-line)) 248 249 (face (whitespace-line)) 249 251 (face (whitespace-line)) 251 252 (face (whitespace-line)) 252 253 (face (whitespace-line)) 253 254 (face (whitespace-line)) 254 261 (face (whitespace-line)) 261 262 (face (whitespace-line)) 262 263 (face (whitespace-line)) 263 264 (face (whitespace-line)) 264 265 (face (whitespace-line)) 265 266 (face (whitespace-line)) 266 267 (face (whitespace-line)) 267 273 (face (whitespace-line)) 273 274 (face (whitespace-line)) 274 275 (face (whitespace-line)) 275 276 (face (whitespace-line)) 276 277 (face (whitespace-line)) 277 278 (face (whitespace-line whitespace-trailing))) . 817) (812 . 817) (#("</p>
" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 1 2 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 2 3 (font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 3 4 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p")) . 533) (undo-tree-id572 . -2) (538 . 817) 535) nil (25354 25756 99526 572000) 0 nil])
([nil nil (("
" . 818) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (813 . 818) (#("</p>
" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 1 2 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 2 3 (font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 3 4 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p")) . 812) (undo-tree-id571 . -2) (817 . 818) 814) nil (25354 25756 99522 337000) 0 nil])
([nil nil (("
" . 819) (814 . 819) (#("</p>
" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 1 2 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 2 3 (font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 3 4 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p")) . 813) (undo-tree-id568 . -2) (818 . 819) 815) nil (25354 25756 99514 625000) 0 nil])
([nil nil ((#("</p>
" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 1 2 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 2 3 (font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 3 4 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p")) . 819) (undo-tree-id566 . -2) (undo-tree-id567 . -5) (818 . 819) ("
" . 813) (814 . 819) 816) nil (25354 25756 99510 529000) 0 nil])
([nil nil ((#("</p>
" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 1 2 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 2 3 (font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 3 4 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p")) . 818) (undo-tree-id562 . -2) (undo-tree-id563 . -5) (undo-tree-id564 . -5) (undo-tree-id565 . -5) (817 . 818) ("
" . 812) (813 . 818) 815) nil (25354 25756 99505 293000) 0 nil])
([nil nil (("
" . -529) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (" " . -530) (undo-tree-id560 . -1) (" " . -531) (undo-tree-id561 . -1) 532) nil (25354 25756 99498 134000) 0 nil])
([nil nil ((" " . -530) (undo-tree-id556 . -1) (" " . -531) (undo-tree-id557 . -1) 532) nil (25354 25756 99491 317000) 0 nil])
([nil nil ((806 . 816)) nil (25354 25756 99487 332000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -807) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (#("r" 0 1 (face (whitespace-line))) . -808) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (#("e" 0 1 (face (whitespace-line))) . -809) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (#("a" 0 1 (face (whitespace-line))) . -810) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (#("d" 0 1 (face (whitespace-line))) . -811) (undo-tree-id551 . -1) (#("i" 0 1 (face (whitespace-line))) . -812) (undo-tree-id552 . -1) (#("n" 0 1 (face (whitespace-line))) . -813) (undo-tree-id553 . -1) (#("g" 0 1 (face (whitespace-line))) . -814) (undo-tree-id554 . -1) (#(" " 0 1 (face (whitespace-line))) . -815) (undo-tree-id555 . -1) 816) nil (25354 25756 99483 716000) 0 nil])
([nil nil ((807 . 812)) nil (25354 25756 99465 923000) 0 nil])
([nil nil ((#("i" 0 1 (face (whitespace-line))) . -809) (undo-tree-id540 . -1) (#("o" 0 1 (face (whitespace-line))) . -810) (undo-tree-id541 . -1) (#("n" 0 1 (face (whitespace-line))) . -811) (undo-tree-id542 . -1) 812) nil (25354 25756 99464 224000) 0 nil])
([nil nil ((809 . 817)) nil (25354 25756 99458 360000) 0 nil])
([nil nil ((#("i" 0 1 (face (whitespace-line))) . -809) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (#("n" 0 1 (face (whitespace-line))) . -810) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (#("l" 0 1 (face (whitespace-line))) . -811) (undo-tree-id534 . -1) (#("i" 0 1 (face (whitespace-line))) . -812) (undo-tree-id535 . -1) (#("u" 0 1 (face (whitespace-line))) . -813) (undo-tree-id536 . -1) (#("n" 0 1 (face (whitespace-line))) . -814) (undo-tree-id537 . -1) (#("e" 0 1 (face (whitespace-line))) . -815) (undo-tree-id538 . -1) (#(" " 0 1 (face (whitespace-line))) . -816) (undo-tree-id539 . -1) 817) nil (25354 25756 99449 487000) 0 nil])
([nil nil ((809 . 830)) nil (25354 25756 99434 905000) 0 nil])
([nil nil ((830 . 831)) nil (25354 25756 99433 855000) 0 nil])
([nil nil ((831 . 833)) nil (25354 25756 99432 315000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -832) (undo-tree-id529 . -1) 833) nil (25354 25756 99430 544000) 0 nil])
([nil nil ((832 . 850)) nil (25354 25756 99427 921000) 0 nil])
([nil nil ((#("p" 0 1 (face (whitespace-line))) . -842) (undo-tree-id521 . -1) (#("p" 0 1 (face (whitespace-line))) . -843) (undo-tree-id522 . -1) (#("a" 0 1 (face (whitespace-line))) . -844) (undo-tree-id523 . -1) (#("d" 0 1 (face (whitespace-line))) . -845) (undo-tree-id524 . -1) (#(" " 0 1 (face (whitespace-line))) . -846) (undo-tree-id525 . -1) (#("o" 0 1 (face (whitespace-line))) . -847) (undo-tree-id526 . -1) (#("r" 0 1 (face (whitespace-line))) . -848) (undo-tree-id527 . -1) (#(" " 0 1 (face (whitespace-line))) . -849) (undo-tree-id528 . -1) 850) nil (25354 25756 99424 942000) 0 nil])
([nil nil ((842 . 857)) nil (25354 25756 99411 945000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -856) (undo-tree-id520 . -1) 857) nil (25354 25756 99410 302000) 0 nil])
([nil nil ((#("w" 0 1 (face (whitespace-line))) . -839) (undo-tree-id519 . -1) 840) nil (25354 25756 99407 438000) 0 nil])
([nil nil ((839 . 840)) nil (25354 25756 99404 986000) 0 nil])
([nil nil ((856 . 877)) nil (25354 25756 99403 724000) 0 nil])
([nil nil ((877 . 898)) nil (25354 25756 99402 598000) 0 nil])
([nil nil ((898 . 899)) nil (25354 25756 99401 47000) 0 nil])
([nil nil ((#("m" 0 1 (face (whitespace-line))) . -892) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (#("a" 0 1 (face (whitespace-line))) . -893) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (#("i" 0 1 (face (whitespace-line))) . -894) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (#("n" 0 1 (face (whitespace-line))) . -895) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (#("l" 0 1 (face (whitespace-line))) . -896) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (#("y" 0 1 (face (whitespace-line))) . -897) (undo-tree-id517 . -1) (#(" " 0 1 (face (whitespace-line))) . -898) (undo-tree-id518 . -1) 899) nil (25354 25756 99397 909000) 0 nil])
([nil nil ((892 . 897)) nil (25354 25756 99380 658000) 0 nil])
([nil nil ((897 . 906)) nil (25354 25756 99379 471000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -896) (undo-tree-id497 . -1) (#("s" 0 1 (face (whitespace-line))) . -897) (undo-tree-id498 . -1) (#("o" 0 1 (face (whitespace-line))) . -898) (undo-tree-id499 . -1) (#("r" 0 1 (face (whitespace-line))) . -899) (undo-tree-id500 . -1) (#("t" 0 1 (face (whitespace-line))) . -900) (undo-tree-id501 . -1) (#(" " 0 1 (face (whitespace-line))) . -901) (undo-tree-id502 . -1) (#("o" 0 1 (face (whitespace-line))) . -902) (undo-tree-id503 . -1) (#("r" 0 1 (face (whitespace-line))) . -903) (undo-tree-id504 . -1) (#("f" 0 1 (face (whitespace-line))) . -904) (undo-tree-id505 . -1) (#(" " 0 1 (face (whitespace-line))) . -905) (undo-tree-id506 . -1) 906) nil (25354 25756 99375 773000) 0 nil])
([nil nil ((896 . 897)) nil (25354 25756 99360 939000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -896) (undo-tree-id496 . -1) 897) nil (25354 25756 99359 509000) 0 nil])
([nil nil ((896 . 914)) nil (25354 25756 99356 423000) 0 nil])
([nil nil ((914 . 933)) nil (25354 25756 99355 92000) 0 nil])
([nil nil ((#("i" 0 1 (face (whitespace-line))) . -929) (undo-tree-id492 . -1) (#("u" 0 1 (face (whitespace-line))) . -930) (undo-tree-id493 . -1) (#("h" 0 1 (face (whitespace-line))) . -931) (undo-tree-id494 . -1) (#("e" 0 1 (face (whitespace-line))) . -932) (undo-tree-id495 . -1) 933) nil (25354 25756 99352 826000) 0 nil])
([nil nil ((929 . 931)) nil (25354 25756 99303 777000) 0 nil])
([nil nil ((#("h" 0 1 (face (whitespace-line))) . -930) (undo-tree-id491 . -1) 931) nil (25354 25756 99302 408000) 0 nil])
([nil nil ((930 . 941)) nil (25354 25756 99300 10000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -940) (undo-tree-id490 . -1) 941) nil (25354 25756 99298 534000) 0 nil])
([nil nil ((940 . 942)) nil (25354 25756 99295 973000) 0 nil])
([nil nil ((#("." 0 1 (face (whitespace-line))) . -940) (undo-tree-id488 . -1) (#(" " 0 1 (face (whitespace-line))) . -941) (undo-tree-id489 . -1) 942) nil (25354 25756 99294 261000) 0 nil])
([nil nil ((940 . 961)) nil (25354 25756 99290 66000) 0 nil])
([nil nil ((961 . 975)) nil (25354 25756 99288 846000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -974) (undo-tree-id487 . -1) 975) nil (25354 25756 99286 923000) 0 nil])
([nil nil ((974 . 976)) nil (25354 25756 99282 644000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -975) (undo-tree-id486 . -1) 976) nil (25354 25756 99277 320000) 0 nil])
([nil nil ((665 . 666) (t 25354 25756 126270 659000)) nil (25354 25791 373101 125000) 0 nil])
([nil nil (("i" . 987) (t 25354 25791 398665 971000)) nil (25354 25845 565422 912000) 0 nil])
([nil nil ((987 . 988)) nil (25354 25845 565415 608000) 0 nil])
([nil nil ((730 . 749) (t 25354 25845 595273 741000)) nil (25354 27409 629535 745000) 0 nil])
([nil nil ((781 . 790)) nil (25354 27409 629534 423000) 0 nil])
([nil nil ((790 . 797)) nil (25354 27409 629533 348000) 0 nil])
([nil nil ((#("o" 0 1 (face (whitespace-line))) . -791) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (#("g" 0 1 (face (whitespace-line))) . -792) (undo-tree-id670 . -1) (#("n" 0 1 (face (whitespace-line))) . -793) (undo-tree-id671 . -1) (#("e" 0 1 (face (whitespace-line))) . -794) (undo-tree-id672 . -1) (#("r" 0 1 (face (whitespace-line))) . -795) (undo-tree-id673 . -1) (#(" " 0 1 (face (whitespace-line))) . -796) (undo-tree-id674 . -1) 797) nil (25354 27409 629531 46000) 0 nil])
([nil nil ((791 . 792)) nil (25354 27409 629519 62000) 0 nil])
([nil nil ((#("n" 0 1 (face (whitespace-line))) . -791) (undo-tree-id667 . -1) 792) nil (25354 27409 629517 653000) 0 nil])
([nil nil ((791 . 794)) nil (25354 27409 629515 315000) 0 nil])
([nil nil ((#("i" 0 1 (face (whitespace-line))) . -791) (undo-tree-id664 . -1) (#("o" 0 1 (face (whitespace-line))) . -792) (undo-tree-id665 . -1) (#("n" 0 1 (face (whitespace-line))) . -793) (undo-tree-id666 . -1) 794) nil (25354 27409 629513 530000) 0 nil])
([nil nil ((791 . 799)) nil (25354 27409 629508 454000) 0 nil])
([nil nil ((#("e" 0 1 (face (whitespace-line))) . -798) (undo-tree-id663 . -1) 799) nil (25354 27409 629507 93000) 0 nil])
([nil nil ((798 . 812)) nil (25354 27409 629504 777000) 0 nil])
([nil nil ((#("s" 0 1 (face (whitespace-line))) . -804) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("u" 0 1 (face (whitespace-line))) . -805) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (#("c" 0 1 (face (whitespace-line))) . -806) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (#("h" 0 1 (face (whitespace-line))) . -807) (undo-tree-id658 . -1) (#(" " 0 1 (face (whitespace-line))) . -808) (undo-tree-id659 . -1) (#("a" 0 1 (face (whitespace-line))) . -809) (undo-tree-id660 . -1) (#("s" 0 1 (face (whitespace-line))) . -810) (undo-tree-id661 . -1) (#(" " 0 1 (face (whitespace-line))) . -811) (undo-tree-id662 . -1) 812) nil (25354 27409 629501 598000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . 804) (#("s" 0 1 (face (whitespace-line))) . 804) (#("e" 0 1 (face (whitespace-line))) . 804) (#("i" 0 1 (face (whitespace-line))) . 804) (#("r" 0 1 (face (whitespace-line))) . 804) (#("o" 0 1 (face (whitespace-line))) . 804) (#("t" 0 1 (face (whitespace-line))) . 804) (#("s" 0 1 (face (whitespace-line))) . 804) (#(" " 0 1 (face (whitespace-line))) . 804) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (#("e" 0 1 (face (whitespace-line))) . 804) (#("l" 0 1 (face (whitespace-line))) . 804) (#("i" 0 1 (face (whitespace-line))) . 804) (#("h" 0 1 (face (whitespace-line))) . 804) (#("w" 0 1 (face (whitespace-line))) . 804) (#(" " 0 1 (face (whitespace-line))) . 804)) nil (25354 27409 629484 3000) 0 nil])
([nil nil ((970 . 979)) nil (25354 27409 629476 740000) 0 nil])
([nil nil ((#("t" 0 1 (face (whitespace-line))) . -993) (undo-tree-id647 . -1) (#("h" 0 1 (face (whitespace-line))) . -994) (undo-tree-id648 . -1) (#("e" 0 1 (face (whitespace-line))) . -995) (undo-tree-id649 . -1) 996) nil (25354 27409 629474 626000) 0 nil])
([nil nil ((993 . 994)) nil (25354 27409 629467 505000) 0 nil])
([nil nil ((1009 . 1020)) nil (25354 27409 629465 600000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line))) . -1019) (undo-tree-id646 . -1) 1020) nil (25354 27409 629460 385000) 0 nil])
([nil nil (("0" . -147) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 148 (t 25354 27409 639463 622000)) nil (25354 28290 595861 495000) 0 nil])
([nil nil ((147 . 148)) nil (25354 28290 595846 740000) 0 nil])
([nil nil (("1" . -150) (undo-tree-id2 . -1) 151) nil (25354 28290 595842 403000) 0 nil])
([nil nil ((150 . 151)) nil (25354 28290 595834 865000) 0 nil])
([nil nil (("6" . -153) (undo-tree-id1 . -1) 154) nil (25354 28290 595830 468000) 0 nil])
([nil nil ((153 . 154)) nil (25354 28290 595822 357000) 0 nil])
([nil nil (("3" . 156)) nil (25354 28290 595818 686000) 0 nil])
([nil nil ((156 . 157)) nil (25354 28290 595815 230000) 0 nil])
([nil nil (("5" . 158) ("4" . 158)) nil (25354 28290 595810 907000) 0 nil])
([nil nil ((158 . 160)) nil (25354 28290 595806 522000) 0 nil])
([nil nil (("3" . 161) ("1" . 161)) nil (25354 28290 595801 954000) 0 nil])
([nil nil ((161 . 163)) nil (25354 28306 885543 878000) 0 nil])
([nil nil (("7" . -153) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 154 (t 25354 28308 4981 646000)) nil (25354 28322 980901 157000) 0 nil] [nil nil (("0" . 164) ("-" . 164)) ((164 . 165) (164 . 165)) (25354 28305 857399 3000) 0 nil])
([nil current ((153 . 154)) nil (25354 28322 980867 817000) 0 nil])
([nil nil (("0" . 164) ("0" . 164) ("4" . 164)) ((164 . 165) (164 . 165) (164 . 165)) (25354 28305 395740 557000) 0 nil])
nil
([nil nil ((" " . -163) (undo-tree-id0 . -1) 164) ((163 . 164) (t 25354 28290 612794 935000)) (25354 28290 595762 521000) 0 nil])
nil
