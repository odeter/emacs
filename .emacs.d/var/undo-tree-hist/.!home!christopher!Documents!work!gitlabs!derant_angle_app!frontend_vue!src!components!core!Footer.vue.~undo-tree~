(undo-tree-save-format-version . 1)
"a65bed1d3cda337a028f52d2af1be4f91bdef7d3"
[nil nil nil nil (25479 27377 222863 188000) 0 nil]
([nil nil ((#("2" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-text" tag-attr t)) . -182) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 183 (t 25430 15053 183607 84000)) nil (25479 27377 222859 167000) 0 nil])
([nil nil ((182 . 183)) nil (25479 27544 369670 153000) 0 nil])
([nil nil ((#("1" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-text" tag-attr t)) . -182) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 183) nil (25479 27547 104029 340000) 0 nil] [nil nil ((#("p" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-text" tag-attr t)) . -179) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id19 . -1) (undo-tree-id21 . -1) (#("y" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-text" tag-attr t)) . -180) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("-" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-text" tag-attr t)) . -181) (undo-tree-id25 . -1) (#("1" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-text" tag-attr t)) . -182) (undo-tree-id26 . -1) (#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-text" tag-attr t)) . -183) (undo-tree-id27 . -1) 184 (t 25479 27377 233940 812000)) ((179 . 184) (t 25479 27536 520306 53000)) (25479 27536 512640 173000) 0 nil])
([nil nil ((182 . 183)) nil (25479 27547 103993 228000) 0 nil])
nil
([nil nil ((183 . 188) (t 25479 27547 108463 234000)) nil (25479 27562 818772 938000) 0 nil])
([nil nil ((214 . 227) (t 25479 27562 824696 539000)) nil (25479 27638 757358 420000) 0 nil])
([nil nil ((227 . 234)) nil (25479 27638 757356 962000) 0 nil])
([nil nil ((231 . 245) (232 . 244) (#("              " 0 14 (face whitespace-trailing)) . 231) (231 . 245) (231 . 232) ("            " . 231) (230 . 243)) nil (25479 27638 757355 241000) 0 nil])
([nil nil ((#("            {{ new Date().getFullYear() }} — <strong>www.derant.com</strong>
" 12 13 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 13 14 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 14 15 (block-side t) 15 16 (face web-mode-variable-name-face block-side t) 16 17 (face web-mode-variable-name-face block-side t) 17 18 (face web-mode-variable-name-face block-side t) 18 19 (block-side t) 19 20 (face web-mode-function-call-face block-side t) 20 23 (face web-mode-function-call-face block-side t) 23 24 (face (rainbow-delimiters-depth-3-face) block-side t) 24 25 (face (rainbow-delimiters-depth-3-face) block-side t) 25 26 (block-side t) 26 37 (face web-mode-function-call-face block-side t) 37 38 (face (rainbow-delimiters-depth-3-face) block-side t) 38 39 (face (rainbow-delimiters-depth-3-face) block-side t) 39 40 (block-side t) 40 41 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-side t) 41 42 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t) 45 46 (font-lock-face web-mode-html-tag-bracket-face tag-beg 16 tag-type start tag-name "strong") 46 52 (font-lock-face web-mode-html-tag-face tag-type start tag-name "strong") 52 53 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "strong") 67 68 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "strong") 68 69 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "strong") 69 75 (font-lock-face web-mode-html-tag-face tag-type end tag-name "strong") 75 76 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "strong")) . 340) (undo-tree-id144 . -14) (undo-tree-id145 . -77) (undo-tree-id146 . -14) (undo-tree-id147 . -14) (undo-tree-id148 . -14) (undo-tree-id149 . -14) (undo-tree-id150 . -14) (undo-tree-id151 . -14) (undo-tree-id152 . -14) (undo-tree-id153 . -14) (323 . 340) (#("            </p>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "p") 14 15 (font-lock-face web-mode-html-tag-face tag-type end tag-name "p") 15 16 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "p")) . 246) (263 . 340) 277) nil (25479 27638 757351 290000) 0 nil])
([nil nil ((#("            {{ new Date().getFullYear() }} — <strong>www.derant.com</strong>
" 12 13 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 13 14 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 14 15 (block-side t) 15 16 (face web-mode-variable-name-face block-side t) 16 17 (face web-mode-variable-name-face block-side t) 17 18 (face web-mode-variable-name-face block-side t) 18 19 (block-side t) 19 20 (face web-mode-function-call-face block-side t) 20 23 (face web-mode-function-call-face block-side t) 23 24 (face (rainbow-delimiters-depth-3-face) block-side t) 24 25 (face (rainbow-delimiters-depth-3-face) block-side t) 25 26 (block-side t) 26 37 (face web-mode-function-call-face block-side t) 37 38 (face (rainbow-delimiters-depth-3-face) block-side t) 38 39 (face (rainbow-delimiters-depth-3-face) block-side t) 39 40 (block-side t) 40 41 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-side t) 41 42 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t) 45 46 (font-lock-face web-mode-html-tag-bracket-face tag-beg 16 tag-type start tag-name "strong") 46 52 (font-lock-face web-mode-html-tag-face tag-type start tag-name "strong") 52 53 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "strong") 67 68 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "strong") 68 69 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "strong") 69 75 (font-lock-face web-mode-html-tag-face tag-type end tag-name "strong") 75 76 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "strong")) . 323) (undo-tree-id122 . -14) (undo-tree-id123 . -77) (undo-tree-id124 . -14) (undo-tree-id125 . -14) (undo-tree-id126 . -14) (undo-tree-id127 . -14) (undo-tree-id128 . -14) (undo-tree-id129 . -14) (undo-tree-id130 . -14) (undo-tree-id131 . -14) (undo-tree-id132 . -14) (undo-tree-id133 . -14) (undo-tree-id134 . -14) (undo-tree-id135 . -14) (undo-tree-id136 . -14) (undo-tree-id137 . -14) (undo-tree-id138 . -14) (undo-tree-id139 . -14) (undo-tree-id140 . -14) (undo-tree-id141 . -14) (undo-tree-id142 . -14) (undo-tree-id143 . -14) (308 . 323) (#("              
" 0 14 (face whitespace-trailing)) . 231) (246 . 323) 260) nil (25479 27638 757316 191000) 0 nil])
([nil nil ((243 . 245) 245) nil (25479 27638 757012 64000) 0 nil])
([nil nil (("
" . 324) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . 1)) nil (25479 27638 757006 805000) 0 nil])
([nil nil (("              " . -322) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (undo-tree-id56 . -2) (undo-tree-id57 . -2) (undo-tree-id58 . -2) (undo-tree-id59 . -2) (undo-tree-id60 . -2) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (undo-tree-id65 . -2) (undo-tree-id66 . -2) (undo-tree-id67 . -2) (undo-tree-id68 . -2) (undo-tree-id69 . -2) (undo-tree-id70 . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -2) (undo-tree-id73 . -2) (undo-tree-id74 . -2) (undo-tree-id75 . -2) (undo-tree-id76 . -2) (undo-tree-id77 . -2) (undo-tree-id78 . -2) (undo-tree-id79 . -2) (undo-tree-id80 . -2) (undo-tree-id81 . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -2) (undo-tree-id84 . -2) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) (undo-tree-id88 . -2) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -2) (undo-tree-id93 . -2) (undo-tree-id94 . -2) (undo-tree-id95 . -2) (undo-tree-id96 . -2) (undo-tree-id97 . -2) (undo-tree-id98 . -2) (undo-tree-id99 . -2) 324) nil (25479 27638 756957 723000) 0 nil])
([nil nil ((229 . 230) (t 25479 27638 773823 862000)) nil (25479 27646 43294 569000) 0 nil])
([nil nil ((237 . 246) (230 . 238)) nil (25479 27646 43287 253000) 0 nil])
([nil nil ((246 . 253) (t 25479 27646 57931 965000)) nil (25479 27652 611023 330000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "p" tag-attr t)) . -252) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) 253) nil (25479 27652 611017 7000) 0 nil])
([nil nil ((#("s" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "p" tag-attr t)) . -247) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#("m" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "p" tag-attr t)) . -248) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (#("a" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "p" tag-attr t)) . -249) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (#("l" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "p" tag-attr t)) . -250) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (#("l" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "p" tag-attr t)) . -251) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) 252 (t 25479 27652 622029 389000)) nil (25479 27693 969082 458000) 0 nil])
([nil nil ((nil rear-nonsticky nil 258 . 259) (nil tag-attr t 247 . 259) (nil tag-name "p" 247 . 259) (nil tag-type start 247 . 259) (nil font-lock-face web-mode-html-attr-value-face 247 . 259) (247 . 259)) nil (25479 27693 968694 414000) 0 nil])
([nil nil ((155 . 165) (147 . 156) (t 25479 27693 974643 57000)) nil (25479 28438 291345 102000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -164) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) 165) nil (25479 28438 291338 84000) 0 nil])
([nil nil ((#("0" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-text" tag-attr t)) . -200) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) 201 (t 25479 28438 305470 146000)) nil (25479 28472 786143 455000) 0 nil])
([nil nil ((200 . 201)) nil (25479 28472 786091 964000) 0 nil])
([nil nil ((#("1" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-text" tag-attr t)) . -200) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) 201 (t 25479 28472 793890 236000)) nil (25479 28490 119051 7000) 0 nil])
([nil nil ((200 . 201)) nil (25479 28490 118990 51000) 0 nil])
([nil nil ((96 . 105) (89 . 98) (t 25479 28490 126103 324000)) nil (25479 28568 770399 963000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-layout" tag-attr t)) . -100) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (#("m" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-layout" tag-attr t)) . -101) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (#("a" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-layout" tag-attr t)) . -102) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (#("-" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-layout" tag-attr t)) . -103) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("0" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-layout" tag-attr t)) . -104) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) 105 (t 25479 28568 779085 592000)) nil (25479 28580 378401 813000) 0 nil])
([nil nil ((100 . 106) (t 25479 28580 387232 539000)) nil (25479 28585 420154 48000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-layout" tag-attr t)) . -105) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) 106) nil (25480 44491 525590 851000) 0 nil])
([nil nil ((#("class=\"pa-0 mt-1\"" 0 1 (tag-attr-beg 0 tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 1 5 (tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 5 6 (tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-equal-face) 6 16 (tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-value-face) 16 17 (tag-attr t tag-attr-end 5 tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-value-face)) . 89) (undo-tree-id59 . -17) (undo-tree-id60 . -17) (undo-tree-id61 . -17) (t 25479 28585 431296 540000)) nil (25480 44503 933773 666000) 0 nil] [nil nil ((72 . 74) (#("  " 0 2 (tag-name "v-footer" tag-type start)) . -68) (73 . 74) (t 25479 28585 431296 540000)) ((#("
" 0 1 (tag-name "v-footer" tag-type start)) . 73) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (68 . 70) (#("  " 0 2 (tag-name "v-footer" tag-type start)) . 72) (undo-tree-id30 . -2) (undo-tree-id31 . -2) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -2) (undo-tree-id35 . -2) (undo-tree-id36 . -2) (undo-tree-id37 . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2)) (25480 44490 859300 976000) 0 nil])
([nil nil ((#(" " 0 1 (tag-name "v-layout" tag-type start)) . -88) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) 89) nil (25480 44503 933769 21000) 0 nil])
([nil nil ((81 . 87) (74 . 82)) ((#("class=\"\"" 0 1 (tag-attr-beg 0 tag-attr t tag-name "v-footer" tag-type start font-lock-face web-mode-html-attr-name-face) 1 2 (tag-attr t tag-name "v-footer" tag-type start font-lock-face web-mode-html-attr-name-face) 2 3 (tag-attr t tag-name "v-footer" tag-type start font-lock-face web-mode-html-attr-name-face) 3 4 (tag-attr t tag-name "v-footer" tag-type start font-lock-face web-mode-html-attr-name-face) 4 5 (tag-attr t tag-name "v-footer" tag-type start font-lock-face web-mode-html-attr-name-face) 5 6 (tag-attr t tag-name "v-footer" tag-type start font-lock-face web-mode-html-attr-equal-face) 6 7 (tag-attr t tag-name "v-footer" tag-type start font-lock-face web-mode-html-attr-value-face) 7 8 (tag-attr t tag-attr-end 5 tag-name "v-footer" tag-type start font-lock-face web-mode-html-attr-value-face)) . 74) (undo-tree-id0 . -7) (undo-tree-id1 . -7) (#("height" 0 6 (tag-attr t tag-name "v-footer" tag-type start font-lock-face web-mode-html-attr-value-face)) . 81) (undo-tree-id2 . -5) (undo-tree-id3 . -6)) (25480 44490 858648 260000) 0 nil])
([nil nil ((72 . 74) (#("  " 0 2 (tag-name "v-footer" tag-type start)) . -68) (73 . 74)) nil (25480 44503 933763 703000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 90 . 91) (nil tag-attr t 90 . 91) (nil tag-attr-end 5 90 . 91) (nil tag-name "v-footer" 90 . 91) (nil tag-type start 90 . 91) (nil font-lock-face web-mode-html-attr-value-face 90 . 91) (nil tag-attr t 80 . 90) (nil tag-name "v-footer" 80 . 90) (nil tag-type start 80 . 90) (nil font-lock-face web-mode-html-attr-value-face 80 . 90) (nil tag-attr t 79 . 80) (nil tag-name "v-footer" 79 . 80) (nil tag-type start 79 . 80) (nil font-lock-face web-mode-html-attr-equal-face 79 . 80) (nil tag-attr t 75 . 79) (nil tag-name "v-footer" 75 . 79) (nil tag-type start 75 . 79) (nil font-lock-face web-mode-html-attr-name-face 75 . 79) (nil tag-attr-beg 0 74 . 75) (nil tag-attr t 74 . 75) (nil tag-name "v-footer" 74 . 75) (nil tag-type start 74 . 75) (nil font-lock-face web-mode-html-attr-name-face 74 . 75) (74 . 91)) nil (25480 44503 933760 896000) 0 nil])
([nil nil ((#("  " 0 2 (tag-name "v-footer" tag-type start)) . -28) 31) nil (25480 44503 933754 859000) 0 nil])
([nil nil ((#("  " 0 2 (tag-name "v-footer" tag-type start)) . -37) (undo-tree-id55 . -1) 38) nil (25480 44503 933753 51000) 0 nil])
([nil nil ((#("  " 0 2 (tag-name "v-footer" tag-type start)) . -49)) nil (25480 44503 933740 910000) 0 nil])
([nil nil ((68 . 70) 70) nil (25480 44503 933733 352000) 0 nil])
([nil nil ((#("class=\"pa-0 ma-0\"" 0 1 (tag-attr-beg 0 tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 1 5 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 5 6 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-equal-face) 6 16 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face) 16 17 (tag-attr t tag-attr-end 5 tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . 162) (undo-tree-id84 . -17) (undo-tree-id85 . -15) (undo-tree-id86 . -17) (undo-tree-id87 . -17) (t 25480 44503 946827 300000)) nil (25480 44534 397560 110000) 0 nil])
([nil nil ((#(" " 0 1 (tag-name "v-card" tag-type start)) . -161) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) 162) nil (25480 44534 397554 617000) 0 nil])
([nil nil ((161 . 170)) nil (25480 44534 397549 87000) 0 nil])
([nil nil ((nil rear-nonsticky nil 180 . 181) (nil tag-attr t 180 . 181) (nil tag-name "v-card" 180 . 181) (nil tag-type start 180 . 181) (nil font-lock-face web-mode-html-attr-value-face 180 . 181) (nil tag-attr t 170 . 180) (nil tag-name "v-card" 170 . 180) (nil tag-type start 170 . 180) (nil font-lock-face web-mode-html-attr-value-face 170 . 180) (nil tag-attr t 169 . 170) (nil tag-name "v-card" 169 . 170) (nil tag-type start 169 . 170) (nil font-lock-face web-mode-html-attr-value-face 169 . 170) (169 . 181)) nil (25480 44534 397547 266000) 0 nil])
([nil nil ((#("
    <v-layout row wrap align-center>
      <v-flex xs12>" 5 6 (tag-name "v-layout" tag-type start tag-beg 19 font-lock-face web-mode-html-tag-bracket-face) 6 14 (tag-name "v-layout" tag-type start font-lock-face web-mode-html-tag-custom-face) 14 15 (tag-name "v-layout" tag-type start) 15 16 (tag-attr-beg 0 tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 16 17 (tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 17 18 (tag-attr t tag-attr-end 0 tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 18 19 (tag-name "v-layout" tag-type start) 19 20 (tag-attr-beg 0 tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 20 22 (tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 22 23 (tag-attr t tag-attr-end 0 tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 23 24 (tag-name "v-layout" tag-type start) 24 25 (tag-attr-beg 0 tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 25 35 (tag-attr t tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 35 36 (tag-attr t tag-attr-end 0 tag-name "v-layout" tag-type start font-lock-face web-mode-html-attr-name-face) 36 37 (tag-name "v-layout" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 44 45 (tag-name "v-flex" tag-type start tag-beg 19 font-lock-face web-mode-html-tag-bracket-face) 45 51 (tag-name "v-flex" tag-type start font-lock-face web-mode-html-tag-custom-face) 51 52 (tag-name "v-flex" tag-type start) 52 53 (tag-attr-beg 0 tag-attr t tag-name "v-flex" tag-type start font-lock-face web-mode-html-attr-name-face) 53 55 (tag-attr t tag-name "v-flex" tag-type start font-lock-face web-mode-html-attr-name-face) 55 56 (tag-attr t tag-attr-end 0 tag-name "v-flex" tag-type start font-lock-face web-mode-html-attr-name-face) 56 57 (tag-name "v-flex" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 88) (undo-tree-id70 . -1) (undo-tree-id71 . -57) (undo-tree-id72 . -37) (undo-tree-id73 . -14) (undo-tree-id74 . -37) (undo-tree-id75 . -14) (undo-tree-id76 . -57) (undo-tree-id77 . -57) (undo-tree-id78 . -36) (undo-tree-id79 . -57)) nil (25480 44534 397542 399000) 0 nil])
([nil nil ((#("
      </v-flex>
    </v-layout>" 7 8 (tag-name "v-flex" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 8 9 (tag-name "v-flex" tag-type end font-lock-face web-mode-html-tag-bracket-face) 9 15 (tag-name "v-flex" tag-type end font-lock-face web-mode-html-tag-custom-face) 15 16 (tag-name "v-flex" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face) 21 22 (tag-name "v-layout" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 22 23 (tag-name "v-layout" tag-type end font-lock-face web-mode-html-tag-bracket-face) 23 31 (tag-name "v-layout" tag-type end font-lock-face web-mode-html-tag-custom-face) 31 32 (tag-name "v-layout" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 378) (undo-tree-id62 . -1) (undo-tree-id63 . -32) (undo-tree-id64 . -16) (undo-tree-id65 . -16) (undo-tree-id66 . -16) (undo-tree-id67 . -16) (undo-tree-id68 . -32) (undo-tree-id69 . -32)) nil (25480 44534 397527 631000) 0 nil])
([nil nil ((112 . 130) (t 25480 44534 411000 270000)) nil (25480 44559 736874 363000) 0 nil])
([nil nil ((nil rear-nonsticky nil 179 . 180) (nil rear-nonsticky t 179 . 180) (nil tag-attr t 179 . 180) (nil tag-name "v-card-text" 179 . 180) (nil tag-type start 179 . 180) (nil font-lock-face web-mode-html-attr-name-face 179 . 180) (nil tag-attr t 169 . 179) (nil tag-name "v-card-text" 169 . 179) (nil tag-type start 169 . 179) (nil font-lock-face web-mode-html-attr-name-face 169 . 179) (nil tag-attr-beg 0 168 . 169) (nil tag-attr t 168 . 169) (nil tag-name "v-card-text" 168 . 169) (nil tag-type start 168 . 169) (nil font-lock-face web-mode-html-attr-name-face 168 . 169) (168 . 180) (t 25480 44552 19099 215000)) nil (25480 44563 328413 705000) 0 nil] [nil nil ((nil rear-nonsticky nil 116 . 117) (nil rear-nonsticky t 116 . 117) (nil tag-attr t 116 . 117) (nil tag-name "v-card" 116 . 117) (nil tag-type start 116 . 117) (nil font-lock-face web-mode-html-attr-name-face 116 . 117) (nil tag-attr t 106 . 116) (nil tag-name "v-card" 106 . 116) (nil tag-type start 106 . 116) (nil font-lock-face web-mode-html-attr-name-face 106 . 116) (nil tag-attr-beg 0 105 . 106) (nil tag-attr t 105 . 106) (nil tag-name "v-card" 105 . 106) (nil tag-type start 105 . 106) (nil font-lock-face web-mode-html-attr-name-face 105 . 106) (105 . 117) (t 25480 44552 19099 215000)) ((#("align-center" 0 1 (tag-attr-beg 0 tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 1 11 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 11 12 (rear-nonsticky t tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face)) . 105) (undo-tree-id88 . -12) (nil tag-name "v-card" 105 . 106) (nil tag-name "v-card" 106 . 116) (nil tag-name "v-card" 116 . 117) (nil rear-nonsticky nil 116 . 117) (nil rear-nonsticky t 116 . 117)) (25480 44559 735525 325000) 0 nil])
([nil nil ((180 . 181)) nil (25480 44575 154434 145000) 0 nil])
nil
([nil nil ((268 . 269) (t 25480 44563 343162 463000)) nil (25480 44635 225876 559000) 0 nil] [nil nil ((#("
        <v-card class=\"text-align-center align-center\">
          <v-card-text align-center class=\"py-0 ma-0 white--text text-center\">" 9 10 (tag-name "v-card" tag-type start tag-beg 19 font-lock-face web-mode-html-tag-bracket-face) 10 16 (tag-name "v-card" tag-type start font-lock-face web-mode-html-tag-custom-face) 16 17 (tag-name "v-card" tag-type start) 17 18 (tag-attr-beg 0 tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 18 19 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 19 20 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 20 21 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 21 22 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 22 23 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-equal-face) 23 42 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face) 42 53 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face) 53 54 (rear-nonsticky t tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face) 54 55 (tag-attr t tag-attr-end 5 tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face) 55 56 (tag-name "v-card" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 67 68 (tag-name "v-card-text" tag-type start tag-beg 19 font-lock-face web-mode-html-tag-bracket-face) 68 79 (tag-name "v-card-text" tag-type start font-lock-face web-mode-html-tag-custom-face) 79 80 (tag-name "v-card-text" tag-type start) 80 81 (tag-attr-beg 0 tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 81 91 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 91 92 (rear-nonsticky t tag-attr t tag-attr-end 0 tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 92 93 (tag-name "v-card-text" tag-type start) 93 94 (tag-attr-beg 0 tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 94 98 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 98 99 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-equal-face) 99 133 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 133 134 (tag-attr t tag-attr-end 5 tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 134 135 (tag-name "v-card-text" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 88) (undo-tree-id89 . -21) (undo-tree-id90 . -1) (undo-tree-id91 . -135) (undo-tree-id92 . -16) (undo-tree-id93 . -16) (undo-tree-id94 . -24) (undo-tree-id95 . -54) (undo-tree-id96 . -17) (undo-tree-id97 . -80) (undo-tree-id98 . -135) (t 25480 44563 343162 463000)) ((88 . 223)) (25480 44574 791793 31000) 0 nil])
([nil nil ((nil rear-nonsticky nil 279 . 280) (nil tag-attr t 269 . 280) (nil tag-name "p" 269 . 280) (nil tag-type start 269 . 280) (nil font-lock-face web-mode-html-attr-value-face 269 . 280) (269 . 280)) nil (25480 44635 225875 89000) 0 nil])
([nil nil ((88 . 93)) (("
    " . 88) (undo-tree-id100 . -5) (undo-tree-id101 . -5) (undo-tree-id102 . -5) (undo-tree-id103 . -5) (undo-tree-id104 . -5) (undo-tree-id105 . -1) (undo-tree-id106 . -5) (undo-tree-id107 . -5) (undo-tree-id108 . -5) (undo-tree-id109 . -5) (undo-tree-id110 . -5) (undo-tree-id111 . -5) (undo-tree-id112 . -5) (undo-tree-id113 . -5) (undo-tree-id114 . -5) (undo-tree-id115 . -5) (undo-tree-id116 . -5) (undo-tree-id117 . -5) (undo-tree-id118 . -5) (undo-tree-id119 . -5) (undo-tree-id120 . -5) (undo-tree-id121 . -5) (undo-tree-id122 . -5) (undo-tree-id123 . -5) (undo-tree-id124 . -5) (undo-tree-id125 . -5)) (25480 44573 618180 355000) 0 nil])
([nil nil ((#("
        <v-card class=\"text-align-center align-center\">
          <v-card-text align-center class=\"py-0 ma-0 white--text text-center\">" 9 10 (tag-name "v-card" tag-type start tag-beg 19 font-lock-face web-mode-html-tag-bracket-face) 10 16 (tag-name "v-card" tag-type start font-lock-face web-mode-html-tag-custom-face) 16 17 (tag-name "v-card" tag-type start) 17 18 (tag-attr-beg 0 tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 18 19 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 19 20 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 20 21 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 21 22 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 22 23 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-equal-face) 23 42 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face) 42 53 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face) 53 54 (rear-nonsticky t tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face) 54 55 (tag-attr t tag-attr-end 5 tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face) 55 56 (tag-name "v-card" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 67 68 (tag-name "v-card-text" tag-type start tag-beg 19 font-lock-face web-mode-html-tag-bracket-face) 68 79 (tag-name "v-card-text" tag-type start font-lock-face web-mode-html-tag-custom-face) 79 80 (tag-name "v-card-text" tag-type start) 80 81 (tag-attr-beg 0 tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 81 91 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 91 92 (rear-nonsticky t tag-attr t tag-attr-end 0 tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 92 93 (tag-name "v-card-text" tag-type start) 93 94 (tag-attr-beg 0 tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 94 98 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 98 99 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-equal-face) 99 133 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 133 134 (tag-attr t tag-attr-end 5 tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 134 135 (tag-name "v-card-text" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 88) (undo-tree-id158 . -135) (undo-tree-id159 . -54) (undo-tree-id160 . -17) (undo-tree-id161 . -80) (undo-tree-id162 . -21) (undo-tree-id163 . -1) (undo-tree-id164 . -135) (undo-tree-id165 . -121) (undo-tree-id166 . -121)) nil (25480 44635 225872 572000) 0 nil])
([nil nil ((93 . 94)) (("<" . 93) (undo-tree-id99 . -1)) (25480 44573 617714 809000) 0 nil])
([nil nil ((88 . 93)) nil (25480 44635 225861 752000) 0 nil])
nil
([nil nil ((93 . 108)) nil (25480 44635 225860 728000) 0 nil])
([nil nil ((101 . 107) (102 . 106) (#("      " 0 6 (face whitespace-trailing)) . 101) (101 . 107) (101 . 102) ("    " . 101) (100 . 105)) nil (25480 44635 225859 150000) 0 nil])
([nil nil ((#("            <p class=\"ma-0 pa-0 text-caption white--text\">
" 12 13 (tag-name "p" tag-type start tag-beg 17 font-lock-face web-mode-html-tag-bracket-face) 13 14 (tag-name "p" tag-type start font-lock-face web-mode-html-tag-face) 14 15 (tag-name "p" tag-type start) 15 16 (tag-attr-beg 0 tag-attr t tag-name "p" tag-type start font-lock-face web-mode-html-attr-name-face) 16 20 (tag-attr t tag-name "p" tag-type start font-lock-face web-mode-html-attr-name-face) 20 21 (tag-attr t tag-name "p" tag-type start font-lock-face web-mode-html-attr-equal-face) 21 45 (tag-attr t tag-name "p" tag-type start font-lock-face web-mode-html-attr-value-face) 45 55 (tag-attr t tag-name "p" tag-type start font-lock-face web-mode-html-attr-value-face) 55 56 (rear-nonsticky t tag-attr t tag-name "p" tag-type start font-lock-face web-mode-html-attr-value-face) 56 57 (tag-attr t tag-attr-end 5 tag-name "p" tag-type start font-lock-face web-mode-html-attr-value-face) 57 58 (tag-name "p" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 180) (undo-tree-id156 . -45) (167 . 180) (#("    </v-row>
" 4 5 (tag-name "v-row" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 5 6 (tag-name "v-row" tag-type end font-lock-face web-mode-html-tag-bracket-face) 6 11 (tag-name "v-row" tag-type end font-lock-face web-mode-html-tag-custom-face) 11 12 (tag-name "v-row" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 108) (undo-tree-id157 . -6) (121 . 180) 114) nil (25480 44635 225856 494000) 0 nil])
([nil nil ((#("              {{ new Date().getFullYear() }} — <strong>www.derant.com</strong>
" 14 15 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 15 16 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 16 17 (block-side t) 17 18 (block-side t face web-mode-variable-name-face) 18 19 (block-side t face web-mode-variable-name-face) 19 20 (block-side t face web-mode-variable-name-face) 20 21 (block-side t) 21 25 (block-side t face web-mode-function-call-face) 25 26 (block-side t face (rainbow-delimiters-depth-3-face)) 26 27 (block-side t face (rainbow-delimiters-depth-3-face)) 27 28 (block-side t) 28 39 (block-side t face web-mode-function-call-face) 39 40 (block-side t face (rainbow-delimiters-depth-3-face)) 40 41 (block-side t face (rainbow-delimiters-depth-3-face)) 41 42 (block-side t) 42 43 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 43 44 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 47 48 (tag-name "strong" tag-type start tag-beg 16 font-lock-face web-mode-html-tag-bracket-face) 48 54 (tag-name "strong" tag-type start font-lock-face web-mode-html-tag-face) 54 55 (tag-name "strong" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 69 70 (tag-name "strong" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 70 71 (tag-name "strong" tag-type end font-lock-face web-mode-html-tag-bracket-face) 71 77 (tag-name "strong" tag-type end font-lock-face web-mode-html-tag-face) 77 78 (tag-name "strong" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 259) (246 . 259) (#("    </v-row>
" 4 5 (tag-name "v-row" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 5 6 (tag-name "v-row" tag-type end font-lock-face web-mode-html-tag-bracket-face) 6 11 (tag-name "v-row" tag-type end font-lock-face web-mode-html-tag-custom-face) 11 12 (tag-name "v-row" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 167) (undo-tree-id155 . -6) (180 . 259) 173) nil (25480 44635 225852 199000) 0 nil])
([nil nil ((#("            </p>
" 12 13 (tag-name "p" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 13 14 (tag-name "p" tag-type end font-lock-face web-mode-html-tag-bracket-face) 14 15 (tag-name "p" tag-type end font-lock-face web-mode-html-tag-face) 15 16 (tag-name "p" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 276) (263 . 276) (#("    </v-row>
" 4 5 (tag-name "v-row" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 5 6 (tag-name "v-row" tag-type end font-lock-face web-mode-html-tag-bracket-face) 6 11 (tag-name "v-row" tag-type end font-lock-face web-mode-html-tag-custom-face) 11 12 (tag-name "v-row" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 246) (undo-tree-id154 . -6) (259 . 276) 252) nil (25480 44635 225848 874000) 0 nil])
([nil nil ((#("          </v-card-text>
" 10 11 (tag-name "v-card-text" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 11 12 (tag-name "v-card-text" tag-type end font-lock-face web-mode-html-tag-bracket-face) 12 23 (tag-name "v-card-text" tag-type end font-lock-face web-mode-html-tag-custom-face) 23 24 (tag-name "v-card-text" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 301) (288 . 301) (#("    </v-row>
" 4 5 (tag-name "v-row" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 5 6 (tag-name "v-row" tag-type end font-lock-face web-mode-html-tag-bracket-face) 6 11 (tag-name "v-row" tag-type end font-lock-face web-mode-html-tag-custom-face) 11 12 (tag-name "v-row" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 263) (undo-tree-id153 . -6) (276 . 301) 269) nil (25480 44635 225845 684000) 0 nil])
([nil nil ((#("        </v-card>
" 8 9 (tag-name "v-card" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 9 10 (tag-name "v-card" tag-type end font-lock-face web-mode-html-tag-bracket-face) 10 16 (tag-name "v-card" tag-type end font-lock-face web-mode-html-tag-custom-face) 16 17 (tag-name "v-card" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 319) (undo-tree-id151 . -17) (306 . 319) (#("    </v-row>
" 4 5 (tag-name "v-row" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 5 6 (tag-name "v-row" tag-type end font-lock-face web-mode-html-tag-bracket-face) 6 11 (tag-name "v-row" tag-type end font-lock-face web-mode-html-tag-custom-face) 11 12 (tag-name "v-row" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 288) (undo-tree-id152 . -6) (301 . 319) 294) nil (25480 44635 225842 517000) 0 nil])
([nil nil ((100 . 107)) nil (25480 44635 225838 790000) 0 nil])
([nil nil ((107 . 108)) nil (25480 44635 225837 891000) 0 nil])
([nil nil ((108 . 122)) nil (25480 44635 225836 955000) 0 nil])
([nil nil ((115 . 123) (116 . 122) (#("        " 0 8 (face whitespace-trailing)) . 115) (115 . 123) (115 . 116) ("      " . 115) (114 . 121)) nil (25480 44635 225835 489000) 0 nil])
([nil nil ((#("      
" 0 5 (face whitespace-trailing) 5 6 (face whitespace-trailing)) . 146) (undo-tree-id146 . -6) (131 . 146) (#("      </v-col>
" 6 7 (tag-name "v-col" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 7 8 (tag-name "v-col" tag-type end font-lock-face web-mode-html-tag-bracket-face) 8 13 (tag-name "v-col" tag-type end font-lock-face web-mode-html-tag-custom-face) 13 14 (tag-name "v-col" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 124) (undo-tree-id147 . -7) (undo-tree-id148 . -7) (undo-tree-id149 . -8) (undo-tree-id150 . -14) (139 . 146) 132) nil (25480 44635 225832 823000) 0 nil])
([nil nil ((#("            <p class=\"ma-0 pa-0 text-caption white--text\">
" 12 13 (tag-name "p" tag-type start tag-beg 17 font-lock-face web-mode-html-tag-bracket-face) 13 14 (tag-name "p" tag-type start font-lock-face web-mode-html-tag-face) 14 15 (tag-name "p" tag-type start) 15 16 (tag-attr-beg 0 tag-attr t tag-name "p" tag-type start font-lock-face web-mode-html-attr-name-face) 16 20 (tag-attr t tag-name "p" tag-type start font-lock-face web-mode-html-attr-name-face) 20 21 (tag-attr t tag-name "p" tag-type start font-lock-face web-mode-html-attr-equal-face) 21 45 (tag-attr t tag-name "p" tag-type start font-lock-face web-mode-html-attr-value-face) 45 55 (tag-attr t tag-name "p" tag-type start font-lock-face web-mode-html-attr-value-face) 55 56 (rear-nonsticky t tag-attr t tag-name "p" tag-type start font-lock-face web-mode-html-attr-value-face) 56 57 (tag-attr t tag-attr-end 5 tag-name "p" tag-type start font-lock-face web-mode-html-attr-value-face) 57 58 (tag-name "p" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 205) (190 . 205) (#("      </v-col>
" 6 7 (tag-name "v-col" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 7 8 (tag-name "v-col" tag-type end font-lock-face web-mode-html-tag-bracket-face) 8 13 (tag-name "v-col" tag-type end font-lock-face web-mode-html-tag-custom-face) 13 14 (tag-name "v-col" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 131) (undo-tree-id145 . -8) (146 . 205) 139) nil (25480 44635 225825 584000) 0 nil])
([nil nil ((#("              {{ new Date().getFullYear() }} — <strong>www.derant.com</strong>
" 14 15 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 15 16 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 16 17 (block-side t) 17 18 (block-side t face web-mode-variable-name-face) 18 19 (block-side t face web-mode-variable-name-face) 19 20 (block-side t face web-mode-variable-name-face) 20 21 (block-side t) 21 25 (block-side t face web-mode-function-call-face) 25 26 (block-side t face (rainbow-delimiters-depth-3-face)) 26 27 (block-side t face (rainbow-delimiters-depth-3-face)) 27 28 (block-side t) 28 39 (block-side t face web-mode-function-call-face) 39 40 (block-side t face (rainbow-delimiters-depth-3-face)) 40 41 (block-side t face (rainbow-delimiters-depth-3-face)) 41 42 (block-side t) 42 43 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 43 44 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 47 48 (tag-name "strong" tag-type start tag-beg 16 font-lock-face web-mode-html-tag-bracket-face) 48 54 (tag-name "strong" tag-type start font-lock-face web-mode-html-tag-face) 54 55 (tag-name "strong" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 69 70 (tag-name "strong" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 70 71 (tag-name "strong" tag-type end font-lock-face web-mode-html-tag-bracket-face) 71 77 (tag-name "strong" tag-type end font-lock-face web-mode-html-tag-face) 77 78 (tag-name "strong" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 284) (undo-tree-id143 . -79) (269 . 284) (#("      </v-col>
" 6 7 (tag-name "v-col" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 7 8 (tag-name "v-col" tag-type end font-lock-face web-mode-html-tag-bracket-face) 8 13 (tag-name "v-col" tag-type end font-lock-face web-mode-html-tag-custom-face) 13 14 (tag-name "v-col" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 190) (undo-tree-id144 . -8) (205 . 284) 198) nil (25480 44635 225821 832000) 0 nil])
([nil nil ((#("            </p>
" 12 13 (tag-name "p" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 13 14 (tag-name "p" tag-type end font-lock-face web-mode-html-tag-bracket-face) 14 15 (tag-name "p" tag-type end font-lock-face web-mode-html-tag-face) 15 16 (tag-name "p" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 301) (286 . 301) (#("      </v-col>
" 6 7 (tag-name "v-col" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 7 8 (tag-name "v-col" tag-type end font-lock-face web-mode-html-tag-bracket-face) 8 13 (tag-name "v-col" tag-type end font-lock-face web-mode-html-tag-custom-face) 13 14 (tag-name "v-col" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 269) (undo-tree-id142 . -8) (284 . 301) 277) nil (25480 44635 225817 466000) 0 nil])
([nil nil ((#("          </v-card-text>
" 10 11 (tag-name "v-card-text" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 11 12 (tag-name "v-card-text" tag-type end font-lock-face web-mode-html-tag-bracket-face) 12 23 (tag-name "v-card-text" tag-type end font-lock-face web-mode-html-tag-custom-face) 23 24 (tag-name "v-card-text" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 326) (311 . 326) (#("      </v-col>
" 6 7 (tag-name "v-col" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 7 8 (tag-name "v-col" tag-type end font-lock-face web-mode-html-tag-bracket-face) 8 13 (tag-name "v-col" tag-type end font-lock-face web-mode-html-tag-custom-face) 13 14 (tag-name "v-col" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 286) (undo-tree-id141 . -8) (301 . 326) 294) nil (25480 44635 225814 157000) 0 nil])
([nil nil ((#("        </v-card>
" 8 9 (tag-name "v-card" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 9 10 (tag-name "v-card" tag-type end font-lock-face web-mode-html-tag-bracket-face) 10 16 (tag-name "v-card" tag-type end font-lock-face web-mode-html-tag-custom-face) 16 17 (tag-name "v-card" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 344) (329 . 344) (#("      </v-col>
" 6 7 (tag-name "v-col" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 7 8 (tag-name "v-col" tag-type end font-lock-face web-mode-html-tag-bracket-face) 8 13 (tag-name "v-col" tag-type end font-lock-face web-mode-html-tag-custom-face) 13 14 (tag-name "v-col" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 311) (undo-tree-id140 . -8) (326 . 344) 319) nil (25480 44635 225810 636000) 0 nil])
([nil nil ((#("
          </v-card-text>
        </v-card>" 11 12 (tag-name "v-card-text" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 12 13 (tag-name "v-card-text" tag-type end font-lock-face web-mode-html-tag-bracket-face) 13 24 (tag-name "v-card-text" tag-type end font-lock-face web-mode-html-tag-custom-face) 24 25 (tag-name "v-card-text" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face) 34 35 (tag-name "v-card" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 35 36 (tag-name "v-card" tag-type end font-lock-face web-mode-html-tag-bracket-face) 36 42 (tag-name "v-card" tag-type end font-lock-face web-mode-html-tag-custom-face) 42 43 (tag-name "v-card" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 285) (undo-tree-id135 . -43) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -43) (undo-tree-id139 . -43)) nil (25480 44635 225806 64000) 0 nil])
([nil nil (("
" . 123) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1)) nil (25480 44635 225796 581000) 0 nil])
([nil nil ((#("      " 0 6 (face whitespace-trailing)) . -123)) nil (25480 44635 225790 159000) 0 nil])
([nil nil (("
" . 123) (undo-tree-id129 . -1) (undo-tree-id130 . 1)) nil (25480 44635 225788 700000) 0 nil])
([nil nil (("            " . -123)) nil (25480 44635 225783 341000) 0 nil])
([nil nil (("    " . -180) 178) nil (25480 44635 225780 901000) 0 nil])
([nil nil (("    " . -253) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) 255) nil (25480 44635 225775 328000) 0 nil])
([nil nil ((#("
    absolute" 0 5 (tag-name "v-footer" tag-type start) 5 6 (tag-attr-beg 0 tag-attr t tag-name "v-footer" tag-type start font-lock-face web-mode-html-attr-name-face) 6 12 (tag-attr t tag-name "v-footer" tag-type start font-lock-face web-mode-html-attr-name-face) 12 13 (tag-attr t tag-attr-end 0 tag-name "v-footer" tag-type start font-lock-face web-mode-html-attr-name-face)) . 44) (undo-tree-id167 . -13) (undo-tree-id168 . -1) (undo-tree-id169 . -13) (undo-tree-id170 . -13) (t 25480 44635 243557 516000)) nil (25480 44658 955399 211000) 0 nil])
([nil nil ((#("p" 0 1 (tag-name "p" tag-type start font-lock-face web-mode-html-tag-face)) . -111) (undo-tree-id173 . -1) 112 (t 25480 44658 971685 566000)) nil (25480 44799 746414 278000) 0 nil])
([nil nil ((111 . 112)) nil (25480 44799 746411 220000) 0 nil])
([nil nil ((#("p" 0 1 (tag-name "p" tag-type end font-lock-face web-mode-html-tag-face)) . -242) (undo-tree-id171 . -1) (undo-tree-id172 . -1) 243) nil (25480 44799 746407 277000) 0 nil])
([nil nil ((242 . 243)) nil (25480 44799 746379 187000) 0 nil])
([nil nil ((113 . 121) (t 25480 44799 760425 33000)) nil (25480 44826 999909 933000) 0 nil])
([nil nil ((nil rear-nonsticky nil 137 . 138) (nil tag-attr t 119 . 138) (nil tag-name "a" 119 . 138) (nil tag-type start 119 . 138) (nil font-lock-face web-mode-html-attr-value-face 119 . 138) (119 . 138)) nil (25480 44826 999902 542000) 0 nil])
([nil nil ((nil rear-nonsticky nil 166 . 167) (nil tag-attr t 147 . 167) (nil tag-name "a" 147 . 167) (nil tag-type start 147 . 167) (nil font-lock-face web-mode-html-attr-value-face 147 . 167) (147 . 167) (t 25480 44827 20564 661000)) nil (25480 44871 813898 33000) 0 nil])
([nil current ((167 . 168)) nil (25480 44871 813889 120000) 0 nil])
nil
