(undo-tree-save-format-version . 1)
"9b3d1ea9c984cff8771e1db7fba9f68d77f57461"
[nil nil nil nil (25670 64999 864278 741000) 0 nil]
([nil nil ((#("From the dawn of my time, to the end of my road, i will try to exist, <br/>
to find my place of being. For though the privilege of youth in this day <br/>
and age is grand, i find my possibilities many, even sometime without
limit. Which should inflate me with joy and grit, that my life is open
in all directions. But though the sky is breached for me and me alone,
the blood and sweat of my ancestor weighs heavily upon me. For am
i blessed or cursed with a life without limits, surely i could not say
no, no in disrespect, in disbelieve. An insult to all that has been done
before me would it be, to simply pass on a chance so many before has
lived without, a chance they didn’t get.
The choice it weights me down from so young an age, í should
count myself blessed but instead feel myself pressed against the ground.
For with freedom comes responsibility, to take the correct road, to
make the right choice. I fear deeply i might spill my chance, i might
take the wrong door, though all are open and i see through them to
the end. My life before my eyes, how it would shape, how it would
tear in each and every direction. I feel myself punched down a road
splitting unto hundreds. Take a road, make a choice, your life and
future depends upon it, don’t waste your chance, your golden ticket,
that so many fought to give you. As i start to walk upon the dusty
road i feel panic and fear as my heart pumps and pumps away. I don’t
know which path to choose and soon there will be no more delay. My
heart jump and my focus i loose as the path must be chosen, for i
don’t know which road to take, which one to bet my chance on. Some-
times i wish for no chance at all, no choice or road to take, to throw
overboard my existential crisis, to just be happy, to just exist." 70 71 (tag-name "br" tag-type void tag-beg 24 font-lock-face web-mode-html-tag-bracket-face) 71 73 (tag-name "br" tag-type void font-lock-face web-mode-html-tag-face) 73 74 (tag-name "br" tag-type void font-lock-face web-mode-html-tag-bracket-face) 74 75 (tag-name "br" tag-type void tag-end t font-lock-face web-mode-html-tag-bracket-face) 149 150 (tag-name "br" tag-type void tag-beg 24 font-lock-face web-mode-html-tag-bracket-face) 150 152 (tag-name "br" tag-type void font-lock-face web-mode-html-tag-face) 152 153 (tag-name "br" tag-type void font-lock-face web-mode-html-tag-bracket-face) 153 154 (tag-name "br" tag-type void tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 68) (undo-tree-id40 . -76) (undo-tree-id41 . -1769) (undo-tree-id42 . -537) (undo-tree-id43 . -1769) (undo-tree-id44 . -537) (t 25670 62269 947786 0)) nil (25670 64999 864276 700000) 0 nil])
([nil nil ((nil face whitespace-tab 772 . 773) (nil face whitespace-tab 718 . 719) (nil face whitespace-tab 680 . 681) (nil face whitespace-tab 628 . 629) (nil face (rainbow-delimiters-depth-1-face) 626 . 627) (nil face (rainbow-delimiters-depth-1-face) 621 . 622) (nil face whitespace-tab 614 . 615) (nil face whitespace-trailing 612 . 613) (nil face whitespace-trailing 611 . 612) (nil face whitespace-tab 584 . 585) (nil face whitespace-tab 526 . 527) (nil face whitespace-tab 488 . 489) (nil face whitespace-tab 433 . 434) (nil face (rainbow-delimiters-depth-1-face) 431 . 432) (nil face (rainbow-delimiters-depth-1-face) 427 . 428) (nil face whitespace-tab 420 . 421) (nil face whitespace-trailing 418 . 419) (nil face whitespace-trailing 417 . 418) (nil face whitespace-tab 388 . 389) (nil face whitespace-tab 332 . 333) (nil face whitespace-tab 292 . 293) (nil face whitespace-tab 244 . 245) (nil face (rainbow-delimiters-depth-1-face) 242 . 243) (nil face (rainbow-delimiters-depth-1-face) 237 . 238) (nil face whitespace-tab 230 . 231) (nil face whitespace-trailing 228 . 229) (nil face whitespace-trailing 227 . 228) (nil face whitespace-tab 197 . 198) (nil face whitespace-tab 160 . 161) (nil face whitespace-tab 118 . 119) (nil face whitespace-tab 81 . 82) (nil face (rainbow-delimiters-depth-1-face) 79 . 80) (nil face (rainbow-delimiters-depth-1-face) 75 . 76) (nil face whitespace-tab 68 . 69) (68 . 807)) nil (25670 64999 864268 269000) 0 nil])
([nil nil ((#("	" 0 1 (face whitespace-tab)) . 750) (undo-tree-id39 . -1) (#("	" 0 1 (face whitespace-tab)) . 697) (#("	" 0 1 (face whitespace-tab)) . 660) (#("	" 0 1 (face whitespace-tab)) . 609) (#("	" 0 1 (face whitespace-tab)) . 596) (#("	" 0 1 (face whitespace-trailing)) . 594) (#("	" 0 1 (face whitespace-tab)) . 568) (#("	" 0 1 (face whitespace-tab)) . 511) (#("	" 0 1 (face whitespace-tab)) . 474) (#("	" 0 1 (face whitespace-tab)) . 420) (#("	" 0 1 (face whitespace-tab)) . 408) (#("	" 0 1 (face whitespace-trailing)) . 406) (#("	" 0 1 (face whitespace-tab)) . 378) (#("	" 0 1 (face whitespace-tab)) . 323) (#("	" 0 1 (face whitespace-tab)) . 284) (#("	" 0 1 (face whitespace-tab)) . 237) (#("	" 0 1 (face whitespace-tab)) . 224) (#("	" 0 1 (face whitespace-trailing)) . 222) (#("	" 0 1 (face whitespace-tab)) . 193) (#("	" 0 1 (face whitespace-tab)) . 157) (#("	" 0 1 (face whitespace-tab)) . 116) (#("	" 0 1 (face whitespace-tab)) . 80) (#("	" 0 1 (face whitespace-tab)) . 68) (apply 0 68 773 cua--rect-undo-handler [68 807 0 7 3 0 t nil] t 68 773)) nil (25670 64999 864256 226000) 0 nil])
([nil nil (("expectations" . 24) (undo-tree-id36 . -12) (undo-tree-id37 . -12) (undo-tree-id38 . -12)) nil (25670 64999 864246 286000) 0 nil])
([nil nil ((24 . 33)) nil (25670 64999 864241 330000) 0 nil])
([nil nil ((" " . -32) (undo-tree-id35 . -1) 33) nil (25670 64999 864237 600000) 0 nil])
([nil nil ((#("\\color{red}" 6 7 (face (rainbow-delimiters-depth-1-face)) 10 11 (face (rainbow-delimiters-depth-1-face))) . 64) (undo-tree-id32 . -11) (undo-tree-id33 . -11) (undo-tree-id34 . -11)) nil (25670 64999 864233 970000) 0 nil])
([nil nil (("
" . -63) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 64) nil (25670 64999 864227 848000) 0 nil])
([nil nil ((#("\\color{blue}" 6 7 (face (rainbow-delimiters-depth-1-face)) 11 12 (face (rainbow-delimiters-depth-1-face))) . 208) (undo-tree-id18 . -12) (undo-tree-id19 . -12) (undo-tree-id20 . -12)) nil (25670 64999 864215 730000) 0 nil])
([nil nil (("
" . -207) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) 208) nil (25670 64999 864210 259000) 0 nil])
([nil nil ((#("\\color{red}" 6 7 (face (rainbow-delimiters-depth-1-face)) 10 11 (face (rainbow-delimiters-depth-1-face))) . 379) (undo-tree-id11 . -11) (undo-tree-id12 . -11) (undo-tree-id13 . -11)) nil (25670 64999 864204 660000) 0 nil])
([nil nil (("
" . -378) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) 379) nil (25670 64999 864200 363000) 0 nil])
([nil nil ((#("\\color{blue}" 6 7 (face (rainbow-delimiters-depth-1-face)) 11 12 (face (rainbow-delimiters-depth-1-face))) . 555) (undo-tree-id4 . -12) (undo-tree-id5 . -12) (undo-tree-id6 . -12)) nil (25670 64999 864194 957000) 0 nil])
([nil nil (("
" . -554) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 555) nil (25670 64999 864190 43000) 0 nil])
([nil nil ((" " . 100)) nil (25670 64999 864170 599000) 0 nil])
([nil nil ((" " . 176)) nil (25670 64999 864169 611000) 0 nil])
([nil nil ((" " . 253)) nil (25670 64999 864168 658000) 0 nil])
([nil nil ((" " . 346)) nil (25670 64999 864167 715000) 0 nil])
([nil nil ((" " . 429)) nil (25670 64999 864166 693000) 0 nil])
([nil nil ((" " . 522)) nil (25670 64999 864165 376000) 0 nil])
([nil nil ((" " . 600)) nil (25670 64999 864577 321000) 0 nil])
([nil nil (("
" . -688) (undo-tree-id68 . -1) (undo-tree-id69 . -1) 689) nil (25670 65059 594168 454000) 0 nil] [nil nil (("s" . 690)) ((690 . 691)) (25670 64999 864156 414000) 0 nil])
([nil nil ((" " . -689) (688 . 689)) nil (25670 65059 594164 435000) 0 nil])
nil
([nil nil (("\\\\" . -719) (721 . 726) ("\\\\" . -663) (665 . 670) ("\\\\" . -624) (626 . 631) ("\\\\" . -543) (545 . 550) ("\\\\" . -483) (485 . 490) ("\\\\" . -444) (446 . 451) ("\\\\" . -358) (360 . 365) ("\\\\" . -300) (302 . 307) ("\\\\" . -259) (261 . 266) ("\\\\" . -179) (181 . 186) ("\\\\" . -140) (142 . 147) ("\\\\" . -97) (99 . 104) 33) nil (25670 65059 594158 754000) 0 nil])
([nil nil ((" " . -213) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (214 . 215)) nil (25670 65059 594141 874000) 0 nil])
([nil nil ((214 . 220)) nil (25670 65059 594138 190000) 0 nil])
([nil nil ((#(" " 0 1 (tag-name "span" tag-type start)) . -219) (undo-tree-id65 . -1) 220) nil (25670 65059 594137 165000) 0 nil])
([nil nil ((219 . 227)) nil (25670 65059 594135 0) 0 nil])
([nil nil ((221 . 223) (#("  " 0 2 (face whitespace-trailing)) . 221) (221 . 223) (220 . 222)) nil (25670 65059 594133 869000) 0 nil])
([nil nil ((#("But what of repercussions of popular choices<br/>
" 44 45 (tag-name "br" tag-type void tag-beg 24 font-lock-face web-mode-html-tag-bracket-face) 45 47 (tag-name "br" tag-type void font-lock-face web-mode-html-tag-face) 47 48 (tag-name "br" tag-type void font-lock-face web-mode-html-tag-bracket-face) 48 49 (tag-name "br" tag-type void tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 282) (274 . 282) (#("</span>
" 0 1 (tag-name "span" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 1 2 (tag-name "span" tag-type end font-lock-face web-mode-html-tag-bracket-face) 2 6 (tag-name "span" tag-type end font-lock-face web-mode-html-tag-face) 6 7 (tag-name "span" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 224) (undo-tree-id64 . -2) (232 . 282) 226) nil (25670 65059 594131 826000) 0 nil])
([nil nil ((#("on the back of the public so feeble<br/>
" 35 36 (tag-name "br" tag-type void tag-beg 24 font-lock-face web-mode-html-tag-bracket-face) 36 38 (tag-name "br" tag-type void font-lock-face web-mode-html-tag-face) 38 39 (tag-name "br" tag-type void font-lock-face web-mode-html-tag-bracket-face) 39 40 (tag-name "br" tag-type void tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 323) (315 . 323) (#("</span>
" 0 1 (tag-name "span" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 1 2 (tag-name "span" tag-type end font-lock-face web-mode-html-tag-bracket-face) 2 6 (tag-name "span" tag-type end font-lock-face web-mode-html-tag-face) 6 7 (tag-name "span" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 274) (undo-tree-id63 . -2) (282 . 323) 276) nil (25670 65059 594128 681000) 0 nil])
([nil nil ((#("such talk of politics, must be talk of clarification<br/>
" 52 53 (tag-name "br" tag-type void tag-beg 24 font-lock-face web-mode-html-tag-bracket-face) 53 55 (tag-name "br" tag-type void font-lock-face web-mode-html-tag-face) 55 56 (tag-name "br" tag-type void font-lock-face web-mode-html-tag-bracket-face) 56 57 (tag-name "br" tag-type void tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 381) (373 . 381) (#("</span>
" 0 1 (tag-name "span" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 1 2 (tag-name "span" tag-type end font-lock-face web-mode-html-tag-bracket-face) 2 6 (tag-name "span" tag-type end font-lock-face web-mode-html-tag-face) 6 7 (tag-name "span" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 315) (undo-tree-id62 . -2) (323 . 381) 317) nil (25670 65059 594124 995000) 0 nil])
([nil nil (("for the good of the people
" . 408) (400 . 408) (#("</span>
" 0 1 (tag-name "span" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 1 2 (tag-name "span" tag-type end font-lock-face web-mode-html-tag-bracket-face) 2 6 (tag-name "span" tag-type end font-lock-face web-mode-html-tag-face) 6 7 (tag-name "span" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 373) (undo-tree-id61 . -2) (381 . 408) 375) nil (25670 65059 594121 718000) 0 nil])
([nil nil ((#(" " 0 1 (face whitespace-trailing)) . 221) (#(" " 0 1 (face whitespace-trailing)) . 221)) nil (25670 65059 594118 719000) 0 nil])
([nil nil ((227 . 241) (219 . 228)) nil (25670 65059 594117 440000) 0 nil])
([nil nil ((241 . 243)) nil (25670 65059 594116 297000) 0 nil])
([nil nil ((#("l" 0 1 (tag-attr t tag-name "span" tag-type start font-lock-face web-mode-html-attr-value-face)) . -238) (undo-tree-id56 . -1) (#("e" 0 1 (tag-attr t tag-name "span" tag-type start font-lock-face web-mode-html-attr-value-face)) . -239) (undo-tree-id57 . -1) (#("f" 0 1 (tag-attr t tag-name "span" tag-type start font-lock-face web-mode-html-attr-value-face)) . -240) (undo-tree-id58 . -1) (#("t" 0 1 (tag-attr t tag-name "span" tag-type start font-lock-face web-mode-html-attr-value-face)) . -241) (undo-tree-id59 . -1) (#(" " 0 1 (tag-attr t tag-name "span" tag-type start font-lock-face web-mode-html-attr-value-face)) . -242) (undo-tree-id60 . -1) 243) nil (25670 65059 594114 304000) 0 nil])
([nil nil ((238 . 244)) nil (25670 65059 594107 354000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "span" tag-type start font-lock-face web-mode-html-attr-value-face)) . -243) (undo-tree-id55 . -1) 244) nil (25670 65059 594106 162000) 0 nil])
([nil nil ((243 . 244)) nil (25670 65059 594103 949000) 0 nil])
([nil nil ((" " . -615) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (616 . 617)) nil (25670 65059 594102 623000) 0 nil])
([nil nil ((616 . 629)) nil (25670 65059 594099 353000) 0 nil])
([nil nil ((623 . 625) (#("  " 0 2 (face whitespace-trailing)) . 623) (623 . 625) (622 . 624)) nil (25670 65059 594098 114000) 0 nil])
([nil nil ((#("So should we just accept this popularity contest<br/>
" 48 49 (tag-name "br" tag-type void tag-beg 24 font-lock-face web-mode-html-tag-bracket-face) 49 51 (tag-name "br" tag-type void font-lock-face web-mode-html-tag-face) 51 52 (tag-name "br" tag-type void font-lock-face web-mode-html-tag-bracket-face) 52 53 (tag-name "br" tag-type void tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 688) (680 . 688) (#("</span>
" 0 1 (tag-name "span" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 1 2 (tag-name "span" tag-type end font-lock-face web-mode-html-tag-bracket-face) 2 6 (tag-name "span" tag-type end font-lock-face web-mode-html-tag-face) 6 7 (tag-name "span" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 626) (undo-tree-id52 . -2) (634 . 688) 628) nil (25670 65059 594096 201000) 0 nil])
([nil nil ((#("is this really the democratic way<br/>
" 33 34 (tag-name "br" tag-type void tag-beg 24 font-lock-face web-mode-html-tag-bracket-face) 34 36 (tag-name "br" tag-type void font-lock-face web-mode-html-tag-face) 36 37 (tag-name "br" tag-type void font-lock-face web-mode-html-tag-bracket-face) 37 38 (tag-name "br" tag-type void tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 727) (719 . 727) (#("</span>
" 0 1 (tag-name "span" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 1 2 (tag-name "span" tag-type end font-lock-face web-mode-html-tag-bracket-face) 2 6 (tag-name "span" tag-type end font-lock-face web-mode-html-tag-face) 6 7 (tag-name "span" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 680) (undo-tree-id51 . -2) (688 . 727) 682) nil (25670 65059 594092 941000) 0 nil])
([nil nil ((#("That to sway the majority, is the highest priority<br/>
" 50 51 (tag-name "br" tag-type void tag-beg 24 font-lock-face web-mode-html-tag-bracket-face) 51 53 (tag-name "br" tag-type void font-lock-face web-mode-html-tag-face) 53 54 (tag-name "br" tag-type void font-lock-face web-mode-html-tag-bracket-face) 54 55 (tag-name "br" tag-type void tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 783) (775 . 783) (#("</span>
" 0 1 (tag-name "span" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 1 2 (tag-name "span" tag-type end font-lock-face web-mode-html-tag-bracket-face) 2 6 (tag-name "span" tag-type end font-lock-face web-mode-html-tag-face) 6 7 (tag-name "span" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 719) (undo-tree-id50 . -2) (727 . 783) 721) nil (25670 65059 594089 699000) 0 nil])
([nil nil (("so you leave your ideals to decay
" . 817) (undo-tree-id47 . -34) (undo-tree-id48 . -33) (809 . 817) (#("</span>
" 0 1 (tag-name "span" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 1 2 (tag-name "span" tag-type end font-lock-face web-mode-html-tag-bracket-face) 2 6 (tag-name "span" tag-type end font-lock-face web-mode-html-tag-face) 6 7 (tag-name "span" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 775) (undo-tree-id49 . -2) (783 . 817) 777) nil (25670 65059 594085 554000) 0 nil])
([nil nil ((621 . 622)) nil (25670 65059 594079 759000) 0 nil])
([nil nil ((nil rear-nonsticky nil 646 . 647) (nil tag-attr t 646 . 647) (nil tag-attr-end 5 646 . 647) (nil tag-name "span" 646 . 647) (nil tag-type start 646 . 647) (nil font-lock-face web-mode-html-attr-value-face 646 . 647) (nil tag-attr t 628 . 646) (nil tag-name "span" 628 . 646) (nil tag-type start 628 . 646) (nil font-lock-face web-mode-html-attr-value-face 628 . 646) (nil tag-attr t 627 . 628) (nil tag-name "span" 627 . 628) (nil tag-type start 627 . 628) (nil font-lock-face web-mode-html-attr-equal-face 627 . 628) (nil tag-attr t 626 . 627) (nil tag-name "span" 626 . 627) (nil tag-type start 626 . 627) (nil font-lock-face web-mode-html-attr-name-face 626 . 627) (nil tag-attr t 625 . 626) (nil tag-name "span" 625 . 626) (nil tag-type start 625 . 626) (nil font-lock-face web-mode-html-attr-name-face 625 . 626) (nil tag-attr t 624 . 625) (nil tag-name "span" 624 . 625) (nil tag-type start 624 . 625) (nil font-lock-face web-mode-html-attr-name-face 624 . 625) (nil tag-attr t 623 . 624) (nil tag-name "span" 623 . 624) (nil tag-type start 623 . 624) (nil font-lock-face web-mode-html-attr-name-face 623 . 624) (nil tag-attr-beg 0 622 . 623) (nil tag-attr t 622 . 623) (nil tag-name "span" 622 . 623) (nil tag-type start 622 . 623) (nil font-lock-face web-mode-html-attr-name-face 622 . 623) (622 . 647)) nil (25670 65059 594076 798000) 0 nil])
([nil nil (("
" . 648) (undo-tree-id46 . -1)) nil (25670 65059 594067 301000) 0 nil])
([nil nil ((#("  " 0 2 (face whitespace-trailing)) . -647) (#(" " 0 1 (face whitespace-trailing)) . -432) (undo-tree-id45 . -1) 648) nil (25670 65059 594060 729000) 0 nil])
([nil nil (("2" . 42) (t 25670 65059 665341 232000)) nil (25670 65072 943246 662000) 0 nil])
([nil nil ((42 . 43)) nil (25670 65072 943245 374000) 0 nil])
([nil nil (("8" . 45)) nil (25670 65072 943244 344000) 0 nil])
([nil nil ((45 . 46)) nil (25670 65072 943243 362000) 0 nil])
([nil nil (("7" . 48)) nil (25670 65072 943242 77000) 0 nil])
([nil nil ((48 . 49)) nil (25670 65072 943241 196000) 0 nil])
([nil nil (("4" . -48) (undo-tree-id73 . -1) 49) nil (25670 65072 943239 447000) 0 nil])
([nil nil ((48 . 49)) nil (25670 65072 943221 523000) 0 nil])
([nil nil (("8" . -51) (undo-tree-id72 . -1) 52) nil (25670 65072 943216 131000) 0 nil])
([nil nil ((51 . 52)) nil (25670 65072 943208 750000) 0 nil])
([nil nil (("0" . -50) (undo-tree-id70 . -1) ("4" . -51) (undo-tree-id71 . -1) 52) nil (25670 65072 943205 779000) 0 nil])
([nil current ((50 . 52)) nil (25670 65072 943189 959000) 0 nil])
nil
