import os
import re
import sys
import requests
import logging
from datetime import datetime as dt, date
from dotenv import load_dotenv
from file_read_backwards import FileReadBackwards

def get_last_run_date(log_path):
    with FileReadBackwards(log_path, encoding="utf-8") as BigFile:
        for line in BigFile:
            match = re.search('INFO - \d*-\d*-\d* \d*:\d*:\d*,\d* - Data Checked and inserted: \|(.*)\|', line)
            date = match.group(1) if match else None
            if date:
                return datetime.strptime(date, '%Y-%m-%d, %H:%M:%S')
    return None

load_dotenv("/app/.env")
log_path = os.path.join(os.environ.get("BACKEND_PROC_LOG_DIR"), "iplookup.log")
os.makedirs(os.path.dirname(log_path), exist_ok=True)
logging.basicConfig(filename=log_path, filemode='a', format='%(levelname)s - %(asctime)s - %(message)s', level=logging.INFO)

if __name__== "__main__":
    logging.info('STARTED {}'.format(os.path.basename(__file__)))

    # Get .env variables
    try:
        api_key = os.environ['APIKEY']
        url = os.path.join(os.environ['API_URL'], "updateips")
    except Exception as e:
        logging.error('Could not get env variables: {}'.format(e))

    # Get date for last time run succesfully from log file
    try:
        last_check_date = get_last_run_date(log_path)
    except Exception as e:
        logging.error("Could not get last date run: {}".format(e))
        last_check_date = None

    # IP lookup API call
    try:
        myobj = {'apikey': api_key}
        myobj['last_check'] = last_check_date
        response = (requests.post(url, data = myobj))
        current_ts = dt.now()
        if response.status_code != 200:
            logging.error('IP auto lookup api call failed with http status code: {}'.format(response.status_code))
        else:
            logging.info('ip lookup checked!: |{}|'.format(current_ts.strftime("%Y-%m-%d, %H:%M:%S")))
    except Exception as e:
        logging.error("Could call IP lookup api call: {}".format(e))

    logging.info('FINISHED')

    select * from conn_.. where sensor_id=3 and ts<='' and ts >='' order by ts