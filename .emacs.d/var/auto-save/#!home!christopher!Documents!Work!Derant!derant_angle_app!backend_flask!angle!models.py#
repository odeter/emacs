from datetime import datetime
from angle import db
from passlib.hash import pbkdf2_sha256 as sha256
from sqlalchemy.sql import func
from datetime import data_ts

DTHelperModel = db.Table('dthelper',
                         db.Column('sensor_id', db.Integer, db.ForeignKey('sensor.sensor_id')),
                         db.Column('dt_id', db.Integer, db.ForeignKey('dto.id')))

RoleHelperModel = db.Table('rolehelper',
                           db.Column('user_id', db.Integer(), db.ForeignKey('users.id')),
                           db.Column('role_id', db.Integer(), db.ForeignKey('roles.id')))

class RoleModel(db.Model):
    __tablename__ = 'roles'
    id = db.Column(db.Integer(), primary_key=True)
    un = db.Column(db.String(80), unique=True)
    name  = db.Column(db.String(255))
    description = db.Column(db.String(255))
    users = db.relationship("UserModel", secondary=RoleHelperModel, lazy='dynamic', backref=db.backref("rolehelper", lazy=True))
    servants = db.relationship("RoleModel")
    master = db.Column(db.Integer, db.ForeignKey('roles.id'), nullable=True)

    def save_to_db(self):
        db.session.add(self)
        db.session.commit()

    def add_servant(self, role):
        self.servants.append(role)

    @classmethod
    def find_by_rolename(cls, rolename):
        return cls.query.filter_by(un = rolename).first()

class RegkeysModel(db.Model):
    key = db.Column(db.String, primary_key = True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    name = db.Column(db.String(120), unique = True, nullable = False)
    created_by = db.relationship("UserModel", back_populates="reg_keys")
    toc = db.Column(db.DateTime, index=True, default=datetime.utcnow)
    group_id = db.Column(db.Integer, db.ForeignKey('groups.id'), nullable=False)
    group = db.relationship("GroupModel", back_populates="reg_keys")
    active = db.Column(db.Boolean(), nullable=False, default=True)

    def save_to_db(self):
        db.session.add(self)
        db.session.commit()

    @classmethod
    def find_key(cls, key):
        return cls.query.filter_by(key = key).first()

    @classmethod
    def check_key(cls, key):
        return cls.query.filter_by(key = key, active = True).first()

    @classmethod
    def get_all(cls):
        regkeys = cls.query.all()
        return regkeys

class GroupModel(db.Model):
    __tablename__ = 'groups'
    id = db.Column(db.Integer, primary_key = True)
    group_name = db.Column(db.String(120), unique = True, nullable = False)
    group_description = db.Column(db.Text)
    users = db.relationship('UserModel', backref='GroupModel', lazy='dynamic')
    reg_keys = db.relationship('RegkeysModel', backref='GroupModel', lazy='dynamic')

    def save_to_db(self):
        db.session.add(self)
        db.session.commit()

    def add_user(self, user):
        self.users.append(user)

    def add_key(self, key):
        self.reg_keys.append(key)

    @classmethod
    def find_by_name(cls, groupname):
        return cls.query.filter_by(group_name = groupname).first()

    @classmethod
    def find_by_id(cls, group_id):
        return cls.query.filter_by(id = group_id).first()

    @classmethod
    def get_all(cls):
        groups = cls.query.all()
        return groups

class UserModel(db.Model):
    __tablename__ = 'users'

    id = db.Column(db.Integer, primary_key = True)
    username = db.Column(db.String(120), unique = True, nullable = False)
    password = db.Column(db.String(120), nullable = False)
    active = db.Column(db.Boolean(), nullable=False, default=True)
    name = db.Column(db.String(120))
    mobile = db.Column(db.String(20))
    zipcode = db.Column(db.String(20))
    address = db.Column(db.String(120))
    reg_keys = db.relationship('RegkeysModel', backref='UserModel', lazy='dynamic')
    sensors = db.relationship('SensorModel', backref='UserModel', lazy='dynamic')
    group_id = db.Column(db.Integer, db.ForeignKey('groups.id'))
    group = db.relationship("GroupModel", back_populates="users")
    alarm_notis = db.relationship('AlarmNotifyModel', backref='UserModel', lazy='dynamic')
    alarms_raised = db.relationship('AlarmModel', backref='UserModel', lazy='dynamic')
    toc = db.Column(db.DateTime, index=True, default=datetime.utcnow)
    roles = db.relationship("RoleModel", secondary=RoleHelperModel,
                            lazy='dynamic', backref=db.backref("rolehelper", lazy=True))
    children = db.relationship("UserModel", backref=db.backref('users', remote_side=[id]))
    parent_id = db.Column(db.Integer, db.ForeignKey('users.id'))
    parent = db.relationship("UserModel", remote_side=[id])

    def save_to_db(self):
        db.session.add(self)
        db.session.commit()

    def append_roles(self, roles):
        role_list = RoleModel.query.filter(RoleModel.id.in_(roles)).all()
        for i in role_list:
            self.roles.append(i)

    def append_roles_reset(self, roles):
        self.roles = []
        role_list = RoleModel.query.filter(RoleModel.id.in_(roles)).all()
        for i in role_list:
            self.roles.append(i)

    def append_child(self, child):
        self.children.append(child)

    def append_key(self, new_key):
        self.reg_keys.append(new_key)

    def get_roles(self):
        roles = self.roles
        role_list = [d.un for d in roles]
        return role_list

    def get_roles_id(self):
        roles = self.roles
        role_list = [d.id for d in roles]
        return role_list

    def get_roles_names(self):
        roles = self.roles
        role_list = [d.name for d in roles]
        return role_list

    def get_sensor_id(self):
        sensors = self.sensors
        sensor_list = [d.sensor_id for d in sensors]
        return sensor_list

    def check_role(self, role):
        roles = self.get_roles()
        return role in roles

    def find_prole(self, role):
        current = self
        res_user = None
        for i in range(50):
            if current.check_role(role):
                res_user = current
                break
            elif current.parent:
                current = self.parent
            else:
                break
        return res_user

    def get_createable_roles(self):
        role_list = self.roles
        t_list = []
        for r in role_list:
            servants = r.servants
            for d in servants:
                if d not in t_list:
                    t_list.append(d)
        return t_list

    def add_sensor(self, sensor):
        self.sensors.append(sensor)

    def add_alarm(self, alarm):
        self.alarms_raised.append(alarm)

    def add_an(self, an):
        self.alarm_notis.append(an)

    def get_ID(self):
        return str(self.id)

    def get_alarms(self, status_list):
        alarms = db.session.query(AlarmModel).filter(AlarmModel.sensor.has(SensorModel.user_id == self.id), AlarmModel.status.in_(status_list)).all()
        return alarms

    def get_alarm(self, a_id):
        alarm = db.session.query(AlarmModel).filter(AlarmModel.sensor.has(SensorModel.user_id == self.id), AlarmModel.id == a_id).first()
        return alarm

    def get_notice(self, n_id):
        notice = AlarmNotifyModel.query.filter_by(user_id=self.id, id=n_id).first()
        return notice

    def get_logs(self, probe_id):
        sensor = SensorModel.query.filter_by(user_id=self.id, sensor_id=probe_id).first()
        return sensor.tables

    def get_log_by_types(self, probe_id, logtype):
        sensor = db.session.query(DynamicOverview).\
            filter_by(log_type=logtype).\
            filter(DynamicOverview.sensors.\
                   any(SensorModel.user_id == self.id)).\
            filter(DynamicOverview.sensors.\
                   any(SensorModel.sensor_id == probe_id)).all()
        return sensor

    def get_logtypes(self, probe_id):
        sensor = db.session.query(DynamicOverview.log_type).filter(DynamicOverview.sensors.\
                any(SensorModel.user_id == self.id)).filter(DynamicOverview.sensors.\
                any(SensorModel.sensor_id == probe_id)).distinct()
        return sensor

    def get_logTable(self, probe_id, log_id):
        sensor = SensorModel.query.filter_by(user_id=self.id, sensor_id=probe_id).first()
        tabs = sensor.tables.filter_by(id = log_id).first()
        return tabs

    def get_all_logs(self):
        tabs = db.session.query(DynamicOverview).filter(DynamicOverview.sensors.\
                any(SensorModel.user_id == self.id)).order_by(DynamicOverview.toc).all()
        return tabs

    def get_all_tables(self, accept_list):
        tabs = db.session.query(DynamicOverview).filter(DynamicOverview.sensors.\
                any(SensorModel.user_id == self.id)).filter(DynamicOverview.log_type.in_(accept_list)).all()
        #sensors = db.session.query(SensorModel.tables).filter_by(user_id=self.id).\
        #    filter(SensorModel.tables.any(DynamicOverview.log_type.in_(accept_list))).all()
        return tabs

    def find_sensor(self, sensor_key):
        sensor = SensorModel.query.filter_by(user_id=self.id, api_key=sensor_key).first()
        return sensor

    def get_all(self):
        return UserModel.query.filter(UserModel.id != self.id).all()

    @classmethod
    def check_apikey(cls, username, sensor_key):
        cu = cls.find_by_username(username)
        if cu:
            return True if cu.find_sensor(sensor_key) else False
        else:
            return False

    @classmethod
    def find_by_username(cls, username):
        return cls.query.filter_by(username = username).first()

    @classmethod
    def find_by_id(cls, idNum):
        return cls.query.filter_by(id = idNum).first()

    # @classmethod
    # def return_all(cls):
    #     def to_json(x):
    #         return {
    #             'username': x.username,
    #             'password': x.password
    #         }
    #     return {'users': list(map(lambda x: to_json(x), UserModel.query.all()))}

    # @classmethod
    # def delete_all(cls):
    #     try:
    #         num_rows_deleted = db.session.query(cls).delete()
    #         db.session.commit()
    #         return {'message': '{} row(s) deleted'.format(num_rows_deleted)}
    #     except:
    #         return {'message': 'Something went wrong'}

    @staticmethod
    def generate_hash(password):
        return sha256.hash(password)

    @staticmethod
    def verify_hash(password, hash):
        return sha256.verify(password, hash)

class SensorModel(db.Model):
    __tablename__ = 'sensor'

    sensor_id = db.Column(db.Integer, primary_key = True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    alarms = db.relationship('AlarmModel', backref='SensorModel', lazy='dynamic')
    tables = db.relationship("DynamicOverview", secondary=DTHelperModel, lazy='dynamic', backref=db.backref("dthelper", lazy=True))
    api_key = db.Column(db.String(120), unique = True, nullable = False)
    name = db.Column(db.String(50), nullable = False)
    description = db.Column(db.Text)
    last_entry = db.Column(db.DateTime)
    toc = db.Column(db.DateTime, index=True, default=datetime.utcnow)

    def save_to_db(self):
        db.session.add(self)
        db.session.commit()

    def get_ID(self):
        return str(self.sensor_id)

    def add_alarm(self, alarm):
        self.alarms.append(alarm)

    @classmethod
    def find_sensor(cls, userid, sensorid):
        return cls.query.filter_by(user_id = userid, sensor_id = sensorid).first()


class RevokedTokenModel(db.Model):
    __tablename__ = 'revoked_tokens'
    id = db.Column(db.Integer, primary_key = True)
    jti = db.Column(db.String(120))

    def add(self):
        db.session.add(self)
        db.session.commit()

    @classmethod
    def is_jti_blacklisted(cls, jti):
        query = cls.query.filter_by(jti = jti).first()
        return bool(query)

class DynamicOverview(db.Model):
    __tablename__ = 'dto'

    def add_alarm(self, alarm):
        self.alarms.append(alarm)

    id = db.Column(db.Integer, primary_key = True)
    table_name = db.Column(db.String(120), unique = True, nullable = False)
    cols_number = db.Column(db.Integer)
    alarms = db.relationship('AlarmModel', backref='DynamicOverview', lazy='dynamic')
    field_types = db.Column(db.Text)
    column_order = db.Column(db.Text)
    column_names = db.Column(db.Text)
    log_type =db.Column(db.String(255))
    toc = db.Column(db.DateTime, index=True, default=datetime.utcnow)
    sensors = db.relationship("SensorModel", secondary=DTHelperModel,
                              lazy='dynamic',
                              backref=db.backref("dthelper", lazy=True))

class AlarmLevelModel(db.Model):
    __tablename__ = 'alarm_level'

    def save_to_db(self):
        db.session.add(self)
        db.session.commit()

    def get_ID(self):
        return str(self.id)

    def get_Level(l_id):
        level = AlarmLevelModel.query.filter_by(id=l_id).first()
        return level

    def get_all():
        levels = AlarmLevelModel.query.all()
        return levels

    def add_alarm(self, alarm):
        self.alarms.append(alarm)

    id = db.Column(db.Integer, primary_key = True)
    name = db.Column(db.String(50), nullable = False)
    description = db.Column(db.Text)
    alarms = db.relationship('AlarmModel', backref='AlarmLevelModel', lazy='dynamic')

    @classmethod
    def find_by_name(cls, level_name):
        return cls.query.filter_by(name = level_name).first()

class AlarmNotifyModel(db.Model):
    __tablename__ = 'alarm_notify'

    def save_to_db(self):
        db.session.add(self)
        db.session.commit()

    def get_ID(self):
        return str(self.id)

    def add_alarm(self, alarm):
        self.alarms.append(alarm)

    id = db.Column(db.Integer, primary_key = True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    name = db.Column(db.String(50), nullable = False)
    alarms = db.relationship('AlarmModel', backref='AlarmNotifyModel', lazy='dynamic')
    url = db.Column(db.Text, nullable = False)

class AlarmModel(db.Model):
    __tablename__ = 'alarm'

    def save_to_db(self):
        db.session.add(self)
        db.session.commit()

    def get_ID(self):
        return str(self.al_id)

    id = db.Column(db.BigInteger, primary_key = True)
    sensor_id = db.Column(db.Integer, db.ForeignKey('sensor.sensor_id'), nullable=False)
    sensor = db.relationship("SensorModel", back_populates="alarms")
    table_id = db.Column(db.Integer, db.ForeignKey('dto.id'), nullable=False)
    table = db.relationship("DynamicOverview", back_populates="alarms")
    an_id = db.Column(db.Integer, db.ForeignKey('alarm_notify.id'))
    alarm_level = db.relationship("AlarmLevelModel", back_populates="alarms")
    alarm_notify = db.relationship("AlarmNotifyModel", back_populates="alarms")
    al_id = db.Column(db.Integer, db.ForeignKey('alarm_level.id'))
    r_id = db.Column(db.Integer, db.ForeignKey('users.id'))
    raised_by = db.relationship("UserModel", back_populates="alarms_raised")
    alarm_name = db.Column(db.String(120), nullable = False)
    description = db.Column(db.Text)
    toc = db.Column(db.DateTime, default=datetime.utcnow)
    data_ts = db.Column(db.DateTime, default=datetime.utcnow)
    data_serial = db.Column(db.Integer)
    alarm_type = db.Column(db.String(120), nullable = False)
    status = db.Column(db.Integer, nullable = False)
