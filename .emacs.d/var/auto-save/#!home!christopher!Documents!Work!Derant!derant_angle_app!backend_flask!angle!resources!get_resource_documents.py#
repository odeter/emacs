import datetime
import io
import os
from flask.helpers import send_file
from flask_jwt_extended import get_jwt_identity, verify_jwt_in_request, get_jwt_claims
from flask_restful import Resource, reqparse
from flask import send_from_directory
from flask import current_app as app
import hashlib
import csv

class getProtectedDocumentsList(Resource):
    def post(self):
        parser = reqparse.RequestParser()
        data = parser.parse_args()

        csv_read = []
        # Gets the document folders under the protected folder
        files = os.listdir(app.root_path + '/' + app.config['PROTECTED_FOLDER_DOCUMENTS'])

        # Then we loop over the folder in the document folder
        for f in files:
            # Then we loop over what is inside what folder, there should be 2 files a csv and another file
            setupObject(f, app.config['PROTECTED_FOLDER_DOCUMENTS'], 'General', csv_read)

        verify_jwt_in_request()
        claims = get_jwt_claims()
        roles = claims['roles']
        if 'admin' in roles:
            files = os.listdir(app.root_path + '/' + app.config['PROTECTED_FOLDER_DOCUMENTS_ADMIN'])
            # Then we loop over the folder in the document folder
            for f in files:
            # Then we loop over what is inside what folder, there should be 2 files a csv and another file
                setupObject(f, app.config['PROTECTED_FOLDER_DOCUMENTS_ADMIN'], 'admin', csv_read)
        if 'group_moderator' in roles:
            files = os.listdir(app.root_path + '/' + app.config['PROTECTED_FOLDER_DOCUMENTS_GROUP_MOD'])
            # Then we loop over the folder in the document folder
            for f in files:
            # Then we loop over what is inside what folder, there should be 2 files a csv and another file
                setupObject(f, app.config['PROTECTED_FOLDER_DOCUMENTS_GROUP_MOD'], 'group_moderator', csv_read)

        print(csv_read)
        return csv_read

def setupObject(folder, path, role, returnObject):
        directory = os.listdir(app.root_path + '/' + path + folder)
        if 'settings.csv' in directory:
            tempObject = {'role': role}

            if len(directory) == 1 and 'settings.csv' in directory:
                
                
            elif len(directory) == 2 and 'settings.csv' in directory:

                download_file = directory 
            for i in directory:
                # We get the csv file as we are using it's data to find the other file later
                if(i == 'settings.csv'):
                    # Reads the csv file as a csv file so we
                    fullPath = app.root_path + '/' + path + folder + '/' + i
                    with open(fullPath) as csv_file:
                        csv_reader = csv.reader(csv_file, delimiter=',')
                        # Makes a temporary object to gather the data from the csv
                        # We loop over each line in the csv
                        for row in csv_reader:
                            #array = row.split(sep=", ")
                            tempObject[row[0]] = row[1]
                        stats = os.stat(fullPath)
                        tempObject.update({
                                            'creation': getCreation(stats.st_mtime)})
                        
                else:
                    fullPath = app.root_path + '/' + path + folder + '/' + i
                    tempObject['file'] = str(i)
                    tempObject['filetype'] = os.path.splitext(i)[1]
                    stats = os.stat(fullPath)
                    tempObject.update({'folder': folder, 
                                            'md5': getMd5(fullPath), 
                                            'size': str(round(stats.st_size / 1024, 2)) + ' KB'})
            #Check if the it's a video and there is a URL
            if tempObject['Video'] == 'True':
                if not tempObject['VideoURL']:
                    return                 
            # Last check to see if it is either a video or there is 2 files(so both the csv and download target exist.)
            if tempObject['Video'] == 'True' or len(directory) == 2:
                returnObject.append(tempObject)
        else:
            return

def getMd5(path):
    md5_hash = hashlib.md5()
    a_file = open(path, "rb")
    content = a_file.read()
    md5_hash.update(content)
    digest = md5_hash.hexdigest()
    return digest

def getCreation(modifiedLast):
    t = datetime.datetime.fromtimestamp(modifiedLast)
    return t.strftime(app.config['DATETIMEFORMAT'])
