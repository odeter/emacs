(undo-tree-save-format-version . 1)
"1008a37e3e558c3a36ac114eab363e96cc59b365"
[nil nil nil nil (25764 6459 312672 657000) 0 nil]
([nil nil ((#("
image_url = os.path.join(app.config['CURRENT_IMAGE_SITE'], app.config['IMAGE_FOLDER'])

def sendMail(subject, recipients, head, body, mail):
    msg = Message(subject, recipients = recipients)
    msg.html = render_template('email_template.html', icon=os.path.join(image_url, \"danger.png\"), head=head, message=body, color=\"orange\", dlogo=os.path.join(image_url, \"dlogo.png\"))
    mail.send(msg)
    return True

def send_info(user, sensor, log_msg):
    if user.mobile and app.config['SMS_ACTIVE'] and app.config['NOTIFY_USERS']:
        number = pn.parse(user.mobile, user.country_code)
        if pn.is_valid_number(number) and app.config['NOTIFY_USERS_SENSOR'] and app.config['SMS_ACTIVE']:
            send_sms(\"Sensor {0} is inactive or does not receive data\".format(sensor.name), [str(number.country_code) + str(number.national_number)])
            app.logger.info(\"SMS about sensor status sent to userid - {0}\".format(user.id))
    if user.config['MAIL_ACTIVE'] and app.config['NOTIFY_USERS_SENSOR']:
        mail = Mail(app)
        try:
            sendMail('Sensor is down', [user.username], 'The following sensor is down:', (\"Sensor {0} is inactive\"+log_msg).format(sensor.name), mail)
            app.logger.info(\"Email about sensor status sent to userid - {0}\".format(user.id))
        except:
            app.logger.error('Tried to send mail to {0} - {1} but failed'.format(user.name, user.id))" 0 1 (fontified t) 1 10 (face font-lock-variable-name-face fontified t) 10 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 57 (face font-lock-string-face fontified t) 57 58 (face (rainbow-delimiters-depth-2-face) fontified t) 58 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-2-face) fontified t) 71 85 (face font-lock-string-face fontified t) 85 86 (face (rainbow-delimiters-depth-2-face) fontified t) 86 87 (face (rainbow-delimiters-depth-1-face) fontified t) 87 89 (fontified t) 89 92 (face font-lock-keyword-face fontified t) 92 93 (fontified t) 93 101 (face font-lock-function-name-face fontified t) 101 102 (face (rainbow-delimiters-depth-1-face) fontified t) 102 139 (fontified t) 139 140 (face (rainbow-delimiters-depth-1-face) fontified t) 140 146 (fontified t) 146 149 (face font-lock-variable-name-face fontified t) 149 159 (fontified t) 159 160 (face (rainbow-delimiters-depth-1-face) fontified t) 160 164 (fontified t) 164 192 (fontified t) 192 193 (face (rainbow-delimiters-depth-1-face) fontified t) 193 198 (fontified t) 198 206 (face font-lock-variable-name-face fontified t) 206 224 (fontified t) 224 225 (face (rainbow-delimiters-depth-1-face) fontified t) 225 246 (face font-lock-string-face fontified t) 246 265 (fontified t) 265 266 (face (rainbow-delimiters-depth-2-face) fontified t) 266 277 (fontified t) 277 289 (face font-lock-string-face fontified t) 289 290 (face (rainbow-delimiters-depth-2-face) fontified t) 290 323 (fontified t) 323 331 (face font-lock-string-face fontified t) 331 344 (fontified t) 344 347 (face (whitespace-line) fontified t) 347 351 (face (whitespace-line) fontified t) 351 352 (face (rainbow-delimiters-depth-2-face whitespace-line) fontified t) 352 363 (face (whitespace-line) fontified t) 363 374 (face (whitespace-line font-lock-string-face) fontified t) 374 375 (face (rainbow-delimiters-depth-2-face whitespace-line) fontified t) 375 376 (face (rainbow-delimiters-depth-1-face whitespace-line) fontified t) 376 377 (fontified t) 377 390 (fontified t) 390 391 (face (rainbow-delimiters-depth-1-face) fontified t) 391 394 (fontified t) 394 395 (face (rainbow-delimiters-depth-1-face) fontified t) 395 400 (fontified t) 400 406 (face font-lock-keyword-face fontified t) 406 407 (fontified t) 407 411 (face font-lock-constant-face fontified t) 411 413 (fontified t) 413 416 (face font-lock-keyword-face fontified t) 416 417 (fontified t) 417 426 (face font-lock-function-name-face fontified t) 426 427 (face (rainbow-delimiters-depth-1-face) fontified t) 427 448 (fontified t) 448 449 (face (rainbow-delimiters-depth-1-face) fontified t) 449 455 (fontified t) 455 457 (face font-lock-keyword-face fontified t) 457 470 (fontified t) 470 473 (face font-lock-keyword-face fontified t) 473 484 (fontified t) 484 485 (face (rainbow-delimiters-depth-1-face) fontified t) 485 497 (face font-lock-string-face fontified t) 497 498 (face (rainbow-delimiters-depth-1-face) fontified t) 498 499 (fontified t) 499 502 (face font-lock-keyword-face fontified t) 502 513 (fontified t) 513 514 (face (rainbow-delimiters-depth-1-face) fontified t) 514 528 (face font-lock-string-face fontified t) 528 529 (face (rainbow-delimiters-depth-1-face) fontified t) 529 539 (fontified t) 539 545 (face font-lock-variable-name-face fontified t) 545 556 (fontified t) 556 557 (face (rainbow-delimiters-depth-1-face) fontified t) 557 587 (fontified t) 587 588 (face (rainbow-delimiters-depth-1-face) fontified t) 588 597 (fontified t) 597 599 (face font-lock-keyword-face fontified t) 599 618 (fontified t) 618 619 (face (rainbow-delimiters-depth-1-face) fontified t) 619 625 (fontified t) 625 626 (face (rainbow-delimiters-depth-1-face) fontified t) 626 627 (fontified t) 627 630 (face font-lock-keyword-face fontified t) 630 641 (fontified t) 641 642 (face (rainbow-delimiters-depth-1-face) fontified t) 642 663 (face font-lock-string-face fontified t) 663 664 (face (rainbow-delimiters-depth-1-face) fontified t) 664 665 (fontified t) 665 668 (face font-lock-keyword-face fontified t) 668 679 (fontified t) 679 680 (face (rainbow-delimiters-depth-1-face) fontified t) 680 692 (face font-lock-string-face fontified t) 692 693 (face (rainbow-delimiters-depth-1-face) fontified t) 693 715 (fontified t) 715 716 (face (rainbow-delimiters-depth-1-face) fontified t) 716 765 (face font-lock-string-face fontified t) 765 766 (fontified t) 766 772 (face font-lock-builtin-face fontified t) 772 773 (face (rainbow-delimiters-depth-2-face) fontified t) 773 784 (fontified t) 784 785 (face (rainbow-delimiters-depth-2-face) fontified t) 785 787 (fontified t) 787 788 (face (rainbow-delimiters-depth-2-face) fontified t) 788 791 (face font-lock-builtin-face fontified t) 791 792 (face (rainbow-delimiters-depth-3-face) fontified t) 792 811 (fontified t) 811 812 (face (rainbow-delimiters-depth-3-face) fontified t) 812 815 (fontified t) 815 818 (face font-lock-builtin-face fontified t) 818 819 (face (rainbow-delimiters-depth-3-face) fontified t) 819 841 (fontified t) 841 842 (face (rainbow-delimiters-depth-3-face) fontified t) 842 843 (face (rainbow-delimiters-depth-2-face) fontified t) 843 844 (face (rainbow-delimiters-depth-1-face) fontified t) 844 872 (fontified t) 872 873 (face (rainbow-delimiters-depth-1-face) fontified t) 873 877 (face font-lock-string-face fontified t) 877 919 (face font-lock-string-face fontified t) 919 920 (fontified t) 920 926 (face font-lock-builtin-face fontified t) 926 927 (face (rainbow-delimiters-depth-2-face) fontified t) 927 932 (fontified t) 932 934 (face font-lock-builtin-face fontified t) 934 935 (face (rainbow-delimiters-depth-2-face) fontified t) 935 936 (face (rainbow-delimiters-depth-1-face) fontified t) 936 937 (fontified t) 937 941 (fontified t) 941 943 (face font-lock-keyword-face fontified t) 943 955 (fontified t) 955 956 (face (rainbow-delimiters-depth-1-face) fontified t) 956 969 (face font-lock-string-face fontified t) 969 970 (face (rainbow-delimiters-depth-1-face) fontified t) 970 971 (fontified t) 971 974 (face font-lock-keyword-face fontified t) 974 985 (fontified t) 985 986 (face (rainbow-delimiters-depth-1-face) fontified t) 986 1007 (face font-lock-string-face fontified t) 1007 1008 (face (rainbow-delimiters-depth-1-face) fontified t) 1008 1018 (fontified t) 1018 1022 (face font-lock-variable-name-face fontified t) 1022 1029 (fontified t) 1029 1030 (face (rainbow-delimiters-depth-1-face) fontified t) 1030 1033 (fontified t) 1033 1034 (face (rainbow-delimiters-depth-1-face) fontified t) 1034 1043 (fontified t) 1043 1046 (face font-lock-keyword-face fontified t) 1046 1068 (fontified t) 1068 1069 (face (rainbow-delimiters-depth-1-face) fontified t) 1069 1085 (face font-lock-string-face fontified t) 1085 1087 (fontified t) 1087 1088 (face (rainbow-delimiters-depth-2-face) fontified t) 1088 1101 (fontified t) 1101 1102 (face (rainbow-delimiters-depth-2-face) fontified t) 1102 1104 (fontified t) 1104 1135 (face font-lock-string-face fontified t) 1135 1137 (fontified t) 1137 1138 (face (rainbow-delimiters-depth-2-face) fontified t) 1138 1162 (face font-lock-string-face fontified t) 1162 1164 (fontified t) 1164 1170 (fontified t) 1170 1171 (face (rainbow-delimiters-depth-2-face) fontified t) 1171 1172 (fontified t) 1172 1178 (face font-lock-builtin-face fontified t) 1178 1179 (face (rainbow-delimiters-depth-2-face) fontified t) 1179 1190 (fontified t) 1190 1191 (face (rainbow-delimiters-depth-2-face) fontified t) 1191 1197 (fontified t) 1197 1198 (face (rainbow-delimiters-depth-1-face) fontified t) 1198 1226 (fontified t) 1226 1227 (face (rainbow-delimiters-depth-1-face) fontified t) 1227 1275 (face font-lock-string-face fontified t) 1275 1276 (fontified t) 1276 1282 (face font-lock-builtin-face fontified t) 1282 1283 (face (rainbow-delimiters-depth-2-face) fontified t) 1283 1288 (fontified t) 1288 1290 (face font-lock-builtin-face fontified t) 1290 1291 (face (rainbow-delimiters-depth-2-face) fontified t) 1291 1292 (face (rainbow-delimiters-depth-1-face) fontified t) 1292 1301 (fontified t) 1301 1307 (face font-lock-keyword-face fontified t) 1307 1337 (fontified t) 1337 1338 (face (rainbow-delimiters-depth-1-face) fontified t) 1338 1382 (face font-lock-string-face fontified t) 1382 1383 (fontified t) 1383 1389 (face font-lock-builtin-face fontified t) 1389 1390 (face (rainbow-delimiters-depth-2-face) fontified t) 1390 1406 (fontified t) 1406 1408 (face font-lock-builtin-face fontified t) 1408 1409 (face (rainbow-delimiters-depth-2-face) fontified t) 1409 1410 (face (rainbow-delimiters-depth-1-face) fontified t)) . 337) (undo-tree-id37 . -1) (undo-tree-id38 . -1410) (undo-tree-id39 . -1410) (undo-tree-id40 . -1410) (undo-tree-id41 . -1410) (t 25764 5787 100452 0)) nil (25764 6459 312670 314000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -336) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) 337) nil (25764 6459 312663 112000) 0 nil])
([nil nil ((#("UserModel," 0 10 (fontified t)) . 54) (undo-tree-id29 . -10) (undo-tree-id30 . -10) (undo-tree-id31 . -10)) nil (25764 6459 312653 248000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -53) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 54) nil (25764 6459 312648 181000) 0 nil])
([nil nil ((#("def send_admin(msg):
    sys_users = UserModel.find_users_with_role('sys_admin')

    admin_sms = []
    admin_mail = []

    for i in sys_users:
        admin_mail.append(i.username)
        if i.mobile:
            number = pn.parse(i.mobile, i.country_code)
            if pn.is_valid_number(number):
                admin_sms.append(str(number.country_code) + str(number.national_number))

    if app.config['SMS_ACTIVE'] and admin_sms:
        send_sms(\"The following sensors are inactive:\\n \\n {}\".format(msg), admin_sms)
        app.logger.info(\"SMS about sensor status sent to sysadmins\")
    if app.config['MAIL_ACTIVE']:
        mail = Mail(app)
        sendMail('Sensors are down', admin_mail, 'The following sensors are down', msg, mail)
        app.logger.info(\"Email about sensor status sent to sysadmins\")
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 14 (face font-lock-function-name-face fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 25 (fontified t) 25 34 (face font-lock-variable-name-face fontified t) 34 67 (fontified t) 67 68 (face (rainbow-delimiters-depth-1-face) fontified t) 68 79 (face font-lock-string-face fontified t) 79 80 (face (rainbow-delimiters-depth-1-face) fontified t) 80 81 (fontified t) 81 86 (fontified t) 86 95 (face font-lock-variable-name-face fontified t) 95 98 (fontified t) 98 99 (face (rainbow-delimiters-depth-1-face) fontified t) 99 100 (face (rainbow-delimiters-depth-1-face) fontified t) 100 105 (fontified t) 105 115 (face font-lock-variable-name-face fontified t) 115 118 (fontified t) 118 119 (face (rainbow-delimiters-depth-1-face) fontified t) 119 120 (face (rainbow-delimiters-depth-1-face) fontified t) 120 126 (fontified t) 126 129 (face font-lock-keyword-face fontified t) 129 132 (fontified t) 132 134 (face font-lock-keyword-face fontified t) 134 171 (fontified t) 171 172 (face (rainbow-delimiters-depth-1-face) fontified t) 172 182 (fontified t) 182 183 (face (rainbow-delimiters-depth-1-face) fontified t) 183 192 (fontified t) 192 194 (face font-lock-keyword-face fontified t) 194 217 (fontified t) 217 223 (face font-lock-variable-name-face fontified t) 223 234 (fontified t) 234 235 (face (rainbow-delimiters-depth-1-face) fontified t) 235 237 (fontified t) 237 252 (fontified t) 252 259 (fontified t) 259 260 (face (rainbow-delimiters-depth-1-face) fontified t) 260 261 (fontified t) 261 273 (fontified t) 273 275 (face font-lock-keyword-face fontified t) 275 294 (fontified t) 294 295 (face (rainbow-delimiters-depth-1-face) fontified t) 295 301 (fontified t) 301 302 (face (rainbow-delimiters-depth-1-face) fontified t) 302 336 (fontified t) 336 337 (face (rainbow-delimiters-depth-1-face) fontified t) 337 340 (face font-lock-builtin-face fontified t) 340 341 (face (rainbow-delimiters-depth-2-face) fontified t) 341 360 (fontified t) 360 361 (face (rainbow-delimiters-depth-2-face) fontified t) 361 364 (fontified t) 364 367 (face font-lock-builtin-face fontified t) 367 368 (face (rainbow-delimiters-depth-2-face) fontified t) 368 390 (fontified t) 390 391 (face (rainbow-delimiters-depth-2-face) fontified t) 391 392 (face (rainbow-delimiters-depth-1-face) fontified t) 392 398 (fontified t) 398 400 (face font-lock-keyword-face fontified t) 400 411 (fontified t) 411 412 (face (rainbow-delimiters-depth-1-face) fontified t) 412 424 (face font-lock-string-face fontified t) 424 425 (face (rainbow-delimiters-depth-1-face) fontified t) 425 426 (fontified t) 426 429 (face font-lock-keyword-face fontified t) 429 457 (fontified t) 457 458 (face (rainbow-delimiters-depth-1-face) fontified t) 458 499 (face font-lock-string-face fontified t) 499 503 (face font-lock-string-face fontified t) 503 504 (fontified t) 504 510 (face font-lock-builtin-face fontified t) 510 511 (face (rainbow-delimiters-depth-2-face) fontified t) 511 514 (fontified t) 514 515 (face (rainbow-delimiters-depth-2-face) fontified t) 515 526 (fontified t) 526 527 (face (rainbow-delimiters-depth-1-face) fontified t) 527 528 (fontified t) 528 551 (fontified t) 551 552 (face (rainbow-delimiters-depth-1-face) fontified t) 552 581 (face font-lock-string-face fontified t) 581 595 (face font-lock-string-face fontified t) 595 596 (face (rainbow-delimiters-depth-1-face) fontified t) 596 597 (fontified t) 597 601 (fontified t) 601 603 (face font-lock-keyword-face fontified t) 603 614 (fontified t) 614 615 (face (rainbow-delimiters-depth-1-face) fontified t) 615 628 (face font-lock-string-face fontified t) 628 629 (face (rainbow-delimiters-depth-1-face) fontified t) 629 639 (fontified t) 639 643 (face font-lock-variable-name-face fontified t) 643 650 (fontified t) 650 651 (face (rainbow-delimiters-depth-1-face) fontified t) 651 654 (fontified t) 654 655 (face (rainbow-delimiters-depth-1-face) fontified t) 655 672 (fontified t) 672 673 (face (rainbow-delimiters-depth-1-face) fontified t) 673 691 (face font-lock-string-face fontified t) 691 705 (fontified t) 705 737 (face font-lock-string-face fontified t) 737 748 (fontified t) 748 749 (face (rainbow-delimiters-depth-1-face) fontified t) 749 752 (fontified t) 752 761 (fontified t) 761 773 (fontified t) 773 774 (face (rainbow-delimiters-depth-1-face) fontified t) 774 819 (face font-lock-string-face fontified t) 819 820 (face (rainbow-delimiters-depth-1-face) fontified t) 820 821 (fontified t)) . 327) (undo-tree-id22 . -21) (undo-tree-id23 . -821) (undo-tree-id24 . -821) (undo-tree-id25 . -821)) nil (25764 6459 312641 983000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -326) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) 327) nil (25764 6459 312635 637000) 0 nil])
([nil nil ((#("sensorStatus" 0 12 (face font-lock-type-face fontified t)) . 333) (undo-tree-id15 . -12) (undo-tree-id16 . -12) (undo-tree-id17 . -12)) nil (25764 6459 312629 470000) 0 nil])
([nil nil ((333 . 350)) nil (25764 6459 312624 915000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -349) (undo-tree-id14 . -1) 350) nil (25764 6459 312623 234000) 0 nil])
([nil nil ((#("
        # # finds all sensors that havent received a package in a given period of time, the sensor_timelaps
        # users = UserModel.sd_userlist(minTime, log_list)

        # sensor_list = []

        # current_time = dt.now()

        # # goes through alle users who's sensors are inactive, sends an sms
        # for i in users:
        #     logs = [i.log_type for i in i[1].get_entries(minTime, log_list)]

        #     log_msg = \"\"
        #     if logs:
        #         log_msg = \". It has stopped receiving data from the following log types: \"+','.join(logs)


        #     sensor_list.append(i[0].firm.name + ' - ' + i[1].name + log_msg)
        #     if i[0].mobile and app.config['SMS_ACTIVE'] and app.config['NOTIFY_USERS']:
        #         number = pn.parse(i[0].mobile, i[0].country_code)
        #         if pn.is_valid_number(number) and app.config['NOTIFY_USERS_SENSOR'] and app.config['SMS_ACTIVE']:
        #             send_sms(\"Sensor {0} is inactive or does not receive data\".format(i[1].name), [str(number.country_code) + str(number.national_number)])
        #             app.logger.info(\"SMS about sensor status sent to userid - {0}\".format(i[0].id))
        #     if app.config['MAIL_ACTIVE'] and app.config['NOTIFY_USERS_SENSOR']:
        #         mail = Mail(app)
        #         try:
        #             sendMail('Sensor is down', [i[0].username], 'The following sensor is down:', (\"Sensor {0} is inactive\"+log_msg).format(i[1].name), mail)
        #             app.logger.info(\"Email about sensor status sent to userid - {0}\".format(i[0].id))
        #         except:
        #             app.logger.error('Tried to send mail to {0} - {1} but failed'.format(i[0].name, i[0].id))
        #             # return {'message': 'mailFail'}, 500

        #     i[1].sent_sms = current_time
        #     i[1].update_entries(current_time, minTime, log_list)
        #     i[1].save_to_db()


        ## send notis to the sys admins:
        # sys_users = UserModel.find_users_with_role('sys_admin')
        # msg = '\\n'.join(sensor_list)

        # admin_sms = []
        # admin_mail = []

        # for i in sys_users:
        #     admin_mail.append(i.username)
        #     if i.mobile:
        #         number = pn.parse(i.mobile, i.country_code)
        #         if pn.is_valid_number(number):
        #             admin_sms.append(str(number.country_code) + str(number.national_number))
        # if msg:
        #     if app.config['SMS_ACTIVE'] and admin_sms:
        #         send_sms(\"The following sensors are inactive:\\n \\n {}\".format(msg), admin_sms)
        #         app.logger.info(\"SMS about sensor status sent to sysadmins\")
        #     if app.config['MAIL_ACTIVE']:
        #         mail = Mail(app)
        #         sendMail('Sensors are down', admin_mail, 'The following sensors are down', msg, mail)
        #         app.logger.info(\"Email about sensor status sent to sysadmins\")" 0 9 (fontified t) 9 11 (face font-lock-comment-delimiter-face fontified t) 11 71 (face font-lock-comment-face fontified t) 71 109 (face font-lock-comment-face fontified t) 109 117 (fontified t) 117 119 (face font-lock-comment-delimiter-face fontified t) 119 156 (face font-lock-comment-face fontified t) 156 168 (face font-lock-comment-face fontified t) 168 177 (fontified t) 177 179 (face font-lock-comment-delimiter-face fontified t) 179 192 (face font-lock-comment-face fontified t) 192 196 (face font-lock-comment-face fontified t) 196 204 (fontified t) 204 205 (fontified t) 205 207 (face font-lock-comment-delimiter-face fontified t) 207 231 (face font-lock-comment-face fontified t) 231 240 (fontified t) 240 242 (face font-lock-comment-delimiter-face fontified t) 242 309 (face font-lock-comment-face fontified t) 309 317 (fontified t) 317 319 (face font-lock-comment-delimiter-face fontified t) 319 335 (face font-lock-comment-face fontified t) 335 343 (fontified t) 343 349 (face font-lock-comment-delimiter-face fontified t) 349 394 (face font-lock-comment-face fontified t) 394 414 (face font-lock-comment-face fontified t) 414 423 (fontified t) 423 424 (face font-lock-comment-delimiter-face fontified t) 424 429 (face font-lock-comment-delimiter-face fontified t) 429 442 (face font-lock-comment-face fontified t) 442 450 (fontified t) 450 456 (face font-lock-comment-delimiter-face fontified t) 456 465 (face font-lock-comment-face fontified t) 465 473 (fontified t) 473 483 (face font-lock-comment-delimiter-face fontified t) 483 573 (face font-lock-comment-face fontified t) 573 583 (fontified t) 583 589 (face font-lock-comment-delimiter-face fontified t) 589 654 (face font-lock-comment-face fontified t) 654 662 (fontified t) 662 668 (face font-lock-comment-delimiter-face fontified t) 668 744 (face font-lock-comment-face fontified t) 744 752 (fontified t) 752 762 (face font-lock-comment-delimiter-face fontified t) 762 812 (face font-lock-comment-face fontified t) 812 820 (fontified t) 820 830 (face font-lock-comment-delimiter-face fontified t) 830 894 (face font-lock-comment-face fontified t) 894 924 (face font-lock-comment-face fontified t) 924 928 (face font-lock-comment-face fontified t) 928 936 (fontified t) 936 950 (face font-lock-comment-delimiter-face fontified t) 950 956 (face font-lock-comment-face fontified t) 956 965 (face font-lock-comment-face fontified t) 965 1078 (face font-lock-comment-face fontified t) 1078 1085 (face (whitespace-line font-lock-comment-face) fontified t) 1085 1086 (face font-lock-comment-face fontified t) 1086 1094 (fontified t) 1094 1108 (face font-lock-comment-delimiter-face fontified t) 1108 1188 (face font-lock-comment-face fontified t) 1188 1196 (fontified t) 1196 1202 (face font-lock-comment-delimiter-face fontified t) 1202 1270 (face font-lock-comment-face fontified t) 1270 1278 (fontified t) 1278 1288 (face font-lock-comment-delimiter-face fontified t) 1288 1305 (face font-lock-comment-face fontified t) 1305 1313 (fontified t) 1313 1323 (face font-lock-comment-delimiter-face fontified t) 1323 1328 (face font-lock-comment-face fontified t) 1328 1336 (fontified t) 1336 1350 (face font-lock-comment-delimiter-face fontified t) 1350 1424 (face font-lock-comment-face fontified t) 1424 1478 (face font-lock-comment-face fontified t) 1478 1486 (face (whitespace-line font-lock-comment-face) fontified t) 1486 1487 (face font-lock-comment-face fontified t) 1487 1495 (fontified t) 1495 1509 (face font-lock-comment-delimiter-face fontified t) 1509 1586 (face font-lock-comment-face fontified t) 1586 1591 (fontified t face font-lock-comment-face) 1591 1599 (fontified t) 1599 1609 (face font-lock-comment-delimiter-face fontified t) 1609 1617 (face font-lock-comment-face fontified t) 1617 1625 (fontified t) 1625 1639 (face font-lock-comment-delimiter-face fontified t) 1639 1729 (face font-lock-comment-face fontified t) 1729 1737 (fontified t) 1737 1751 (face font-lock-comment-delimiter-face fontified t) 1751 1789 (face font-lock-comment-face fontified t) 1789 1798 (fontified t) 1798 1804 (face font-lock-comment-delimiter-face fontified t) 1804 1833 (face font-lock-comment-face fontified t) 1833 1841 (fontified t) 1841 1847 (face font-lock-comment-delimiter-face fontified t) 1847 1900 (face font-lock-comment-face fontified t) 1900 1908 (fontified t) 1908 1914 (face font-lock-comment-delimiter-face fontified t) 1914 1932 (face font-lock-comment-face fontified t) 1932 1942 (fontified t) 1942 1945 (face font-lock-comment-delimiter-face fontified t) 1945 1975 (face font-lock-comment-face fontified t) 1975 1983 (fontified t) 1983 1985 (face font-lock-comment-delimiter-face fontified t) 1985 2041 (face font-lock-comment-face fontified t) 2041 2049 (fontified t) 2049 2051 (face font-lock-comment-delimiter-face fontified t) 2051 2080 (face font-lock-comment-face fontified t) 2080 2089 (fontified t) 2089 2091 (face font-lock-comment-delimiter-face fontified t) 2091 2106 (fontified t face font-lock-comment-face) 2106 2114 (fontified t) 2114 2116 (face font-lock-comment-delimiter-face fontified t) 2116 2132 (face font-lock-comment-face fontified t) 2132 2141 (fontified t) 2141 2143 (face font-lock-comment-delimiter-face fontified t) 2143 2163 (face font-lock-comment-face fontified t) 2163 2171 (fontified t) 2171 2177 (face font-lock-comment-delimiter-face fontified t) 2177 2207 (face font-lock-comment-face fontified t) 2207 2215 (fontified t) 2215 2221 (face font-lock-comment-delimiter-face fontified t) 2221 2234 (face font-lock-comment-face fontified t) 2234 2242 (fontified t) 2242 2252 (face font-lock-comment-delimiter-face fontified t) 2252 2296 (face font-lock-comment-face fontified t) 2296 2304 (fontified t) 2304 2314 (face font-lock-comment-delimiter-face fontified t) 2314 2345 (face font-lock-comment-face fontified t) 2345 2353 (fontified t) 2353 2367 (face font-lock-comment-delimiter-face fontified t) 2367 2440 (face font-lock-comment-face fontified t) 2440 2448 (fontified t) 2448 2450 (face font-lock-comment-delimiter-face fontified t) 2450 2458 (face font-lock-comment-face fontified t) 2458 2466 (fontified t) 2466 2472 (face font-lock-comment-delimiter-face fontified t) 2472 2515 (face font-lock-comment-face fontified t) 2515 2523 (fontified t) 2523 2533 (face font-lock-comment-delimiter-face fontified t) 2533 2606 (face font-lock-comment-face fontified t) 2606 2612 (face font-lock-comment-face fontified t) 2612 2620 (fontified t) 2620 2630 (face font-lock-comment-delimiter-face fontified t) 2630 2691 (face font-lock-comment-face fontified t) 2691 2699 (fontified t) 2699 2705 (face font-lock-comment-delimiter-face fontified t) 2705 2735 (face font-lock-comment-face fontified t) 2735 2743 (fontified t) 2743 2753 (face font-lock-comment-delimiter-face fontified t) 2753 2770 (face font-lock-comment-face fontified t) 2770 2778 (fontified t) 2778 2788 (face font-lock-comment-delimiter-face fontified t) 2788 2874 (face font-lock-comment-face fontified t) 2874 2882 (fontified t) 2882 2892 (face font-lock-comment-delimiter-face fontified t) 2892 2954 (face font-lock-comment-face fontified t)) . 1437) (undo-tree-id10 . -1) (undo-tree-id11 . -2954) (undo-tree-id12 . -2954) (undo-tree-id13 . -2954)) nil (25764 6459 312620 440000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1436) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 1437) nil (25764 6459 312614 586000) 0 nil])
([nil nil ((#("checked" 0 7 (face font-lock-string-face fontified t)) . 1474) (undo-tree-id3 . -7) (undo-tree-id4 . -7) (undo-tree-id5 . -7)) nil (25764 6459 312607 658000) 0 nil])
([nil nil ((1474 . 1490)) nil (25764 6459 312602 855000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-string-face fontified t)) . -1488) (undo-tree-id1 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1489) (undo-tree-id2 . -1) 1490) nil (25764 6459 312600 543000) 0 nil])
([nil nil ((1488 . 1489)) nil (25764 6459 312594 873000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -1488) (undo-tree-id0 . -1) 1489) nil (25764 6459 312589 165000) 0 nil])
([nil nil ((#("        sensor_time = app.config['SENSOR_STATUS'] * 60
        minTime = dt.now() - datetime.timedelta(seconds=sensor_time)
        log_list = app.config['SENSOR_CHECK_LOGS']" 0 8 (fontified t) 8 19 (face font-lock-variable-name-face fontified t) 19 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t) 33 48 (face font-lock-string-face fontified t) 48 49 (face (rainbow-delimiters-depth-1-face) fontified t) 49 63 (fontified t) 63 70 (face font-lock-variable-name-face fontified t) 70 79 (fontified t) 79 80 (face (rainbow-delimiters-depth-1-face) fontified t) 80 81 (face (rainbow-delimiters-depth-1-face) fontified t) 81 102 (fontified t) 102 103 (face (rainbow-delimiters-depth-1-face) fontified t) 103 122 (fontified t) 122 123 (face (rainbow-delimiters-depth-1-face) fontified t) 123 131 (fontified t) 131 132 (fontified t) 132 140 (face font-lock-variable-name-face fontified t) 140 153 (fontified t) 153 154 (face (rainbow-delimiters-depth-1-face) fontified t) 154 173 (face font-lock-string-face fontified t) 173 174 (face (rainbow-delimiters-depth-1-face) fontified t)) . 406) (undo-tree-id55 . -55) (undo-tree-id56 . -174) (undo-tree-id57 . -174) (t 25764 6459 319839 284000)) nil (25764 6532 633951 953000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -405) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) 406) nil (25764 6532 633939 627000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 405) (undo-tree-id50 . -1) (#("
" 0 1 (fontified t)) . 405) (undo-tree-id51 . -1)) nil (25764 6532 633924 358000) 0 nil])
([nil nil ((#("
        sensor_list = []
" 0 1 (fontified t) 1 9 (fontified t) 9 20 (face font-lock-variable-name-face fontified t) 20 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 25 (face (rainbow-delimiters-depth-1-face) fontified t) 25 26 (fontified t)) . 451) (undo-tree-id47 . -1) (undo-tree-id48 . -26) (undo-tree-id49 . -26)) nil (25764 6532 633920 158000) 0 nil])
([nil nil ((451 . 460)) nil (25764 6532 633914 883000) 0 nil])
([nil nil ((#("                logs = [v.log_type for v in sensor.get_entries(minTime, log_list)]
                log_msg = \". It has stopped receiving data from the following log types: \"+','.join(logs) if logs else \"\"
                sensor_list.append(i[0].firm.name + ' - ' + i[1].name + log_msg)

                sensor.sent_sms = current_time
                sensor.update_entries(dt.now(), minTime, log_list)
                sensor.save_to_db()

                for user in firm.get_notifiable_users():
                    send_info(user, sensor, log_msg)

        msg = '\\n'.join(sensor_list)
        if msg:
            send_admin(msg)
" 0 16 (fontified t) 16 20 (face font-lock-variable-name-face fontified t) 20 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 35 (fontified t) 35 38 (face font-lock-keyword-face fontified t) 38 41 (fontified t) 41 43 (face font-lock-keyword-face fontified t) 43 54 (fontified t) 54 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-2-face) fontified t) 63 80 (fontified t) 80 81 (face (rainbow-delimiters-depth-2-face) fontified t) 81 82 (face (rainbow-delimiters-depth-1-face) fontified t) 82 83 (fontified t) 83 99 (fontified t) 99 106 (face font-lock-variable-name-face fontified t) 106 109 (fontified t) 109 173 (face font-lock-string-face fontified t) 173 174 (fontified t) 174 177 (face font-lock-string-face fontified t) 177 182 (fontified t) 182 183 (face (rainbow-delimiters-depth-1-face) fontified t) 183 187 (fontified t) 187 188 (face (rainbow-delimiters-depth-1-face) fontified t) 188 189 (fontified t) 189 191 (face font-lock-keyword-face fontified t) 191 197 (fontified t) 197 201 (face font-lock-keyword-face fontified t) 201 202 (fontified t) 202 204 (face font-lock-string-face fontified t) 204 239 (fontified t) 239 240 (face (rainbow-delimiters-depth-1-face) fontified t) 240 241 (fontified t) 241 242 (face (rainbow-delimiters-depth-2-face) fontified t) 242 243 (fontified t) 243 244 (face (rainbow-delimiters-depth-2-face) fontified t) 244 254 (fontified t) 254 256 (fontified t) 256 257 (fontified t) 257 262 (face font-lock-string-face fontified t) 262 266 (fontified t) 266 267 (face (rainbow-delimiters-depth-2-face) fontified t) 267 268 (fontified t) 268 269 (face (rainbow-delimiters-depth-2-face) fontified t) 269 274 (fontified t) 274 275 (fontified t) 275 284 (fontified t) 284 285 (face (rainbow-delimiters-depth-1-face) fontified t) 285 286 (fontified t) 286 293 (fontified t) 293 303 (fontified t) 303 318 (face font-lock-variable-name-face fontified t) 318 322 (fontified t) 322 334 (fontified t) 334 348 (fontified t) 348 371 (fontified t) 371 372 (face (rainbow-delimiters-depth-1-face) fontified t) 372 378 (fontified t) 378 379 (face (rainbow-delimiters-depth-2-face) fontified t) 379 380 (face (rainbow-delimiters-depth-2-face) fontified t) 380 399 (fontified t) 399 400 (face (rainbow-delimiters-depth-1-face) fontified t) 400 434 (fontified t) 434 435 (face (rainbow-delimiters-depth-1-face) fontified t) 435 436 (face (rainbow-delimiters-depth-1-face) fontified t) 436 439 (fontified t) 439 454 (fontified t) 454 457 (face font-lock-keyword-face fontified t) 457 463 (fontified t) 463 465 (face font-lock-keyword-face fontified t) 465 491 (fontified t) 491 492 (face (rainbow-delimiters-depth-1-face) fontified t) 492 493 (face (rainbow-delimiters-depth-1-face) fontified t) 493 524 (fontified t) 524 525 (face (rainbow-delimiters-depth-1-face) fontified t) 525 546 (fontified t) 546 547 (face (rainbow-delimiters-depth-1-face) fontified t) 547 554 (fontified t) 554 557 (fontified t) 557 560 (face font-lock-variable-name-face fontified t) 560 563 (fontified t) 563 567 (face font-lock-string-face fontified t) 567 572 (fontified t) 572 573 (face (rainbow-delimiters-depth-1-face) fontified t) 573 583 (fontified t) 583 584 (fontified t) 584 585 (face (rainbow-delimiters-depth-1-face) fontified t) 585 586 (fontified t) 586 594 (fontified t) 594 596 (face font-lock-keyword-face fontified t) 596 602 (fontified t) 602 624 (fontified t) 624 625 (face (rainbow-delimiters-depth-1-face) fontified t) 625 628 (fontified t) 628 629 (face (rainbow-delimiters-depth-1-face) fontified t) 629 630 (fontified t)) . 613) (undo-tree-id42 . -83) (undo-tree-id43 . -630) (undo-tree-id44 . -629) (undo-tree-id45 . -629) (undo-tree-id46 . -630)) nil (25764 6532 633912 148000) 0 nil])
([nil nil ((#("        " 0 8 (face whitespace-trailing fontified t)) . -452) 610) nil (25764 6532 633889 712000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-type-face fontified t)) . -333) (undo-tree-id58 . -1) 334 (t 25764 6532 643775 480000)) nil (25764 6581 812998 471000) 0 nil])
([nil nil ((333 . 334)) nil (25764 6581 812982 30000) 0 nil])
([nil nil ((#("
            inactive_sensors = firm.get_inactive_sensors(minTime, log_list)" 0 13 (fontified t) 13 29 (face font-lock-variable-name-face fontified t) 29 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-1-face) fontified t) 58 61 (fontified t) 61 75 (fontified t) 75 76 (face (rainbow-delimiters-depth-1-face) fontified t)) . 483) (undo-tree-id242 . -76) (undo-tree-id243 . -1) (t 25764 6581 819732 407000)) nil (25764 7312 418793 434000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 483) (undo-tree-id241 . -1)) nil (25764 7312 418786 329000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -510) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -511) (#("a" 0 1 (fontified t)) . -512) (#("c" 0 1 (fontified nil)) . -513) (#("t" 0 1 (fontified defer)) . -514) (#("i" 0 1 (fontified defer)) . -515) (#("v" 0 1 (fontified defer)) . -516) (#("e" 0 1 (fontified defer)) . -517) (#("_" 0 1 (fontified defer)) . -518) (#("s" 0 1 (fontified defer)) . -519) (#("e" 0 1 (fontified defer)) . -520) (#("n" 0 1 (fontified defer)) . -521) (#("s" 0 1 (fontified defer)) . -522) (#("o" 0 1 (fontified nil)) . -523) (#("r" 0 1 (fontified t)) . -524) (#("s" 0 1 (fontified t)) . -525) 526) nil (25764 7312 418778 241000) 0 nil])
([nil nil ((510 . 523)) nil (25764 7312 418767 714000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -522) 523) nil (25764 7312 418766 126000) 0 nil])
([nil nil ((523 . 540)) nil (25764 7312 418764 74000) 0 nil])
([nil nil ((485 . 497) (#("            " 0 12 (fontified nil)) . 484) (483 . 497)) nil (25764 7312 418762 275000) 0 nil])
([nil nil ((484 . 496)) nil (25764 7312 418760 213000) 0 nil])
([nil nil ((469 . 483)) nil (25764 7312 418756 985000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -482) (undo-tree-id240 . -1) 483) nil (25764 7312 418755 436000) 0 nil])
([nil nil ((478 . 481)) nil (25764 7312 418750 396000) 0 nil])
([nil nil ((485 . 486)) nil (25764 7312 418749 135000) 0 nil])
([nil nil ((465 . 467) (#("[" 0 1 (fontified nil)) . -465) (465 . 466)) nil (25764 7312 418747 308000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 466)) nil (25764 7312 418743 531000) 0 nil])
([nil nil ((#(" " 0 1 (face whitespace-trailing fontified t)) . 514) (#(" " 0 1 (face whitespace-trailing fontified t)) . 514) (#("
" 0 1 (fontified t)) . 514) (undo-tree-id238 . -1) (undo-tree-id239 . 1)) nil (25764 7312 418738 37000) 0 nil])
([nil nil ((#("          " 0 10 (fontified t)) . -514) (undo-tree-id237 . -10) 524) nil (25764 7312 418729 154000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 532) (531 . 532) (530 . 532) (#("[" 0 1 (fontified nil)) . -530) (514 . 531)) nil (25764 7312 418726 660000) 0 nil])
([nil nil ((nil rear-nonsticky nil 764 . 765) (nil fontified nil 764 . 765) (nil fontified nil 763 . 764) (nil fontified nil 762 . 763) (nil fontified nil 752 . 762) (nil fontified nil 751 . 752) (nil fontified nil 750 . 751) (nil fontified nil 744 . 750) (nil fontified nil 743 . 744) (nil fontified nil 741 . 743) (nil fontified nil 727 . 741) (nil fontified nil 726 . 727) (nil fontified nil 716 . 726) (nil fontified nil 715 . 716) (nil fontified nil 714 . 715) (nil fontified nil 713 . 714) (nil fontified nil 706 . 713) (nil fontified nil 705 . 706) (nil fontified nil 702 . 705) (nil fontified nil 701 . 702) (nil fontified nil 668 . 701) (nil fontified nil 666 . 668) (nil fontified nil 655 . 666) (nil fontified nil 651 . 655) (nil fontified nil 650 . 651) (nil fontified nil 646 . 650) (nil fontified nil 645 . 646) (nil fontified nil 644 . 645) (nil fontified nil 643 . 644) (nil fontified nil 635 . 643) (nil fontified nil 629 . 635) (nil fontified nil 614 . 629) (nil fontified nil 610 . 614) (nil fontified nil 609 . 610) (nil fontified nil 608 . 609) (nil fontified nil 607 . 608) (nil fontified nil 589 . 607) (589 . 765)) nil (25764 7312 418723 47000) 0 nil])
([nil nil ((504 . 516) (#("            " 0 12 (fontified nil)) . 503) (undo-tree-id235 . -12) (503 . 516) (#("            " 0 12 (fontified nil)) . 502) (undo-tree-id236 . -12) (501 . 515)) nil (25764 7312 418714 344000) 0 nil])
([nil nil ((503 . 515)) nil (25764 7312 418710 726000) 0 nil])
([nil nil ((515 . 518)) nil (25764 7312 418709 806000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -516) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (#("y" 0 1 (face font-lock-keyword-face fontified t)) . -517) (undo-tree-id234 . -1) 518) nil (25764 7312 418708 383000) 0 nil])
([nil nil ((325 . 327)) nil (25764 7312 418703 525000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -326) (undo-tree-id230 . -1) (undo-tree-id231 . -1) 327) nil (25764 7312 418702 413000) 0 nil])
([nil nil ((326 . 333)) nil (25764 7312 418699 280000) 0 nil])
([nil nil ((#("import " 0 6 (face font-lock-keyword-face fontified t) 6 7 (face whitespace-trailing fontified t)) . 326) (undo-tree-id227 . -7) (undo-tree-id228 . -6) (undo-tree-id229 . -7)) nil (25764 7312 418698 77000) 0 nil])
([nil nil ((326 . 331)) nil (25764 7312 418694 250000) 0 nil])
([nil nil ((#("
from .send_sms import send_sms" 0 1 (fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 16 (fontified t) 16 22 (face font-lock-keyword-face fontified t) 22 31 (fontified t)) . 206) (undo-tree-id224 . -31) (undo-tree-id225 . -1) (undo-tree-id226 . -31)) nil (25764 7312 418692 989000) 0 nil])
([nil nil ((#("
import phonenumbers as pn" 0 1 (fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 21 (fontified t) 21 23 (face font-lock-keyword-face fontified t) 23 26 (fontified t)) . 258) (undo-tree-id221 . -26) (undo-tree-id222 . -1) (undo-tree-id223 . -26)) nil (25764 7312 418688 680000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -273) (undo-tree-id220 . -1) 274) nil (25764 7312 418684 435000) 0 nil])
([nil nil ((273 . 276)) nil (25764 7312 418682 146000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -275) (undo-tree-id219 . -1) 276) nil (25764 7312 418681 128000) 0 nil])
([nil nil ((275 . 293)) nil (25764 7312 418678 893000) 0 nil])
([nil nil ((nil rear-nonsticky nil 312 . 313) (nil fontified nil 299 . 313) (nil fontified nil 293 . 299) (293 . 313)) nil (25764 7312 418677 720000) 0 nil])
([nil nil ((504 . 506)) nil (25764 7312 418676 68000) 0 nil])
([nil nil ((506 . 507)) nil (25764 7312 418675 141000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -506) (undo-tree-id218 . -1) 507) nil (25764 7312 418674 51000) 0 nil])
([nil nil ((506 . 508)) nil (25764 7312 418671 640000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-keyword-face fontified defer)) . -507) (undo-tree-id217 . -1) 508) nil (25764 7312 418670 506000) 0 nil])
([nil nil ((507 . 524)) nil (25764 7312 418668 356000) 0 nil])
([nil nil ((nil rear-nonsticky nil 543 . 544) (nil fontified nil 530 . 544) (nil fontified nil 524 . 530) (524 . 544)) nil (25764 7312 418667 219000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . 546) (545 . 546) (544 . 546) (#("(" 0 1 (fontified nil)) . -544) (544 . 545)) nil (25764 7312 418665 315000) 0 nil])
([nil nil ((nil rear-nonsticky nil 558 . 559) (nil fontified nil 545 . 559) (545 . 559)) nil (25764 7312 418663 456000) 0 nil])
([nil nil ((559 . 560)) nil (25764 7312 418662 114000) 0 nil])
([nil nil ((nil rear-nonsticky nil 572 . 573) (nil fontified nil 568 . 573) (nil fontified nil 560 . 568) (560 . 573)) nil (25764 7312 418661 139000) 0 nil])
([nil nil ((573 . 575)) nil (25764 7312 418659 372000) 0 nil])
([nil nil ((nil rear-nonsticky nil 589 . 590) (nil fontified nil 589 . 590) (nil fontified nil 588 . 589) (nil fontified nil 575 . 588) (575 . 590)) nil (25764 7312 418658 79000) 0 nil])
([nil nil ((590 . 592)) nil (25764 7312 418656 206000) 0 nil])
([nil nil ((nil rear-nonsticky nil 606 . 607) (nil fontified nil 606 . 607) (nil fontified nil 605 . 606) (nil fontified nil 592 . 605) (592 . 607)) nil (25764 7312 418654 872000) 0 nil])
([nil nil ((607 . 615)) nil (25764 7312 418652 854000) 0 nil])
([nil nil ((#("u" 0 1 (fontified defer)) . -607) (undo-tree-id209 . -1) (#("s" 0 1 (fontified defer)) . -608) (undo-tree-id210 . -1) (#("e" 0 1 (fontified defer)) . -609) (undo-tree-id211 . -1) (#("r" 0 1 (fontified defer)) . -610) (undo-tree-id212 . -1) (#("n" 0 1 (fontified defer)) . -611) (undo-tree-id213 . -1) (#("a" 0 1 (fontified nil)) . -612) (undo-tree-id214 . -1) (#("m" 0 1 (fontified t)) . -613) (undo-tree-id215 . -1) (#("e" 0 1 (fontified t)) . -614) (undo-tree-id216 . -1) 615) nil (25764 7312 418650 206000) 0 nil])
([nil nil ((607 . 615)) nil (25764 7312 418637 905000) 0 nil])
([nil nil ((590 . 598)) nil (25764 7312 418637 44000) 0 nil])
([nil nil ((624 . 641)) nil (25764 7312 418636 149000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -637) (undo-tree-id208 . -4) 641) nil (25764 7312 418635 124000) 0 nil])
([nil nil ((637 . 644)) nil (25764 7312 418632 893000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -643) (undo-tree-id207 . -1) 644) nil (25764 7312 418631 693000) 0 nil])
([nil nil ((643 . 645)) nil (25764 7312 418629 96000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-keyword-face fontified defer)) . -644) (undo-tree-id206 . -1) 645) nil (25764 7312 418628 16000) 0 nil])
([nil nil ((644 . 661)) nil (25764 7312 418625 921000) 0 nil])
([nil nil ((644 . 661)) nil (25764 7312 418625 27000) 0 nil])
([nil nil ((nil rear-nonsticky nil 796 . 797) (nil fontified nil 796 . 797) (nil fontified nil 795 . 796) (nil fontified nil 793 . 795) (nil fontified nil 761 . 793) (nil fontified nil 760 . 761) (nil fontified nil 754 . 760) (nil fontified nil 753 . 754) (nil fontified nil 678 . 753) (nil fontified nil 677 . 678) (nil fontified nil 661 . 677) (661 . 797)) nil (25764 7312 418623 534000) 0 nil])
([nil nil ((#("creating an serviceNow link" 0 27 (face font-lock-string-face fontified t)) . 695) (undo-tree-id203 . -27) (undo-tree-id204 . -27) (undo-tree-id205 . -27)) nil (25764 7312 418619 727000) 0 nil])
([nil nil ((695 . 704)) nil (25764 7312 418615 417000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -703) (undo-tree-id202 . -1) 704) nil (25764 7312 418614 264000) 0 nil])
([nil nil ((#("{" 0 1 (face font-lock-string-face fontified t)) . -679) (undo-tree-id191 . -1) (#("0" 0 1 (face font-lock-string-face fontified t)) . -680) (undo-tree-id192 . -1) (#("}" 0 1 (face font-lock-string-face fontified t)) . -681) (undo-tree-id193 . -1) (#(" " 0 1 (face font-lock-string-face fontified defer)) . -682) (undo-tree-id194 . -1) (#("-" 0 1 (face font-lock-string-face fontified defer)) . -683) (undo-tree-id195 . -1) (#(" " 0 1 (face font-lock-string-face fontified defer)) . -684) (undo-tree-id196 . -1) (#("{" 0 1 (face font-lock-string-face fontified defer)) . -685) (undo-tree-id197 . -1) (#("1" 0 1 (face font-lock-string-face fontified defer)) . -686) (undo-tree-id198 . -1) (#("}" 0 1 (face font-lock-string-face fontified nil)) . -687) (undo-tree-id199 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -688) (undo-tree-id200 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -689) (undo-tree-id201 . -1) 690) nil (25764 7312 418610 50000) 0 nil])
([nil nil ((679 . 686)) nil (25764 7312 418596 172000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-string-face fontified t)) . -685) (undo-tree-id190 . -1) 686) nil (25764 7312 418595 7000) 0 nil])
([nil nil ((685 . 686)) nil (25764 7312 418592 340000) 0 nil])
([nil nil ((699 . 720)) nil (25764 7312 418591 438000) 0 nil])
([nil nil ((725 . 726) (724 . 726) (#("{" 0 1 (face font-lock-string-face fontified nil)) . -724) (720 . 725)) nil (25764 7312 418590 215000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-string-face fontified defer)) . -736) (undo-tree-id169 . -1) (#("e" 0 1 (face font-lock-string-face fontified defer)) . -737) (undo-tree-id170 . -1) (#("d" 0 1 (face font-lock-string-face fontified defer)) . -738) (undo-tree-id171 . -1) (#(" " 0 1 (face font-lock-string-face fontified defer)) . -739) (undo-tree-id172 . -1) (#("w" 0 1 (face font-lock-string-face fontified defer)) . -740) (undo-tree-id173 . -1) (#("h" 0 1 (face font-lock-string-face fontified nil)) . -741) (undo-tree-id174 . -1) (#("e" 0 1 (face font-lock-string-face fontified defer)) . -742) (undo-tree-id175 . -1) (#("n" 0 1 (face font-lock-string-face fontified defer)) . -743) (undo-tree-id176 . -1) (#(" " 0 1 (face font-lock-string-face fontified defer)) . -744) (undo-tree-id177 . -1) (#("s" 0 1 (face font-lock-string-face fontified defer)) . -745) (undo-tree-id178 . -1) (#("a" 0 1 (face font-lock-string-face fontified defer)) . -746) (undo-tree-id179 . -1) (#("v" 0 1 (face font-lock-string-face fontified defer)) . -747) (undo-tree-id180 . -1) (#("i" 0 1 (face font-lock-string-face fontified defer)) . -748) (undo-tree-id181 . -1) (#("n" 0 1 (face font-lock-string-face fontified defer)) . -749) (undo-tree-id182 . -1) (#("g" 0 1 (face font-lock-string-face fontified defer)) . -750) (undo-tree-id183 . -1) (#(" " 0 1 (face font-lock-string-face fontified defer)) . -751) (undo-tree-id184 . -1) (#("t" 0 1 (face font-lock-string-face fontified defer)) . -752) (undo-tree-id185 . -1) (#("o" 0 1 (face font-lock-string-face fontified defer)) . -753) (undo-tree-id186 . -1) (#(" " 0 1 (face font-lock-string-face fontified defer)) . -754) (undo-tree-id187 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -755) (undo-tree-id188 . -1) (#("b" 0 1 (face font-lock-string-face fontified t)) . -756) (undo-tree-id189 . -1) 757) nil (25764 7312 418585 150000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-string-face fontified t)) . -733) (undo-tree-id166 . -1) (#("a" 0 1 (face font-lock-string-face fontified defer)) . -734) (undo-tree-id167 . -1) (#("i" 0 1 (face font-lock-string-face fontified defer)) . -735) (undo-tree-id168 . -1) 736) nil (25764 7312 418553 649000) 0 nil])
([nil nil ((733 . 746)) nil (25764 7312 418548 889000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . -739) (undo-tree-id159 . -1) (#("t" 0 1 (fontified defer)) . -740) (undo-tree-id160 . -1) (#(" " 0 1 (fontified defer)) . -741) (undo-tree-id161 . -1) (#("e" 0 1 (fontified defer)) . -742) (undo-tree-id162 . -1) (#("s" 0 1 (fontified defer)) . -743) (undo-tree-id163 . -1) (#("t" 0 1 (fontified t)) . -744) (undo-tree-id164 . -1) (#("a" 0 1 (fontified t)) . -745) (undo-tree-id165 . -1) 746) nil (25764 7312 418546 273000) 0 nil])
([nil nil ((739 . 742)) nil (25764 7312 418536 929000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -741) (undo-tree-id158 . -1) 742) nil (25764 7312 418535 807000) 0 nil])
([nil nil ((741 . 744)) nil (25764 7312 418533 486000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . -743) (undo-tree-id157 . -1) 744) nil (25764 7312 418532 322000) 0 nil])
([nil nil ((743 . 755)) nil (25764 7312 418530 3000) 0 nil])
([nil nil ((755 . 766)) nil (25764 7312 418529 77000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -765) (undo-tree-id156 . -1) 766) nil (25764 7312 418527 836000) 0 nil])
([nil nil ((#("n" 0 1 (fontified defer)) . -787) (undo-tree-id135 . -1) (#("a" 0 1 (fontified defer)) . -788) (undo-tree-id136 . -1) (#("m" 0 1 (fontified defer)) . -789) (undo-tree-id137 . -1) (#("e" 0 1 (fontified defer)) . -790) (undo-tree-id138 . -1) (#("," 0 1 (fontified defer)) . -791) (undo-tree-id139 . -1) (#(" " 0 1 (fontified defer)) . -792) (undo-tree-id140 . -1) (#("c" 0 1 (fontified defer)) . -793) (undo-tree-id141 . -1) (#("u" 0 1 (fontified defer)) . -794) (undo-tree-id142 . -1) (#("r" 0 1 (face (whitespace-line) fontified defer)) . -795) (undo-tree-id143 . -1) (#("r" 0 1 (face (whitespace-line) fontified defer)) . -796) (undo-tree-id144 . -1) (#("e" 0 1 (face (whitespace-line) fontified defer)) . -797) (undo-tree-id145 . -1) (#("n" 0 1 (face (whitespace-line) fontified defer)) . -798) (undo-tree-id146 . -1) (#("t" 0 1 (face (whitespace-line) fontified defer)) . -799) (undo-tree-id147 . -1) (#("_" 0 1 (face (whitespace-line) fontified defer)) . -800) (undo-tree-id148 . -1) (#("u" 0 1 (face (whitespace-line) fontified defer)) . -801) (undo-tree-id149 . -1) (#("s" 0 1 (face (whitespace-line) fontified defer)) . -802) (undo-tree-id150 . -1) (#("e" 0 1 (face (whitespace-line) fontified defer)) . -803) (undo-tree-id151 . -1) (#("r" 0 1 (face (whitespace-line) fontified defer)) . -804) (undo-tree-id152 . -1) (#("." 0 1 (face (whitespace-line) fontified nil)) . -805) (undo-tree-id153 . -1) (#("i" 0 1 (face (whitespace-line) fontified t)) . -806) (undo-tree-id154 . -1) (#("d" 0 1 (face (whitespace-line font-lock-builtin-face) fontified t)) . -807) (undo-tree-id155 . -1) 808) nil (25764 7312 418521 781000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -774) (undo-tree-id122 . -1) (#("u" 0 1 (fontified t)) . -775) (undo-tree-id123 . -1) (#("r" 0 1 (fontified defer)) . -776) (undo-tree-id124 . -1) (#("r" 0 1 (fontified t)) . -777) (undo-tree-id125 . -1) (#("e" 0 1 (fontified defer)) . -778) (undo-tree-id126 . -1) (#("n" 0 1 (fontified defer)) . -779) (undo-tree-id127 . -1) (#("t" 0 1 (fontified defer)) . -780) (undo-tree-id128 . -1) (#("_" 0 1 (fontified defer)) . -781) (undo-tree-id129 . -1) (#("u" 0 1 (fontified defer)) . -782) (undo-tree-id130 . -1) (#("s" 0 1 (fontified defer)) . -783) (undo-tree-id131 . -1) (#("e" 0 1 (fontified defer)) . -784) (undo-tree-id132 . -1) (#("r" 0 1 (fontified defer)) . -785) (undo-tree-id133 . -1) (#("." 0 1 (fontified defer)) . -786) (undo-tree-id134 . -1) 787) nil (25764 7312 418492 5000) 0 nil])
([nil nil ((774 . 782)) nil (25764 7312 418316 539000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -781) (undo-tree-id121 . -1) 782) nil (25764 7312 418315 384000) 0 nil])
([nil nil ((724 . 732)) nil (25764 7312 418313 4000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -731) (undo-tree-id120 . -1) 732) nil (25764 7312 418311 766000) 0 nil])
([nil nil ((731 . 732)) nil (25764 7312 418308 990000) 0 nil])
([nil nil ((732 . 734)) nil (25764 7312 418307 366000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -795) (undo-tree-id59 . -12) (undo-tree-id60 . -12) (undo-tree-id61 . -12) (undo-tree-id62 . -12) (undo-tree-id63 . -12) (undo-tree-id64 . -12) (undo-tree-id65 . -12) (undo-tree-id66 . -12) (undo-tree-id67 . -12) (undo-tree-id68 . -12) (undo-tree-id69 . -12) (undo-tree-id70 . -12) (undo-tree-id71 . -12) (undo-tree-id72 . -12) (undo-tree-id73 . -12) (undo-tree-id74 . -12) (undo-tree-id75 . -12) (undo-tree-id76 . -12) (undo-tree-id77 . -12) (undo-tree-id78 . -12) (undo-tree-id79 . -12) (undo-tree-id80 . -12) (undo-tree-id81 . -12) (undo-tree-id82 . -12) (undo-tree-id83 . -12) (undo-tree-id84 . -12) (undo-tree-id85 . -12) (undo-tree-id86 . -12) (undo-tree-id87 . -12) (undo-tree-id88 . -12) (undo-tree-id89 . -12) (undo-tree-id90 . -12) (undo-tree-id91 . -12) (undo-tree-id92 . -12) (undo-tree-id93 . -12) (undo-tree-id94 . -12) (undo-tree-id95 . -12) (undo-tree-id96 . -12) (undo-tree-id97 . -12) (undo-tree-id98 . -12) (undo-tree-id99 . -12) (undo-tree-id100 . -12) (undo-tree-id101 . -12) (undo-tree-id102 . -12) (undo-tree-id103 . -12) (undo-tree-id104 . -12) (undo-tree-id105 . -12) (undo-tree-id106 . -12) (undo-tree-id107 . -12) (undo-tree-id108 . -12) (undo-tree-id109 . -12) (undo-tree-id110 . -12) (undo-tree-id111 . -12) (undo-tree-id112 . -12) (undo-tree-id113 . -12) (undo-tree-id114 . -12) (undo-tree-id115 . -12) (undo-tree-id116 . -12) (undo-tree-id117 . -12) (undo-tree-id118 . -12) (undo-tree-id119 . -12) (#("                " 0 16 (face whitespace-trailing fontified t)) . -794) 823) nil (25764 7312 418298 941000) 0 nil])
([nil nil ((793 . 810) (t 25764 7312 427076 665000)) nil (25764 7676 507084 553000) 0 nil])
([nil nil ((810 . 812)) nil (25764 7676 507083 185000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -810) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (#("o" 0 1 (fontified t)) . -811) (undo-tree-id247 . -1) (undo-tree-id248 . -1) 812) nil (25764 7676 507081 552000) 0 nil])
([nil nil ((810 . 819)) nil (25764 7676 507074 992000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -818) (undo-tree-id244 . -1) 819) nil (25764 7676 507072 279000) 0 nil])
([nil nil ((1020 . 1024) 1056) nil (25764 7676 507055 292000) 0 nil])
([nil nil ((891 . 908) (t 25764 7676 514744 400000)) nil (25764 9625 575838 878000) 0 nil])
([nil nil ((908 . 917)) nil (25764 9625 575837 671000) 0 nil])
([nil nil ((917 . 933)) nil (25764 9625 575836 723000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -932) (undo-tree-id273 . -1) 933) nil (25764 9625 575835 602000) 0 nil])
([nil nil ((932 . 941)) nil (25764 9625 575833 379000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -940) (undo-tree-id272 . -1) 941) nil (25764 9625 575832 206000) 0 nil])
([nil nil ((940 . 957)) nil (25764 9625 575829 948000) 0 nil])
([nil nil ((957 . 978)) nil (25764 9625 575829 46000) 0 nil])
([nil nil ((978 . 987)) nil (25764 9625 575828 140000) 0 nil])
([nil nil ((976 . 992) (#("get_last_er" 0 11 (fontified t)) . -976) (undo-tree-id269 . -6) (undo-tree-id270 . -11) (undo-tree-id271 . -11) 987) nil (25764 9625 575826 710000) 0 nil])
([nil nil ((994 . 998) (#(")" 0 1 (fontified nil)) . 994) (993 . 994) (992 . 994) (#("(" 0 1 (fontified nil)) . -992) (992 . 993)) nil (25764 9625 575821 460000) 0 nil])
([nil nil ((998 . 1010)) nil (25764 9625 575819 417000) 0 nil])
([nil nil ((1010 . 1015)) nil (25764 9625 575818 468000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t)) . -1010) (undo-tree-id264 . -1) (#("o" 0 1 (fontified t)) . -1011) (undo-tree-id265 . -1) (#("n" 0 1 (fontified t)) . -1012) (undo-tree-id266 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -1013) (undo-tree-id267 . -1) (#(" " 0 1 (fontified t)) . -1014) (undo-tree-id268 . -1) 1015) nil (25764 9625 575816 297000) 0 nil])
([nil nil ((1010 . 1012) (#("\"" 0 1 (fontified nil)) . -1010) (1010 . 1011)) nil (25764 9625 575798 122000) 0 nil])
([nil nil ((#("i.status" 0 8 (fontified t)) . 1198) (undo-tree-id262 . -8) (undo-tree-id263 . -8)) nil (25764 9625 575792 485000) 0 nil])
([nil nil ((1198 . 1205)) nil (25764 9625 575783 79000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1204) (undo-tree-id261 . -1) 1205) nil (25764 9625 575780 118000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified nil)) . 1208) (1207 . 1208) (1206 . 1208) (#("\"" 0 1 (fontified nil)) . -1206) (1204 . 1207)) nil (25764 9625 575771 11000) 0 nil])
([nil nil ((1206 . 1212)) nil (25764 9625 575768 594000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1206) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (#("r" 0 1 (fontified t)) . -1207) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (#("r" 0 1 (fontified t)) . -1208) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("o" 0 1 (fontified t)) . -1209) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (#("r" 0 1 (fontified t)) . -1210) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (#(":" 0 1 (fontified t)) . -1211) (undo-tree-id260 . -1) 1212) nil (25764 9625 575764 766000) 0 nil])
([nil nil ((1207 . 1212)) nil (25764 9625 575749 537000) 0 nil])
([nil nil ((1213 . 1221)) nil (25764 9625 575748 426000) 0 nil])
([nil nil ((1221 . 1225)) nil (25764 9625 575746 735000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1224) (undo-tree-id249 . -1) 1225) nil (25764 9625 575740 865000) 0 nil])
([nil nil ((1206 . 1243) (#(" " 0 1 (fontified nil)) . 1205) (undo-tree-id274 . -1) (1206 . 1207) (t 25764 9625 583673 427000)) nil (25764 9635 777391 517000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -819) (undo-tree-id290 . -1) (undo-tree-id291 . -1) 820 (t 25764 9635 783660 732000)) nil (25764 9826 642303 642000) 0 nil])
([nil nil ((524 . 534)) nil (25764 9826 642300 192000) 0 nil])
([nil nil ((534 . 537)) nil (25764 9826 642299 151000) 0 nil])
([nil nil ((1276 . 1293)) nil (25764 9826 642298 241000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1302 . 1303) (nil fontified nil 1293 . 1303) (1293 . 1303)) nil (25764 9826 642297 199000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1289) (undo-tree-id289 . -4) 1303) nil (25764 9826 642295 618000) 0 nil])
([nil nil ((1289 . 1294)) nil (25764 9826 642293 176000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1292) (undo-tree-id287 . -1) (#(";" 0 1 (fontified t)) . -1293) (undo-tree-id288 . -1) 1294) nil (25764 9826 642291 663000) 0 nil])
([nil nil ((1292 . 1293)) nil (25764 9826 642288 90000) 0 nil])
([nil nil ((1293 . 1310)) nil (25764 9826 642287 200000) 0 nil])
([nil nil ((1320 . 1337)) nil (25764 9826 642286 237000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1333) (undo-tree-id286 . -4) 1337) nil (25764 9826 642284 870000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1525 . 1526) (nil fontified nil 1518 . 1526) (nil fontified nil 1502 . 1518) (nil fontified nil 1501 . 1502) (nil fontified nil 1500 . 1501) (nil fontified nil 1499 . 1500) (nil fontified nil 1497 . 1499) (nil fontified nil 1492 . 1497) (nil fontified nil 1491 . 1492) (nil fontified nil 1485 . 1491) (nil fontified nil 1484 . 1485) (nil fontified nil 1483 . 1484) (nil fontified nil 1445 . 1483) (nil fontified nil 1444 . 1445) (nil fontified nil 1442 . 1444) (nil fontified nil 1386 . 1442) (nil fontified nil 1385 . 1386) (nil fontified nil 1369 . 1385) (nil fontified nil 1353 . 1369) (nil fontified nil 1351 . 1353) (nil fontified nil 1345 . 1351) (nil fontified nil 1333 . 1345) (1333 . 1526)) nil (25764 9826 642281 258000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -1333) (undo-tree-id285 . -12) 1345) nil (25764 9826 642275 462000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1502) (undo-tree-id284 . -4) 1506) nil (25764 9826 642272 840000) 0 nil])
([nil nil ((1490 . 1506) (#("            " 0 12 (fontified t)) . 1490) (undo-tree-id283 . -12) 1502) nil (25764 9826 642270 293000) 0 nil])
([nil nil ((1320 . 1321)) nil (25764 9826 642267 808000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1362 . 1363) (nil fontified nil 1362 . 1363) (nil fontified nil 1344 . 1362) (nil fontified nil 1340 . 1344) (nil fontified nil 1339 . 1340) (nil fontified nil 1327 . 1339) (nil fontified nil 1321 . 1327) (1321 . 1363)) nil (25764 9826 642266 454000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1340) (undo-tree-id277 . -1) (#("e" 0 1 (fontified t)) . -1341) (undo-tree-id278 . -1) (#("l" 0 1 (fontified t)) . -1342) (undo-tree-id279 . -1) (#("f" 0 1 (fontified t)) . -1343) (undo-tree-id280 . -1) (#("," 0 1 (fontified t)) . -1344) (undo-tree-id281 . -1) (#(" " 0 1 (fontified t)) . -1345) (undo-tree-id282 . -1) 1346) nil (25764 9826 642262 247000) 0 nil])
([nil nil ((#("sensor_data_list" 0 16 (fontified t)) . 1340) (undo-tree-id275 . -16) (undo-tree-id276 . -16)) nil (25764 9826 642251 240000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1352 . 1353) (nil fontified nil 1340 . 1353) (1340 . 1353)) nil (25764 9826 642235 449000) 0 nil])
([nil nil ((1276 . 1277) (t 25764 9826 651426 171000)) nil (25764 9836 728578 346000) 0 nil])
([nil nil ((1277 . 1278)) nil (25764 9836 728577 92000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . -1276) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (#("
" 0 1 (face font-lock-string-face fontified t)) . -1277) (undo-tree-id357 . -1) (undo-tree-id358 . -1) 1278) nil (25764 9836 728575 192000) 0 nil])
([nil nil ((1276 . 1293)) nil (25764 9836 728568 305000) 0 nil])
([nil nil ((#("                " 0 16 (fontified t)) . -1277) (undo-tree-id292 . -16) (undo-tree-id293 . -16) (undo-tree-id294 . -16) (undo-tree-id295 . -16) (undo-tree-id296 . -16) (undo-tree-id297 . -16) (undo-tree-id298 . -16) (undo-tree-id299 . -16) (undo-tree-id300 . -16) (undo-tree-id301 . -16) (undo-tree-id302 . -16) (undo-tree-id303 . -16) (undo-tree-id304 . -16) (undo-tree-id305 . -16) (undo-tree-id306 . -16) (undo-tree-id307 . -16) (undo-tree-id308 . -16) (undo-tree-id309 . -16) (undo-tree-id310 . -16) (undo-tree-id311 . -16) (undo-tree-id312 . -16) (undo-tree-id313 . -16) (undo-tree-id314 . -16) (undo-tree-id315 . -16) (undo-tree-id316 . -16) (undo-tree-id317 . -16) (undo-tree-id318 . -16) (undo-tree-id319 . -16) (undo-tree-id320 . -16) (undo-tree-id321 . -16) (undo-tree-id322 . -16) (undo-tree-id323 . -16) (undo-tree-id324 . -16) (undo-tree-id325 . -16) (undo-tree-id326 . -16) (undo-tree-id327 . -16) (undo-tree-id328 . -16) (undo-tree-id329 . -16) (undo-tree-id330 . -16) (undo-tree-id331 . -16) (undo-tree-id332 . -16) (undo-tree-id333 . -16) (undo-tree-id334 . -16) (undo-tree-id335 . -16) (undo-tree-id336 . -16) (undo-tree-id337 . -16) (undo-tree-id338 . -16) (undo-tree-id339 . -16) (undo-tree-id340 . -16) (undo-tree-id341 . -16) (undo-tree-id342 . -16) (undo-tree-id343 . -16) (undo-tree-id344 . -16) (undo-tree-id345 . -16) (undo-tree-id346 . -16) (undo-tree-id347 . -16) (undo-tree-id348 . -16) (undo-tree-id349 . -16) (undo-tree-id350 . -16) (undo-tree-id351 . -16) (undo-tree-id352 . -16) (undo-tree-id353 . -16) (undo-tree-id354 . -16) 1293) nil (25764 9836 728559 369000) 0 nil])
([nil nil ((#("establish a connection" 0 22 (face font-lock-string-face fontified t)) . 1484) (undo-tree-id393 . -22) (undo-tree-id394 . -22) (t 25764 9836 739413 912000)) nil (25764 9852 251771 544000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-string-face fontified t)) . -1474) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (#("o" 0 1 (face font-lock-string-face fontified defer)) . -1475) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (#("u" 0 1 (face font-lock-string-face fontified defer)) . -1476) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("l" 0 1 (face font-lock-string-face fontified defer)) . -1477) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (#("d" 0 1 (face font-lock-string-face fontified defer)) . -1478) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (#("n" 0 1 (face font-lock-string-face fontified defer)) . -1479) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (#("\\" 0 1 (face font-lock-string-face fontified defer)) . -1480) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (#("'" 0 1 (face font-lock-string-face fontified defer)) . -1481) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (#("t" 0 1 (face font-lock-string-face fontified defer)) . -1482) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1483) (undo-tree-id391 . -1) (undo-tree-id392 . -1) 1484) nil (25764 9852 251765 592000) 0 nil])
([nil nil ((1474 . 1485)) nil (25764 9852 251740 690000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-string-face fontified t)) . -1483) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -1484) (undo-tree-id371 . -1) (undo-tree-id372 . -1) 1485) nil (25764 9852 251738 868000) 0 nil])
([nil nil ((1483 . 1488)) nil (25764 9852 251732 538000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -1487) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) 1488) nil (25764 9852 251726 892000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -895) (undo-tree-id397 . -1) (#("e" 0 1 (fontified t)) . -896) (undo-tree-id398 . -1) (#("n" 0 1 (fontified defer)) . -897) (undo-tree-id399 . -1) (#("s" 0 1 (fontified defer)) . -898) (undo-tree-id400 . -1) (#("o" 0 1 (fontified defer)) . -899) (undo-tree-id401 . -1) (#("r" 0 1 (fontified t)) . -900) (undo-tree-id402 . -1) (#("s" 0 1 (fontified t)) . -901) (undo-tree-id403 . -1) 902 (t 25764 9852 263395 74000)) nil (25764 9925 943138 218000) 0 nil])
([nil nil ((nil rear-nonsticky nil 912 . 913) (nil fontified nil 895 . 913) (895 . 913)) nil (25764 9925 943126 451000) 0 nil])
([nil nil ((913 . 915) (#("(" 0 1 (fontified nil)) . -913) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (913 . 914)) nil (25764 9925 943120 571000) 0 nil])
([nil nil ((863 . 876) (t 25764 9925 951306 1000)) nil (25764 9940 74855 628000) 0 nil])
([nil nil ((876 . 891)) nil (25764 9940 74854 484000) 0 nil])
([nil nil ((891 . 893)) nil (25764 9940 74853 502000) 0 nil])
([nil nil ((nil rear-nonsticky nil 917 . 918) (nil fontified nil 917 . 918) (nil fontified nil 916 . 917) (nil fontified nil 915 . 916) (nil fontified nil 898 . 915) (nil fontified nil 893 . 898) (893 . 918)) nil (25764 9940 74852 5000) 0 nil])
([nil nil ((#("firm.get_active_sensors()" 0 5 (fontified t) 5 22 (fontified t) 22 23 (fontified t rear-nonsticky t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 25 (face (rainbow-delimiters-depth-1-face) fontified t)) . 945) (undo-tree-id404 . -25) (undo-tree-id405 . -2) (undo-tree-id406 . -2) (undo-tree-id407 . -5) (undo-tree-id408 . -25) (undo-tree-id409 . -25)) nil (25764 9940 74848 37000) 0 nil])
([nil nil ((nil rear-nonsticky nil 958 . 959) (nil fontified nil 945 . 959) (945 . 959)) nil (25764 9940 74827 752000) 0 nil])
([nil nil ((441 . 449) (#("        " 0 8 (fontified nil)) . 440) (undo-tree-id7 . -8) (439 . 449) (t 25764 9940 79288 984000)) nil (25765 10648 172603 39000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . 456) (455 . 456) (454 . 456) (#("(" 0 1 (fontified nil face font-lock-keyword-face)) . -454) (449 . 455)) nil (25765 10648 172599 382000) 0 nil])
([nil nil ((455 . 465)) nil (25765 10648 172597 368000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -464) (undo-tree-id6 . -1) 465) nil (25765 10648 172596 23000) 0 nil])
([nil nil ((467 . 475) (#("        " 0 8 (fontified nil)) . 466) (undo-tree-id5 . -8) (465 . 475)) nil (25765 10648 172593 334000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . 481) (480 . 481) (479 . 481) (#("(" 0 1 (fontified nil face font-lock-constant-face)) . -479) (475 . 480)) nil (25765 10648 172590 32000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face font-lock-string-face)) . 482) (481 . 482) (480 . 482) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -480) (480 . 481)) nil (25765 10648 172587 757000) 0 nil])
([nil nil ((481 . 483)) nil (25765 10648 172585 695000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face font-lock-string-face)) . -482) (undo-tree-id4 . -1) 483) nil (25765 10648 172583 831000) 0 nil])
([nil nil ((482 . 485)) nil (25765 10648 172580 787000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face font-lock-string-face)) . -481) (undo-tree-id0 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -482) (undo-tree-id1 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -483) (undo-tree-id2 . -1) (#("y" 0 1 (fontified t face font-lock-string-face)) . -484) (undo-tree-id3 . -1) 485) nil (25765 10648 172577 562000) 0 nil])
([nil nil ((481 . 485)) nil (25765 10648 172551 159000) 0 nil])
([nil nil ((#("get_all_firms" 0 13 (fontified t)) . 424) (undo-tree-id8 . -13) (undo-tree-id9 . -13) (undo-tree-id10 . -13) (undo-tree-id11 . -13) (t 25765 10648 184094 513000)) nil (25765 10697 445718 849000) 0 nil])
([nil nil ((nil rear-nonsticky nil 447 . 448) (nil fontified nil 424 . 448) (424 . 448)) nil (25765 10697 445690 481000) 0 nil])
([nil nil ((#("
        exit(\"heyo\")" 0 1 (fontified t) 1 9 (fontified t) 9 13 (fontified t face font-lock-constant-face) 13 14 (fontified t face (rainbow-delimiters-depth-1-face)) 14 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 21 (fontified t face (rainbow-delimiters-depth-1-face))) . 477) (undo-tree-id19 . -21) (undo-tree-id20 . -1) (undo-tree-id21 . -21) (undo-tree-id22 . -21) (undo-tree-id23 . -21) (t 25765 10697 452639 534000)) nil (25765 10787 41461 249000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -476) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 477) nil (25765 10787 41454 292000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -490) (undo-tree-id13 . -1) 491) nil (25765 10787 41447 375000) 0 nil])
([nil nil ((490 . 492) (#("(" 0 1 (fontified nil)) . -490) (490 . 491)) nil (25765 10787 41444 109000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 491)) nil (25765 10787 41442 217000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -511) (undo-tree-id12 . -1) 512) nil (25765 10787 41439 799000) 0 nil])
([nil nil ((511 . 512)) nil (25765 10787 41423 706000) 0 nil])
([nil nil ((693 . 709) (t 25765 10787 53600 89000)) nil (25765 11237 829456 455000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -708) (undo-tree-id24 . -1) 709) nil (25765 11237 829454 115000) 0 nil])
([nil nil ((709 . 726)) nil (25765 11237 829578 597000) 0 nil])
([nil nil ((nil rear-nonsticky nil 739 . 740) (nil fontified nil 726 . 740) (726 . 740)) nil (25765 11247 52450 1000) 0 nil] [nil nil ((nil rear-nonsticky nil 742 . 743) (nil fontified nil 742 . 743) (nil fontified nil 726 . 742) (726 . 743)) ((#("db.session.query(" 0 16 (fontified nil) 16 17 (fontified nil rear-nonsticky nil face (rainbow-delimiters-depth-1-face))) . 726) (undo-tree-id25 . -17) (undo-tree-id26 . -17) (nil rear-nonsticky t 742 . 743)) (25765 11237 829436 982000) 0 nil])
([nil nil ((1001 . 1014) (t 25765 11247 62099 525000)) nil (25765 11706 59770 330000) 0 nil])
nil
([nil nil ((1020 . 1030) (1019 . 1021) (#("(" 0 1 (fontified nil face font-lock-keyword-face)) . -1019) (1014 . 1020)) nil (25765 11706 59768 779000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1028) (undo-tree-id28 . -1) (#("e" 0 1 (fontified t)) . -1029) (undo-tree-id29 . -1) 1030) nil (25765 11706 59766 185000) 0 nil])
([nil nil ((1028 . 1035)) nil (25765 11706 59760 614000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1034) (undo-tree-id27 . -1) 1035) nil (25765 11706 59755 560000) 0 nil])
([nil nil ((466 . 468) (t 25765 11706 66200 263000)) nil (25765 11715 898709 390000) 0 nil])
([nil nil ((467 . 478)) nil (25765 11715 898707 654000) 0 nil])
([nil nil ((479 . 481)) nil (25765 11715 898705 768000) 0 nil])
([nil nil ((478 . 479)) nil (25765 11715 898698 799000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face font-lock-string-face)) . 1038) (1037 . 1038) (1036 . 1038) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1036) (1036 . 1037) (t 25765 11715 906285 952000)) nil (25765 11752 848579 505000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . 1037) (undo-tree-id55 . -1) (undo-tree-id56 . -1) 1038) nil (25765 11752 848577 172000) 0 nil])
([nil nil ((1037 . 1048)) nil (25765 11752 848573 943000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t face font-lock-string-face)) . -1045) (undo-tree-id52 . -1) (#("R" 0 1 (fontified t face font-lock-string-face)) . -1046) (undo-tree-id53 . -1) (#("E" 0 1 (fontified t face font-lock-string-face)) . -1047) (undo-tree-id54 . -1) 1048) nil (25765 11752 848572 481000) 0 nil])
([nil nil ((1045 . 1053)) nil (25765 11752 848567 951000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1052) (undo-tree-id51 . -1) 1053) nil (25765 11752 848566 856000) 0 nil])
([nil nil ((1051 . 1052)) nil (25765 11752 848564 764000) 0 nil])
([nil nil ((1053 . 1055)) nil (25765 11752 848563 882000) 0 nil])
([nil nil ((1052 . 1053)) nil (25765 11752 848563 21000) 0 nil])
([nil nil ((1488 . 1504) (#("                " 0 16 (fontified nil)) . 1487) (undo-tree-id50 . -16) (1486 . 1504)) nil (25765 11752 848561 905000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1500) (undo-tree-id49 . -4) 1504) nil (25765 11752 848559 270000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . 1507) (1506 . 1507) (1505 . 1507) (#("(" 0 1 (fontified nil face font-lock-keyword-face)) . -1505) (1500 . 1506)) nil (25765 11752 848556 792000) 0 nil])
([nil nil ((1507 . 1513) (1506 . 1508) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1506) (1506 . 1507)) nil (25765 11752 848554 854000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t face font-lock-string-face)) . -1508) (undo-tree-id44 . -1) (#("E" 0 1 (fontified t face font-lock-string-face)) . -1509) (undo-tree-id45 . -1) (#("O" 0 1 (fontified t face font-lock-string-face)) . -1510) (undo-tree-id46 . -1) (#("S" 0 1 (fontified t face font-lock-string-face)) . -1511) (undo-tree-id47 . -1) (#("R" 0 1 (fontified t face font-lock-string-face)) . -1512) (undo-tree-id48 . -1) 1513) nil (25765 11752 848552 316000) 0 nil])
([nil nil ((1508 . 1518)) nil (25765 11752 848544 194000) 0 nil])
([nil nil ((1519 . 1520)) nil (25765 11752 848543 226000) 0 nil])
([nil nil ((1520 . 1531)) nil (25765 11752 848542 156000) 0 nil])
([nil nil ((1518 . 1520)) nil (25765 11752 848541 188000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . 1521)) nil (25765 11752 848540 6000) 0 nil])
([nil nil ((1521 . 1523)) nil (25765 11752 848538 476000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1522) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 1523) nil (25765 11752 848535 307000) 0 nil])
([nil nil ((1522 . 1523)) nil (25765 11752 848506 599000) 0 nil])
([nil nil ((313 . 315) (t 25765 11752 854607 84000)) nil (25765 11859 972176 547000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -294) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("e" 0 1 (fontified defer)) . -295) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("a" 0 1 (fontified defer)) . -296) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("t" 0 1 (fontified defer)) . -297) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("e" 0 1 (fontified defer)) . -298) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("_" 0 1 (fontified defer)) . -299) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("s" 0 1 (fontified defer)) . -300) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("e" 0 1 (fontified defer)) . -301) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#("r" 0 1 (fontified defer)) . -302) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("v" 0 1 (fontified defer)) . -303) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (#("i" 0 1 (fontified defer)) . -304) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (#("c" 0 1 (fontified defer)) . -305) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("e" 0 1 (fontified nil)) . -306) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (#("c" 0 1 (fontified t)) . -307) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (#("l" 0 1 (fontified defer)) . -308) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("i" 0 1 (fontified defer)) . -309) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (#("e" 0 1 (fontified defer)) . -310) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (#("n" 0 1 (fontified defer)) . -311) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#("t" 0 1 (fontified defer)) . -312) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (#("," 0 1 (fontified t)) . -313) (undo-tree-id103 . -1) (#(" " 0 1 (fontified t)) . -314) (undo-tree-id104 . -1) 315) nil (25765 11859 972170 571000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -293) (undo-tree-id63 . -1) (undo-tree-id64 . -1) 294) nil (25765 11859 972122 782000) 0 nil])
([nil nil ((nil rear-nonsticky nil 306 . 307) (nil fontified nil 293 . 307) (293 . 307)) nil (25765 11859 972119 488000) 0 nil])
([nil nil ((#("create_serviceclient" 0 20 (fontified t)) . 584) (undo-tree-id61 . -20) (undo-tree-id62 . -20)) nil (25765 11859 972117 713000) 0 nil])
([nil nil ((nil rear-nonsticky nil 597 . 598) (nil fontified nil 584 . 598) (584 . 598)) nil (25765 11859 972114 370000) 0 nil])
([nil nil ((598 . 602)) nil (25765 11859 972112 821000) 0 nil])
([nil nil ((#("P" 0 1 (fontified defer)) . -600) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("I" 0 1 (fontified t)) . -601) (undo-tree-id59 . -1) (undo-tree-id60 . -1) 602) nil (25765 11859 972110 31000) 0 nil])
([nil nil ((600 . 602)) nil (25765 11859 972092 823000) 0 nil])
([nil nil ((#("servicenow_api" 0 13 (fontified t) 13 14 (fontified t rear-nonsticky t)) . 293) (undo-tree-id115 . -14) (undo-tree-id116 . -14) (undo-tree-id117 . -14) (undo-tree-id118 . -14) (t 25765 11859 983533 500000)) nil (25765 11974 359769 819000) 0 nil])
([nil nil ((nil rear-nonsticky nil 305 . 306) (nil fontified nil 294 . 306) (nil fontified nil 293 . 294) (293 . 306)) nil (25765 11974 359764 178000) 0 nil])
([nil nil ((#("servicenow_api.Api" 0 13 (fontified t) 13 14 (rear-nonsticky t fontified t) 14 18 (fontified t)) . 583) (undo-tree-id105 . -18) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -18) (undo-tree-id114 . -18)) nil (25765 11974 359760 633000) 0 nil])
([nil nil ((nil rear-nonsticky nil 595 . 596) (nil fontified nil 584 . 596) (nil fontified nil 583 . 584) (583 . 596)) nil (25765 11974 359727 680000) 0 nil])
([nil nil ((#("sensor_json" 0 8 (fontified t) 8 11 (fontified t)) . 1237) (undo-tree-id122 . -11) (undo-tree-id123 . -11) (t 25765 11974 368516 125000)) nil (25765 12008 251627 135000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1249 . 1250) (nil fontified nil 1249 . 1250) (nil fontified nil 1237 . 1249) (1237 . 1250)) nil (25765 12008 251623 141000) 0 nil])
([nil nil ((#("sensor_json" 0 11 (fontified t)) . 1511) (undo-tree-id119 . -11) (undo-tree-id120 . -4) (undo-tree-id121 . -11)) nil (25765 12008 251620 848000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1523 . 1524) (nil fontified nil 1523 . 1524) (nil fontified nil 1511 . 1523) (1511 . 1524)) nil (25765 12008 251607 802000) 0 nil])
([nil nil ((1355 . 1357) 1374) nil (25765 12008 251605 479000) 0 nil])
([nil nil ((1455 . 1457) 1421) nil (25765 12008 251598 598000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1266) (undo-tree-id129 . -1) 1267 (t 25765 12008 264806 205000)) nil (25765 12048 771424 287000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1272 . 1273) (nil fontified nil 1266 . 1273) (1266 . 1273)) nil (25765 12048 771421 487000) 0 nil])
([nil nil ((#("." 0 1 (fontified t rear-nonsticky t)) . -1272) (undo-tree-id128 . -1) 1273) nil (25765 12048 771419 951000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1292) (undo-tree-id127 . -1) 1293) nil (25765 12048 771417 700000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1297 . 1298) (nil fontified nil 1292 . 1298) (1292 . 1298)) nil (25765 12048 771414 998000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1313) (undo-tree-id126 . -1) 1314) nil (25765 12048 771413 534000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1318 . 1319) (nil fontified nil 1313 . 1319) (1313 . 1319)) nil (25765 12048 771411 6000) 0 nil])
([nil nil ((#("i" 0 1 (fontified defer)) . -1379) (undo-tree-id125 . -1) 1380) nil (25765 12048 771409 413000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1384 . 1385) (nil fontified nil 1379 . 1385) (1379 . 1385)) nil (25765 12048 771406 575000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1405) (undo-tree-id124 . -1) 1406) nil (25765 12048 771404 37000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1410 . 1411) (nil fontified nil 1405 . 1411) (1405 . 1411)) nil (25765 12048 771389 48000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 1258) (undo-tree-id130 . -1) (t 25765 12048 781152 352000)) nil (25765 12091 754360 890000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified defer)) . 1500)) nil (25765 12091 754350 457000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1480) 1500) nil (25765 12091 754348 488000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1370) 1389) nil (25765 12091 754340 676000) 0 nil])
([nil nil ((1648 . 1663) (t 25765 12091 765518 944000)) nil (25765 12122 239122 485000) 0 nil])
([nil nil ((1664 . 1681)) nil (25765 12122 239120 522000) 0 nil])
([nil nil ((nil fontified nil 1694 . 1695) (nil fontified nil 1693 . 1694) (nil fontified nil 1692 . 1693) (nil fontified nil 1691 . 1692) (nil fontified nil 1687 . 1691) (nil fontified nil 1686 . 1687) (nil fontified nil 1681 . 1686) (1681 . 1695)) nil (25765 12122 239113 479000) 0 nil])
([nil nil ((1568 . 1585) (t 25765 12122 249778 557000)) nil (25765 12150 38751 31000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . 1592) (1591 . 1592) (1590 . 1592) (#("(" 0 1 (fontified nil face font-lock-keyword-face)) . -1590) (1585 . 1591)) nil (25765 12150 38749 516000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face font-lock-string-face)) . 1593) (1592 . 1593) (1591 . 1593) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1591) (1591 . 1592)) nil (25765 12150 38747 438000) 0 nil])
([nil nil ((1592 . 1593)) nil (25765 12150 38745 629000) 0 nil])
([nil nil ((#("                serviceAPI.update_sensor_data(sensor_update)
" 0 8 (fontified nil) 8 17 (fontified nil) 17 18 (fontified nil) 18 33 (fontified nil) 33 38 (fontified nil) 38 40 (fontified nil) 40 45 (fontified nil) 45 46 (fontified nil face (rainbow-delimiters-depth-1-face)) 46 53 (fontified nil) 53 59 (fontified nil) 59 60 (fontified nil face (rainbow-delimiters-depth-1-face)) 60 61 (fontified nil)) . 1657) (undo-tree-id137 . -24) (undo-tree-id138 . -61) (undo-tree-id139 . -19) (1630 . 1657) (#("                print(\"d\")
" 0 16 (fontified t) 16 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t face (rainbow-delimiters-depth-1-face)) 22 24 (fontified t face font-lock-string-face) 24 25 (fontified t face font-lock-string-face) 25 26 (fontified t face (rainbow-delimiters-depth-1-face)) 26 27 (fontified t)) . 1569) (undo-tree-id140 . -21) (1596 . 1657) 1620) nil (25765 12150 38743 918000) 0 nil])
([nil nil ((#("                serviceAPI.update_sensor_data(sensor_update)
" 0 8 (fontified nil) 8 17 (fontified nil) 17 18 (fontified nil) 18 33 (fontified nil) 33 38 (fontified nil) 38 40 (fontified nil) 40 45 (fontified nil) 45 46 (fontified nil face (rainbow-delimiters-depth-1-face)) 46 53 (fontified nil) 53 59 (fontified nil) 59 60 (fontified nil face (rainbow-delimiters-depth-1-face)) 60 61 (fontified nil)) . 1630) (undo-tree-id132 . -24) (undo-tree-id133 . -61) (undo-tree-id134 . -24) (undo-tree-id135 . -24) (undo-tree-id136 . -24) (1613 . 1630) (#("            try:
" 0 12 (fontified t) 12 15 (fontified t face font-lock-keyword-face) 15 17 (fontified t)) . 1552) (1569 . 1630) 1593) nil (25765 12150 38736 414000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1564) (undo-tree-id131 . -4) 1576) nil (25765 12150 38724 727000) 0 nil])
([nil nil ((1220 . 1237) (t 25765 12150 46015 17000)) nil (25765 12357 115116 667000) 0 nil])
([nil nil ((1237 . 1254)) nil (25765 12357 115115 475000) 0 nil])
([nil nil ((1243 . 1245) (#("(" 0 1 (fontified nil)) . -1243) (1243 . 1244)) nil (25765 12357 115114 256000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 1244)) nil (25765 12357 115112 682000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1285 . 1286) (nil fontified nil 1255 . 1286) (1255 . 1286)) nil (25765 12357 115111 513000) 0 nil])
([nil nil ((1286 . 1303)) nil (25765 12357 115110 106000) 0 nil])
([nil nil ((1303 . 1317)) nil (25765 12357 115108 963000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . -1315) (undo-tree-id146 . -1) (#(" " 0 1 (fontified t)) . -1316) (undo-tree-id147 . -1) 1317) nil (25765 12357 115107 497000) 0 nil])
([nil nil ((1315 . 1316)) nil (25765 12357 115104 48000) 0 nil])
([nil nil ((nil fontified nil 1358 . 1359) (nil fontified nil 1338 . 1358) (nil fontified nil 1337 . 1338) (nil fontified nil 1328 . 1337) (nil fontified nil 1327 . 1328) (nil fontified nil 1317 . 1327) (nil fontified nil 1316 . 1317) (1316 . 1359)) nil (25765 12357 115102 794000) 0 nil])
([nil nil ((#("toc" 0 3 (fontified t)) . 1324) (undo-tree-id144 . -3) (undo-tree-id145 . -3)) nil (25765 12357 115100 425000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1333 . 1334) (nil fontified nil 1333 . 1334) (nil fontified nil 1324 . 1333) (1324 . 1334)) nil (25765 12357 115097 105000) 0 nil])
([nil nil ((#("sensor.toc" 0 5 (fontified t) 5 6 (rear-nonsticky t fontified t) 6 10 (fontified t)) . 1523) (undo-tree-id142 . -10) (undo-tree-id143 . -10)) nil (25765 12357 115095 339000) 0 nil])
([nil nil ((1523 . 1526)) nil (25765 12357 115091 993000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 1542) (#("r" 0 1 (rear-nonsticky t fontified t)) . 1542) (#("o" 0 1 (fontified t face font-lock-keyword-face)) . 1542) (#("s" 0 1 (fontified t)) . 1542) (#("n" 0 1 (fontified t)) . 1542) (#("e" 0 1 (fontified t)) . 1542) (#("s" 0 1 (fontified t)) . 1542)) nil (25765 12357 115090 332000) 0 nil])
([nil nil ((1220 . 1237)) nil (25765 12357 115088 74000) 0 nil])
([nil nil ((1237 . 1239)) nil (25765 12357 115087 209000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1257 . 1258) (nil fontified nil 1239 . 1258) (1239 . 1258)) nil (25765 12357 115086 161000) 0 nil])
([nil nil ((1304 . 1311)) nil (25765 12357 115084 775000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t face font-lock-string-face)) . -1310) (undo-tree-id141 . -1) 1311) nil (25765 12357 115083 310000) 0 nil])
([nil nil ((1310 . 1312)) nil (25765 12357 115074 453000) 0 nil])
([nil nil ((#("," 0 1 (fontified t face font-lock-string-face)) . 1312) (#("Y" 0 1 (fontified t face font-lock-string-face)) . 1312) (#("%" 0 1 (fontified t face font-lock-string-face)) . 1312) (#("/" 0 1 (fontified t face font-lock-string-face)) . 1312) (#("d" 0 1 (fontified t face font-lock-string-face)) . 1312) (#("%" 0 1 (fontified t face font-lock-string-face)) . 1312) (#("/" 0 1 (fontified t face font-lock-string-face)) . 1312) (#("m" 0 1 (fontified t face font-lock-string-face)) . 1312) (#("%" 0 1 (fontified t face font-lock-string-face)) . 1312)) nil (25765 12357 115065 727000) 0 nil])
([nil nil ((#("%m/%d/%Y, %H:%M:%S" 0 18 (fontified t face font-lock-string-face)) . 1383) (undo-tree-id148 . -18) (undo-tree-id149 . -7) (undo-tree-id150 . -4) (undo-tree-id151 . -4) (undo-tree-id152 . -4) (undo-tree-id153 . -3) (undo-tree-id154 . -3) (undo-tree-id155 . -3) (undo-tree-id156 . -2) (undo-tree-id157 . -2) (undo-tree-id158 . -2) (undo-tree-id159 . -2) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -18) (undo-tree-id164 . -18) (t 25765 12357 123770 252000)) nil (25765 12365 525160 785000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1399 . 1400) (nil fontified nil 1383 . 1400) (1383 . 1400)) nil (25765 12365 525092 952000) 0 nil])
([nil nil ((1323 . 1344) (t 25765 12365 535841 350000)) nil (25765 12405 280861 415000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -1342) (undo-tree-id168 . -1) (#(" " 0 1 (fontified t)) . -1343) (undo-tree-id169 . -1) 1344) nil (25765 12405 280859 674000) 0 nil])
([nil nil ((1342 . 1348)) nil (25765 12405 280855 695000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1347) (undo-tree-id167 . -1) 1348) nil (25765 12405 280854 249000) 0 nil])
([nil nil ((1426 . 1427)) nil (25765 12405 280851 381000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1449 . 1450) (nil fontified nil 1446 . 1450) (nil fontified nil 1445 . 1446) (nil fontified nil 1441 . 1445) (nil fontified nil 1429 . 1441) (nil fontified nil 1427 . 1429) (1427 . 1450)) nil (25765 12405 280849 587000) 0 nil])
([nil nil ((#("toc" 0 3 (fontified t)) . 1437) (undo-tree-id165 . -3) (undo-tree-id166 . -3)) nil (25765 12405 280845 359000) 0 nil])
([nil nil ((1437 . 1447)) nil (25765 12405 280825 411000) 0 nil])
([nil nil ((1787 . 1792) (t 25765 12405 292177 196000)) nil (25765 12606 304274 283000) 0 nil])
([nil nil ((1836 . 1849)) nil (25765 12606 304271 997000) 0 nil])
([nil nil ((1855 . 1857) (1854 . 1856) (#("(" 0 1 (fontified nil face font-lock-keyword-face)) . -1854) (1849 . 1855)) nil (25765 12606 304264 443000) 0 nil])
([nil nil ((#("            print(dd)
" 0 12 (fontified nil) 12 17 (fontified nil face font-lock-keyword-face) 17 18 (fontified nil face (rainbow-delimiters-depth-1-face)) 18 20 (fontified nil) 20 21 (fontified nil face (rainbow-delimiters-depth-1-face)) 21 22 (fontified nil)) . 1859) (undo-tree-id205 . -17) (1797 . 1859) (#("            dd = serviceAPI.update_sensor_data(sensor_update)
" 0 8 (fontified t) 8 12 (fontified t) 12 14 (fontified t face font-lock-variable-name-face) 14 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 23 (fontified t) 23 24 (fontified t) 24 28 (fontified t) 28 34 (fontified t) 34 35 (fontified t) 35 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t) 42 46 (fontified t) 46 47 (fontified t face (rainbow-delimiters-depth-1-face)) 47 54 (fontified t) 54 60 (fontified t) 60 61 (fontified t face (rainbow-delimiters-depth-1-face)) 61 62 (fontified t)) . 1775) (undo-tree-id206 . -30) (undo-tree-id207 . -30) (1837 . 1859) 1805 (t 25765 12606 313871 345000)) nil (25765 13412 496334 844000) 0 nil])
([nil nil ((#("            try:
" 0 12 (fontified nil) 12 15 (fontified nil face font-lock-keyword-face) 15 17 (fontified nil)) . 1876) (1814 . 1876) (#("            dd = serviceAPI.update_sensor_data(sensor_update)
" 0 8 (fontified t) 8 12 (fontified t) 12 14 (fontified t face font-lock-variable-name-face) 14 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 23 (fontified t) 23 24 (fontified t) 24 28 (fontified t) 28 34 (fontified t) 34 35 (fontified t) 35 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t) 42 46 (fontified t) 46 47 (fontified t face (rainbow-delimiters-depth-1-face)) 47 54 (fontified t) 54 60 (fontified t) 60 61 (fontified t face (rainbow-delimiters-depth-1-face)) 61 62 (fontified t)) . 1797) (undo-tree-id204 . -30) (1859 . 1876) 1827) nil (25765 13412 496329 76000) 0 nil])
([nil nil ((1814 . 1830) (#("            " 0 8 (fontified t) 8 12 (fontified t)) . 1814) 1844) nil (25765 13412 496325 817000) 0 nil])
([nil nil ((#("dd = " 0 2 (fontified t face font-lock-variable-name-face) 2 5 (fontified t)) . 1830) (undo-tree-id202 . -5) (undo-tree-id203 . -5)) nil (25765 13412 496324 45000) 0 nil])
([nil nil ((#("
                print(\"d\")" 0 1 (fontified t) 1 13 (fontified t) 13 17 (fontified t) 17 22 (fontified t face font-lock-keyword-face) 22 23 (fontified t face (rainbow-delimiters-depth-1-face)) 23 25 (fontified t face font-lock-string-face) 25 26 (fontified t face font-lock-string-face) 26 27 (fontified t face (rainbow-delimiters-depth-1-face))) . 1874) (undo-tree-id199 . -27) (undo-tree-id200 . -1) (undo-tree-id201 . -27)) nil (25765 13412 496319 871000) 0 nil])
([nil nil ((#("            print(dd)" 0 12 (fontified t) 12 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t face (rainbow-delimiters-depth-1-face)) 18 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-1-face))) . 1775) (undo-tree-id197 . -21) (undo-tree-id198 . -21)) nil (25765 13412 496249 940000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1774) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) 1775) nil (25765 13412 496246 609000) 0 nil])
([nil nil ((#("
            print(\"SENSOR JSON: \", sensor_update)" 0 1 (fontified t) 1 13 (fontified t) 13 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t face (rainbow-delimiters-depth-1-face)) 19 33 (fontified t face font-lock-string-face) 33 34 (fontified t face font-lock-string-face) 34 36 (fontified t) 36 48 (fontified t) 48 49 (rear-nonsticky t fontified t) 49 50 (fontified t face (rainbow-delimiters-depth-1-face))) . 1723) (undo-tree-id189 . -50) (undo-tree-id190 . -50) (undo-tree-id191 . -1) (undo-tree-id192 . -50)) nil (25765 13412 496240 961000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1722) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) 1723) nil (25765 13412 496235 412000) 0 nil])
([nil nil ((#("
            print(\"ACTIVE SENSORS: \", active_sensors)" 0 1 (fontified t) 1 13 (fontified t) 13 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t face (rainbow-delimiters-depth-1-face)) 19 37 (fontified t face font-lock-string-face) 37 39 (fontified t) 39 48 (fontified t) 48 53 (fontified t) 53 54 (fontified t face (rainbow-delimiters-depth-1-face))) . 1003) (undo-tree-id182 . -54) (undo-tree-id183 . -1) (undo-tree-id184 . -54)) nil (25765 13412 496229 360000) 0 nil])
([nil nil ((#("        print('ALLL FIRMS: ', all_firms)" 0 8 (fontified t) 8 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t face (rainbow-delimiters-depth-1-face)) 14 28 (fontified t face font-lock-string-face) 28 30 (fontified t) 30 39 (fontified t) 39 40 (fontified t face (rainbow-delimiters-depth-1-face))) . 445) (undo-tree-id179 . -40) (undo-tree-id180 . -40) (undo-tree-id181 . -40)) nil (25765 13412 496224 610000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -443) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("
" 0 1 (fontified t)) . -444) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) 445) nil (25765 13412 496218 771000) 0 nil])
([nil current ((#("
" 0 1 (fontified t)) . 443) (undo-tree-id170 . -1)) nil (25765 13412 496203 848000) 0 nil])
nil
