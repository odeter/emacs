(undo-tree-save-format-version . 1)
"780a4cf10d9f6d644c4dbd78a27150edfb873835"
[nil nil nil nil (25902 35927 37241 998000) 0 nil]
([nil nil ((6698 . 6701) (t 25901 53825 992448 358000)) nil (25902 35927 37239 82000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6757 . 6758) (nil fontified nil 6701 . 6758) (6701 . 6758)) nil (25902 35927 37228 823000) 0 nil])
([nil nil ((6758 . 6761) (t 25902 35927 41898 697000)) nil (25902 36032 490552 345000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6817 . 6818) (nil fontified nil 6761 . 6818) (6761 . 6818)) nil (25902 36032 490550 664000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-string-face fontified t)) . -6798) (undo-tree-id0 . -1) (#("A" 0 1 (face font-lock-string-face fontified t)) . -6799) (undo-tree-id1 . -1) (#("B" 0 1 (face font-lock-string-face fontified t)) . -6800) (undo-tree-id2 . -1) 6801) nil (25902 36032 490546 949000) 0 nil])
([nil nil ((6798 . 6803)) nil (25902 36032 490516 955000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-string-face fontified t)) . -6798) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (#("N" 0 1 (face font-lock-string-face fontified t)) . -6799) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#("T" 0 1 (face font-lock-string-face fontified t)) . -6800) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("E" 0 1 (face font-lock-string-face fontified t)) . -6801) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#("R" 0 1 (face font-lock-string-face fontified t)) . -6802) (undo-tree-id11 . -1) (undo-tree-id12 . -1) 6803 (t 25902 36032 493574 618000)) nil (25902 36401 635570 450000) 0 nil])
([nil nil ((6798 . 6801)) nil (25902 36401 635543 806000) 0 nil])
([nil nil ((6818 . 6821) (t 25902 36401 636801 404000)) nil (25902 36535 227655 562000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6852 . 6853) (nil fontified nil 6821 . 6853) (6821 . 6853)) nil (25902 36600 183096 242000) 0 nil])
([nil nil ((6853 . 6854) (t 25902 36535 228614 927000)) nil (25902 36608 331445 93000) 0 nil] [nil nil ((#("
  (setq ivy-extra-directories '(\"./\")) ; default value: (\"../\" \"./\")" 0 1 (face font-lock-comment-face fontified t) 1 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-3-face) fontified t) 33 37 (face font-lock-string-face fontified t) 37 38 (face (rainbow-delimiters-depth-3-face) fontified t) 38 39 (face (rainbow-delimiters-depth-2-face) fontified t) 39 40 (fontified t) 40 42 (face font-lock-comment-delimiter-face fontified t) 42 69 (face font-lock-comment-face fontified t)) . 7057) (undo-tree-id13 . -1) (undo-tree-id14 . -69) (undo-tree-id15 . -69) (undo-tree-id16 . -69) (t 25902 36535 228614 927000)) ((7057 . 7126)) (25902 36600 182750 63000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6882 . 6883) (nil fontified nil 6856 . 6883) (nil fontified nil 6854 . 6856) (6854 . 6883)) nil (25902 36608 331442 915000) 0 nil])
nil
([nil nil ((#("
  (setq ivy-extra-directories '(\"./\")) ; default value: (\"../\" \"./\")" 0 1 (face font-lock-comment-face fontified t) 1 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-3-face) fontified t) 33 37 (face font-lock-string-face fontified t) 37 38 (face (rainbow-delimiters-depth-3-face) fontified t) 38 39 (face (rainbow-delimiters-depth-2-face) fontified t) 39 40 (fontified t) 40 42 (face font-lock-comment-delimiter-face fontified t) 42 69 (face font-lock-comment-face fontified t)) . 7087) (undo-tree-id17 . -1) (undo-tree-id18 . -69) (undo-tree-id19 . -69) (undo-tree-id20 . -69) (undo-tree-id21 . -69) (undo-tree-id22 . -69) (undo-tree-id23 . -69)) nil (25902 36608 331435 783000) 0 nil])
([nil nil ((#(";; (use-package dracula-theme
;;   :ensure t
;;   :config
;;   (load-theme 'dracula t)
;;   (let ((line (face-attribute 'mode-line :underline)))
;;     (set-face-attribute 'mode-line          nil :overline   line)
;;     (set-face-attribute 'mode-line-inactive nil :overline   line)
;;     (set-face-attribute 'mode-line-inactive nil :underline  line)
;;     (set-face-attribute 'mode-line          nil :box        nil)
;;     (set-face-attribute 'mode-line-inactive nil :box        nil)
;;     (set-face-attribute 'mode-line-inactive nil :background \"#f9f2d9\")))
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 30 (fontified t face font-lock-comment-face) 30 35 (fontified t face font-lock-comment-delimiter-face) 35 45 (fontified t face font-lock-comment-face) 45 50 (fontified t face font-lock-comment-delimiter-face) 50 58 (fontified t face font-lock-comment-face) 58 63 (fontified t face font-lock-comment-delimiter-face) 63 87 (fontified t face font-lock-comment-face) 87 92 (fontified t face font-lock-comment-delimiter-face) 92 145 (fontified t face font-lock-comment-face) 145 152 (fontified t face font-lock-comment-delimiter-face) 152 188 (fontified t face font-lock-comment-face) 188 214 (fontified t face font-lock-comment-face) 214 221 (fontified t face font-lock-comment-delimiter-face) 221 224 (fontified t face font-lock-comment-face) 224 283 (fontified t face font-lock-comment-face) 283 290 (fontified t face font-lock-comment-delimiter-face) 290 352 (fontified t face font-lock-comment-face) 352 359 (fontified t face font-lock-comment-delimiter-face) 359 420 (fontified t face font-lock-comment-face) 420 427 (fontified t face font-lock-comment-delimiter-face) 427 488 (fontified t face font-lock-comment-face) 488 495 (fontified t face font-lock-comment-delimiter-face) 495 564 (fontified t face font-lock-comment-face)) . 3970) (undo-tree-id542 . -30) (undo-tree-id543 . -564) (undo-tree-id544 . -564) (undo-tree-id545 . -564) (t 25902 36608 340527 122000)) nil (25902 36879 56684 276000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3968) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (#("
" 0 1 (fontified t)) . -3969) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) 3970) nil (25902 36879 56677 799000) 0 nil])
([nil nil ((3968 . 3969)) nil (25902 36879 56668 336000) 0 nil])
([nil nil ((#(";; (use-package highlight-indent-guides
;;   :config
;;   (setq highlight-indent-guides-method 'bitmap)
;;   ;; (setq highlight-indent-guides-responsive 'stack)
;;   ;;(setq highlight-indent-guides-character ?\\|)
;;   ;; Indent character samples: | ┆ ┊
;;   :init (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 40 (fontified t face font-lock-comment-face) 40 45 (fontified t face font-lock-comment-delimiter-face) 45 53 (fontified t face font-lock-comment-face) 53 58 (fontified t face font-lock-comment-delimiter-face) 58 73 (fontified t face font-lock-comment-face) 73 104 (fontified t face font-lock-comment-face) 104 109 (fontified t face font-lock-comment-delimiter-face) 109 161 (fontified t face font-lock-comment-face) 161 166 (fontified t face font-lock-comment-delimiter-face) 166 213 (fontified t face font-lock-comment-face) 213 218 (fontified t face font-lock-comment-delimiter-face) 218 253 (fontified t face font-lock-comment-face) 253 258 (fontified t face font-lock-comment-delimiter-face) 258 321 (fontified t face font-lock-comment-face)) . 5145) (undo-tree-id530 . -40) (undo-tree-id531 . -321) (undo-tree-id532 . -321) (undo-tree-id533 . -321)) nil (25902 36879 56667 33000) 0 nil])
([nil nil ((#("i" 0 1 (fontified defer face font-lock-comment-face)) . -5124) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (#("g" 0 1 (fontified defer face font-lock-comment-face)) . -5125) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (#("h" 0 1 (fontified defer face font-lock-comment-face)) . -5126) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (#("t" 0 1 (fontified nil face font-lock-comment-face)) . -5127) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (#("l" 0 1 (fontified defer face font-lock-comment-face)) . -5128) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (#("i" 0 1 (fontified defer face font-lock-comment-face)) . -5129) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (#("g" 0 1 (fontified defer face font-lock-comment-face)) . -5130) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (#("h" 0 1 (fontified defer face font-lock-comment-face)) . -5131) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (#("t" 0 1 (fontified defer face font-lock-comment-face)) . -5132) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (#(" " 0 1 (fontified defer face font-lock-comment-face)) . -5133) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (#("m" 0 1 (fontified defer face font-lock-comment-face)) . -5134) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (#("o" 0 1 (fontified defer face font-lock-comment-face)) . -5135) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (#("d" 0 1 (fontified defer face font-lock-comment-face)) . -5136) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (#("e" 0 1 (fontified defer face font-lock-comment-face)) . -5137) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (#(" " 0 1 (fontified defer face font-lock-comment-face)) . -5138) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (#("s" 0 1 (fontified defer face font-lock-comment-face)) . -5139) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (#("e" 0 1 (fontified defer face font-lock-comment-face)) . -5140) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (#("t" 0 1 (fontified defer face font-lock-comment-face)) . -5141) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -5142) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (#("p" 0 1 (fontified t face font-lock-comment-face)) . -5143) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (#("
" 0 1 (fontified t face font-lock-comment-face)) . -5144) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) 5145) nil (25902 36879 56654 758000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5118) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (#("
" 0 1 (fontified t)) . -5119) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5120) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5121) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5122) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (#("h" 0 1 (fontified t face font-lock-comment-face)) . -5123) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) 5124) nil (25902 36879 56554 491000) 0 nil])
([nil nil ((#(";; smex M-x autocomplete
;; (use-package smex
;;   :config
;;   (global-set-key (kbd \"C-c C-c M-x\") 'execute-extended-command)
;;   (global-set-key (kbd \"M-x\") 'smex))

;; flx-ido
;; (use-package flx-ido
;;   :config
;;   (ido-mode 1)
;;   (ido-everywhere 1)
;;   (flx-ido-mode 1)
;;   (setq ido-enable-flex-matching t)
;;   (setq ido-use-faces nil))" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 25 (fontified t face font-lock-comment-face) 25 28 (fontified t face font-lock-comment-delimiter-face) 28 46 (fontified t face font-lock-comment-face) 46 51 (fontified t face font-lock-comment-delimiter-face) 51 59 (fontified t face font-lock-comment-face) 59 64 (fontified t face font-lock-comment-delimiter-face) 64 127 (fontified t face font-lock-comment-face) 127 132 (fontified t face font-lock-comment-delimiter-face) 132 168 (fontified t face font-lock-comment-face) 168 169 (fontified t) 169 172 (fontified t face font-lock-comment-delimiter-face) 172 180 (fontified t face font-lock-comment-face) 180 183 (fontified t face font-lock-comment-delimiter-face) 183 190 (fontified t face font-lock-comment-face) 190 204 (fontified t face font-lock-comment-face) 204 209 (fontified t face font-lock-comment-delimiter-face) 209 217 (fontified t face font-lock-comment-face) 217 222 (fontified t face font-lock-comment-delimiter-face) 222 235 (fontified t face font-lock-comment-face) 235 240 (fontified t face font-lock-comment-delimiter-face) 240 259 (fontified t face font-lock-comment-face) 259 264 (fontified t face font-lock-comment-delimiter-face) 264 281 (fontified t face font-lock-comment-face) 281 286 (fontified t face font-lock-comment-delimiter-face) 286 320 (fontified t face font-lock-comment-face) 320 325 (fontified t face font-lock-comment-delimiter-face) 325 350 (fontified t face font-lock-comment-face)) . 5211) (undo-tree-id443 . -25) (undo-tree-id444 . -350) (undo-tree-id445 . -350)) nil (25902 36879 56531 927000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5209) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (#("
" 0 1 (fontified t)) . -5210) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) 5211) nil (25902 36879 56526 918000) 0 nil])
([nil nil ((#(";; GPT chat setup
;; (use-package gptel
;;    :config
;;    (setq gptel-api-key (auth-source-pick-first-password :host \"api.openai.com\"))
;;    (setq gptel-default-mode 'markdown-mode)
;;    (setq gptel-model \"gpt-3.5\")
;;    )" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 18 (fontified t face font-lock-comment-face) 18 21 (fontified t face font-lock-comment-delimiter-face) 21 40 (fontified t face font-lock-comment-face) 40 46 (fontified t face font-lock-comment-delimiter-face) 46 54 (fontified t face font-lock-comment-face) 54 60 (fontified t face font-lock-comment-delimiter-face) 60 138 (fontified t face font-lock-comment-face) 138 144 (fontified t face font-lock-comment-delimiter-face) 144 185 (fontified t face font-lock-comment-face) 185 191 (fontified t face font-lock-comment-delimiter-face) 191 220 (fontified t face font-lock-comment-face) 220 226 (fontified t face font-lock-comment-delimiter-face) 226 227 (fontified t face font-lock-comment-face)) . 15818) (undo-tree-id322 . -18) (undo-tree-id323 . -227) (undo-tree-id324 . -227) (undo-tree-id325 . -227) (undo-tree-id326 . -227) (undo-tree-id327 . -227) (undo-tree-id328 . -227) (undo-tree-id329 . -227) (undo-tree-id330 . -227) (undo-tree-id331 . -227) (undo-tree-id332 . -227) (undo-tree-id333 . -227) (undo-tree-id334 . -227) (undo-tree-id335 . -227) (undo-tree-id336 . -227) (undo-tree-id337 . -227) (undo-tree-id338 . -227) (undo-tree-id339 . -227) (undo-tree-id340 . -227) (undo-tree-id341 . -227) (undo-tree-id342 . -227) (undo-tree-id343 . -227) (undo-tree-id344 . -227) (undo-tree-id345 . -227) (undo-tree-id346 . -227) (undo-tree-id347 . -227) (undo-tree-id348 . -227) (undo-tree-id349 . -226) (undo-tree-id350 . -226) (undo-tree-id351 . -226) (undo-tree-id352 . -226) (undo-tree-id353 . -226) (undo-tree-id354 . -226) (undo-tree-id355 . -226) (undo-tree-id356 . -226) (undo-tree-id357 . -190) (undo-tree-id358 . -190) (undo-tree-id359 . -190) (undo-tree-id360 . -190) (undo-tree-id361 . -190) (undo-tree-id362 . -190) (undo-tree-id363 . -190) (undo-tree-id364 . -190) (undo-tree-id365 . -188) (undo-tree-id366 . -188) (undo-tree-id367 . -188) (undo-tree-id368 . -188) (undo-tree-id369 . -188) (undo-tree-id370 . -188) (undo-tree-id371 . -188) (undo-tree-id372 . -188) (undo-tree-id373 . -140) (undo-tree-id374 . -140) (undo-tree-id375 . -140) (undo-tree-id376 . -140) (undo-tree-id377 . -140) (undo-tree-id378 . -140) (undo-tree-id379 . -140) (undo-tree-id380 . -140) (undo-tree-id381 . -138) (undo-tree-id382 . -138) (undo-tree-id383 . -138) (undo-tree-id384 . -138) (undo-tree-id385 . -138) (undo-tree-id386 . -138) (undo-tree-id387 . -138) (undo-tree-id388 . -138) (undo-tree-id389 . -54) (undo-tree-id390 . -54) (undo-tree-id391 . -54) (undo-tree-id392 . -54) (undo-tree-id393 . -54) (undo-tree-id394 . -54) (undo-tree-id395 . -54) (undo-tree-id396 . -54) (undo-tree-id397 . -54) (undo-tree-id398 . -54) (undo-tree-id399 . -54) (undo-tree-id400 . -54) (undo-tree-id401 . -54) (undo-tree-id402 . -54) (undo-tree-id403 . -54) (undo-tree-id404 . -54) (undo-tree-id405 . -40) (undo-tree-id406 . -40) (undo-tree-id407 . -40) (undo-tree-id408 . -40) (undo-tree-id409 . -40) (undo-tree-id410 . -40) (undo-tree-id411 . -40) (undo-tree-id412 . -40) (undo-tree-id413 . -40) (undo-tree-id414 . -40) (undo-tree-id415 . -40) (undo-tree-id416 . -40) (undo-tree-id417 . -40) (undo-tree-id418 . -40) (undo-tree-id419 . -18) (undo-tree-id420 . -18) (undo-tree-id421 . -18) (undo-tree-id422 . -18) (undo-tree-id423 . -18) (undo-tree-id424 . -18) (undo-tree-id425 . -18) (undo-tree-id426 . -18) (undo-tree-id427 . -18) (undo-tree-id428 . -18) (undo-tree-id429 . -18) (undo-tree-id430 . -18) (undo-tree-id431 . -18) (undo-tree-id432 . -18) (undo-tree-id433 . -18) (undo-tree-id434 . -18) (undo-tree-id435 . -227) (undo-tree-id436 . -227)) nil (25902 36879 56512 78000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -15816) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#("
" 0 1 (fontified t)) . -15817) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) 15818) nil (25902 36879 56358 381000) 0 nil])
([nil nil ((15817 . 15818) (t 25902 36879 100266 346000)) nil (25902 36888 842826 399000) 0 nil])
([nil nil ((15818 . 15828)) nil (25902 36888 842825 139000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face font-lock-comment-face)) . -15826) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -15827) (undo-tree-id549 . -1) 15828) nil (25902 36888 842823 300000) 0 nil])
([nil nil ((15826 . 15829)) nil (25902 36888 842816 408000) 0 nil])
([nil nil ((15829 . 15835)) nil (25902 36888 842814 206000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -15834) (undo-tree-id546 . -1) 15835) nil (25902 36888 842808 713000) 0 nil])
([nil nil ((14811 . 14812) (t 25902 36888 848258 457000)) nil (25902 36954 936835 372000) 0 nil])
([nil nil ((14812 . 14827)) nil (25902 36954 936834 90000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -14826) (undo-tree-id608 . -1) 14827) nil (25902 36954 936832 743000) 0 nil])
([nil nil ((#(";; Theme setup
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq column-number-mode t)
  (setq doom-modeline-icon t)
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-position-column-line-format '(\"(%l:%c)\"))
  (setq doom-modeline-total-line-number t)
  (setq doom-modeline-hud t))" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 14 (fontified t face font-lock-comment-face) 14 15 (fontified t face font-lock-comment-face) 15 16 (fontified t face (rainbow-delimiters-depth-1-face)) 16 27 (fontified t face font-lock-keyword-face) 27 28 (fontified t) 28 41 (fontified t face font-lock-constant-face) 41 44 (fontified t) 44 51 (fontified t face font-lock-builtin-face) 51 56 (fontified t) 56 61 (fontified t face font-lock-builtin-face) 61 62 (fontified t) 62 63 (fontified t face (rainbow-delimiters-depth-2-face)) 63 83 (fontified t) 83 84 (fontified t face (rainbow-delimiters-depth-2-face)) 84 87 (fontified t) 87 94 (fontified t face font-lock-builtin-face) 94 97 (fontified t) 97 98 (fontified t face (rainbow-delimiters-depth-2-face)) 98 102 (fontified t face font-lock-keyword-face) 102 123 (fontified t) 123 124 (fontified t face (rainbow-delimiters-depth-2-face)) 124 127 (fontified t) 127 128 (fontified t face (rainbow-delimiters-depth-2-face)) 128 132 (fontified t face font-lock-keyword-face) 132 153 (fontified t) 153 154 (fontified t face (rainbow-delimiters-depth-2-face)) 154 155 (fontified t) 155 157 (fontified t) 157 158 (fontified t face (rainbow-delimiters-depth-2-face)) 158 162 (fontified t face font-lock-keyword-face) 162 194 (fontified t) 194 195 (fontified t face (rainbow-delimiters-depth-2-face)) 195 196 (fontified t) 196 198 (fontified t) 198 199 (fontified t face (rainbow-delimiters-depth-2-face)) 199 203 (fontified t face font-lock-keyword-face) 203 247 (fontified t) 247 248 (fontified t face (rainbow-delimiters-depth-3-face)) 248 257 (fontified t face font-lock-string-face) 257 258 (fontified t face (rainbow-delimiters-depth-3-face)) 258 259 (fontified t face (rainbow-delimiters-depth-2-face)) 259 262 (fontified t) 262 263 (fontified t face (rainbow-delimiters-depth-2-face)) 263 267 (fontified t face font-lock-keyword-face) 267 275 (fontified t) 275 295 (fontified t) 295 301 (fontified t) 301 302 (fontified t face (rainbow-delimiters-depth-2-face)) 302 303 (fontified t) 303 305 (fontified t) 305 306 (fontified t face (rainbow-delimiters-depth-2-face)) 306 310 (fontified t face font-lock-keyword-face) 310 330 (fontified t) 330 331 (fontified t face (rainbow-delimiters-depth-2-face)) 331 332 (fontified t face (rainbow-delimiters-depth-1-face))) . 14812) (undo-tree-id605 . -15) (undo-tree-id606 . -332) (undo-tree-id607 . -332)) nil (25902 36954 936830 236000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t face font-lock-comment-face)) . -14810) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (#("
" 0 1 (fontified t)) . -14811) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) 14812) nil (25902 36954 936825 336000) 0 nil])
([nil nil ((5119 . 5121)) nil (25902 36954 936817 656000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5451 . 5452) (nil fontified nil 5451 . 5452) (nil fontified nil 5450 . 5451) (nil fontified nil 5430 . 5450) (nil fontified nil 5426 . 5430) (nil fontified nil 5425 . 5426) (nil fontified nil 5423 . 5425) (nil fontified nil 5422 . 5423) (nil fontified nil 5421 . 5422) (nil fontified nil 5415 . 5421) (nil fontified nil 5395 . 5415) (nil fontified nil 5387 . 5395) (nil fontified nil 5383 . 5387) (nil fontified nil 5382 . 5383) (nil fontified nil 5379 . 5382) (nil fontified nil 5378 . 5379) (nil fontified nil 5377 . 5378) (nil fontified nil 5368 . 5377) (nil fontified nil 5367 . 5368) (nil fontified nil 5323 . 5367) (nil fontified nil 5319 . 5323) (nil fontified nil 5318 . 5319) (nil fontified nil 5316 . 5318) (nil fontified nil 5315 . 5316) (nil fontified nil 5314 . 5315) (nil fontified nil 5282 . 5314) (nil fontified nil 5278 . 5282) (nil fontified nil 5277 . 5278) (nil fontified nil 5275 . 5277) (nil fontified nil 5274 . 5275) (nil fontified nil 5273 . 5274) (nil fontified nil 5252 . 5273) (nil fontified nil 5248 . 5252) (nil fontified nil 5247 . 5248) (nil fontified nil 5244 . 5247) (nil fontified nil 5243 . 5244) (nil fontified nil 5222 . 5243) (nil fontified nil 5218 . 5222) (nil fontified nil 5217 . 5218) (nil fontified nil 5214 . 5217) (nil fontified nil 5207 . 5214) (nil fontified nil 5204 . 5207) (nil fontified nil 5203 . 5204) (nil fontified nil 5183 . 5203) (nil fontified nil 5182 . 5183) (nil fontified nil 5181 . 5182) (nil fontified nil 5176 . 5181) (nil fontified nil 5171 . 5176) (nil fontified nil 5164 . 5171) (nil fontified nil 5161 . 5164) (nil fontified nil 5148 . 5161) (nil fontified nil 5147 . 5148) (nil fontified nil 5136 . 5147) (nil fontified nil 5135 . 5136) (nil fontified nil 5134 . 5135) (nil fontified nil 5123 . 5134) (nil fontified nil 5120 . 5123) (5120 . 5452)) nil (25902 36954 936813 850000) 0 nil])
([nil nil ((3969 . 3970)) nil (25902 36954 936800 341000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3983 . 3984) (nil fontified nil 3973 . 3984) (nil fontified nil 3970 . 3973) (3970 . 3984)) nil (25902 36954 936799 89000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t face font-lock-comment-face)) . -5138) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (#("h" 0 1 (fontified t face font-lock-comment-face)) . -5139) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -5140) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (#("m" 0 1 (fontified t face font-lock-comment-face)) . -5141) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -5142) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -5143) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -5144) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (#("e" 0 1 (fontified defer face font-lock-comment-face)) . -5145) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -5146) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -5147) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (#("p" 0 1 (fontified t face font-lock-comment-face)) . -5148) (undo-tree-id597 . -1) (undo-tree-id598 . -1) 5149) nil (25902 36954 936794 170000) 0 nil])
([nil nil ((5138 . 5148)) nil (25902 36954 936768 380000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-comment-face)) . -5147) (undo-tree-id576 . -1) 5148) nil (25902 36954 936767 217000) 0 nil])
([nil nil ((5147 . 5155)) nil (25902 36954 936764 681000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -5154) (undo-tree-id575 . -1) 5155) nil (25902 36954 936762 892000) 0 nil])
([nil nil ((3978 . 3991)) nil (25902 36954 936759 726000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -3990) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) 3991) nil (25902 36954 936752 874000) 0 nil])
([nil nil ((#("
;; aggresive indent
;; (global-aggressive-indent-mode)
" 0 1 (fontified t) 1 4 (fontified t face font-lock-comment-delimiter-face) 4 21 (fontified t face font-lock-comment-face) 21 24 (fontified t face font-lock-comment-delimiter-face) 24 56 (fontified t face font-lock-comment-face)) . 1716) (undo-tree-id609 . -1) (undo-tree-id610 . -56) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -56) (undo-tree-id616 . -56) (t 25902 36954 944207 146000)) nil (25902 37012 565765 206000) 0 nil])
([nil nil ((5427 . 5430) (t 25902 37012 576165 247000)) nil (25902 37227 598406 193000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5469 . 5470) (nil fontified nil 5430 . 5470) (5430 . 5470)) nil (25902 37227 598399 577000) 0 nil])
([nil nil ((5470 . 5473) (t 25902 37227 604027 745000)) nil (25902 37691 520671 16000) 0 nil])
([nil current ((nil rear-nonsticky nil 5525 . 5526) (nil fontified nil 5473 . 5526) (5473 . 5526)) nil (25902 37692 967678 392000) 0 nil] [nil nil ((nil rear-nonsticky nil 5525 . 5526) (nil fontified nil 5473 . 5526) (5473 . 5526)) ((#("(setq doom-modeline-highlight-modified-buffer-name t)" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face)) 1 5 (fontified nil face font-lock-keyword-face) 5 52 (fontified nil) 52 53 (fontified nil rear-nonsticky nil face (rainbow-delimiters-depth-2-face))) . 5473) (undo-tree-id1018 . -53) (nil rear-nonsticky t 5525 . 5526)) (25902 37691 520504 810000) 0 nil] [nil nil ((nil rear-nonsticky nil 5519 . 5520) (nil fontified nil 5473 . 5520) (5473 . 5520)) ((#("(setq doom-modeline-buffer-modification-icon t)" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil) 1 5 (face font-lock-keyword-face fontified nil) 5 46 (fontified nil) 46 47 (rear-nonsticky nil face (rainbow-delimiters-depth-2-face) fontified nil)) . 5473) (nil rear-nonsticky t 5519 . 5520) (t 25902 37264 244006 734000)) (25902 37685 59611 633000) 0 nil])
nil
nil
([nil nil ((#("
  (setq doom-modeline-buffer-state-icon t)" 0 1 (fontified t) 1 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-2-face)) 4 8 (fontified t face font-lock-keyword-face) 8 42 (fontified t) 42 43 (fontified t rear-nonsticky t face (rainbow-delimiters-depth-2-face))) . 5427) (undo-tree-id746 . -1) (undo-tree-id747 . -43) (undo-tree-id748 . -3) (undo-tree-id749 . -43) (t 25902 37264 244006 734000)) ((5427 . 5470)) (25902 37412 101749 881000) 0 nil])
([nil nil ((5427 . 5430)) ((#("
  " 0 1 (fontified t) 1 3 (fontified t)) . 5427) (undo-tree-id866 . -1) (undo-tree-id867 . -3) (undo-tree-id868 . -3) (undo-tree-id869 . -3) (undo-tree-id870 . -3) (undo-tree-id871 . -3) (undo-tree-id872 . -3) (undo-tree-id873 . -3) (undo-tree-id874 . -3) (undo-tree-id875 . -3) (undo-tree-id876 . -3) (undo-tree-id877 . -3) (undo-tree-id878 . -3) (undo-tree-id879 . -3) (undo-tree-id880 . -3) (undo-tree-id881 . -3) (undo-tree-id882 . -3) (undo-tree-id883 . -3) (undo-tree-id884 . -3) (undo-tree-id885 . -3) (undo-tree-id886 . -3) (undo-tree-id887 . -3) (undo-tree-id888 . -3) (undo-tree-id889 . -3) (undo-tree-id890 . -3) (undo-tree-id891 . -3) (undo-tree-id892 . -3) (undo-tree-id893 . -3) (undo-tree-id894 . -3) (undo-tree-id895 . -3) (undo-tree-id896 . -3) (undo-tree-id897 . -3) (undo-tree-id898 . -3) (undo-tree-id899 . -3) (undo-tree-id900 . -3) (undo-tree-id901 . -3) (undo-tree-id902 . -3) (undo-tree-id903 . -3) (undo-tree-id904 . -3) (undo-tree-id905 . -3) (undo-tree-id906 . -3) (undo-tree-id907 . -3) (undo-tree-id908 . -3) (undo-tree-id909 . -3) (undo-tree-id910 . -3) (undo-tree-id911 . -3) (undo-tree-id912 . -3) (undo-tree-id913 . -3) (undo-tree-id914 . -3) (undo-tree-id915 . -3) (undo-tree-id916 . -3) (undo-tree-id917 . -3) (undo-tree-id918 . -3) (undo-tree-id919 . -3) (undo-tree-id920 . -3) (undo-tree-id921 . -3) (undo-tree-id922 . -3) (undo-tree-id923 . -3) (undo-tree-id924 . -3) (undo-tree-id925 . -3) (undo-tree-id926 . -3) (undo-tree-id927 . -3) (undo-tree-id928 . -3) (undo-tree-id929 . -3) (undo-tree-id930 . -3) (undo-tree-id931 . -3) (undo-tree-id932 . -3) (undo-tree-id933 . -3) (undo-tree-id934 . -3) (undo-tree-id935 . -3) (undo-tree-id936 . -3) (undo-tree-id937 . -3) (undo-tree-id938 . -3) (undo-tree-id939 . -3) (undo-tree-id940 . -3) (undo-tree-id941 . -3) (undo-tree-id942 . -3) (undo-tree-id943 . -3) (undo-tree-id944 . -3) (undo-tree-id945 . -3) (undo-tree-id946 . -3) (undo-tree-id947 . -3) (undo-tree-id948 . -3) (undo-tree-id949 . -3) (undo-tree-id950 . -3) (undo-tree-id951 . -3) (undo-tree-id952 . -3) (undo-tree-id953 . -3) (undo-tree-id954 . -3) (undo-tree-id955 . -3) (undo-tree-id956 . -3) (undo-tree-id957 . -3) (undo-tree-id958 . -3) (undo-tree-id959 . -3) (undo-tree-id960 . -3) (undo-tree-id961 . -3) (undo-tree-id962 . -3) (undo-tree-id963 . -3) (undo-tree-id964 . -3) (undo-tree-id965 . -3) (undo-tree-id966 . -3) (undo-tree-id967 . -3) (undo-tree-id968 . -3) (undo-tree-id969 . -3) (undo-tree-id970 . -3) (undo-tree-id971 . -3) (undo-tree-id972 . -3) (undo-tree-id973 . -3) (undo-tree-id974 . -3) (undo-tree-id975 . -3) (undo-tree-id976 . -3) (undo-tree-id977 . -3) (undo-tree-id978 . -3) (undo-tree-id979 . -3) (undo-tree-id980 . -3) (undo-tree-id981 . -3) (undo-tree-id982 . -3) (undo-tree-id983 . -1) (undo-tree-id984 . -3) (undo-tree-id985 . -3) (undo-tree-id986 . -3) (undo-tree-id987 . -3) (undo-tree-id988 . -3) (undo-tree-id989 . -3) (undo-tree-id990 . -3) (undo-tree-id991 . -3) (undo-tree-id992 . -1) (undo-tree-id993 . -3) (undo-tree-id994 . -3) (undo-tree-id995 . -3) (undo-tree-id996 . -3) (undo-tree-id997 . -3) (undo-tree-id998 . -3) (undo-tree-id999 . -3) (undo-tree-id1000 . -3) (undo-tree-id1001 . -3) (undo-tree-id1002 . -3) (undo-tree-id1003 . -3) (undo-tree-id1004 . -3) (undo-tree-id1005 . -3) (undo-tree-id1006 . -3) (undo-tree-id1007 . -3) (undo-tree-id1008 . -3) (undo-tree-id1009 . -3) (undo-tree-id1010 . -3) (undo-tree-id1011 . -3) (undo-tree-id1012 . -3) (undo-tree-id1013 . -3) (undo-tree-id1014 . -3) (undo-tree-id1015 . -3) (undo-tree-id1016 . -3) (undo-tree-id1017 . -3)) (25902 37411 729805 983000) 0 nil])
([nil nil ((5430 . 5433)) ((#("dd " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 5430) (undo-tree-id750 . -3) (undo-tree-id751 . -3) (undo-tree-id752 . -3) (undo-tree-id753 . -3) (undo-tree-id754 . -3) (undo-tree-id755 . -3) (undo-tree-id756 . -3) (undo-tree-id757 . -3) (undo-tree-id758 . -3) (undo-tree-id759 . -3) (undo-tree-id760 . -3) (undo-tree-id761 . -3) (undo-tree-id762 . -3) (undo-tree-id763 . -3) (undo-tree-id764 . -3) (undo-tree-id765 . -3) (undo-tree-id766 . -2) (undo-tree-id767 . -2) (undo-tree-id768 . -2) (undo-tree-id769 . -2) (undo-tree-id770 . -2) (undo-tree-id771 . -2) (undo-tree-id772 . -2) (undo-tree-id773 . -2) (undo-tree-id774 . -2) (undo-tree-id775 . -2) (undo-tree-id776 . -2) (undo-tree-id777 . -2) (undo-tree-id778 . -2) (undo-tree-id779 . -2) (undo-tree-id780 . -2) (undo-tree-id781 . -2) (undo-tree-id782 . -2) (undo-tree-id783 . -2) (undo-tree-id784 . -2) (undo-tree-id785 . -2) (undo-tree-id786 . -2) (undo-tree-id787 . -2) (undo-tree-id788 . -2) (undo-tree-id789 . -2) (undo-tree-id790 . -2) (undo-tree-id791 . -2) (undo-tree-id792 . -2) (undo-tree-id793 . -2) (undo-tree-id794 . -2) (undo-tree-id795 . -2) (undo-tree-id796 . -2) (undo-tree-id797 . -2) (undo-tree-id798 . -2) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -3) (undo-tree-id815 . -3) (undo-tree-id816 . -3) (undo-tree-id817 . -3) (undo-tree-id818 . -3) (undo-tree-id819 . -3) (undo-tree-id820 . -3) (undo-tree-id821 . -3) (undo-tree-id822 . -3) (undo-tree-id823 . -3) (undo-tree-id824 . -3) (undo-tree-id825 . -3) (undo-tree-id826 . -3) (undo-tree-id827 . -3) (undo-tree-id828 . -3) (undo-tree-id829 . -3) (undo-tree-id830 . -3) (undo-tree-id831 . -2) (undo-tree-id832 . -3) (undo-tree-id833 . -3) (undo-tree-id834 . -3) (undo-tree-id835 . -3) (undo-tree-id836 . -3) (undo-tree-id837 . -3) (undo-tree-id838 . -3) (undo-tree-id839 . -3) (undo-tree-id840 . -3) (undo-tree-id841 . -3) (undo-tree-id842 . -3) (undo-tree-id843 . -3) (undo-tree-id844 . -3) (undo-tree-id845 . -3) (undo-tree-id846 . -3) (undo-tree-id847 . -3) (undo-tree-id848 . -3) (undo-tree-id849 . -3) (undo-tree-id850 . -3) (undo-tree-id851 . -3) (undo-tree-id852 . -3) (undo-tree-id853 . -3) (undo-tree-id854 . -3) (undo-tree-id855 . -3) (undo-tree-id856 . -3) (undo-tree-id857 . -3) (undo-tree-id858 . -3) (undo-tree-id859 . -3) (undo-tree-id860 . -3) (undo-tree-id861 . -3) (undo-tree-id862 . -3) (undo-tree-id863 . -3) (undo-tree-id864 . -3) (undo-tree-id865 . -3)) (25902 37410 998703 438000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -5430) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (#("d" 0 1 (fontified t)) . -5431) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (#(" " 0 1 (fontified t)) . -5432) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) 5433) ((5430 . 5433)) (25902 37410 998224 218000) 0 nil])
nil
