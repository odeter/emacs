(undo-tree-save-format-version . 1)
"284e97c4e3ba404d0ee8fba685238e3bd9caae19"
[nil nil nil nil (25746 56627 448736 831000) 0 nil]
([nil nil ((74677 . 74691) (t 25745 37967 115025 370000)) nil (25746 56627 448734 677000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -74690) (undo-tree-id26 . -1) 74691) nil (25746 56627 448732 568000) 0 nil])
([nil nil ((74690 . 74696)) nil (25746 56627 448728 710000) 0 nil])
([nil nil ((#("o" 0 1 (part-side javascript)) . -74692) (undo-tree-id22 . -1) (#("n" 0 1 (part-side javascript)) . -74693) (undo-tree-id23 . -1) (#("e" 0 1 (part-side javascript)) . -74694) (undo-tree-id24 . -1) (#(" " 0 1 (part-side javascript)) . -74695) (undo-tree-id25 . -1) 74696) nil (25746 56627 448725 942000) 0 nil])
([nil nil ((74692 . 74696)) nil (25746 56627 448715 874000) 0 nil])
([nil nil ((#("=" 0 1 (part-side javascript)) . -74690) (undo-tree-id16 . -1) (#("N" 0 1 (part-side javascript)) . -74691) (undo-tree-id17 . -1) (#("u" 0 1 (part-side javascript)) . -74692) (undo-tree-id18 . -1) (#("l" 0 1 (part-side javascript)) . -74693) (undo-tree-id19 . -1) (#("l" 0 1 (part-side javascript)) . -74694) (undo-tree-id20 . -1) (#(" " 0 1 (part-side javascript)) . -74695) (undo-tree-id21 . -1) 74696) nil (25746 56627 448712 187000) 0 nil])
([nil nil ((74690 . 74698)) nil (25746 56627 448691 21000) 0 nil])
([nil nil ((#("o" 0 1 (part-side javascript)) . -74694) (undo-tree-id12 . -1) (#("n" 0 1 (part-side javascript)) . -74695) (undo-tree-id13 . -1) (#("e" 0 1 (part-side javascript)) . -74696) (undo-tree-id14 . -1) (#(" " 0 1 (part-side javascript)) . -74697) (undo-tree-id15 . -1) 74698) nil (25746 56627 448688 416000) 0 nil])
([nil nil ((74694 . 74698)) nil (25746 56627 448678 839000) 0 nil])
([nil nil ((#("N" 0 1 (part-side javascript)) . -74693) (undo-tree-id7 . -1) (#("u" 0 1 (part-side javascript)) . -74694) (undo-tree-id8 . -1) (#("l" 0 1 (part-side javascript)) . -74695) (undo-tree-id9 . -1) (#("l" 0 1 (part-side javascript)) . -74696) (undo-tree-id10 . -1) (#(" " 0 1 (part-side javascript)) . -74697) (undo-tree-id11 . -1) 74698) nil (25746 56627 448675 856000) 0 nil])
([nil nil ((74693 . 74698)) nil (25746 56627 448663 859000) 0 nil])
([nil nil ((#("n" 0 1 (part-side javascript)) . -74693) (undo-tree-id2 . -1) (#("o" 0 1 (part-side javascript)) . -74694) (undo-tree-id3 . -1) (#("n" 0 1 (part-side javascript)) . -74695) (undo-tree-id4 . -1) (#("e" 0 1 (part-side javascript)) . -74696) (undo-tree-id5 . -1) (#(" " 0 1 (part-side javascript)) . -74697) (undo-tree-id6 . -1) 74698) nil (25746 56627 448660 134000) 0 nil])
([nil nil ((74693 . 74695)) nil (25746 56627 448647 765000) 0 nil])
([nil nil ((#("i" 0 1 (part-side javascript)) . -74694) (undo-tree-id1 . -1) 74695) nil (25746 56627 448645 509000) 0 nil])
([nil nil ((74694 . 74698)) nil (25746 56627 448640 349000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -74697) (undo-tree-id0 . -1) 74698) nil (25746 56627 448634 395000) 0 nil])
([nil nil ((75340 . 75348) (#("        " 0 8 (part-side javascript)) . 75339) (undo-tree-id55 . -8) (75338 . 75348) (t 25746 56627 454774 132000)) nil (25746 56816 360259 579000) 0 nil])
([nil nil ((75340 . 75348) (#("        " 0 8 (part-side javascript face whitespace-trailing)) . 75339) (75339 . 75347) (75339 . 75340)) nil (25746 56816 360256 701000) 0 nil])
([nil nil ((75352 . 75356) (75351 . 75353) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -75351) (75348 . 75352)) nil (25746 56816 360254 773000) 0 nil])
([nil nil ((#("l" 0 1 (part-side javascript)) . -75354) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("e" 0 1 (part-side javascript)) . -75355) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) 75356) nil (25746 56816 360252 402000) 0 nil])
([nil nil ((#("
        if (fi)" 0 1 (part-side javascript) 1 9 (part-side javascript) 9 11 (part-side javascript face web-mode-keyword-face) 11 12 (part-side javascript) 12 13 (part-side javascript face (rainbow-delimiters-depth-4-face)) 13 15 (part-side javascript) 15 16 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 75339) (undo-tree-id44 . -16) (undo-tree-id45 . -15) (undo-tree-id46 . -15) (undo-tree-id47 . -1) (undo-tree-id48 . -16)) nil (25746 56816 360244 158000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . -75338) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 75339) nil (25746 56816 360237 430000) 0 nil])
([nil nil ((75183 . 75193) (#("          " 0 10 (part-side javascript)) . 75182) (undo-tree-id38 . -10) (75181 . 75193)) nil (25746 56816 360230 468000) 0 nil])
([nil nil ((nil rear-nonsticky nil 75208 . 75209) (nil part-side javascript 75208 . 75209) (nil face (rainbow-delimiters-depth-5-face) 75208 . 75209) (nil part-side javascript 75206 . 75208) (nil part-side javascript 75205 . 75206) (nil face (rainbow-delimiters-depth-5-face) 75205 . 75206) (nil part-side javascript 75204 . 75205) (nil part-side javascript 75202 . 75204) (nil face web-mode-keyword-face 75202 . 75204) (nil part-side javascript 75194 . 75202) (nil part-side javascript 75193 . 75194) (75193 . 75209)) nil (25746 56816 360227 224000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . 75193) (undo-tree-id36 . -1) (undo-tree-id37 . 1)) nil (25746 56816 360223 186000) 0 nil])
([nil nil ((#("        " 0 8 (part-side javascript)) . -75193)) nil (25746 56816 360219 460000) 0 nil])
([nil nil ((75199 . 75208)) nil (25746 56816 360218 448000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -75207) (undo-tree-id35 . -1) 75208) nil (25746 56816 360216 611000) 0 nil])
([nil nil ((75209 . 75211) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-5-face))) . -75209) (75208 . 75210)) nil (25746 56816 360209 433000) 0 nil])
([nil nil ((75212 . 75222) (#("            " 0 12 (part-side javascript face whitespace-trailing)) . 75211) (undo-tree-id33 . -10) (undo-tree-id34 . 12) (75221 . 75223) (75210 . 75222)) nil (25746 56816 360204 817000) 0 nil])
([nil nil ((75211 . 75223)) nil (25746 56816 360193 781000) 0 nil])
([nil nil ((nil rear-nonsticky nil 75250 . 75251) (nil part-side javascript 75250 . 75251) (nil part-token string 75250 . 75251) (nil font-lock-face web-mode-javascript-string-face 75250 . 75251) (nil part-side javascript 75249 . 75250) (nil part-token string 75249 . 75250) (nil syntax-table (15) 75249 . 75250) (nil font-lock-face web-mode-javascript-string-face 75249 . 75250) (nil part-side javascript 75227 . 75249) (nil part-side javascript 75223 . 75227) (nil face web-mode-constant-face 75223 . 75227) (75223 . 75251)) nil (25746 56816 360188 124000) 0 nil])
([nil nil ((#("''" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 1 2 (rear-nonsticky t part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . 75249) (undo-tree-id30 . -2) (undo-tree-id31 . -2) (undo-tree-id32 . -2)) nil (25746 56816 360178 88000) 0 nil])
([nil nil ((75249 . 75257)) nil (25746 56816 360173 318000) 0 nil])
([nil nil ((#("a" 0 1 (part-side javascript)) . -75256) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 75257) nil (25746 56816 360171 747000) 0 nil])
([nil nil ((75256 . 75261)) nil (25746 56816 360167 369000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -75260) (undo-tree-id27 . -1) 75261) nil (25746 56816 360165 107000) 0 nil])
([nil nil ((#("        " 0 8 (part-side javascript face whitespace-trailing)) . -75430) 75260) nil (25746 56816 360150 207000) 0 nil])
([nil nil ((75199 . 75200) (t 25746 56816 370737 133000)) nil (25746 56915 727479 775000) 0 nil])
([nil nil ((74671 . 74673) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -74671) (74671 . 74672) (t 25746 56915 738719 814000)) nil (25746 57367 602622 722000) 0 nil])
([nil nil ((#("}" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 74672)) nil (25746 57367 602621 20000) 0 nil])
([nil nil ((#("l" 0 1 (part-side javascript)) . 74692) (#("l" 0 1 (part-side javascript)) . 74692) (#("u" 0 1 (part-side javascript)) . 74692) (#("n" 0 1 (part-side javascript face web-mode-constant-face)) . 74692) (#(" " 0 1 (part-side javascript)) . 74692) (#("=" 0 1 (part-side javascript)) . 74692)) nil (25746 57367 602618 730000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -74691) (undo-tree-id56 . -1) 74692) nil (25746 57367 602615 705000) 0 nil])
([nil nil ((74691 . 74692) (#(" " 0 1 (part-side javascript)) . -74691) (74691 . 74692) (#("}" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -74691) (74691 . 74692)) nil (25746 57367 602599 470000) 0 nil])
([nil nil ((74695 . 74704) (t 25746 57367 610652 730000)) nil (25746 57456 684619 786000) 0 nil])
([nil nil ((74704 . 74714)) nil (25746 57456 684618 607000) 0 nil])
([nil nil ((#("o" 0 1 (part-side javascript)) . -74712) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("l" 0 1 (part-side javascript)) . -74713) (undo-tree-id80 . -1) (undo-tree-id81 . -1) 74714) nil (25746 57456 684617 100000) 0 nil])
([nil nil ((nil part-token string 74716 . 74717) (nil font-lock-face web-mode-javascript-string-face 74716 . 74717) (nil part-side javascript 74716 . 74717) (74715 . 74717) (#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . -74715) (74712 . 74716)) nil (25746 57456 684611 404000) 0 nil])
([nil nil ((#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . -74715) (undo-tree-id76 . -1) (#("\"" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -74716) (undo-tree-id77 . -1) 74717) nil (25746 57456 684608 764000) 0 nil])
([nil nil ((74716 . 74718) (74715 . 74717) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -74715) (74715 . 74716)) nil (25746 57456 684604 498000) 0 nil])
([nil nil ((74717 . 74723)) nil (25746 57456 684602 955000) 0 nil])
([nil nil ((74724 . 74732)) nil (25746 57456 684602 124000) 0 nil])
([nil nil ((74733 . 74742)) nil (25746 57456 684601 120000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 74755) (74754 . 74755) (74753 . 74755) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -74753) (74742 . 74754)) nil (25746 57456 684599 769000) 0 nil])
([nil nil ((74754 . 74756)) nil (25746 57456 684597 866000) 0 nil])
([nil nil ((74755 . 74764)) nil (25746 57456 684596 968000) 0 nil])
([nil nil ((#("a" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -74762) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("n" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -74763) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) 74764) nil (25746 57456 684595 158000) 0 nil])
([nil nil ((74762 . 74766)) nil (25746 57456 684582 869000) 0 nil])
([nil nil ((74767 . 74768)) nil (25746 57456 684579 335000) 0 nil])
([nil nil ((#("m" 0 1 (part-side javascript)) . -74767) (undo-tree-id69 . -1) 74768) nil (25746 57456 684575 995000) 0 nil])
([nil nil ((74767 . 74778)) nil (25746 57456 684568 699000) 0 nil])
([nil nil ((#("a" 0 1 (part-side javascript)) . -74776) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("n" 0 1 (part-side javascript)) . -74777) (undo-tree-id68 . -1) 74778) nil (25746 57456 684566 47000) 0 nil])
([nil nil ((74776 . 74781)) nil (25746 57456 684547 156000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -74780) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) 74781) nil (25746 57456 684537 58000) 0 nil])
([nil nil ((74691 . 74698) (t 25746 57456 694640 972000)) nil (25746 58703 751311 34000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -74697) (undo-tree-id86 . -1) 74698) nil (25746 58703 751309 720000) 0 nil])
([nil nil ((75362 . 75372) (#("          " 0 10 (part-side javascript)) . 75361) (undo-tree-id85 . -10) (75360 . 75372)) nil (25746 58703 751307 175000) 0 nil])
([nil nil ((75361 . 75371)) nil (25746 58703 751304 509000) 0 nil])
([nil nil ((75375 . 75376) (75374 . 75376) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-5-face))) . -75374) (75371 . 75375)) nil (25746 58703 751303 211000) 0 nil])
([nil nil ((75376 . 75379)) nil (25746 58703 751301 624000) 0 nil])
([nil nil ((75381 . 75383) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-5-face))) . -75381) (75380 . 75382)) nil (25746 58703 751300 542000) 0 nil])
([nil nil ((75384 . 75394) (#("            " 0 12 (part-side javascript face whitespace-trailing)) . 75383) (undo-tree-id83 . -10) (undo-tree-id84 . 12) (75393 . 75395) (75382 . 75394)) nil (25746 58703 751298 518000) 0 nil])
([nil nil ((75383 . 75395)) nil (25746 58703 751293 941000) 0 nil])
([nil nil ((75395 . 75400)) nil (25746 58703 751293 7000) 0 nil])
([nil nil ((nil rear-nonsticky nil 75413 . 75414) (nil part-side javascript 75400 . 75414) (75400 . 75414)) nil (25746 58703 751291 912000) 0 nil])
([nil nil ((75414 . 75422)) nil (25746 58703 751290 250000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -75421) (undo-tree-id82 . -1) 75422) nil (25746 58703 751288 67000) 0 nil])
([nil nil ((#("          " 0 10 (part-side javascript face whitespace-trailing)) . -75434) 75421) nil (25746 58703 751268 604000) 0 nil])
([nil nil ((74787 . 74796) (t 25746 58703 758647 765000)) nil (25746 58768 600437 833000) 0 nil])
([nil nil ((nil rear-nonsticky nil 74834 . 74835) (nil part-side javascript 74834 . 74835) (nil face (rainbow-delimiters-depth-4-face) 74834 . 74835) (nil part-side javascript 74821 . 74834) (nil part-side javascript 74820 . 74821) (nil part-token string 74820 . 74821) (nil syntax-table (15) 74820 . 74821) (nil font-lock-face web-mode-javascript-string-face 74820 . 74821) (nil part-side javascript 74809 . 74820) (nil part-token string 74809 . 74820) (nil font-lock-face web-mode-javascript-string-face 74809 . 74820) (nil part-side javascript 74808 . 74809) (nil part-token string 74808 . 74809) (nil syntax-table (15) 74808 . 74809) (nil font-lock-face web-mode-javascript-string-face 74808 . 74809) (nil part-side javascript 74807 . 74808) (nil face (rainbow-delimiters-depth-4-face) 74807 . 74808) (nil part-side javascript 74804 . 74807) (nil face web-mode-function-call-face 74804 . 74807) (nil part-side javascript 74796 . 74804) (74796 . 74835)) nil (25746 58768 600435 648000) 0 nil])
([nil nil ((#("f" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -74809) (undo-tree-id88 . -1) (#("i" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -74810) (undo-tree-id89 . -1) (#("l" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -74811) (undo-tree-id90 . -1) (#("t" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -74812) (undo-tree-id91 . -1) (#("e" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -74813) (undo-tree-id92 . -1) (#("r" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -74814) (undo-tree-id93 . -1) (#("_" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -74815) (undo-tree-id94 . -1) (#("n" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -74816) (undo-tree-id95 . -1) (#("a" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -74817) (undo-tree-id96 . -1) (#("m" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -74818) (undo-tree-id97 . -1) (#("e" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -74819) (undo-tree-id98 . -1) 74820) nil (25746 58768 600428 517000) 0 nil])
([nil nil ((74809 . 74811)) nil (25746 58768 600412 450000) 0 nil])
([nil nil ((#("p" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -74810) (undo-tree-id87 . -1) 74811) nil (25746 58768 600411 180000) 0 nil])
([nil nil ((74810 . 74813)) nil (25746 58768 600400 808000) 0 nil])
([nil nil ((#("e" 0 1 (part-side javascript)) . 74816) (#("m" 0 1 (part-side javascript)) . 74816) (#("a" 0 1 (part-side javascript)) . 74816) (#("n" 0 1 (part-side javascript)) . 74816) (#("_" 0 1 (part-side javascript)) . 74816) (#("r" 0 1 (part-side javascript)) . 74816) (#("e" 0 1 (part-side javascript)) . 74816) (#("t" 0 1 (part-side javascript)) . 74816) (#("l" 0 1 (part-side javascript)) . 74816) (#("i" 0 1 (part-side javascript)) . 74816) (#("f" 0 1 (part-side javascript)) . 74816)) nil (25746 58768 600397 179000) 0 nil])
([nil nil ((74816 . 74820)) nil (25746 58768 600388 362000) 0 nil])
([nil nil ((79213 . 79224) (t 25746 58768 606646 360000)) nil (25746 58923 405821 133000) 0 nil])
([nil nil ((79224 . 79230)) nil (25746 58923 405819 879000) 0 nil])
([nil nil ((#("e" 0 1 (part-side javascript)) . -79229) (undo-tree-id109 . -1) 79230) nil (25746 58923 405818 743000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 79237) (79236 . 79237) (79235 . 79237) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . -79235) (79229 . 79236)) nil (25746 58923 405815 900000) 0 nil])
([nil nil ((79236 . 79242)) nil (25746 58923 405814 109000) 0 nil])
([nil nil ((#("," 0 1 (part-side javascript)) . -79241) (undo-tree-id108 . -1) 79242) nil (25746 58923 405812 878000) 0 nil])
([nil nil ((79241 . 79242)) nil (25746 58923 405810 587000) 0 nil])
([nil nil ((#("r" 0 1 (part-side javascript)) . -79241) (undo-tree-id107 . -1) 79242) nil (25746 58923 405809 356000) 0 nil])
([nil nil ((79241 . 79252)) nil (25746 58923 405807 69000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -79251) (undo-tree-id106 . -1) 79252) nil (25746 58923 405805 930000) 0 nil])
([nil nil ((79236 . 79238)) nil (25746 58923 405803 743000) 0 nil])
([nil nil ((79237 . 79245)) nil (25746 58923 405802 758000) 0 nil])
([nil nil ((#("t" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -79244) (undo-tree-id105 . -1) 79245) nil (25746 58923 405801 495000) 0 nil])
([nil nil ((79244 . 79247)) nil (25746 58923 405799 252000) 0 nil])
([nil nil ((79248 . 79250)) nil (25746 58923 405798 344000) 0 nil])
([nil nil ((75455 . 75468)) nil (25746 58923 405797 291000) 0 nil])
([nil nil ((nil rear-nonsticky nil 75492 . 75493) (nil rear-nonsticky t 75492 . 75493) (nil part-side javascript 75492 . 75493) (nil face (rainbow-delimiters-depth-6-face) 75492 . 75493) (nil part-side javascript 75486 . 75492) (nil part-side javascript 75485 . 75486) (nil part-token string 75485 . 75486) (nil syntax-table (15) 75485 . 75486) (nil font-lock-face web-mode-javascript-string-face 75485 . 75486) (nil part-side javascript 75481 . 75485) (nil part-token string 75481 . 75485) (nil font-lock-face web-mode-javascript-string-face 75481 . 75485) (nil part-side javascript 75480 . 75481) (nil part-token string 75480 . 75481) (nil syntax-table (15) 75480 . 75481) (nil font-lock-face web-mode-javascript-string-face 75480 . 75481) (nil part-side javascript 75479 . 75480) (nil face (rainbow-delimiters-depth-6-face) 75479 . 75480) (nil part-side javascript 75476 . 75479) (nil face web-mode-function-call-face 75476 . 75479) (nil part-side javascript 75468 . 75476) (75468 . 75493)) nil (25746 58923 405795 138000) 0 nil])
([nil nil ((#("r" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -75481) (undo-tree-id101 . -1) (#("o" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -75482) (undo-tree-id102 . -1) (#("o" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -75483) (undo-tree-id103 . -1) (#("t" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -75484) (undo-tree-id104 . -1) 75485) nil (25746 58923 405788 652000) 0 nil])
([nil nil ((75481 . 75494)) nil (25746 58923 405781 587000) 0 nil])
([nil nil ((#("root" 0 4 (part-side javascript)) . 75497) (undo-tree-id99 . -4) (undo-tree-id100 . -4)) nil (25746 58923 405779 241000) 0 nil])
([nil nil ((nil rear-nonsticky nil 75515 . 75516) (nil rear-nonsticky t 75515 . 75516) (nil part-side javascript 75515 . 75516) (nil part-side javascript 75502 . 75515) (nil part-side javascript 75501 . 75502) (nil part-side javascript 75497 . 75501) (nil face web-mode-constant-face 75497 . 75501) (75497 . 75516)) nil (25746 58923 405749 241000) 0 nil])
([nil nil ((82446 . 82448) (t 25746 58923 422641 453000)) nil (25746 59335 294346 397000) 0 nil])
([nil nil ((82447 . 82454)) nil (25746 59335 294345 230000) 0 nil])
([nil nil ((82455 . 82456)) nil (25746 59335 294344 332000) 0 nil])
([nil nil ((82446 . 82448) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . -82446) (82446 . 82447)) nil (25746 59335 294343 106000) 0 nil])
([nil nil ((#("}" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . 82447)) nil (25746 59335 294341 419000) 0 nil])
([nil nil ((82474 . 82475) (#(" " 0 1 (part-side javascript)) . -82474) (82474 . 82475) (#("}" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . -82474) (82474 . 82475)) nil (25746 59335 294339 848000) 0 nil])
([nil nil ((#("filter_chip.value" 0 17 (part-side javascript)) . 83051) (undo-tree-id110 . -17) (undo-tree-id111 . -17)) nil (25746 59335 294336 805000) 0 nil])
([nil nil ((nil rear-nonsticky nil 83079 . 83080) (nil part-side javascript 83079 . 83080) (nil face (rainbow-delimiters-depth-6-face) 83079 . 83080) (nil part-side javascript 83074 . 83079) (nil face web-mode-variable-name-face 83074 . 83079) (nil part-side javascript 83062 . 83074) (nil part-side javascript 83061 . 83062) (nil part-side javascript 83060 . 83061) (nil part-token string 83060 . 83061) (nil syntax-table (15) 83060 . 83061) (nil font-lock-face web-mode-javascript-string-face 83060 . 83061) (nil part-side javascript 83059 . 83060) (nil part-token string 83059 . 83060) (nil font-lock-face web-mode-javascript-string-face 83059 . 83060) (nil part-side javascript 83053 . 83059) (nil part-token string 83053 . 83059) (nil font-lock-face web-mode-javascript-string-face 83053 . 83059) (nil part-side javascript 83052 . 83053) (nil part-token string 83052 . 83053) (nil syntax-table (15) 83052 . 83053) (nil font-lock-face web-mode-javascript-string-face 83052 . 83053) (nil part-side javascript 83051 . 83052) (nil face (rainbow-delimiters-depth-6-face) 83051 . 83052) (83051 . 83080)) nil (25746 59335 294319 234000) 0 nil])
([nil nil ((#(":" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . 83059) (t 25746 59335 306621 167000)) nil (25746 59351 925199 25000) 0 nil])
([nil nil ((83060 . 83061)) nil (25746 59351 925197 517000) 0 nil])
([nil nil ((#(":" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . 82454)) nil (25746 59351 925195 355000) 0 nil])
([nil nil ((82455 . 82456)) nil (25746 59351 925188 100000) 0 nil])
([nil nil ((82286 . 82295) (t 25746 59351 934620 197000)) nil (25746 59718 84608 167000) 0 nil])
([nil nil ((82295 . 82298)) nil (25746 59718 84606 376000) 0 nil])
([nil nil ((#("p" 0 1 (part-side javascript)) . -82296) (undo-tree-id112 . -1) (#("m" 0 1 (part-side javascript)) . -82297) (undo-tree-id113 . -1) 82298) nil (25746 59718 84604 555000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 82308) (82307 . 82308) (82306 . 82308) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -82306) (82296 . 82307)) nil (25746 59718 84593 363000) 0 nil])
([nil nil ((nil rear-nonsticky nil 82317 . 82318) (nil part-side javascript 82307 . 82318) (82307 . 82318)) nil (25746 59718 84591 55000) 0 nil])
([nil nil ((82307 . 82309)) nil (25746 59718 84589 85000) 0 nil])
([nil nil ((82308 . 82320)) nil (25746 59718 84586 919000) 0 nil])
([nil nil ((82321 . 82323)) nil (25746 59830 275237 882000) 0 nil])
([nil nil ((80167 . 80186) (t 25746 59718 94597 126000)) nil (25746 59887 117378 630000) 0 nil] [nil nil ((79711 . 79724) (t 25746 59718 94597 126000)) ((#("
            " 0 1 (part-side javascript) 1 13 (part-side javascript)) . 79711) (undo-tree-id114 . -13) (undo-tree-id115 . -1) (undo-tree-id116 . -1)) (25746 59830 273136 463000) 0 nil])
([nil nil ((80186 . 80192)) nil (25746 59887 117375 471000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 80222 . 80223) (nil part-side javascript 80216 . 80223) (nil part-side javascript 80215 . 80216) (nil face (rainbow-delimiters-depth-2-face) 80215 . 80216) (nil part-side javascript 80214 . 80215) (nil part-side javascript 80213 . 80214) (nil face (rainbow-delimiters-depth-2-face) 80213 . 80214) (nil part-side javascript 80196 . 80213) (nil part-side javascript 80192 . 80196) (nil face web-mode-constant-face 80192 . 80196) (80192 . 80223)) nil (25746 59887 117371 6000) 0 nil])
([nil nil ((#("filter" 0 5 (part-side javascript) 5 6 (rear-nonsticky t part-side javascript)) . 80217) (undo-tree-id117 . -6) (undo-tree-id118 . -6)) nil (25746 59887 117361 417000) 0 nil])
([nil nil ((80217 . 80222)) nil (25746 59887 117348 872000) 0 nil])
([nil nil ((80222 . 80241)) nil (25746 59887 400892 81000) 0 nil])
([nil nil ((80241 . 80246)) nil (25746 59899 447018 345000) 0 nil] [nil nil ((80241 . 80252)) ((#("root: this." 0 4 (part-side javascript face web-mode-variable-name-face) 4 5 (part-side javascript) 5 6 (part-side javascript) 6 10 (part-side javascript face web-mode-constant-face) 10 11 (part-side javascript)) . 80241) (undo-tree-id120 . -11) (undo-tree-id121 . -11) (undo-tree-id122 . -11) (undo-tree-id123 . -11) (undo-tree-id124 . -11) (undo-tree-id125 . -11) (undo-tree-id126 . -11) (undo-tree-id127 . -11) (undo-tree-id128 . -11)) (25746 59887 127622 239000) 0 nil])
([nil nil ((nil rear-nonsticky nil 80276 . 80277) (nil part-side javascript 80270 . 80277) (nil part-side javascript 80269 . 80270) (nil face (rainbow-delimiters-depth-2-face) 80269 . 80270) (nil part-side javascript 80268 . 80269) (nil part-side javascript 80267 . 80268) (nil face (rainbow-delimiters-depth-2-face) 80267 . 80268) (nil part-side javascript 80250 . 80267) (nil part-side javascript 80246 . 80250) (nil face web-mode-constant-face 80246 . 80250) (80246 . 80277)) nil (25746 59899 447011 649000) 0 nil])
([nil nil ((nil rear-nonsticky nil 80282 . 80283) (nil part-side javascript 80276 . 80283) (nil part-side javascript 80275 . 80276) (nil face (rainbow-delimiters-depth-2-face) 80275 . 80276) (nil part-side javascript 80274 . 80275) (nil part-side javascript 80273 . 80274) (nil face (rainbow-delimiters-depth-2-face) 80273 . 80274) (nil part-side javascript 80256 . 80273) (nil part-side javascript 80252 . 80256) (nil face web-mode-constant-face 80252 . 80256) (80252 . 80283)) ((#("this.rawChosenFilters[i].filter" 0 4 (part-side javascript face web-mode-constant-face) 4 21 (part-side javascript) 21 22 (part-side javascript face (rainbow-delimiters-depth-2-face)) 22 23 (part-side javascript) 23 24 (part-side javascript face (rainbow-delimiters-depth-2-face)) 24 30 (part-side javascript) 30 31 (rear-nonsticky nil part-side javascript)) . 80252) (undo-tree-id119 . -31) (nil face (rainbow-delimiters-depth-2-face) 80273 . 80274) (nil face (rainbow-delimiters-depth-2-face) 80275 . 80276) (nil rear-nonsticky t 80282 . 80283)) (25746 59887 117333 968000) 0 nil])
([nil nil ((80246 . 80247)) nil (25746 59899 447001 197000) 0 nil])
nil
([nil nil ((#("r" 0 1 (rear-nonsticky t part-side javascript)) . 80272) (#("e" 0 1 (part-side javascript)) . 80272) (#("t" 0 1 (part-side javascript)) . 80272) (#("l" 0 1 (part-side javascript)) . 80272) (#("i" 0 1 (part-side javascript)) . 80272) (#("f" 0 1 (part-side javascript)) . 80272)) nil (25746 59899 446995 588000) 0 nil])
([nil nil ((80272 . 80278)) nil (25746 59899 446988 706000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -80277) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) 80278) nil (25746 59899 446979 754000) 0 nil])
([nil nil ((66439 . 66448) (t 25746 59899 462584 846000)) nil (25746 59998 565673 603000) 0 nil])
([nil nil ((66448 . 66459)) nil (25746 59998 565672 271000) 0 nil])
([nil nil ((#("e" 0 1 (part-side javascript)) . -66453) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (#("l" 0 1 (part-side javascript)) . -66454) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("." 0 1 (part-side javascript)) . -66455) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (#("l" 0 1 (part-side javascript)) . -66456) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("o" 0 1 (part-side javascript)) . -66457) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("g" 0 1 (part-side javascript)) . -66458) (undo-tree-id152 . -1) (undo-tree-id153 . -1) 66459) nil (25746 59998 565669 180000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 66461) (66460 . 66461) (66459 . 66461) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -66459) (66453 . 66460)) nil (25746 59998 565622 859000) 0 nil])
([nil nil ((66460 . 66468)) nil (25746 59998 565620 249000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -66467) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) 66468) nil (25746 59998 565615 223000) 0 nil])
([nil nil ((80405 . 80418) (t 25746 59998 570663 412000)) nil (25746 60143 412616 864000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 80431) (80430 . 80431) (80429 . 80431) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-7-face))) . -80429) (80418 . 80430)) nil (25746 60143 412614 981000) 0 nil])
([nil nil ((nil rear-nonsticky nil 80445 . 80446) (nil part-side javascript 80430 . 80446) (80430 . 80446)) nil (25746 60143 412612 818000) 0 nil])
([nil nil ((80430 . 80431)) nil (25746 60143 412611 252000) 0 nil])
([nil nil ((80431 . 80432)) nil (25746 60143 412610 257000) 0 nil])
([nil nil ((80431 . 80433)) nil (25746 60143 412608 914000) 0 nil])
([nil nil ((#("o" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -80432) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) 80433) nil (25746 60143 412607 440000) 0 nil])
([nil nil ((80432 . 80435)) nil (25746 60143 412602 448000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -80434) (undo-tree-id154 . -1) 80435) nil (25746 60143 412600 388000) 0 nil])
([nil nil ((80434 . 80448)) nil (25746 60143 412591 291000) 0 nil])
([nil nil ((80449 . 80451)) nil (25746 60143 412584 248000) 0 nil])
([nil nil ((66460 . 66462) (t 25746 60143 418769 457000)) nil (25746 60492 594985 269000) 0 nil])
([nil nil ((66461 . 66471)) nil (25746 60492 594984 113000) 0 nil])
([nil nil ((66472 . 66474)) nil (25746 60492 594983 184000) 0 nil])
([nil nil ((82502 . 82511)) nil (25746 60492 594982 340000) 0 nil])
([nil nil ((82522 . 82524) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -82522) (82511 . 82523)) nil (25746 60492 594981 297000) 0 nil])
([nil nil ((nil rear-nonsticky nil 82549 . 82550) (nil part-side javascript 82545 . 82550) (nil part-side javascript 82533 . 82545) (nil part-side javascript 82532 . 82533) (nil part-side javascript 82531 . 82532) (nil part-side javascript 82530 . 82531) (nil part-token string 82530 . 82531) (nil syntax-table (15) 82530 . 82531) (nil font-lock-face web-mode-javascript-string-face 82530 . 82531) (nil part-side javascript 82524 . 82530) (nil part-token string 82524 . 82530) (nil font-lock-face web-mode-javascript-string-face 82524 . 82530) (nil part-side javascript 82523 . 82524) (nil part-token string 82523 . 82524) (nil syntax-table (15) 82523 . 82524) (nil font-lock-face web-mode-javascript-string-face 82523 . 82524) (82523 . 82550)) nil (25746 60492 594979 186000) 0 nil])
([nil nil ((#("{'filter': filter_chip.value}" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face)) 1 2 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 2 8 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 8 9 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 9 10 (part-side javascript) 10 11 (part-side javascript) 11 23 (part-side javascript) 23 28 (part-side javascript face web-mode-variable-name-face) 28 29 (part-side javascript face (rainbow-delimiters-depth-6-face))) . 82760) (undo-tree-id164 . -29) (undo-tree-id165 . -28) (undo-tree-id166 . -28) (undo-tree-id167 . -29)) nil (25746 60492 594974 622000) 0 nil])
([nil nil ((nil rear-nonsticky nil 82767 . 82768) (nil part-side javascript 82760 . 82768) (82760 . 82768)) nil (25746 60492 594969 251000) 0 nil])
([nil nil ((#("{'filter': filter_chip.value}" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face)) 1 2 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 2 8 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 8 9 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 9 10 (part-side javascript) 10 23 (part-side javascript) 23 28 (part-side javascript face web-mode-variable-name-face) 28 29 (rear-nonsticky t part-side javascript face (rainbow-delimiters-depth-6-face))) . 83344) (undo-tree-id162 . -29) (undo-tree-id163 . -29)) nil (25746 60492 594967 535000) 0 nil])
([nil nil ((nil rear-nonsticky nil 83351 . 83352) (nil part-side javascript 83344 . 83352) (83344 . 83352)) nil (25746 60492 594963 901000) 0 nil])
([nil nil ((82553 . 82561) (#("        " 0 8 (part-side javascript)) . 82552) (undo-tree-id161 . -8) (82551 . 82561)) nil (25746 60492 594961 994000) 0 nil])
([nil nil ((82552 . 82560)) nil (25746 60492 594959 56000) 0 nil])
([nil nil ((82560 . 82565)) nil (25746 60492 594958 92000) 0 nil])
([nil nil ((82564 . 82568)) nil (25746 60492 594957 92000) 0 nil])
([nil nil ((82569 . 82580)) nil (25746 60492 594956 46000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -82579) (undo-tree-id160 . -1) 82580) nil (25746 60492 594954 483000) 0 nil])
([nil nil ((82579 . 82585)) nil (25746 60492 594952 1000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -82584) (undo-tree-id159 . -1) 82585) nil (25746 60492 594950 541000) 0 nil])
([nil nil ((82584 . 82586)) nil (25746 60492 594947 273000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -82585) (undo-tree-id158 . -1) 82586) nil (25746 60492 596698 315000) 0 nil])
([nil nil ((#(":" 0 1 (part-side javascript)) . -82584) (undo-tree-id225 . -1) 82585) nil (25746 60579 778934 690000) 0 nil] [nil nil ((82585 . 82605)) ((#("
                   " 0 1 (part-side javascript) 1 20 (part-side javascript)) . 82585) (undo-tree-id168 . -20) (undo-tree-id169 . -1)) (25746 60492 594928 869000) 0 nil])
([nil nil ((82584 . 82585)) nil (25746 60579 778932 560000) 0 nil])
nil
([nil nil ((82563 . 82565) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -82563) (82563 . 82564)) nil (25746 60579 778931 377000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 82564)) nil (25746 60579 778929 940000) 0 nil])
([nil nil ((82586 . 82588) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -82586) (82586 . 82587)) nil (25746 60579 778928 512000) 0 nil])
([nil nil ((82586 . 82587)) nil (25746 60579 778927 158000) 0 nil])
([nil nil ((82590 . 82598) (#("          " 0 10 (part-side javascript face whitespace-trailing)) . 82589) (undo-tree-id223 . -8) (undo-tree-id224 . 10) (82597 . 82599) (82588 . 82598)) nil (25746 60579 778925 841000) 0 nil])
([nil nil ((82589 . 82599)) nil (25746 60579 778922 314000) 0 nil])
([nil nil ((nil rear-nonsticky nil 82606 . 82607) (nil part-side javascript 82599 . 82607) (82599 . 82607)) nil (25746 60579 778921 272000) 0 nil])
([nil nil ((82608 . 82610) (82607 . 82609) (#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-5-face))) . -82607) (82607 . 82608)) nil (25746 60579 778919 527000) 0 nil])
([nil nil ((82609 . 82611)) nil (25746 60579 778917 986000) 0 nil])
([nil nil ((#("p" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -82609) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("a" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -82610) (undo-tree-id221 . -1) (undo-tree-id222 . -1) 82611) nil (25746 60579 778916 362000) 0 nil])
([nil nil ((82609 . 82610)) nil (25746 60579 778910 769000) 0 nil])
([nil nil ((#("f" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -82609) (undo-tree-id218 . -1) 82610) nil (25746 60579 778909 563000) 0 nil])
([nil nil ((82609 . 82613)) nil (25746 60579 778906 856000) 0 nil])
([nil nil ((#("name" 0 4 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . 82609) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (undo-tree-id217 . -4)) nil (25746 60579 778905 320000) 0 nil])
([nil nil ((nil rear-nonsticky nil 82619 . 82620) (nil part-side javascript 82609 . 82620) (nil part-token string 82609 . 82620) (nil font-lock-face web-mode-javascript-string-face 82609 . 82620) (82609 . 82620)) nil (25746 60579 778846 441000) 0 nil])
([nil nil ((82622 . 82625)) nil (25746 60579 778844 714000) 0 nil])
([nil nil ((nil rear-nonsticky nil 82641 . 82642) (nil rear-nonsticky t 82641 . 82642) (nil part-side javascript 82641 . 82642) (nil part-side javascript 82625 . 82641) (82625 . 82642)) nil (25746 60579 778843 606000) 0 nil])
([nil nil ((#("v" 0 1 (part-side javascript)) . -82637) (undo-tree-id210 . -1) (#("a" 0 1 (part-side javascript)) . -82638) (undo-tree-id211 . -1) (#("l" 0 1 (part-side javascript)) . -82639) (undo-tree-id212 . -1) (#("u" 0 1 (part-side javascript)) . -82640) (undo-tree-id213 . -1) (#("e" 0 1 (rear-nonsticky t part-side javascript)) . -82641) (undo-tree-id214 . -1) 82642) nil (25746 60579 778840 865000) 0 nil])
([nil nil ((82637 . 82641)) nil (25746 60579 778834 231000) 0 nil])
([nil nil ((82585 . 82590)) nil (25746 60579 778833 351000) 0 nil])
([nil nil ((#("a" 0 1 (part-side javascript)) . -82586) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (#("n" 0 1 (part-side javascript)) . -82587) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#("d" 0 1 (part-side javascript)) . -82588) (undo-tree-id208 . -1) (#(" " 0 1 (part-side javascript)) . -82589) (undo-tree-id209 . -1) 82590) nil (25746 60579 778831 522000) 0 nil])
([nil nil ((82586 . 82589)) nil (25746 60579 778823 835000) 0 nil])
([nil nil ((#("&" 0 1 (part-side javascript)) . -82586) (undo-tree-id201 . -1) (#("&" 0 1 (part-side javascript)) . -82587) (undo-tree-id202 . -1) (#(" " 0 1 (part-side javascript)) . -82588) (undo-tree-id203 . -1) 82589) nil (25746 60579 778822 419000) 0 nil])
([nil nil ((82586 . 82590)) nil (25746 60579 778817 775000) 0 nil])
([nil nil ((#("A" 0 1 (part-side javascript)) . -82586) (undo-tree-id197 . -1) (#("N" 0 1 (part-side javascript)) . -82587) (undo-tree-id198 . -1) (#("D" 0 1 (part-side javascript)) . -82588) (undo-tree-id199 . -1) (#(" " 0 1 (part-side javascript)) . -82589) (undo-tree-id200 . -1) 82590) nil (25746 60579 778815 909000) 0 nil])
([nil nil ((82586 . 82591)) nil (25746 60579 778810 98000) 0 nil])
([nil nil ((82590 . 82591)) nil (25746 60579 778809 234000) 0 nil])
([nil nil ((82591 . 82594)) nil (25746 60579 778808 402000) 0 nil])
([nil nil ((82595 . 82611)) nil (25746 60579 778807 387000) 0 nil])
([nil nil ((#("u" 0 1 (part-side javascript)) . -82608) (undo-tree-id194 . -1) (#("i" 0 1 (part-side javascript)) . -82609) (undo-tree-id195 . -1) (#("p" 0 1 (part-side javascript)) . -82610) (undo-tree-id196 . -1) 82611) nil (25746 60579 778805 815000) 0 nil])
([nil nil ((82608 . 82609)) nil (25746 60579 778799 817000) 0 nil])
([nil nil ((#("p" 0 1 (part-side javascript)) . -82608) (undo-tree-id193 . -1) 82609) nil (25746 60579 778798 644000) 0 nil])
([nil nil ((82608 . 82611)) nil (25746 60579 778796 394000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -82610) (undo-tree-id192 . -1) 82611) nil (25746 60579 778795 246000) 0 nil])
([nil nil ((82666 . 82677)) nil (25746 60579 778793 89000) 0 nil])
([nil nil ((nil rear-nonsticky nil 82719 . 82720) (nil part-side javascript 82704 . 82720) (nil part-side javascript 82703 . 82704) (nil part-side javascript 82701 . 82703) (nil part-side javascript 82700 . 82701) (nil face (rainbow-delimiters-depth-5-face) 82700 . 82701) (nil part-side javascript 82699 . 82700) (nil part-token string 82699 . 82700) (nil syntax-table (15) 82699 . 82700) (nil font-lock-face web-mode-javascript-string-face 82699 . 82700) (nil rear-nonsticky t 82698 . 82699) (nil part-side javascript 82698 . 82699) (nil part-token string 82698 . 82699) (nil font-lock-face web-mode-javascript-string-face 82698 . 82699) (nil part-side javascript 82688 . 82698) (nil part-token string 82688 . 82698) (nil font-lock-face web-mode-javascript-string-face 82688 . 82698) (nil part-side javascript 82687 . 82688) (nil part-token string 82687 . 82688) (nil syntax-table (15) 82687 . 82688) (nil font-lock-face web-mode-javascript-string-face 82687 . 82688) (nil part-side javascript 82686 . 82687) (nil face (rainbow-delimiters-depth-5-face) 82686 . 82687) (nil rear-nonsticky t 82685 . 82686) (nil part-side javascript 82685 . 82686) (nil part-side javascript 82678 . 82685) (nil part-side javascript 82677 . 82678) (82677 . 82720)) nil (25746 60579 778790 666000) 0 nil])
([nil nil ((#("n" 0 1 (part-side javascript)) . -82716) (undo-tree-id188 . -1) (#("a" 0 1 (part-side javascript)) . -82717) (undo-tree-id189 . -1) (#("m" 0 1 (part-side javascript)) . -82718) (undo-tree-id190 . -1) (#("e" 0 1 (rear-nonsticky t part-side javascript)) . -82719) (undo-tree-id191 . -1) 82720) nil (25746 60579 778783 38000) 0 nil])
([nil nil ((82716 . 82720)) nil (25746 60579 778776 769000) 0 nil])
([nil nil ((#("i" 0 1 (part-side javascript)) . -82717) (undo-tree-id185 . -1) (#("o" 0 1 (part-side javascript)) . -82718) (undo-tree-id186 . -1) (#("o" 0 1 (part-side javascript)) . -82719) (undo-tree-id187 . -1) 82720) nil (25746 60579 778775 39000) 0 nil])
([nil nil ((82717 . 82720)) nil (25746 60579 778769 684000) 0 nil])
([nil nil ((#("f" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -82688) (undo-tree-id174 . -1) (#("i" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -82689) (undo-tree-id175 . -1) (#("l" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -82690) (undo-tree-id176 . -1) (#("t" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -82691) (undo-tree-id177 . -1) (#("e" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -82692) (undo-tree-id178 . -1) (#("r" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -82693) (undo-tree-id179 . -1) (#("_" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -82694) (undo-tree-id180 . -1) (#("n" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -82695) (undo-tree-id181 . -1) (#("a" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -82696) (undo-tree-id182 . -1) (#("m" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -82697) (undo-tree-id183 . -1) (#("e" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -82698) (undo-tree-id184 . -1) 82699) nil (25746 60579 778765 996000) 0 nil])
([nil nil ((82688 . 82692)) nil (25746 60579 783170 10000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -82677) 82693) nil (25746 60581 268741 928000) 0 nil] [nil nil ((#("        }
" 0 8 (part-side javascript) 8 9 (part-side javascript face (rainbow-delimiters-depth-3-face)) 9 10 (part-side javascript)) . 82724) (undo-tree-id170 . -9) (82677 . 82724) (#("           n_filter['root'] = filter_chip.root
" 0 10 (part-side javascript) 10 19 (part-side javascript) 19 20 (part-side javascript face (rainbow-delimiters-depth-5-face)) 20 21 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 21 25 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 25 26 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 26 27 (part-side javascript face (rainbow-delimiters-depth-5-face)) 27 46 (part-side javascript) 46 47 (part-side javascript)) . 82667) (undo-tree-id171 . -10) (undo-tree-id172 . -25) (undo-tree-id173 . -25) (82714 . 82724) 82692) ((#("        }
" 0 8 (part-side javascript) 8 9 (part-side javascript face (rainbow-delimiters-depth-4-face)) 9 10 (part-side javascript)) . 82714) (undo-tree-id226 . -10) (82667 . 82714) (#("           n_filter['root'] = filter_chip.root
" 0 10 (part-side javascript) 10 19 (part-side javascript) 19 20 (part-side javascript face (rainbow-delimiters-depth-4-face)) 20 21 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 21 25 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 25 26 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 26 27 (part-side javascript face (rainbow-delimiters-depth-4-face)) 27 46 (part-side javascript) 46 47 (part-side javascript)) . 82677) (undo-tree-id227 . -47) (82724 . 82734)) (25746 60579 778744 507000) 0 nil])
([nil nil ((#("        " 0 8 (part-side javascript face whitespace-trailing)) . -82723) 82692) nil (25746 60581 268733 589000) 0 nil])
nil
([nil nil ((82511 . 82515) (t 25746 60581 278963 698000)) nil (25746 60634 608403 994000) 0 nil])
([nil nil ((#("n" 0 1 (part-side javascript)) . -82666) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (#("a" 0 1 (part-side javascript)) . -82667) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (#("m" 0 1 (part-side javascript)) . -82668) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (#("e" 0 1 (part-side javascript)) . -82669) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) 82670 (t 25746 60634 618978 825000)) nil (25746 60667 174994 968000) 0 nil])
([nil nil ((82666 . 82671)) nil (25746 60667 174978 367000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -82670) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) 82671) nil (25746 60667 174972 239000) 0 nil])
([nil nil ((#("
        console.log('filter_chip:', filter_chip)" 0 1 (part-side javascript) 1 17 (part-side javascript) 17 20 (part-side javascript face web-mode-function-call-face) 20 21 (part-side javascript face (rainbow-delimiters-depth-4-face)) 21 22 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 22 33 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 33 34 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 34 35 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 35 37 (part-side javascript) 37 47 (part-side javascript) 47 48 (rear-nonsticky t part-side javascript) 48 49 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 82727) (undo-tree-id275 . -49) (undo-tree-id276 . -1) (undo-tree-id277 . -49) (t 25746 60667 190987 429000)) nil (25746 60767 134565 296000) 0 nil])
([nil nil ((#("
          console.log('REEESULT:', result.data)" 0 19 (part-side javascript) 19 22 (part-side javascript face web-mode-function-call-face) 22 23 (part-side javascript face (rainbow-delimiters-depth-6-face)) 23 24 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 24 32 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 32 33 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 33 34 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 34 47 (part-side javascript) 47 48 (part-side javascript face (rainbow-delimiters-depth-6-face))) . 58159) (undo-tree-id272 . -48) (undo-tree-id273 . -1) (undo-tree-id274 . -48)) nil (25746 60767 134561 1000) 0 nil])
([nil nil ((#("
          console.log('REEESULT:', result.data)" 0 19 (part-side javascript) 19 22 (part-side javascript face web-mode-function-call-face) 22 23 (part-side javascript face (rainbow-delimiters-depth-6-face)) 23 24 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 24 32 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 32 33 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 33 34 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 34 47 (part-side javascript) 47 48 (part-side javascript face (rainbow-delimiters-depth-6-face))) . 58611) (undo-tree-id269 . -48) (undo-tree-id270 . -1) (undo-tree-id271 . -48)) nil (25746 60767 134556 826000) 0 nil])
([nil nil ((#("
        console.log('filters!!!', filters)" 0 1 (part-side javascript) 1 17 (part-side javascript) 17 20 (part-side javascript face web-mode-function-call-face) 20 21 (part-side javascript face (rainbow-delimiters-depth-4-face)) 21 22 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 22 32 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 32 33 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 33 35 (part-side javascript) 35 42 (part-side javascript) 42 43 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 66343) (undo-tree-id266 . -43) (undo-tree-id267 . -1) (undo-tree-id268 . -43)) nil (25746 60767 134552 545000) 0 nil])
([nil nil ((#("
        console.log('filter', filter)
        console.log('filter_name', filter_name)
        console.log('root', root)" 0 1 (part-side javascript) 1 17 (part-side javascript) 17 20 (part-side javascript face web-mode-function-call-face) 20 21 (part-side javascript face (rainbow-delimiters-depth-4-face)) 21 22 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 22 28 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 28 29 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 29 37 (part-side javascript) 37 38 (part-side javascript face (rainbow-delimiters-depth-4-face)) 38 39 (part-side javascript) 39 55 (part-side javascript) 55 58 (part-side javascript face web-mode-function-call-face) 58 59 (part-side javascript face (rainbow-delimiters-depth-4-face)) 59 60 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 60 71 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 71 72 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 72 85 (part-side javascript) 85 86 (part-side javascript face (rainbow-delimiters-depth-4-face)) 86 87 (part-side javascript) 87 95 (part-side javascript) 95 103 (part-side javascript) 103 106 (part-side javascript face web-mode-function-call-face) 106 107 (part-side javascript face (rainbow-delimiters-depth-4-face)) 107 108 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 108 112 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 112 113 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 113 119 (part-side javascript) 119 120 (rear-nonsticky t part-side javascript face (rainbow-delimiters-depth-4-face))) . 74605) (undo-tree-id262 . -120) (undo-tree-id263 . -81) (undo-tree-id264 . -1) (undo-tree-id265 . -120)) nil (25746 60767 134548 300000) 0 nil])
([nil nil ((#("
            console.log('new prev root', this.prev_save_root)" 0 1 (part-side javascript) 1 13 (part-side javascript) 13 21 (part-side javascript) 21 24 (part-side javascript face web-mode-function-call-face) 24 25 (part-side javascript face (rainbow-delimiters-depth-6-face)) 25 26 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 26 30 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 30 34 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 34 39 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 39 40 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 40 42 (part-side javascript) 42 46 (part-side javascript face web-mode-constant-face) 46 60 (part-side javascript) 60 61 (rear-nonsticky t part-side javascript) 61 62 (rear-nonsticky t part-side javascript face (rainbow-delimiters-depth-6-face))) . 75239) (undo-tree-id259 . -62) (undo-tree-id260 . -1) (undo-tree-id261 . -62)) nil (25746 60767 134542 700000) 0 nil])
([nil nil ((#("
          console.log('tree roots', this.tree_roots)" 0 1 (part-side javascript) 1 19 (part-side javascript) 19 22 (part-side javascript face web-mode-function-call-face) 22 23 (part-side javascript face (rainbow-delimiters-depth-6-face)) 23 24 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 24 34 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 34 35 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 35 37 (part-side javascript) 37 41 (part-side javascript face web-mode-constant-face) 41 52 (part-side javascript) 52 53 (part-side javascript face (rainbow-delimiters-depth-6-face))) . 78997) (undo-tree-id256 . -53) (undo-tree-id257 . -1) (undo-tree-id258 . -53)) nil (25746 60767 134536 411000) 0 nil])
([nil nil ((#("
            console.log('newchosenfilters!', newChosenfilters)" 0 1 (part-side javascript) 1 21 (part-side javascript) 21 24 (part-side javascript face web-mode-function-call-face) 24 25 (part-side javascript face (rainbow-delimiters-depth-7-face)) 25 26 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 26 43 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 43 44 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 44 46 (part-side javascript) 46 61 (part-side javascript) 61 62 (rear-nonsticky t part-side javascript) 62 63 (part-side javascript face (rainbow-delimiters-depth-7-face))) . 80045) (undo-tree-id253 . -63) (undo-tree-id254 . -1) (undo-tree-id255 . -63)) nil (25746 60767 134528 208000) 0 nil])
([nil nil ((#("'" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . 82090) (t 25746 60767 147011 176000)) nil (25746 60813 799247 824000) 0 nil])
([nil nil ((#("'" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . 82096)) nil (25746 60813 799245 920000) 0 nil])
([nil nil ((#("l" 0 1 (part-side javascript)) . -82074) (undo-tree-id278 . -1) (#("e" 0 1 (part-side javascript)) . -82075) (undo-tree-id279 . -1) (#("t" 0 1 (part-side javascript face web-mode-keyword-face)) . -82076) (undo-tree-id280 . -1) 82077) nil (25746 60813 799242 924000) 0 nil])
([nil nil ((82074 . 82079)) nil (25746 60813 799222 882000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . 75251) (undo-tree-id281 . -1) (t 25746 60813 811021 49000)) nil (25746 60857 19044 164000) 0 nil])
([nil nil ((75364 . 75375) (t 25746 60857 31029 582000)) nil (25747 3177 831268 240000) 0 nil])
([nil nil ((nil rear-nonsticky nil 75393 . 75394) (nil part-side javascript 75379 . 75394) (nil part-side javascript 75375 . 75379) (nil face web-mode-constant-face 75375 . 75379) (75375 . 75394)) nil (25747 3177 831266 686000) 0 nil])
([nil nil ((75394 . 75402)) nil (25747 3177 831264 880000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -75401) (undo-tree-id284 . -1) 75402) nil (25747 3177 831263 488000) 0 nil])
([nil nil ((97171 . 97180)) nil (25747 3177 831260 578000) 0 nil])
([nil nil ((nil rear-nonsticky nil 97198 . 97199) (nil part-side javascript 97184 . 97199) (nil part-side javascript 97180 . 97184) (nil face web-mode-constant-face 97180 . 97184) (97180 . 97199)) nil (25747 3177 831259 188000) 0 nil])
([nil nil ((97199 . 97207)) nil (25747 3177 831256 566000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -97206) (undo-tree-id282 . -1) (undo-tree-id283 . -1) 97207) nil (25747 3177 831251 465000) 0 nil])
([nil nil ((82689 . 82700) (t 25747 3177 844233 178000)) nil (25747 3239 689214 148000) 0 nil])
([nil nil ((nil rear-nonsticky nil 82762 . 82763) (nil part-side javascript 82759 . 82763) (nil face web-mode-constant-face 82759 . 82763) (nil part-side javascript 82758 . 82759) (nil part-side javascript 82756 . 82758) (nil rear-nonsticky t 82755 . 82756) (nil part-side javascript 82755 . 82756) (nil part-side javascript 82741 . 82755) (nil part-side javascript 82737 . 82741) (nil face web-mode-constant-face 82737 . 82741) (nil part-side javascript 82729 . 82737) (nil part-side javascript 82728 . 82729) (nil syntax-table (15) 82728 . 82729) (nil part-side javascript 82727 . 82728) (nil part-token string 82727 . 82728) (nil font-lock-face web-mode-javascript-string-face 82727 . 82728) (nil part-side javascript 82726 . 82727) (nil part-token string 82726 . 82727) (nil syntax-table (15) 82726 . 82727) (nil font-lock-face web-mode-javascript-string-face 82726 . 82727) (nil part-side javascript 82704 . 82726) (nil part-side javascript 82700 . 82704) (nil face web-mode-constant-face 82700 . 82704) (82700 . 82763)) nil (25747 3239 689211 36000) 0 nil])
([nil nil ((82737 . 82739) 82763) nil (25747 3239 689199 960000) 0 nil])
([nil nil ((110293 . 110296) (t 25747 3239 704163 130000)) nil (25747 3467 937030 265000) 0 nil])
([nil nil ((110296 . 110309)) nil (25747 3467 937027 512000) 0 nil])
([nil nil ((#(" " 0 1 (part-side css)) . -110308) (undo-tree-id292 . -1) 110309) nil (25747 3467 937023 628000) 0 nil])
([nil nil ((110309 . 110311) (#("{" 0 1 (part-side css face (rainbow-delimiters-depth-1-face))) . -110309) (110308 . 110310)) nil (25747 3467 937014 585000) 0 nil])
([nil nil ((110313 . 110315) (#("    " 0 4 (part-side css face whitespace-trailing)) . 110312) (undo-tree-id288 . -2) (undo-tree-id289 . 4) (110314 . 110316) (110312 . 110315) (#("    " 0 4 (part-side css face whitespace-trailing)) . 110311) (undo-tree-id290 . -2) (undo-tree-id291 . 4) (110313 . 110315) (110310 . 110314)) nil (25747 3467 937006 339000) 0 nil])
([nil nil ((#("
" 0 1 (part-side css)) . 110311) (undo-tree-id287 . -1)) nil (25747 3467 936993 425000) 0 nil])
([nil nil ((110311 . 110315)) nil (25747 3467 936989 249000) 0 nil])
([nil nil ((nil rear-nonsticky nil 110355 . 110356) (nil part-side css 110355 . 110356) (nil part-side css 110345 . 110355) (nil face web-mode-css-priority-face 110345 . 110355) (nil part-side css 110344 . 110345) (nil part-side css 110343 . 110344) (nil face (rainbow-delimiters-depth-2-face) 110343 . 110344) (nil part-side css 110334 . 110343) (nil part-side css 110333 . 110334) (nil face (rainbow-delimiters-depth-2-face) 110333 . 110334) (nil part-side css 110329 . 110333) (nil face web-mode-css-function-face 110329 . 110333) (nil part-side css 110328 . 110329) (nil part-side css 110315 . 110328) (nil face web-mode-css-property-name-face 110315 . 110328) (110315 . 110356)) nil (25747 3467 936985 907000) 0 nil])
([nil nil ((#("rgba(0,0,0,.42)" 0 4 (part-side css face web-mode-css-function-face) 4 5 (part-side css face (rainbow-delimiters-depth-2-face)) 5 14 (part-side css) 14 15 (part-side css face (rainbow-delimiters-depth-2-face))) . 110329) (undo-tree-id285 . -15) (undo-tree-id286 . -15)) nil (25747 3467 936976 546000) 0 nil])
([nil nil ((110329 . 110332)) nil (25747 3467 936959 678000) 0 nil])
([nil nil ((18155 . 18156)) nil (25747 3467 936955 681000) 0 nil])
([nil nil ((nil rear-nonsticky nil 18166 . 18167) (nil tag-attr t 18156 . 18167) (nil tag-name "v-textarea" 18156 . 18167) (nil tag-type start 18156 . 18167) (nil font-lock-face web-mode-html-attr-value-face 18156 . 18167) (18156 . 18167)) nil (25747 3467 936945 217000) 0 nil])
([nil nil ((#("red" 0 3 (part-side css)) . 110341) (undo-tree-id293 . -3) (undo-tree-id294 . -3) (t 25747 3467 971928 214000)) nil (25747 3543 781218 717000) 0 nil])
([nil nil ((nil rear-nonsticky nil 110347 . 110348) (nil part-side css 110341 . 110348) (nil face web-mode-css-color-face 110341 . 110348) (110341 . 110348)) nil (25747 3543 781203 411000) 0 nil])
([nil nil ((nil rear-nonsticky nil 110332 . 110333) (nil part-side css 110321 . 110333) (110321 . 110333) (t 25747 3543 807856 632000)) nil (25747 3595 849822 370000) 0 nil])
([nil nil ((110333 . 110334)) nil (25747 3595 849814 823000) 0 nil])
([nil nil ((#("fieldset" 0 7 (part-side css) 7 8 (rear-nonsticky t part-side css)) . 110325) (undo-tree-id299 . -8) (undo-tree-id300 . -8) (t 25747 3595 863808 971000)) nil (25747 3859 63587 423000) 0 nil])
([nil nil ((nil rear-nonsticky nil 110342 . 110343) (nil part-side css 110325 . 110343) (110325 . 110343)) nil (25747 3859 63583 505000) 0 nil])
([nil nil ((#(">" 0 1 (part-side css)) . -110322) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (#(">" 0 1 (part-side css)) . -110323) (undo-tree-id297 . -1) (undo-tree-id298 . -1) 110324) nil (25747 3859 63579 942000) 0 nil])
([nil nil ((110323 . 110324)) nil (25747 3859 63559 957000) 0 nil])
([nil nil ((#(".activefield > .v-text-field__slot" 0 12 (part-side css face web-mode-css-selector-class-face) 12 13 (part-side css) 13 15 (part-side css) 15 16 (part-side css face web-mode-css-selector-class-face) 16 33 (part-side css face web-mode-css-selector-class-face) 33 34 (rear-nonsticky t part-side css face web-mode-css-selector-class-face)) . 110308) (undo-tree-id331 . -34) (undo-tree-id332 . -1) (undo-tree-id333 . -4) (undo-tree-id334 . -12) (undo-tree-id335 . -13) (undo-tree-id336 . -15) (undo-tree-id337 . -15) (undo-tree-id338 . -34) (undo-tree-id339 . -34) (t 25747 3859 75582 282000)) nil (25747 4069 570909 779000) 0 nil])
([nil nil ((nil rear-nonsticky nil 110345 . 110346) (nil part-side css 110345 . 110346) (nil face (rainbow-delimiters-depth-1-face) 110345 . 110346) (nil part-side css 110331 . 110345) (nil part-side css 110308 . 110331) (nil face web-mode-css-selector-class-face 110308 . 110331) (110308 . 110346)) nil (25747 4069 570897 123000) 0 nil])
([nil nil ((#(" " 0 1 (part-side css)) . -110344) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (#("{" 0 1 (rear-nonsticky t part-side css face (rainbow-delimiters-depth-1-face))) . -110345) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) 110346) nil (25747 4069 570888 945000) 0 nil])
([nil nil ((#("
  .v-text-field--outlined >>> fieldset {
    border-color: #FF0000 !important;
  }" 0 1 (part-side css) 1 3 (part-side css) 3 26 (part-side css face web-mode-css-selector-class-face) 26 39 (part-side css) 39 40 (part-side css) 40 41 (part-side css face (rainbow-delimiters-depth-1-face)) 41 42 (part-side css) 42 46 (part-side css) 46 59 (part-side css face web-mode-css-property-name-face) 59 60 (part-side css) 60 66 (part-side css face web-mode-css-color-face) 66 67 (rear-nonsticky t part-side css face web-mode-css-color-face) 67 68 (part-side css) 68 78 (part-side css face web-mode-css-priority-face) 78 79 (rear-nonsticky t part-side css) 79 82 (part-side css) 82 83 (part-side css face (rainbow-delimiters-depth-1-face))) . 110305) (undo-tree-id376 . -83) (undo-tree-id377 . -1) (undo-tree-id378 . -3) (undo-tree-id379 . -3) (undo-tree-id380 . -46) (undo-tree-id381 . -60) (undo-tree-id382 . -3) (undo-tree-id383 . -60) (undo-tree-id384 . -60) (undo-tree-id385 . -3) (undo-tree-id386 . -3) (undo-tree-id387 . -3) (undo-tree-id388 . -3) (undo-tree-id389 . -3) (undo-tree-id390 . -3) (undo-tree-id391 . -83) (t 25747 4069 587413 331000)) nil (25747 4152 736782 888000) 0 nil])
([nil nil ((#("activefield" 0 10 (tag-attr t tag-name "v-textarea" tag-type start font-lock-face web-mode-html-attr-value-face) 10 11 (rear-nonsticky t tag-attr t tag-name "v-textarea" tag-type start font-lock-face web-mode-html-attr-value-face)) . 18156) (undo-tree-id372 . -11) (undo-tree-id373 . -11) (undo-tree-id374 . -11) (undo-tree-id375 . -11)) nil (25747 4152 736733 854000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-textarea" tag-type start font-lock-face web-mode-html-attr-value-face)) . -18155) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) 18156) nil (25747 4152 736708 512000) 0 nil])
([nil nil ((41135 . 41137) (t 25747 4152 751348 662000)) nil (25753 32022 857012 982000) 0 nil])
([nil nil ((#("#" 0 1 (part-side javascript)) . -41135) (undo-tree-id36 . -1) (#(" " 0 1 (part-side javascript)) . -41136) (undo-tree-id37 . -1) 41137) nil (25753 32022 857010 941000) 0 nil])
([nil nil ((41136 . 41139) (41135 . 41137) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -41135) (41135 . 41136)) nil (25753 32022 857006 958000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -41135) (undo-tree-id32 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . 41136) (#("/" 0 1 (part-side javascript)) . -41136) (undo-tree-id33 . -1) (#("/" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -41137) (undo-tree-id34 . -1) (#("/" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -41138) (undo-tree-id35 . -1) 41139) nil (25753 32022 857003 941000) 0 nil])
([nil nil ((41135 . 41137)) nil (25753 32022 856997 232000) 0 nil])
([nil nil ((41164 . 41166)) nil (25753 32022 856996 273000) 0 nil])
([nil nil ((56159 . 56161)) nil (25753 32022 856995 259000) 0 nil])
([nil nil ((56193 . 56195)) nil (25753 32022 856994 100000) 0 nil])
([nil nil ((57888 . 57897) (57856 . 57865) (57785 . 57794) (57713 . 57722) (57682 . 57691) (57621 . 57630) (57558 . 57567) (57508 . 57841) (#("authservice.RobtexLookup(obj).then(result => {
          this.robtex_dest = result.data.ip_info['dest_ip']
          this.robtex_src = result.data.ip_info['src_ip']
        }).catch(error => {
          this.robtex_dest = {Error: error.response.data['message']}
          this.robtex_src = {Error: error.response.data['message']}
          console.log(error)
        })" 0 12 (part-side javascript) 12 24 (face web-mode-function-call-face part-side javascript) 24 25 (face (rainbow-delimiters-depth-4-face) part-side javascript) 25 28 (part-side javascript) 28 29 (face (rainbow-delimiters-depth-4-face) part-side javascript) 29 30 (part-side javascript) 30 34 (face web-mode-function-call-face part-side javascript) 34 35 (face (rainbow-delimiters-depth-4-face) part-side javascript) 35 41 (face web-mode-function-name-face part-side javascript) 41 45 (part-side javascript) 45 46 (face (rainbow-delimiters-depth-5-face) part-side javascript) 46 57 (part-side javascript) 57 61 (face web-mode-constant-face part-side javascript) 61 95 (part-side javascript) 95 96 (face (rainbow-delimiters-depth-6-face) part-side javascript) 96 97 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 97 104 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 104 105 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 105 106 (face (rainbow-delimiters-depth-6-face) part-side javascript) 106 117 (part-side javascript) 117 121 (face web-mode-constant-face part-side javascript) 121 154 (part-side javascript) 154 155 (face (rainbow-delimiters-depth-6-face) part-side javascript) 155 156 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 156 162 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 162 163 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 163 164 (face (rainbow-delimiters-depth-6-face) part-side javascript) 164 173 (part-side javascript) 173 174 (face (rainbow-delimiters-depth-5-face) part-side javascript) 174 175 (face (rainbow-delimiters-depth-4-face) part-side javascript) 175 176 (part-side javascript) 176 181 (face web-mode-function-call-face part-side javascript) 181 182 (face (rainbow-delimiters-depth-4-face) part-side javascript) 182 187 (face web-mode-function-name-face part-side javascript) 187 191 (part-side javascript) 191 192 (face (rainbow-delimiters-depth-5-face) part-side javascript) 192 203 (part-side javascript) 203 207 (face web-mode-constant-face part-side javascript) 207 222 (part-side javascript) 222 223 (face (rainbow-delimiters-depth-6-face) part-side javascript) 223 228 (face web-mode-variable-name-face part-side javascript) 228 249 (part-side javascript) 249 250 (face (rainbow-delimiters-depth-7-face) part-side javascript) 250 251 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 251 258 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 258 259 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 259 260 (face (rainbow-delimiters-depth-7-face) part-side javascript) 260 261 (face (rainbow-delimiters-depth-6-face) part-side javascript) 261 272 (part-side javascript) 272 276 (face web-mode-constant-face part-side javascript) 276 290 (part-side javascript) 290 291 (face (rainbow-delimiters-depth-6-face) part-side javascript) 291 296 (face web-mode-variable-name-face part-side javascript) 296 317 (part-side javascript) 317 318 (face (rainbow-delimiters-depth-7-face) part-side javascript) 318 319 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 319 326 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 326 327 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 327 328 (face (rainbow-delimiters-depth-7-face) part-side javascript) 328 329 (face (rainbow-delimiters-depth-6-face) part-side javascript) 329 348 (part-side javascript) 348 351 (face web-mode-function-call-face part-side javascript) 351 352 (face (rainbow-delimiters-depth-6-face) part-side javascript) 352 357 (part-side javascript) 357 358 (face (rainbow-delimiters-depth-6-face) part-side javascript) 358 367 (part-side javascript) 367 368 (face (rainbow-delimiters-depth-5-face) part-side javascript) 368 369 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . 57508) (undo-tree-id28 . -47) (undo-tree-id29 . -369) (undo-tree-id30 . -369) (undo-tree-id31 . -369)) nil (25753 32022 856991 586000) 0 nil])
([nil nil ((#(" :robtex_src=\"robtex_src\" :robtex_dest=\"robtex_dest\"" 0 1 (face (whitespace-line) tag-type start tag-name "osintpopup") 1 2 (face (whitespace-line web-mode-html-attr-engine-face) font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "osintpopup" tag-attr t tag-attr-beg 2) 2 12 (face (whitespace-line web-mode-html-attr-engine-face) font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "osintpopup" tag-attr t) 12 13 (face (whitespace-line web-mode-html-attr-equal-face) font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "osintpopup" tag-attr t) 13 24 (face (whitespace-line web-mode-html-attr-value-face) font-lock-face web-mode-html-attr-value-face tag-type start tag-name "osintpopup" tag-attr t) 24 25 (face (whitespace-line web-mode-html-attr-value-face) font-lock-face web-mode-html-attr-value-face tag-type start tag-name "osintpopup" tag-attr-end 11 tag-attr t) 25 26 (face (whitespace-line) tag-type start tag-name "osintpopup") 26 27 (face (whitespace-line web-mode-html-attr-engine-face) font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "osintpopup" tag-attr t tag-attr-beg 2) 27 38 (face (whitespace-line web-mode-html-attr-engine-face) font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "osintpopup" tag-attr t) 38 39 (face (whitespace-line web-mode-html-attr-equal-face) font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "osintpopup" tag-attr t) 39 51 (face (whitespace-line web-mode-html-attr-value-face) font-lock-face web-mode-html-attr-value-face tag-type start tag-name "osintpopup" tag-attr t) 51 52 (face (whitespace-line web-mode-html-attr-value-face) font-lock-face web-mode-html-attr-value-face tag-type start tag-name "osintpopup" tag-attr-end 12 tag-attr t)) . 34605) (undo-tree-id0 . -52) (undo-tree-id1 . -10) (undo-tree-id2 . -10) (undo-tree-id3 . -10) (undo-tree-id4 . -7) (undo-tree-id5 . -7) (undo-tree-id6 . -7) (undo-tree-id7 . -7) (undo-tree-id8 . -7) (undo-tree-id9 . -7) (undo-tree-id10 . -5) (undo-tree-id11 . -5) (undo-tree-id12 . -5) (undo-tree-id13 . -5) (undo-tree-id14 . -5) (undo-tree-id15 . -5) (undo-tree-id16 . -5) (undo-tree-id17 . -3) (undo-tree-id18 . -3) (undo-tree-id19 . -3) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -52) (undo-tree-id27 . -52)) nil (25753 32025 10277 310000) 0 nil])
([nil nil ((41085 . 41086) (t 25753 32022 868132 495000)) nil (25753 41629 295818 316000) 0 nil] [nil nil ((34605 . 34615) (#(" " 0 1 (tag-type start tag-name "osintpopup")) . 34605) (undo-tree-id38 . -1) (t 25753 32022 868132 495000)) ((34605 . 34606) (#("<!--   -->" 0 1 (font-lock-face web-mode-comment-face tag-beg 0 tag-type comment) 1 9 (font-lock-face web-mode-comment-face tag-type comment) 9 10 (font-lock-face web-mode-comment-face tag-end t tag-type comment)) . 34605)) (25753 32025 8968 198000) 0 nil])
([nil nil ((41115 . 41116)) nil (25753 41629 295810 48000) 0 nil])
nil
([nil nil ((56111 . 56112) (t 25753 41629 311005 541000)) nil (25753 41645 710260 152000) 0 nil])
([nil nil ((56146 . 56147)) nil (25782 38275 761244 236000) 0 nil])
([nil nil ((33197 . 33207)) nil (25782 38286 438348 788000) 0 nil] [nil nil ((33527 . 33537) (33519 . 33528) (t 25782 38157 562042 486000)) ((#(" class=\"\"" 0 1 (tag-name "v-card-text" tag-type start) 1 2 (tag-attr-beg 0 tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 2 3 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 3 4 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 4 5 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 5 6 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 6 7 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-equal-face) 7 8 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 8 9 (tag-attr t tag-attr-end 5 tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33519) (undo-tree-id619 . -8) (undo-tree-id620 . -8) (undo-tree-id621 . -8) (undo-tree-id622 . -8) (undo-tree-id623 . -8) (undo-tree-id624 . -8) (undo-tree-id625 . -8) (undo-tree-id626 . -8) (undo-tree-id627 . -8) (undo-tree-id628 . -8) (undo-tree-id629 . -8) (undo-tree-id630 . -8) (undo-tree-id631 . -8) (undo-tree-id632 . -8) (undo-tree-id633 . -8) (undo-tree-id634 . -8) (undo-tree-id635 . -8) (undo-tree-id636 . -8) (undo-tree-id637 . -8) (undo-tree-id638 . -8) (undo-tree-id639 . -8) (undo-tree-id640 . -8) (undo-tree-id641 . -8) (undo-tree-id642 . -8) (undo-tree-id643 . -8) (undo-tree-id644 . -8) (undo-tree-id645 . -8) (undo-tree-id646 . -8) (undo-tree-id647 . -8) (undo-tree-id648 . -8) (undo-tree-id649 . -8) (undo-tree-id650 . -8) (undo-tree-id651 . -8) (undo-tree-id652 . -8) (undo-tree-id653 . -8) (undo-tree-id654 . -8) (undo-tree-id655 . -8) (undo-tree-id656 . -8) (undo-tree-id657 . -8) (undo-tree-id658 . -8) (undo-tree-id659 . -8) (undo-tree-id660 . -8) (undo-tree-id661 . -8) (undo-tree-id662 . -8) (undo-tree-id663 . -8) (undo-tree-id664 . -8) (undo-tree-id665 . -8) (undo-tree-id666 . -8) (undo-tree-id667 . -8) (undo-tree-id668 . -8) (undo-tree-id669 . -8) (undo-tree-id670 . -8) (undo-tree-id671 . -8) (undo-tree-id672 . -8) (undo-tree-id673 . -8) (undo-tree-id674 . -8) (undo-tree-id675 . -8) (undo-tree-id676 . -8) (undo-tree-id677 . -8) (undo-tree-id678 . -8) (undo-tree-id679 . -8) (undo-tree-id680 . -8) (undo-tree-id681 . -8) (undo-tree-id682 . -8) (undo-tree-id683 . -8) (undo-tree-id684 . -8) (undo-tree-id685 . -8) (undo-tree-id686 . -8) (undo-tree-id687 . -8) (undo-tree-id688 . -8) (undo-tree-id689 . -8) (undo-tree-id690 . -8) (undo-tree-id691 . -8) (undo-tree-id692 . -8) (undo-tree-id693 . -8) (undo-tree-id694 . -8) (undo-tree-id695 . -8) (undo-tree-id696 . -8) (undo-tree-id697 . -8) (undo-tree-id698 . -8) (undo-tree-id699 . -8) (undo-tree-id700 . -8) (undo-tree-id701 . -8) (undo-tree-id702 . -8) (undo-tree-id703 . -8) (undo-tree-id704 . -8) (undo-tree-id705 . -8) (undo-tree-id706 . -8) (undo-tree-id707 . -8) (undo-tree-id708 . -8) (undo-tree-id709 . -8) (undo-tree-id710 . -8) (undo-tree-id711 . -8) (undo-tree-id712 . -8) (undo-tree-id713 . -8) (undo-tree-id714 . -8) (undo-tree-id715 . -8) (undo-tree-id716 . -8) (undo-tree-id717 . -8) (undo-tree-id718 . -8) (undo-tree-id719 . -8) (undo-tree-id720 . -8) (undo-tree-id721 . -8) (undo-tree-id722 . -8) (undo-tree-id723 . -8) (undo-tree-id724 . -8) (undo-tree-id725 . -8) (undo-tree-id726 . -8) (undo-tree-id727 . -8) (undo-tree-id728 . -8) (undo-tree-id729 . -8) (undo-tree-id730 . -8) (undo-tree-id731 . -8) (undo-tree-id732 . -8) (undo-tree-id733 . -8) (undo-tree-id734 . -8) (undo-tree-id735 . -8) (undo-tree-id736 . -8) (undo-tree-id737 . -8) (undo-tree-id738 . -8) (undo-tree-id739 . -8) (undo-tree-id740 . -8) (undo-tree-id741 . -8) (undo-tree-id742 . -8) (undo-tree-id743 . -8) (undo-tree-id744 . -8) (undo-tree-id745 . -8) (#("pr-0 pl-0 " 0 9 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 9 10 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33527) (undo-tree-id746 . -7) (undo-tree-id747 . -7) (undo-tree-id748 . -10) (undo-tree-id749 . -9) (undo-tree-id750 . -9) (undo-tree-id751 . -9) (undo-tree-id752 . -9) (undo-tree-id753 . -9) (undo-tree-id754 . -9) (undo-tree-id755 . -9) (undo-tree-id756 . -9) (undo-tree-id757 . -9) (undo-tree-id758 . -9) (undo-tree-id759 . -9) (undo-tree-id760 . -9) (undo-tree-id761 . -9) (undo-tree-id762 . -9) (undo-tree-id763 . -9) (undo-tree-id764 . -9) (undo-tree-id765 . -9) (undo-tree-id766 . -9) (undo-tree-id767 . -9) (undo-tree-id768 . -9) (undo-tree-id769 . -9) (undo-tree-id770 . -9) (undo-tree-id771 . -9) (undo-tree-id772 . -9) (undo-tree-id773 . -9) (undo-tree-id774 . -9) (undo-tree-id775 . -9) (undo-tree-id776 . -9) (undo-tree-id777 . -9) (undo-tree-id778 . -9) (undo-tree-id779 . -9) (undo-tree-id780 . -9) (undo-tree-id781 . -9) (undo-tree-id782 . -9) (undo-tree-id783 . -9) (undo-tree-id784 . -9) (undo-tree-id785 . -9) (undo-tree-id786 . -9) (undo-tree-id787 . -9) (undo-tree-id788 . -9) (undo-tree-id789 . -9) (undo-tree-id790 . -9) (undo-tree-id791 . -9) (undo-tree-id792 . -9) (undo-tree-id793 . -9) (undo-tree-id794 . -9) (undo-tree-id795 . -9) (undo-tree-id796 . -9) (undo-tree-id797 . -9) (undo-tree-id798 . -9) (undo-tree-id799 . -9) (undo-tree-id800 . -9) (undo-tree-id801 . -9) (undo-tree-id802 . -9) (undo-tree-id803 . -9) (undo-tree-id804 . -9) (undo-tree-id805 . -9) (undo-tree-id806 . -9) (undo-tree-id807 . -9) (undo-tree-id808 . -9) (undo-tree-id809 . -9) (undo-tree-id810 . -9) (undo-tree-id811 . -9) (undo-tree-id812 . -9) (undo-tree-id813 . -9) (undo-tree-id814 . -9) (undo-tree-id815 . -9) (undo-tree-id816 . -9) (undo-tree-id817 . -9) (undo-tree-id818 . -9) (undo-tree-id819 . -9) (undo-tree-id820 . -9) (undo-tree-id821 . -9) (undo-tree-id822 . -9) (undo-tree-id823 . -9) (undo-tree-id824 . -9) (undo-tree-id825 . -9) (undo-tree-id826 . -9) (undo-tree-id827 . -9) (undo-tree-id828 . -9) (undo-tree-id829 . -9) (undo-tree-id830 . -9) (undo-tree-id831 . -9) (undo-tree-id832 . -9) (undo-tree-id833 . -9) (undo-tree-id834 . -9) (undo-tree-id835 . -9) (undo-tree-id836 . -9) (undo-tree-id837 . -9) (undo-tree-id838 . -9) (undo-tree-id839 . -9) (undo-tree-id840 . -9) (undo-tree-id841 . -9) (undo-tree-id842 . -9) (undo-tree-id843 . -9) (undo-tree-id844 . -9) (undo-tree-id845 . -9) (undo-tree-id846 . -9) (undo-tree-id847 . -9) (undo-tree-id848 . -9) (undo-tree-id849 . -9) (undo-tree-id850 . -9) (undo-tree-id851 . -9) (undo-tree-id852 . -9) (undo-tree-id853 . -9) (undo-tree-id854 . -9) (undo-tree-id855 . -9) (undo-tree-id856 . -9) (undo-tree-id857 . -9) (undo-tree-id858 . -9) (undo-tree-id859 . -9) (undo-tree-id860 . -9) (undo-tree-id861 . -9) (undo-tree-id862 . -9) (undo-tree-id863 . -9) (undo-tree-id864 . -9) (undo-tree-id865 . -10) (undo-tree-id866 . -10) (undo-tree-id867 . -10) (undo-tree-id868 . -10) (undo-tree-id869 . -10) (undo-tree-id870 . -10) (undo-tree-id871 . -10) (undo-tree-id872 . -10)) (25782 38275 467335 31000) 0 nil] [nil nil ((#("wrap fluid pl-0 pr-0 pb-0 ma-0" 0 1 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 1 3 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 3 4 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 4 5 (tag-name "v-container" tag-type start) 5 6 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 6 9 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 9 10 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 10 11 (tag-name "v-container" tag-type start) 11 12 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 12 14 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 14 15 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 15 16 (tag-name "v-container" tag-type start) 16 17 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 17 19 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 19 20 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 20 21 (tag-name "v-container" tag-type start) 21 22 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 22 24 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 24 25 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 25 26 (tag-name "v-container" tag-type start) 26 27 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 27 29 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 29 30 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . 33556) (undo-tree-id1 . -30) (undo-tree-id2 . -30) (undo-tree-id3 . -30) (t 25762 33016 969797 519000)) ((33556 . 33586)) (25782 38156 521674 66000) 0 nil])
([nil nil ((#("?" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33203) (undo-tree-id877 . -1) (#("=" 0 1 (tag-attr t tag-attr-end 6 tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-equal-face)) . -33204) (undo-tree-id878 . -1) (#("\"" 0 1 (tag-name "v-card" tag-type start)) . -33205) (undo-tree-id879 . -1) (#("\"" 0 1 (tag-attr t tag-attr-end 6 tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33206)) nil (25782 38286 438346 407000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33536) (undo-tree-id341 . -1) (undo-tree-id343 . -1) (undo-tree-id345 . -1) (undo-tree-id347 . -1) (undo-tree-id349 . -1) (undo-tree-id351 . -1) 33537) ((33536 . 33537)) (25782 38275 110017 544000) 0 nil])
([nil nil ((#("
" 0 1 (tag-name "v-container" tag-type start)) . 33556) (undo-tree-id0 . -1)) ((33556 . 33557)) (25782 38156 112214 844000) 0 nil])
([nil nil ((33205 . 33209) (33203 . 33206)) nil (25782 38286 438339 959000) 0 nil])
([nil nil ((33536 . 33542) (t 25782 38216 67391 520000)) ((#(" ml-0+" 0 5 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 5 6 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33536) (undo-tree-id509 . -6) (undo-tree-id510 . -5) (undo-tree-id511 . -5) (undo-tree-id512 . -5) (undo-tree-id513 . -5) (undo-tree-id514 . -5) (undo-tree-id515 . -5) (undo-tree-id516 . -5) (undo-tree-id517 . -5) (undo-tree-id518 . -5) (undo-tree-id519 . -5) (undo-tree-id520 . -5) (undo-tree-id521 . -5) (undo-tree-id522 . -5) (undo-tree-id523 . -5) (undo-tree-id524 . -5) (undo-tree-id525 . -5) (undo-tree-id526 . -5) (undo-tree-id527 . -5) (undo-tree-id528 . -5) (undo-tree-id529 . -5) (undo-tree-id530 . -5) (undo-tree-id531 . -5) (undo-tree-id532 . -5) (undo-tree-id533 . -5) (undo-tree-id534 . -5) (undo-tree-id535 . -5) (undo-tree-id536 . -5) (undo-tree-id537 . -5) (undo-tree-id538 . -5) (undo-tree-id539 . -5) (undo-tree-id540 . -5) (undo-tree-id541 . -5) (undo-tree-id542 . -5) (undo-tree-id543 . -5) (undo-tree-id544 . -5) (undo-tree-id545 . -5) (undo-tree-id546 . -5) (undo-tree-id547 . -5) (undo-tree-id548 . -5) (undo-tree-id549 . -5) (undo-tree-id550 . -5) (undo-tree-id551 . -5) (undo-tree-id552 . -5) (undo-tree-id553 . -5) (undo-tree-id554 . -5) (undo-tree-id555 . -5) (undo-tree-id556 . -5) (undo-tree-id557 . -5) (undo-tree-id558 . -5) (undo-tree-id559 . -5) (undo-tree-id560 . -5) (undo-tree-id561 . -5) (undo-tree-id562 . -5) (undo-tree-id563 . -5) (undo-tree-id564 . -5) (undo-tree-id565 . -5) (undo-tree-id566 . -5) (undo-tree-id567 . -5) (undo-tree-id568 . -5) (undo-tree-id569 . -5) (undo-tree-id570 . -5) (undo-tree-id571 . -5) (undo-tree-id572 . -5) (undo-tree-id573 . -5) (undo-tree-id574 . -5) (undo-tree-id575 . -5) (undo-tree-id576 . -5) (undo-tree-id577 . -5) (undo-tree-id578 . -5) (undo-tree-id579 . -5) (undo-tree-id580 . -5) (undo-tree-id581 . -5) (undo-tree-id582 . -5) (undo-tree-id583 . -5) (undo-tree-id584 . -5) (undo-tree-id585 . -5) (undo-tree-id586 . -5) (undo-tree-id587 . -5) (undo-tree-id588 . -5) (undo-tree-id589 . -5) (undo-tree-id590 . -5) (undo-tree-id591 . -5) (undo-tree-id592 . -5) (undo-tree-id593 . -5) (undo-tree-id594 . -5) (undo-tree-id595 . -5) (undo-tree-id596 . -5) (undo-tree-id597 . -5) (undo-tree-id598 . -5) (undo-tree-id599 . -5) (undo-tree-id600 . -5) (undo-tree-id601 . -5) (undo-tree-id602 . -5) (undo-tree-id603 . -5) (undo-tree-id604 . -5) (undo-tree-id605 . -5) (undo-tree-id606 . -5) (undo-tree-id607 . -5) (undo-tree-id608 . -6) (undo-tree-id609 . -6) (undo-tree-id610 . -6) (undo-tree-id611 . -6) (undo-tree-id612 . -6) (undo-tree-id613 . -6) (undo-tree-id614 . -6) (undo-tree-id615 . -6) (undo-tree-id616 . -6) (undo-tree-id617 . -6) (undo-tree-id618 . -6)) (25782 38274 746035 971000) 0 nil])
([nil nil ((#("            " 0 12 (tag-name "v-container" tag-type start)) . -33556)) ((33556 . 33568)) (25782 38155 779691 262000) 0 nil])
([nil nil ((#("r" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33206) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33207) (undo-tree-id875 . -1) (#("0" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33208) (undo-tree-id876 . -1) 33209) nil (25782 38286 438336 206000) 0 nil])
([nil nil ((#("+" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33541) (undo-tree-id354 . -1) 33542) ((33541 . 33542)) (25782 38274 373524 132000) 0 nil])
([nil nil ((33572 . 33573)) ((#(" " 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33572) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1)) (25782 38155 425281 719000) 0 nil])
([nil nil ((33206 . 33209)) nil (25782 38286 438315 464000) 0 nil])
([nil nil ((33541 . 33543)) ((#(" å" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 1 2 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33541) (undo-tree-id421 . -2) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -2) (undo-tree-id499 . -2) (undo-tree-id500 . -2) (undo-tree-id501 . -2) (undo-tree-id502 . -2) (undo-tree-id503 . -2) (undo-tree-id504 . -2) (undo-tree-id505 . -2) (undo-tree-id506 . -2) (undo-tree-id507 . -2) (undo-tree-id508 . -2)) (25782 38274 20980 849000) 0 nil])
([nil nil ((nil rear-nonsticky nil 33602 . 33603) (nil tag-attr t 33602 . 33603) (nil tag-name "v-container" 33602 . 33603) (nil tag-type start 33602 . 33603) (nil font-lock-face web-mode-html-attr-value-face 33602 . 33603) (nil tag-attr t 33600 . 33602) (nil tag-name "v-container" 33600 . 33602) (nil tag-type start 33600 . 33602) (nil font-lock-face web-mode-html-attr-value-face 33600 . 33602) (nil tag-attr t 33599 . 33600) (nil tag-name "v-container" 33599 . 33600) (nil tag-type start 33599 . 33600) (nil font-lock-face web-mode-html-attr-value-face 33599 . 33600) (nil tag-attr t 33598 . 33599) (nil tag-name "v-container" 33598 . 33599) (nil tag-type start 33598 . 33599) (nil font-lock-face web-mode-html-attr-value-face 33598 . 33599) (nil tag-attr t 33597 . 33598) (nil tag-name "v-container" 33597 . 33598) (nil tag-type start 33597 . 33598) (nil font-lock-face web-mode-html-attr-value-face 33597 . 33598) (nil tag-attr t 33595 . 33597) (nil tag-name "v-container" 33595 . 33597) (nil tag-type start 33595 . 33597) (nil font-lock-face web-mode-html-attr-value-face 33595 . 33597) (nil tag-attr t 33594 . 33595) (nil tag-name "v-container" 33594 . 33595) (nil tag-type start 33594 . 33595) (nil font-lock-face web-mode-html-attr-value-face 33594 . 33595) (nil tag-attr t 33593 . 33594) (nil tag-name "v-container" 33593 . 33594) (nil tag-type start 33593 . 33594) (nil font-lock-face web-mode-html-attr-value-face 33593 . 33594) (nil tag-attr t 33592 . 33593) (nil tag-name "v-container" 33592 . 33593) (nil tag-type start 33592 . 33593) (nil font-lock-face web-mode-html-attr-value-face 33592 . 33593) (nil tag-attr t 33590 . 33592) (nil tag-name "v-container" 33590 . 33592) (nil tag-type start 33590 . 33592) (nil font-lock-face web-mode-html-attr-value-face 33590 . 33592) (nil tag-attr t 33589 . 33590) (nil tag-name "v-container" 33589 . 33590) (nil tag-type start 33589 . 33590) (nil font-lock-face web-mode-html-attr-value-face 33589 . 33590) (nil tag-attr t 33588 . 33589) (nil tag-name "v-container" 33588 . 33589) (nil tag-type start 33588 . 33589) (nil font-lock-face web-mode-html-attr-value-face 33588 . 33589) (nil tag-attr t 33587 . 33588) (nil tag-name "v-container" 33587 . 33588) (nil tag-type start 33587 . 33588) (nil font-lock-face web-mode-html-attr-value-face 33587 . 33588) (nil tag-attr t 33585 . 33587) (nil tag-name "v-container" 33585 . 33587) (nil tag-type start 33585 . 33587) (nil font-lock-face web-mode-html-attr-value-face 33585 . 33587) (nil tag-attr t 33584 . 33585) (nil tag-name "v-container" 33584 . 33585) (nil tag-type start 33584 . 33585) (nil font-lock-face web-mode-html-attr-value-face 33584 . 33585) (nil tag-attr t 33583 . 33584) (nil tag-name "v-container" 33583 . 33584) (nil tag-type start 33583 . 33584) (nil font-lock-face web-mode-html-attr-value-face 33583 . 33584) (nil tag-attr t 33582 . 33583) (nil tag-name "v-container" 33582 . 33583) (nil tag-type start 33582 . 33583) (nil font-lock-face web-mode-html-attr-value-face 33582 . 33583) (nil tag-attr t 33579 . 33582) (nil tag-name "v-container" 33579 . 33582) (nil tag-type start 33579 . 33582) (nil font-lock-face web-mode-html-attr-value-face 33579 . 33582) (nil tag-attr t 33578 . 33579) (nil tag-name "v-container" 33578 . 33579) (nil tag-type start 33578 . 33579) (nil font-lock-face web-mode-html-attr-value-face 33578 . 33579) (nil tag-attr t 33577 . 33578) (nil tag-name "v-container" 33577 . 33578) (nil tag-type start 33577 . 33578) (nil font-lock-face web-mode-html-attr-value-face 33577 . 33578) (nil tag-attr t 33576 . 33577) (nil tag-name "v-container" 33576 . 33577) (nil tag-type start 33576 . 33577) (nil font-lock-face web-mode-html-attr-value-face 33576 . 33577) (nil tag-attr t 33574 . 33576) (nil tag-name "v-container" 33574 . 33576) (nil tag-type start 33574 . 33576) (nil font-lock-face web-mode-html-attr-value-face 33574 . 33576) (nil tag-attr t 33573 . 33574) (nil tag-name "v-container" 33573 . 33574) (nil tag-type start 33573 . 33574) (nil font-lock-face web-mode-html-attr-value-face 33573 . 33574) (33573 . 33603)) ((#("wrap fluid pl-0 pr-0 pb-0 ma-0" 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 1 2 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 2 3 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 3 4 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 4 5 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 5 6 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 6 9 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 9 10 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 10 11 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 11 12 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 12 14 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 14 15 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 15 16 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 16 17 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 17 19 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 19 20 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 20 21 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 21 22 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 22 24 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 24 25 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 25 26 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 26 27 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 27 29 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 29 30 (rear-nonsticky nil tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33573) (undo-tree-id320 . -30) (undo-tree-id321 . -5) (undo-tree-id322 . -6) (undo-tree-id323 . -6) (nil tag-name "v-container" 33573 . 33574) (nil tag-name "v-container" 33575 . 33576) (nil tag-name "v-container" 33574 . 33575) (nil tag-name "v-container" 33576 . 33577) (nil tag-name "v-container" 33577 . 33578) (nil tag-name "v-container" 33578 . 33579) (nil tag-name "v-container" 33579 . 33582) (nil tag-name "v-container" 33582 . 33583) (nil tag-name "v-container" 33583 . 33584) (nil tag-name "v-container" 33584 . 33585) (nil tag-name "v-container" 33585 . 33587) (nil tag-name "v-container" 33587 . 33588) (nil tag-name "v-container" 33588 . 33589) (nil tag-name "v-container" 33589 . 33590) (nil tag-name "v-container" 33590 . 33592) (nil tag-name "v-container" 33592 . 33593) (nil tag-name "v-container" 33593 . 33594) (nil tag-name "v-container" 33594 . 33595) (nil tag-name "v-container" 33595 . 33597) (nil tag-name "v-container" 33597 . 33598) (nil tag-name "v-container" 33598 . 33599) (nil tag-name "v-container" 33599 . 33600) (nil tag-name "v-container" 33600 . 33602) (nil tag-name "v-container" 33602 . 33603) (nil rear-nonsticky t 33602 . 33603)) (25782 38155 19826 188000) 0 nil])
([nil nil ((33209 . 33214) (t 25782 38286 456431 128000)) nil (25782 38321 943850 856000) 0 nil])
([nil nil ((#("å" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33542) (undo-tree-id353 . -1) 33543) ((33542 . 33543)) (25782 38273 588991 975000) 0 nil])
([nil nil ((33527 . 33536) (33519 . 33528) (t 25782 37857 659258 972000)) ((#(" class=\"\"" 0 1 (tag-name "v-card-text" tag-type start) 1 2 (tag-attr-beg 0 tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 2 3 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 3 4 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 4 5 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 5 6 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 6 7 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-equal-face) 7 8 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 8 9 (tag-attr t tag-attr-end 5 tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33519) (#("pa-0 ma-0" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 1 2 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 2 3 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 3 4 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 4 5 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 5 6 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 6 7 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 7 8 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 8 9 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33527)) (25782 38154 765581 41000) 0 nil])
([nil nil ((33537 . 33538) (t 25782 38323 66980 133000)) nil (25782 38334 993906 340000) 0 nil] [nil nil ((#("
            wrap fluid pl-0 pr-0 pb-0 ma-0" 0 1 (tag-name "v-container" tag-type start) 1 13 (tag-name "v-container" tag-type start) 13 14 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 14 16 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 16 17 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 17 18 (tag-name "v-container" tag-type start) 18 19 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 19 22 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 22 23 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 23 24 (tag-name "v-container" tag-type start) 24 25 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 25 27 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 27 28 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 28 29 (tag-name "v-container" tag-type start) 29 30 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 30 32 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 32 33 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 33 34 (tag-name "v-container" tag-type start) 34 35 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 35 37 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 37 38 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 38 39 (tag-name "v-container" tag-type start) 39 40 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 40 42 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 42 43 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . 33561) (undo-tree-id880 . -43) (undo-tree-id881 . -43) (undo-tree-id882 . -13) (undo-tree-id883 . -1) (undo-tree-id884 . -43) (t 25782 38300 139882 85000)) ((33561 . 33604) (t 25782 38312 123407 888000)) (25782 38312 108075 940000) 0 nil])
([nil nil ((33542 . 33546)) ((#("mr-0" 0 4 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33542) (undo-tree-id355 . -4) (undo-tree-id356 . -4) (undo-tree-id357 . -4) (undo-tree-id358 . -4) (undo-tree-id359 . -4) (undo-tree-id360 . -4) (undo-tree-id361 . -4) (undo-tree-id362 . -4) (undo-tree-id363 . -4) (undo-tree-id364 . -4) (undo-tree-id365 . -4) (undo-tree-id366 . -4) (undo-tree-id367 . -4) (undo-tree-id368 . -4) (undo-tree-id369 . -4) (undo-tree-id370 . -4) (undo-tree-id371 . -4) (undo-tree-id372 . -4) (undo-tree-id373 . -4) (undo-tree-id374 . -4) (undo-tree-id375 . -4) (undo-tree-id376 . -4) (undo-tree-id377 . -4) (undo-tree-id378 . -4) (undo-tree-id379 . -4) (undo-tree-id380 . -4) (undo-tree-id381 . -4) (undo-tree-id382 . -4) (undo-tree-id383 . -4) (undo-tree-id384 . -4) (undo-tree-id385 . -4) (undo-tree-id386 . -4) (undo-tree-id387 . -4) (undo-tree-id388 . -4) (undo-tree-id389 . -4) (undo-tree-id390 . -4) (undo-tree-id391 . -4) (undo-tree-id392 . -4) (undo-tree-id393 . -4) (undo-tree-id394 . -4) (undo-tree-id395 . -4) (undo-tree-id396 . -4) (undo-tree-id397 . -4) (undo-tree-id398 . -4) (undo-tree-id399 . -4) (undo-tree-id400 . -4) (undo-tree-id401 . -4) (undo-tree-id402 . -4) (undo-tree-id403 . -4) (undo-tree-id404 . -4) (undo-tree-id405 . -4) (undo-tree-id406 . -4) (undo-tree-id407 . -4) (undo-tree-id408 . -4) (undo-tree-id409 . -4) (undo-tree-id410 . -4) (undo-tree-id411 . -4) (undo-tree-id412 . -4) (undo-tree-id413 . -4) (undo-tree-id414 . -4) (undo-tree-id415 . -4) (undo-tree-id416 . -4) (undo-tree-id417 . -4) (undo-tree-id418 . -4) (undo-tree-id419 . -4) (undo-tree-id420 . -4) (t 25782 38245 2146 12000)) (25782 38244 983877 674000) 0 nil])
([nil nil ((#("wrap fluid pl-0 pr-0 pb-0 ma-0" 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 1 2 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 2 3 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 3 4 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 4 5 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 5 29 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 29 30 (rear-nonsticky t tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33591) (undo-tree-id133 . -30) (undo-tree-id134 . -5) (undo-tree-id135 . -6) (undo-tree-id136 . -6) (undo-tree-id137 . -30) (undo-tree-id138 . -30)) ((33591 . 33621)) (25782 38154 456341 640000) 0 nil] [nil nil ((#("w" 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33591) (undo-tree-id4 . -1) (undo-tree-id6 . -1) (undo-tree-id8 . -1) (undo-tree-id10 . -1) (undo-tree-id12 . -1) (undo-tree-id14 . -1) (undo-tree-id16 . -1) (undo-tree-id18 . -1) (undo-tree-id20 . -1) (undo-tree-id22 . -1) (undo-tree-id24 . -1) (undo-tree-id26 . -1) (undo-tree-id28 . -1) (undo-tree-id30 . -1) (undo-tree-id32 . -1) (undo-tree-id34 . -1) (undo-tree-id36 . -1) (undo-tree-id38 . -1) (#("r" 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33592) (undo-tree-id40 . -1) (undo-tree-id42 . -1) (undo-tree-id44 . -1) (undo-tree-id46 . -1) (undo-tree-id48 . -1) (undo-tree-id50 . -1) (undo-tree-id52 . -1) (undo-tree-id54 . -1) (undo-tree-id56 . -1) (undo-tree-id58 . -1) (undo-tree-id60 . -1) (undo-tree-id62 . -1) (undo-tree-id64 . -1) (undo-tree-id66 . -1) (undo-tree-id68 . -1) (#("a" 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33593) (undo-tree-id69 . -1) (undo-tree-id71 . -1) (undo-tree-id73 . -1) (undo-tree-id75 . -1) (undo-tree-id77 . -1) (undo-tree-id79 . -1) (undo-tree-id81 . -1) (undo-tree-id83 . -1) (undo-tree-id85 . -1) (undo-tree-id87 . -1) (undo-tree-id89 . -1) (undo-tree-id91 . -1) (undo-tree-id93 . -1) (#("p" 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33594) (undo-tree-id95 . -1) (undo-tree-id97 . -1) (undo-tree-id99 . -1) (undo-tree-id101 . -1) (undo-tree-id103 . -1) (undo-tree-id105 . -1) (undo-tree-id107 . -1) (undo-tree-id109 . -1) (undo-tree-id111 . -1) (undo-tree-id113 . -1) (#(" " 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33595) (undo-tree-id114 . -1) (undo-tree-id116 . -1) (undo-tree-id118 . -1) (undo-tree-id120 . -1) (undo-tree-id122 . -1) (undo-tree-id124 . -1) 33596 (t 25782 37877 621878 629000)) ((33591 . 33596) (t 25782 37909 423760 117000)) (25782 37909 404602 146000) 0 nil])
([nil nil ((nil rear-nonsticky nil 33567 . 33568) (nil rear-nonsticky t 33567 . 33568) (nil tag-attr t 33567 . 33568) (nil tag-attr-end 0 33567 . 33568) (nil tag-name "v-card-text" 33567 . 33568) (nil tag-type start 33567 . 33568) (nil font-lock-face web-mode-html-attr-name-face 33567 . 33568) (nil tag-attr t 33565 . 33567) (nil tag-name "v-card-text" 33565 . 33567) (nil tag-type start 33565 . 33567) (nil font-lock-face web-mode-html-attr-name-face 33565 . 33567) (nil tag-attr-beg 0 33564 . 33565) (nil tag-attr t 33564 . 33565) (nil tag-name "v-card-text" 33564 . 33565) (nil tag-type start 33564 . 33565) (nil font-lock-face web-mode-html-attr-name-face 33564 . 33565) (nil tag-name "v-card-text" 33563 . 33564) (nil tag-type start 33563 . 33564) (nil tag-attr t 33562 . 33563) (nil tag-attr-end 0 33562 . 33563) (nil tag-name "v-card-text" 33562 . 33563) (nil tag-type start 33562 . 33563) (nil font-lock-face web-mode-html-attr-name-face 33562 . 33563) (nil tag-attr t 33560 . 33562) (nil tag-name "v-card-text" 33560 . 33562) (nil tag-type start 33560 . 33562) (nil font-lock-face web-mode-html-attr-name-face 33560 . 33562) (nil tag-attr-beg 0 33559 . 33560) (nil tag-attr t 33559 . 33560) (nil tag-name "v-card-text" 33559 . 33560) (nil tag-type start 33559 . 33560) (nil font-lock-face web-mode-html-attr-name-face 33559 . 33560) (nil tag-name "v-card-text" 33558 . 33559) (nil tag-type start 33558 . 33559) (nil tag-attr t 33557 . 33558) (nil tag-attr-end 0 33557 . 33558) (nil tag-name "v-card-text" 33557 . 33558) (nil tag-type start 33557 . 33558) (nil font-lock-face web-mode-html-attr-name-face 33557 . 33558) (nil tag-attr t 33555 . 33557) (nil tag-name "v-card-text" 33555 . 33557) (nil tag-type start 33555 . 33557) (nil font-lock-face web-mode-html-attr-name-face 33555 . 33557) (nil tag-attr-beg 0 33554 . 33555) (nil tag-attr t 33554 . 33555) (nil tag-name "v-card-text" 33554 . 33555) (nil tag-type start 33554 . 33555) (nil font-lock-face web-mode-html-attr-name-face 33554 . 33555) (nil tag-name "v-card-text" 33553 . 33554) (nil tag-type start 33553 . 33554) (nil tag-attr t 33552 . 33553) (nil tag-attr-end 0 33552 . 33553) (nil tag-name "v-card-text" 33552 . 33553) (nil tag-type start 33552 . 33553) (nil font-lock-face web-mode-html-attr-name-face 33552 . 33553) (nil tag-attr t 33550 . 33552) (nil tag-name "v-card-text" 33550 . 33552) (nil tag-type start 33550 . 33552) (nil font-lock-face web-mode-html-attr-name-face 33550 . 33552) (nil tag-attr-beg 0 33549 . 33550) (nil tag-attr t 33549 . 33550) (nil tag-name "v-card-text" 33549 . 33550) (nil tag-type start 33549 . 33550) (nil font-lock-face web-mode-html-attr-name-face 33549 . 33550) (nil tag-name "v-card-text" 33548 . 33549) (nil tag-type start 33548 . 33549) (nil tag-attr t 33547 . 33548) (nil tag-attr-end 0 33547 . 33548) (nil tag-name "v-card-text" 33547 . 33548) (nil tag-type start 33547 . 33548) (nil font-lock-face web-mode-html-attr-name-face 33547 . 33548) (nil tag-attr t 33544 . 33547) (nil tag-name "v-card-text" 33544 . 33547) (nil tag-type start 33544 . 33547) (nil font-lock-face web-mode-html-attr-name-face 33544 . 33547) (nil tag-attr-beg 0 33543 . 33544) (nil tag-attr t 33543 . 33544) (nil tag-name "v-card-text" 33543 . 33544) (nil tag-type start 33543 . 33544) (nil font-lock-face web-mode-html-attr-name-face 33543 . 33544) (nil tag-name "v-card-text" 33542 . 33543) (nil tag-type start 33542 . 33543) (nil tag-attr t 33541 . 33542) (nil tag-attr-end 0 33541 . 33542) (nil tag-name "v-card-text" 33541 . 33542) (nil tag-type start 33541 . 33542) (nil font-lock-face web-mode-html-attr-name-face 33541 . 33542) (nil tag-attr t 33539 . 33541) (nil tag-name "v-card-text" 33539 . 33541) (nil tag-type start 33539 . 33541) (nil font-lock-face web-mode-html-attr-name-face 33539 . 33541) (nil tag-attr-beg 0 33538 . 33539) (nil tag-attr t 33538 . 33539) (nil tag-name "v-card-text" 33538 . 33539) (nil tag-type start 33538 . 33539) (nil font-lock-face web-mode-html-attr-name-face 33538 . 33539) (33538 . 33568)) nil (25782 38334 993899 694000) 0 nil])
nil
nil
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33590) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) 33591) ((33590 . 33591)) (25782 38154 124510 867000) 0 nil])
nil
([nil nil ((#("class=\"pl-0 ml-0\"" 0 1 (tag-attr-beg 0 tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 1 2 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 2 3 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 3 4 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 4 5 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 5 6 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-equal-face) 6 16 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face) 16 17 (tag-attr t tag-attr-end 5 tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33198) (undo-tree-id918 . -17) (undo-tree-id919 . -9) (undo-tree-id920 . -9) (undo-tree-id921 . -4) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -17) (undo-tree-id927 . -17)) nil (25782 38334 993874 222000) 0 nil])
([nil nil ((33561 . 33574)) ((#("
            " 0 1 (tag-name "v-container" tag-type start) 1 13 (tag-name "v-container" tag-type start)) . 33561) (undo-tree-id288 . -13) (undo-tree-id289 . -13) (undo-tree-id290 . -13) (undo-tree-id291 . -1) (undo-tree-id292 . -13) (undo-tree-id293 . -13) (undo-tree-id294 . -13) (undo-tree-id295 . -13) (undo-tree-id296 . -13) (undo-tree-id297 . -13) (undo-tree-id298 . -13) (undo-tree-id299 . -13) (undo-tree-id300 . -13) (undo-tree-id301 . -13) (undo-tree-id302 . -13) (undo-tree-id303 . -13) (undo-tree-id304 . -13) (undo-tree-id305 . -13) (undo-tree-id306 . -13) (undo-tree-id307 . -13) (undo-tree-id308 . -13) (undo-tree-id309 . -13) (undo-tree-id310 . -13) (undo-tree-id311 . -13) (undo-tree-id312 . -13) (undo-tree-id313 . -13) (undo-tree-id314 . -13) (undo-tree-id315 . -13) (undo-tree-id316 . -13) (undo-tree-id317 . -13) (undo-tree-id318 . -13) (undo-tree-id319 . -13)) (25782 38153 800608 868000) 0 nil])
([nil nil ((#(" " 0 1 (tag-name "v-card" tag-type start)) . -33197) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) 33198) nil (25782 38334 993855 881000) 0 nil])
([nil nil ((nil rear-nonsticky nil 33603 . 33604) (nil rear-nonsticky t 33603 . 33604) (nil tag-attr t 33603 . 33604) (nil tag-attr-end 0 33603 . 33604) (nil tag-name "v-container" 33603 . 33604) (nil tag-type start 33603 . 33604) (nil font-lock-face web-mode-html-attr-name-face 33603 . 33604) (nil tag-attr t 33601 . 33603) (nil tag-name "v-container" 33601 . 33603) (nil tag-type start 33601 . 33603) (nil font-lock-face web-mode-html-attr-name-face 33601 . 33603) (nil tag-attr-beg 0 33600 . 33601) (nil tag-attr t 33600 . 33601) (nil tag-name "v-container" 33600 . 33601) (nil tag-type start 33600 . 33601) (nil font-lock-face web-mode-html-attr-name-face 33600 . 33601) (nil tag-name "v-container" 33599 . 33600) (nil tag-type start 33599 . 33600) (nil tag-attr t 33598 . 33599) (nil tag-attr-end 0 33598 . 33599) (nil tag-name "v-container" 33598 . 33599) (nil tag-type start 33598 . 33599) (nil font-lock-face web-mode-html-attr-name-face 33598 . 33599) (nil tag-attr t 33596 . 33598) (nil tag-name "v-container" 33596 . 33598) (nil tag-type start 33596 . 33598) (nil font-lock-face web-mode-html-attr-name-face 33596 . 33598) (nil tag-attr-beg 0 33595 . 33596) (nil tag-attr t 33595 . 33596) (nil tag-name "v-container" 33595 . 33596) (nil tag-type start 33595 . 33596) (nil font-lock-face web-mode-html-attr-name-face 33595 . 33596) (nil tag-name "v-container" 33594 . 33595) (nil tag-type start 33594 . 33595) (nil tag-attr t 33593 . 33594) (nil tag-attr-end 0 33593 . 33594) (nil tag-name "v-container" 33593 . 33594) (nil tag-type start 33593 . 33594) (nil font-lock-face web-mode-html-attr-name-face 33593 . 33594) (nil tag-attr t 33591 . 33593) (nil tag-name "v-container" 33591 . 33593) (nil tag-type start 33591 . 33593) (nil font-lock-face web-mode-html-attr-name-face 33591 . 33593) (nil tag-attr-beg 0 33590 . 33591) (nil tag-attr t 33590 . 33591) (nil tag-name "v-container" 33590 . 33591) (nil tag-type start 33590 . 33591) (nil font-lock-face web-mode-html-attr-name-face 33590 . 33591) (nil tag-name "v-container" 33589 . 33590) (nil tag-type start 33589 . 33590) (nil tag-attr t 33588 . 33589) (nil tag-attr-end 0 33588 . 33589) (nil tag-name "v-container" 33588 . 33589) (nil tag-type start 33588 . 33589) (nil font-lock-face web-mode-html-attr-name-face 33588 . 33589) (nil tag-attr t 33586 . 33588) (nil tag-name "v-container" 33586 . 33588) (nil tag-type start 33586 . 33588) (nil font-lock-face web-mode-html-attr-name-face 33586 . 33588) (nil tag-attr-beg 0 33585 . 33586) (nil tag-attr t 33585 . 33586) (nil tag-name "v-container" 33585 . 33586) (nil tag-type start 33585 . 33586) (nil font-lock-face web-mode-html-attr-name-face 33585 . 33586) (nil tag-name "v-container" 33584 . 33585) (nil tag-type start 33584 . 33585) (nil tag-attr t 33583 . 33584) (nil tag-attr-end 0 33583 . 33584) (nil tag-name "v-container" 33583 . 33584) (nil tag-type start 33583 . 33584) (nil font-lock-face web-mode-html-attr-name-face 33583 . 33584) (nil tag-attr t 33580 . 33583) (nil tag-name "v-container" 33580 . 33583) (nil tag-type start 33580 . 33583) (nil font-lock-face web-mode-html-attr-name-face 33580 . 33583) (nil tag-attr-beg 0 33579 . 33580) (nil tag-attr t 33579 . 33580) (nil tag-name "v-container" 33579 . 33580) (nil tag-type start 33579 . 33580) (nil font-lock-face web-mode-html-attr-name-face 33579 . 33580) (nil tag-name "v-container" 33578 . 33579) (nil tag-type start 33578 . 33579) (nil tag-attr t 33577 . 33578) (nil tag-attr-end 0 33577 . 33578) (nil tag-name "v-container" 33577 . 33578) (nil tag-type start 33577 . 33578) (nil font-lock-face web-mode-html-attr-name-face 33577 . 33578) (nil tag-attr t 33576 . 33577) (nil tag-name "v-container" 33576 . 33577) (nil tag-type start 33576 . 33577) (nil font-lock-face web-mode-html-attr-name-face 33576 . 33577) (nil tag-attr t 33575 . 33576) (nil tag-name "v-container" 33575 . 33576) (nil tag-type start 33575 . 33576) (nil font-lock-face web-mode-html-attr-name-face 33575 . 33576) (nil tag-attr-beg 0 33574 . 33575) (nil tag-attr t 33574 . 33575) (nil tag-name "v-container" 33574 . 33575) (nil tag-type start 33574 . 33575) (nil font-lock-face web-mode-html-attr-name-face 33574 . 33575) (33574 . 33604)) ((#("wrap fluid pl-0 pr-0 pb-0 ma-0" 0 1 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 1 2 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 2 3 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 3 4 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 4 5 (tag-name "v-container" tag-type start) 5 6 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 6 9 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 9 10 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 10 11 (tag-name "v-container" tag-type start) 11 12 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 12 14 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 14 15 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 15 16 (tag-name "v-container" tag-type start) 16 17 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 17 19 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 19 20 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 20 21 (tag-name "v-container" tag-type start) 21 22 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 22 24 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 24 25 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 25 26 (tag-name "v-container" tag-type start) 26 27 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 27 29 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 29 30 (rear-nonsticky t tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . 33574) (nil tag-name "v-container" 33574 . 33575) (nil tag-name "v-container" 33575 . 33576) (nil tag-name "v-container" 33576 . 33577) (nil tag-name "v-container" 33577 . 33578) (nil tag-name "v-container" 33578 . 33579) (nil tag-name "v-container" 33579 . 33580) (nil tag-name "v-container" 33580 . 33583) (nil tag-name "v-container" 33583 . 33584) (nil tag-name "v-container" 33584 . 33585) (nil tag-name "v-container" 33585 . 33586) (nil tag-name "v-container" 33586 . 33588) (nil tag-name "v-container" 33588 . 33589) (nil tag-name "v-container" 33589 . 33590) (nil tag-name "v-container" 33590 . 33591) (nil tag-name "v-container" 33591 . 33593) (nil tag-name "v-container" 33593 . 33594) (nil tag-name "v-container" 33594 . 33595) (nil tag-name "v-container" 33595 . 33596) (nil tag-name "v-container" 33596 . 33598) (nil tag-name "v-container" 33598 . 33599) (nil tag-name "v-container" 33599 . 33600) (nil tag-name "v-container" 33600 . 33601) (nil tag-name "v-container" 33601 . 33603) (nil tag-name "v-container" 33603 . 33604) (nil rear-nonsticky nil 33603 . 33604) (nil rear-nonsticky t 33603 . 33604)) (25782 38153 428204 2000) 0 nil])
([nil nil ((33520 . 33529) (t 25782 38335 10518 918000)) nil (25782 38354 331669 772000) 0 nil])
([nil nil ((#("wrap fluid pl-0 pr-0 pb-0 ma-0" 0 1 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 1 3 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 3 4 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 4 5 (tag-name "v-container" tag-type start) 5 6 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 6 9 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 9 10 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 10 11 (tag-name "v-container" tag-type start) 11 12 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 12 14 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 14 15 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 15 16 (tag-name "v-container" tag-type start) 16 17 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 17 19 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 19 20 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 20 21 (tag-name "v-container" tag-type start) 21 22 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 22 24 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 24 25 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 25 26 (tag-name "v-container" tag-type start) 26 27 (tag-attr-beg 0 tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 27 29 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face) 29 30 (rear-nonsticky t tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . 33574) (undo-tree-id274 . -30) (undo-tree-id276 . -30)) ((33574 . 33604)) (25782 38153 237020 530000) 0 nil] [nil nil ((#("a" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33528) (undo-tree-id147 . -1) (undo-tree-id149 . -1) (undo-tree-id151 . -1) (undo-tree-id153 . -1) (undo-tree-id155 . -1) (undo-tree-id157 . -1) (undo-tree-id159 . -1) (undo-tree-id161 . -1) (undo-tree-id163 . -1) (undo-tree-id165 . -1) (undo-tree-id167 . -1) (undo-tree-id169 . -1) (undo-tree-id171 . -1) (undo-tree-id173 . -1) (undo-tree-id175 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33529) (undo-tree-id176 . -1) (undo-tree-id178 . -1) (undo-tree-id180 . -1) (undo-tree-id182 . -1) (undo-tree-id184 . -1) (undo-tree-id186 . -1) (undo-tree-id188 . -1) (undo-tree-id190 . -1) (undo-tree-id192 . -1) (undo-tree-id194 . -1) (undo-tree-id196 . -1) (undo-tree-id198 . -1) (undo-tree-id200 . -1) (#("0" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33530) (undo-tree-id202 . -1) (undo-tree-id204 . -1) (undo-tree-id206 . -1) (undo-tree-id208 . -1) (undo-tree-id210 . -1) (undo-tree-id212 . -1) (undo-tree-id214 . -1) (undo-tree-id216 . -1) (undo-tree-id218 . -1) (undo-tree-id220 . -1) (#(" " 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33531) (undo-tree-id221 . -1) (undo-tree-id223 . -1) (undo-tree-id225 . -1) (undo-tree-id227 . -1) (undo-tree-id229 . -1) (undo-tree-id231 . -1) (#("m" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33532) (undo-tree-id233 . -1) (undo-tree-id235 . -1) (undo-tree-id237 . -1) (undo-tree-id239 . -1) (undo-tree-id241 . -1) (#("a" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33533) (undo-tree-id242 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33534) (undo-tree-id244 . -1) (#("0" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33535) (undo-tree-id245 . -1) 33536 (t 25782 38026 340734 269000)) ((33528 . 33536)) (25782 38061 635795 307000) 0 nil])
([nil nil ((#(" " 0 1 (tag-name "v-card-text" tag-type start)) . 33527) (#("\"" 0 1 (tag-attr t tag-attr-end 5 tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33527)) nil (25782 38354 331666 543000) 0 nil])
([nil nil ((#("
" 0 1 (tag-name "v-container" tag-type start)) . 33574) (undo-tree-id273 . -1)) ((33574 . 33575)) (25782 38153 48093 780000) 0 nil])
([nil nil ((33528 . 33532)) ((#("r-0 " 0 3 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 3 4 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33528) (undo-tree-id246 . -1) (undo-tree-id247 . -4) (undo-tree-id248 . -3) (undo-tree-id249 . -3) (undo-tree-id250 . -3) (undo-tree-id251 . -3) (undo-tree-id252 . -3) (undo-tree-id253 . -3) (undo-tree-id254 . -3) (undo-tree-id255 . -3) (undo-tree-id256 . -3) (undo-tree-id257 . -3) (undo-tree-id258 . -3) (undo-tree-id259 . -3) (undo-tree-id260 . -3) (undo-tree-id261 . -3) (undo-tree-id262 . -3) (undo-tree-id263 . -3) (undo-tree-id264 . -4) (undo-tree-id265 . -4) (undo-tree-id266 . -4) (undo-tree-id267 . -4) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4)) (25782 38061 311448 543000) 0 nil])
([nil nil ((33557 . 33558)) nil (25782 38354 331657 620000) 0 nil])
([nil nil ((#("            " 0 12 (tag-name "v-container" tag-type start)) . -33574) (undo-tree-id271 . -12) (undo-tree-id272 . -12)) ((33574 . 33586)) (25782 38152 802353 540000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33531) (undo-tree-id139 . -1) (undo-tree-id141 . -1) (undo-tree-id143 . -1) (undo-tree-id145 . -1) 33532) ((33531 . 33532) (t 25782 38049 775454 970000)) (25782 38049 760112 344000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33552) (undo-tree-id928 . -1) (#("m" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33553) (undo-tree-id929 . -1) (#("a" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33554) (undo-tree-id930 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33555) (undo-tree-id931 . -1) (#("0" 0 1 (rear-nonsticky t tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33556) (undo-tree-id932 . -1) 33557 (t 25782 38354 345784 393000)) nil (25782 38371 445373 168000) 0 nil])
([nil nil ((33590 . 33591)) ((#(" " 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33590) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1)) (25782 38152 518115 502000) 0 nil])
nil
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33547) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (#("p" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33548) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (#("b" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33549) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33550) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (#("0" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33551) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) 33552 (t 25782 38371 465146 172000)) nil (25782 38560 368419 839000) 0 nil])
([nil nil ((nil rear-nonsticky nil 33620 . 33621) (nil rear-nonsticky t 33620 . 33621) (nil tag-attr t 33620 . 33621) (nil tag-name "v-container" 33620 . 33621) (nil tag-type start 33620 . 33621) (nil font-lock-face web-mode-html-attr-value-face 33620 . 33621) (nil tag-attr t 33618 . 33620) (nil tag-name "v-container" 33618 . 33620) (nil tag-type start 33618 . 33620) (nil font-lock-face web-mode-html-attr-value-face 33618 . 33620) (nil tag-attr t 33617 . 33618) (nil tag-name "v-container" 33617 . 33618) (nil tag-type start 33617 . 33618) (nil font-lock-face web-mode-html-attr-value-face 33617 . 33618) (nil tag-attr t 33616 . 33617) (nil tag-name "v-container" 33616 . 33617) (nil tag-type start 33616 . 33617) (nil font-lock-face web-mode-html-attr-value-face 33616 . 33617) (nil tag-attr t 33615 . 33616) (nil tag-name "v-container" 33615 . 33616) (nil tag-type start 33615 . 33616) (nil font-lock-face web-mode-html-attr-value-face 33615 . 33616) (nil tag-attr t 33613 . 33615) (nil tag-name "v-container" 33613 . 33615) (nil tag-type start 33613 . 33615) (nil font-lock-face web-mode-html-attr-value-face 33613 . 33615) (nil tag-attr t 33612 . 33613) (nil tag-name "v-container" 33612 . 33613) (nil tag-type start 33612 . 33613) (nil font-lock-face web-mode-html-attr-value-face 33612 . 33613) (nil tag-attr t 33611 . 33612) (nil tag-name "v-container" 33611 . 33612) (nil tag-type start 33611 . 33612) (nil font-lock-face web-mode-html-attr-value-face 33611 . 33612) (nil tag-attr t 33610 . 33611) (nil tag-name "v-container" 33610 . 33611) (nil tag-type start 33610 . 33611) (nil font-lock-face web-mode-html-attr-value-face 33610 . 33611) (nil tag-attr t 33608 . 33610) (nil tag-name "v-container" 33608 . 33610) (nil tag-type start 33608 . 33610) (nil font-lock-face web-mode-html-attr-value-face 33608 . 33610) (nil tag-attr t 33607 . 33608) (nil tag-name "v-container" 33607 . 33608) (nil tag-type start 33607 . 33608) (nil font-lock-face web-mode-html-attr-value-face 33607 . 33608) (nil tag-attr t 33606 . 33607) (nil tag-name "v-container" 33606 . 33607) (nil tag-type start 33606 . 33607) (nil font-lock-face web-mode-html-attr-value-face 33606 . 33607) (nil tag-attr t 33605 . 33606) (nil tag-name "v-container" 33605 . 33606) (nil tag-type start 33605 . 33606) (nil font-lock-face web-mode-html-attr-value-face 33605 . 33606) (nil tag-attr t 33603 . 33605) (nil tag-name "v-container" 33603 . 33605) (nil tag-type start 33603 . 33605) (nil font-lock-face web-mode-html-attr-value-face 33603 . 33605) (nil tag-attr t 33602 . 33603) (nil tag-name "v-container" 33602 . 33603) (nil tag-type start 33602 . 33603) (nil font-lock-face web-mode-html-attr-value-face 33602 . 33603) (nil tag-attr t 33601 . 33602) (nil tag-name "v-container" 33601 . 33602) (nil tag-type start 33601 . 33602) (nil font-lock-face web-mode-html-attr-value-face 33601 . 33602) (nil tag-attr t 33600 . 33601) (nil tag-name "v-container" 33600 . 33601) (nil tag-type start 33600 . 33601) (nil font-lock-face web-mode-html-attr-value-face 33600 . 33601) (nil tag-attr t 33597 . 33600) (nil tag-name "v-container" 33597 . 33600) (nil tag-type start 33597 . 33600) (nil font-lock-face web-mode-html-attr-value-face 33597 . 33600) (nil tag-attr t 33596 . 33597) (nil tag-name "v-container" 33596 . 33597) (nil tag-type start 33596 . 33597) (nil font-lock-face web-mode-html-attr-value-face 33596 . 33597) (nil tag-attr t 33595 . 33596) (nil tag-name "v-container" 33595 . 33596) (nil tag-type start 33595 . 33596) (nil font-lock-face web-mode-html-attr-value-face 33595 . 33596) (nil tag-attr t 33594 . 33595) (nil tag-name "v-container" 33594 . 33595) (nil tag-type start 33594 . 33595) (nil font-lock-face web-mode-html-attr-value-face 33594 . 33595) (nil tag-attr t 33592 . 33594) (nil tag-name "v-container" 33592 . 33594) (nil tag-type start 33592 . 33594) (nil font-lock-face web-mode-html-attr-value-face 33592 . 33594) (nil tag-attr t 33591 . 33592) (nil tag-name "v-container" 33591 . 33592) (nil tag-type start 33591 . 33592) (nil font-lock-face web-mode-html-attr-value-face 33591 . 33592) (33591 . 33621)) ((#("wrap fluid pl-0 pr-0 pb-0 ma-0" 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 1 3 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 3 4 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 4 5 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 5 6 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 6 9 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 9 10 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 10 11 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 11 12 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 12 14 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 14 15 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 15 16 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 16 17 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 17 19 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 19 20 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 20 21 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 21 22 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 22 24 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 24 25 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 25 26 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 26 27 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 27 29 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face) 29 30 (rear-nonsticky t tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33591) (undo-tree-id277 . -30) (nil tag-name "v-container" 33591 . 33592) (nil tag-name "v-container" 33592 . 33594) (nil tag-name "v-container" 33594 . 33595) (nil tag-name "v-container" 33595 . 33596) (nil tag-name "v-container" 33596 . 33597) (nil tag-name "v-container" 33597 . 33600) (nil tag-name "v-container" 33600 . 33601) (nil tag-name "v-container" 33601 . 33602) (nil tag-name "v-container" 33602 . 33603) (nil tag-name "v-container" 33603 . 33605) (nil tag-name "v-container" 33605 . 33606) (nil tag-name "v-container" 33606 . 33607) (nil tag-name "v-container" 33607 . 33608) (nil tag-name "v-container" 33608 . 33610) (nil tag-name "v-container" 33610 . 33611) (nil tag-name "v-container" 33611 . 33612) (nil tag-name "v-container" 33612 . 33613) (nil tag-name "v-container" 33613 . 33615) (nil tag-name "v-container" 33615 . 33616) (nil tag-name "v-container" 33616 . 33617) (nil tag-name "v-container" 33617 . 33618) (nil tag-name "v-container" 33618 . 33620) (nil tag-name "v-container" 33620 . 33621) (nil rear-nonsticky nil 33620 . 33621) (nil rear-nonsticky t 33620 . 33621) (t 25782 38071 186319 968000)) (25782 38071 172938 632000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33537) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (#("p" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33538) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (#("l" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33539) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33540) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (#("0" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33541) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (#(" " 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33542) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (#("p" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33543) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (#("r" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33544) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33545) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (#("0" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33546) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) 33547 (t 25782 38560 386758 267000)) nil (25782 38574 419393 703000) 0 nil])
nil
([nil nil ((33537 . 33541) (t 25782 38574 434324 871000)) nil (25782 38591 843206 320000) 0 nil])
([nil nil ((#("r" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33539) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33540) (undo-tree-id1878 . -1) 33541) nil (25782 38591 843203 941000) 0 nil])
([nil nil ((33539 . 33543)) nil (25782 38591 843197 165000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33542) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) 33543) nil (25782 38591 843191 137000) 0 nil])
([nil nil ((33542 . 33547) (t 25782 38591 857794 218000)) nil (25782 38609 372746 601000) 0 nil])
([nil nil ((#("0" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33546) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) 33547) nil (25782 38609 372740 106000) 0 nil])
([nil nil ((33546 . 33548)) nil (25782 38609 372712 450000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33547) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) 33548) nil (25782 38609 372703 157000) 0 nil])
([nil nil ((#("1" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33546) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) 33547 (t 25782 38609 385267 876000)) nil (25782 38625 622140 504000) 0 nil])
([nil nil ((33546 . 33547)) nil (25782 38625 622106 162000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33542) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (#("p" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33543) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (#("r" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33544) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33545) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (#("0" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33546) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) 33547) nil (25782 38625 622078 957000) 0 nil])
([nil nil ((#("1" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33541) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) 33542 (t 25782 38625 640786 202000)) nil (25782 38654 49557 41000) 0 nil])
([nil nil ((33541 . 33542)) nil (25782 38654 49490 702000) 0 nil])
([nil nil ((33542 . 33547) (t 25782 38654 71958 116000)) nil (25782 38879 341459 531000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33542) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (#("p" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33543) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (#("r" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33544) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33545) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (#("0" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33546) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) 33547 (t 25782 38879 357942 330000)) nil (25782 39138 546547 493000) 0 nil])
([nil nil ((33520 . 33526) (t 25782 39138 563890 179000)) nil (25782 39192 384525 781000) 0 nil])
([nil nil ((#("h" 0 1 (tag-attr-beg 0 tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33520) (undo-tree-id2988 . -1) (#("e" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33521) (undo-tree-id2989 . -1) (#("i" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33522) (undo-tree-id2990 . -1) (#("g" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33523) (undo-tree-id2991 . -1) (#("h" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33524) (undo-tree-id2992 . -1) (#("t" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33525) (undo-tree-id2993 . -1) 33526) nil (25782 39192 384522 133000) 0 nil])
([nil nil ((#("w" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33527) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (#("r" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33528) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (#("a" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33529) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (#("p" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33530) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (#(" " 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33531) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (#("f" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33532) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (#("l" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33533) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (#("u" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33534) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (#("i" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33535) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (#("d" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33536) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (#(" " 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33537) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) 33538) nil (25782 39192 384473 69000) 0 nil])
([nil nil ((33531 . 33536) (t 25782 39192 410714 299000)) nil (25783 36039 685704 361000) 0 nil])
([nil nil ((#("5" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33535) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) 33536 (t 25783 36039 706407 328000)) nil (25783 36053 236044 89000) 0 nil])
([nil nil ((33535 . 33536)) nil (25783 36053 235989 768000) 0 nil])
([nil nil ((#("2" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33535) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) 33536 (t 25783 36053 254126 49000)) nil (25783 36066 437951 878000) 0 nil])
([nil nil ((33535 . 33536)) nil (25783 36066 437909 463000) 0 nil])
([nil nil ((#("3" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33535) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) 33536 (t 25783 36066 453853 14000)) nil (25783 36615 145279 287000) 0 nil])
([nil nil ((33535 . 33536)) nil (25783 36615 145052 316000) 0 nil])
([nil nil ((33604 . 33610) (t 25783 36615 163133 350000)) nil (25783 36928 524597 120000) 0 nil])
([nil nil ((#(" " 0 1 (tag-name "v-container" tag-type start)) . -33589) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (#("p" 0 1 (tag-attr-beg 0 tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33590) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (#("r" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33591) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (#("-" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33592) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (#("0" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33593) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (#(" " 0 1 (tag-name "v-container" tag-type start)) . -33594) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (#("p" 0 1 (tag-attr-beg 0 tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33595) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (#("b" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33596) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (#("-" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33597) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (#("0" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33598) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (#(" " 0 1 (tag-name "v-container" tag-type start)) . -33599) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (#("m" 0 1 (tag-attr-beg 0 tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33600) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (#("a" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33601) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (#("-" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33602) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (#("0" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33603) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (#(" " 0 1 (tag-name "v-container" tag-type start)) . -33604) (undo-tree-id3171 . -1) (#("p" 0 1 (tag-attr-beg 0 tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33605) (undo-tree-id3172 . -1) (#("t" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33606) (undo-tree-id3173 . -1) (#("-" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33607) (undo-tree-id3174 . -1) (#("0" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33608) (undo-tree-id3175 . -1) (#(" " 0 1 (tag-name "v-container" tag-type start)) . -33609) (undo-tree-id3176 . -1) 33610) nil (25783 36928 524587 23000) 0 nil])
([nil nil ((#("p" 0 1 (tag-attr-beg 0 tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33585) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (#("l" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33586) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (#("-" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33587) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (#("0" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -33588) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) 33589) nil (25783 36928 524490 230000) 0 nil])
([nil nil ((33585 . 33594)) nil (25783 36928 524448 686000) 0 nil])
([nil nil ((#("l" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33528) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (#("-" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33529) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (#("0" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33530) (undo-tree-id3211 . -1) 33531 (t 25783 36928 541333 146000)) nil (25783 37074 386342 994000) 0 nil])
([nil nil ((33528 . 33531)) nil (25783 37074 386333 342000) 0 nil])
([nil nil ((#("9" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33530) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) 33531) nil (25783 37074 386330 918000) 0 nil])
([nil nil ((33530 . 33532)) nil (25783 37074 386304 428000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . -33531) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) 33532) nil (25783 37074 386301 804000) 0 nil])
([nil nil ((#("0" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33531) (#("-" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33531) (#("r" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33531) (#("p" 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33531) (#(" " 0 1 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face)) . 33531)) nil (25783 37074 386275 211000) 0 nil])
([nil nil ((#("          <v-divider></v-divider>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-divider") 11 20 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-divider") 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-divider") 21 22 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-divider") 22 23 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-divider") 23 32 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-divider") 32 33 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-divider")) . 27368) (undo-tree-id11 . -33) (undo-tree-id12 . -34) (undo-tree-id13 . -33) (undo-tree-id14 . -33) (undo-tree-id15 . -33) (undo-tree-id16 . -33) (undo-tree-id17 . -33) (undo-tree-id18 . -33) (undo-tree-id19 . -33) (undo-tree-id20 . -33) (undo-tree-id21 . -33) (undo-tree-id22 . -33) (undo-tree-id23 . -33) (undo-tree-id24 . -33) (undo-tree-id25 . -33) (undo-tree-id26 . -33) (undo-tree-id27 . -33) (undo-tree-id28 . -33) (undo-tree-id29 . -33) (undo-tree-id30 . -33) (undo-tree-id31 . -33) (undo-tree-id32 . -33) (undo-tree-id33 . -33) (undo-tree-id34 . -33) (undo-tree-id35 . -33) (undo-tree-id36 . -33) (undo-tree-id37 . -33) (undo-tree-id38 . -33) (undo-tree-id39 . -33) (undo-tree-id40 . -33) (undo-tree-id41 . -33) (undo-tree-id42 . -33) (undo-tree-id43 . -33) (undo-tree-id44 . -33) (undo-tree-id45 . -33) (undo-tree-id46 . -33) (undo-tree-id47 . -33) (undo-tree-id48 . -33) (undo-tree-id49 . -33) (undo-tree-id50 . -33) (undo-tree-id51 . -33) (undo-tree-id52 . -33) (undo-tree-id53 . -33) (undo-tree-id54 . -33) (undo-tree-id55 . -33) (undo-tree-id56 . -33) (undo-tree-id57 . -33) (undo-tree-id58 . -33) (undo-tree-id59 . -33) (undo-tree-id60 . -33) (undo-tree-id61 . -33) (27346 . 27368) (#("        <v-card-text>
" 8 9 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-card-text") 9 20 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-card-text") 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-card-text")) . 27312) (undo-tree-id62 . -21) (27334 . 27368) 27367 (t 25810 18327 755777 783000)) nil (25812 50817 97714 232000) 0 nil])
([nil nil ((#("          <v-divider></v-divider>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-divider") 11 20 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-divider") 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-divider") 21 22 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-divider") 22 23 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-divider") 23 32 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-divider") 32 33 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-divider")) . 27346) (undo-tree-id0 . -33) (undo-tree-id1 . -34) (undo-tree-id2 . -33) (undo-tree-id3 . -33) (undo-tree-id4 . -33) (undo-tree-id5 . -33) (undo-tree-id6 . -33) (undo-tree-id7 . -33) (undo-tree-id8 . -33) (undo-tree-id9 . -33) (27322 . 27346) (#("        </v-card-title>
" 8 9 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-card-title") 9 10 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-card-title") 10 22 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-card-title") 22 23 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-card-title")) . 27288) (undo-tree-id10 . -23) (27312 . 27346) 27345) nil (25812 50919 967459 439000) 0 nil])
([nil nil ((#("        </v-card-title>
" 8 9 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-card-title") 9 10 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-card-title") 10 22 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-card-title") 22 23 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-card-title")) . 27346) (27312 . 27346) (#("          <v-divider></v-divider>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-divider") 11 20 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-divider") 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-divider") 21 22 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-divider") 22 23 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-divider") 23 32 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-divider") 32 33 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-divider")) . 27288) (undo-tree-id1354 . -21) (27322 . 27346) 27309 (t 25812 50922 316802 83000)) nil (25812 51035 104388 144000) 0 nil] [nil nil ((27052 . 27063) (t 25812 50817 116478 984000)) (("
          " . 27052) (undo-tree-id1282 . -11) (undo-tree-id1283 . -11) (undo-tree-id1284 . -1) (undo-tree-id1285 . -11) (undo-tree-id1286 . -11) (undo-tree-id1287 . -11) (undo-tree-id1288 . -11) (undo-tree-id1289 . -11) (undo-tree-id1290 . -11) (undo-tree-id1291 . -11) (undo-tree-id1292 . -11) (undo-tree-id1293 . -11) (undo-tree-id1294 . -11) (undo-tree-id1295 . -11) (undo-tree-id1296 . -11) (undo-tree-id1297 . -11) (undo-tree-id1298 . -11) (undo-tree-id1299 . -11) (undo-tree-id1300 . -1) (undo-tree-id1301 . -11) (undo-tree-id1302 . -11) (undo-tree-id1303 . -11) (undo-tree-id1304 . -11) (undo-tree-id1305 . -11) (undo-tree-id1306 . -11) (undo-tree-id1307 . -11) (undo-tree-id1308 . -11) (undo-tree-id1309 . -11) (undo-tree-id1310 . -11) (undo-tree-id1311 . -11)) (25812 50919 533881 535000) 0 nil])
([nil nil ((#("        <v-card-text>
" 8 9 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-card-text") 9 20 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-card-text") 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-card-text")) . 27368) (undo-tree-id1351 . -22) (undo-tree-id1352 . -21) (27334 . 27368) (#("          <v-divider></v-divider>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-divider") 11 20 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-divider") 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-divider") 21 22 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-divider") 22 23 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-divider") 23 32 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-divider") 32 33 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-divider")) . 27312) (undo-tree-id1353 . -21) (27346 . 27368) 27333) nil (25812 51035 104384 633000) 0 nil])
([nil nil ((27063 . 27078)) ((#("<v-row></v-row>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-row") 1 6 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-row") 6 7 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-row") 7 8 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 8 9 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 9 14 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 14 15 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27063) (undo-tree-id1265 . -7) (undo-tree-id1266 . -7) (undo-tree-id1267 . -9) (undo-tree-id1268 . -9) (undo-tree-id1269 . -9) (undo-tree-id1270 . -9) (undo-tree-id1271 . -9) (undo-tree-id1272 . -9) (undo-tree-id1273 . -9) (undo-tree-id1274 . -9) (undo-tree-id1275 . -7) (undo-tree-id1276 . -7) (undo-tree-id1277 . -7) (undo-tree-id1278 . -7) (undo-tree-id1279 . -7) (undo-tree-id1280 . -7) (undo-tree-id1281 . -7)) (25812 50919 335824 890000) 0 nil])
([nil nil ((27370 . 27380) ("          " . 27369) (undo-tree-id1349 . -10) (27369 . 27380) ("          " . 27368) (undo-tree-id1350 . -10) (27367 . 27379)) nil (25812 51035 104379 178000) 0 nil])
([nil nil ((27071 . 27083) (27072 . 27082) (#("            " 0 12 (face whitespace-trailing)) . 27071) (27071 . 27083) (27071 . 27072) ("          " . 27071) (27070 . 27081)) (("
          " . 27070) (undo-tree-id1263 . -1) (27071 . 27081) ("
" . 27071) (undo-tree-id1264 . -1) (#("            " 0 12 (face whitespace-trailing)) . 27071) (27071 . 27083) ("          " . 27072) (#("            " 0 12 (face whitespace-trailing)) . 27071)) (25812 50919 173144 373000) 0 nil])
([nil nil ((27368 . 27378)) nil (25812 51035 104374 260000) 0 nil])
([nil nil ((#("          {{$t('AnalysisNetwork.saveFilter')}}
" 10 11 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 11 12 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 12 13 (block-side t) 13 14 (face web-mode-variable-name-face block-side t) 14 15 (face (rainbow-delimiters-depth-3-face) block-side t) 15 16 (block-side t) 16 17 (face web-mode-variable-name-face block-side t) 17 18 (face web-mode-variable-name-face block-side t) 18 19 (face web-mode-variable-name-face block-side t) 19 20 (face web-mode-variable-name-face block-side t) 20 21 (face web-mode-variable-name-face block-side t) 21 22 (face web-mode-variable-name-face block-side t) 22 23 (face web-mode-variable-name-face block-side t) 23 24 (face web-mode-variable-name-face block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 28 (face web-mode-variable-name-face block-side t) 28 29 (face web-mode-variable-name-face block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (face web-mode-variable-name-face block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (block-side t) 43 44 (face (rainbow-delimiters-depth-3-face) block-side t) 44 45 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-side t) 45 46 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 27150) (27131 . 27150) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27084) (undo-tree-id82 . -12) (27103 . 27150) 27096) ((#("          {{$t('AnalysisNetwork.saveFilter')}}
" 10 11 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 11 12 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 12 13 (block-side t) 13 14 (face web-mode-variable-name-face block-side t) 14 15 (face (rainbow-delimiters-depth-3-face) block-side t) 15 16 (block-side t) 16 17 (face web-mode-variable-name-face block-side t) 17 18 (face web-mode-variable-name-face block-side t) 18 19 (face web-mode-variable-name-face block-side t) 19 20 (face web-mode-variable-name-face block-side t) 20 21 (face web-mode-variable-name-face block-side t) 21 22 (face web-mode-variable-name-face block-side t) 22 23 (face web-mode-variable-name-face block-side t) 23 24 (face web-mode-variable-name-face block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 28 (face web-mode-variable-name-face block-side t) 28 29 (face web-mode-variable-name-face block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (face web-mode-variable-name-face block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (block-side t) 43 44 (face (rainbow-delimiters-depth-3-face) block-side t) 44 45 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-side t) 45 46 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 27103) (undo-tree-id1180 . -47) (undo-tree-id1181 . -47) (undo-tree-id1182 . -47) (undo-tree-id1183 . -47) (undo-tree-id1184 . -47) (undo-tree-id1185 . -47) (undo-tree-id1186 . -47) (undo-tree-id1187 . -47) (undo-tree-id1188 . -47) (undo-tree-id1189 . -47) (undo-tree-id1190 . -47) (undo-tree-id1191 . -47) (undo-tree-id1192 . -47) (undo-tree-id1193 . -47) (undo-tree-id1194 . -47) (undo-tree-id1195 . -47) (undo-tree-id1196 . -47) (undo-tree-id1197 . -47) (undo-tree-id1198 . -47) (undo-tree-id1199 . -47) (undo-tree-id1200 . -47) (undo-tree-id1201 . -47) (undo-tree-id1202 . -47) (undo-tree-id1203 . -47) (undo-tree-id1204 . -47) (undo-tree-id1205 . -47) (undo-tree-id1206 . -47) (undo-tree-id1207 . -47) (undo-tree-id1208 . -47) (undo-tree-id1209 . -47) (undo-tree-id1210 . -47) (undo-tree-id1211 . -47) (undo-tree-id1212 . -47) (undo-tree-id1213 . -47) (undo-tree-id1214 . -47) (undo-tree-id1215 . -47) (undo-tree-id1216 . -47) (undo-tree-id1217 . -47) (undo-tree-id1218 . -47) (undo-tree-id1219 . -47) (undo-tree-id1220 . -47) (undo-tree-id1221 . -47) (27084 . 27103) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27131) (undo-tree-id1222 . -19) (undo-tree-id1223 . -19) (undo-tree-id1224 . -12) (undo-tree-id1225 . -19) (undo-tree-id1226 . -19) (undo-tree-id1227 . -19) (undo-tree-id1228 . -19) (undo-tree-id1229 . -19) (undo-tree-id1230 . -19) (undo-tree-id1231 . -19) (undo-tree-id1232 . -19) (undo-tree-id1233 . -19) (undo-tree-id1234 . -19) (undo-tree-id1235 . -19) (undo-tree-id1236 . -19) (undo-tree-id1237 . -19) (undo-tree-id1238 . -19) (undo-tree-id1239 . -19) (undo-tree-id1240 . -19) (undo-tree-id1241 . -19) (undo-tree-id1242 . -19) (undo-tree-id1243 . -19) (undo-tree-id1244 . -19) (undo-tree-id1245 . -19) (undo-tree-id1246 . -19) (undo-tree-id1247 . -19) (undo-tree-id1248 . -19) (undo-tree-id1249 . -19) (undo-tree-id1250 . -19) (undo-tree-id1251 . -19) (undo-tree-id1252 . -19) (undo-tree-id1253 . -19) (undo-tree-id1254 . -19) (undo-tree-id1255 . -12) (undo-tree-id1256 . -12) (undo-tree-id1257 . -12) (undo-tree-id1258 . -12) (undo-tree-id1259 . -12) (undo-tree-id1260 . -12) (undo-tree-id1261 . -12) (undo-tree-id1262 . -12) (27150 . 27197)) (25812 50919 24271 403000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27830 . 27831) (nil tag-name "v-treeview" 27830 . 27831) (nil tag-type start 27830 . 27831) (nil tag-end t 27830 . 27831) (nil font-lock-face web-mode-html-tag-bracket-face 27830 . 27831) (nil tag-name "v-treeview" 27815 . 27830) (nil tag-type start 27815 . 27830) (nil tag-attr t 27814 . 27815) (nil tag-attr-end 5 27814 . 27815) (nil tag-name "v-treeview" 27814 . 27815) (nil tag-type start 27814 . 27815) (nil font-lock-face web-mode-html-attr-value-face 27814 . 27815) (nil tag-attr t 27799 . 27814) (nil tag-name "v-treeview" 27799 . 27814) (nil tag-type start 27799 . 27814) (nil font-lock-face web-mode-html-attr-value-face 27799 . 27814) (nil tag-attr t 27798 . 27799) (nil tag-name "v-treeview" 27798 . 27799) (nil tag-type start 27798 . 27799) (nil font-lock-face web-mode-html-attr-equal-face 27798 . 27799) (nil tag-attr t 27794 . 27798) (nil tag-name "v-treeview" 27794 . 27798) (nil tag-type start 27794 . 27798) (nil font-lock-face web-mode-html-attr-name-face 27794 . 27798) (nil tag-attr-beg 0 27793 . 27794) (nil tag-attr t 27793 . 27794) (nil tag-name "v-treeview" 27793 . 27794) (nil tag-type start 27793 . 27794) (nil font-lock-face web-mode-html-attr-name-face 27793 . 27794) (nil tag-name "v-treeview" 27776 . 27793) (nil tag-type start 27776 . 27793) (nil tag-attr t 27775 . 27776) (nil tag-attr-end 0 27775 . 27776) (nil tag-name "v-treeview" 27775 . 27776) (nil tag-type start 27775 . 27776) (nil font-lock-face web-mode-html-attr-name-face 27775 . 27776) (nil tag-attr t 27772 . 27775) (nil tag-name "v-treeview" 27772 . 27775) (nil tag-type start 27772 . 27775) (nil font-lock-face web-mode-html-attr-name-face 27772 . 27775) (nil tag-attr-beg 0 27771 . 27772) (nil tag-attr t 27771 . 27772) (nil tag-name "v-treeview" 27771 . 27772) (nil tag-type start 27771 . 27772) (nil font-lock-face web-mode-html-attr-name-face 27771 . 27772) (nil tag-name "v-treeview" 27754 . 27771) (nil tag-type start 27754 . 27771) (nil tag-attr t 27753 . 27754) (nil tag-attr-end 0 27753 . 27754) (nil tag-name "v-treeview" 27753 . 27754) (nil tag-type start 27753 . 27754) (nil font-lock-face web-mode-html-attr-name-face 27753 . 27754) (nil tag-attr t 27742 . 27753) (nil tag-name "v-treeview" 27742 . 27753) (nil tag-type start 27742 . 27753) (nil font-lock-face web-mode-html-attr-name-face 27742 . 27753) (nil tag-attr-beg 0 27741 . 27742) (nil tag-attr t 27741 . 27742) (nil tag-name "v-treeview" 27741 . 27742) (nil tag-type start 27741 . 27742) (nil font-lock-face web-mode-html-attr-name-face 27741 . 27742) (nil tag-name "v-treeview" 27724 . 27741) (nil tag-type start 27724 . 27741) (nil tag-attr t 27723 . 27724) (nil tag-attr-end 0 27723 . 27724) (nil tag-name "v-treeview" 27723 . 27724) (nil tag-type start 27723 . 27724) (nil font-lock-face web-mode-html-attr-name-face 27723 . 27724) (nil tag-attr t 27716 . 27723) (nil tag-name "v-treeview" 27716 . 27723) (nil tag-type start 27716 . 27723) (nil font-lock-face web-mode-html-attr-name-face 27716 . 27723) (nil tag-attr-beg 0 27715 . 27716) (nil tag-attr t 27715 . 27716) (nil tag-name "v-treeview" 27715 . 27716) (nil tag-type start 27715 . 27716) (nil font-lock-face web-mode-html-attr-name-face 27715 . 27716) (nil tag-name "v-treeview" 27698 . 27715) (nil tag-type start 27698 . 27715) (nil tag-attr t 27697 . 27698) (nil tag-attr-end 0 27697 . 27698) (nil tag-name "v-treeview" 27697 . 27698) (nil tag-type start 27697 . 27698) (nil font-lock-face web-mode-html-attr-name-face 27697 . 27698) (nil tag-attr t 27688 . 27697) (nil tag-name "v-treeview" 27688 . 27697) (nil tag-type start 27688 . 27697) (nil font-lock-face web-mode-html-attr-name-face 27688 . 27697) (nil tag-attr-beg 0 27687 . 27688) (nil tag-attr t 27687 . 27688) (nil tag-name "v-treeview" 27687 . 27688) (nil tag-type start 27687 . 27688) (nil font-lock-face web-mode-html-attr-name-face 27687 . 27688) (nil tag-name "v-treeview" 27670 . 27687) (nil tag-type start 27670 . 27687) (nil tag-attr t 27669 . 27670) (nil tag-attr-end 0 27669 . 27670) (nil tag-name "v-treeview" 27669 . 27670) (nil tag-type start 27669 . 27670) (nil font-lock-face web-mode-html-attr-name-face 27669 . 27670) (nil tag-attr t 27658 . 27669) (nil tag-name "v-treeview" 27658 . 27669) (nil tag-type start 27658 . 27669) (nil font-lock-face web-mode-html-attr-name-face 27658 . 27669) (nil tag-attr-beg 0 27657 . 27658) (nil tag-attr t 27657 . 27658) (nil tag-name "v-treeview" 27657 . 27658) (nil tag-type start 27657 . 27658) (nil font-lock-face web-mode-html-attr-name-face 27657 . 27658) (nil tag-name "v-treeview" 27640 . 27657) (nil tag-type start 27640 . 27657) (nil tag-attr t 27639 . 27640) (nil tag-attr-end 14 27639 . 27640) (nil tag-name "v-treeview" 27639 . 27640) (nil tag-type start 27639 . 27640) (nil font-lock-face web-mode-html-attr-value-face 27639 . 27640) (nil tag-attr t 27634 . 27639) (nil tag-name "v-treeview" 27634 . 27639) (nil tag-type start 27634 . 27639) (nil font-lock-face web-mode-html-attr-value-face 27634 . 27639) (nil tag-attr t 27633 . 27634) (nil tag-name "v-treeview" 27633 . 27634) (nil tag-type start 27633 . 27634) (nil font-lock-face web-mode-html-attr-equal-face 27633 . 27634) (nil tag-attr t 27620 . 27633) (nil tag-name "v-treeview" 27620 . 27633) (nil tag-type start 27620 . 27633) (nil font-lock-face web-mode-html-attr-name-face 27620 . 27633) (nil tag-attr-beg 0 27619 . 27620) (nil tag-attr t 27619 . 27620) (nil tag-name "v-treeview" 27619 . 27620) (nil tag-type start 27619 . 27620) (nil font-lock-face web-mode-html-attr-name-face 27619 . 27620) (nil tag-name "v-treeview" 27602 . 27619) (nil tag-type start 27602 . 27619) (nil block-side t 27601 . 27602) (nil block-end t 27601 . 27602) (nil block-token delimiter-end 27601 . 27602) (nil tag-attr t 27601 . 27602) (nil tag-attr-end 14 27601 . 27602) (nil tag-name "v-treeview" 27601 . 27602) (nil tag-type start 27601 . 27602) (nil font-lock-face web-mode-block-delimiter-face 27601 . 27602) (nil block-side t 27600 . 27601) (nil tag-attr t 27600 . 27601) (nil tag-name "v-treeview" 27600 . 27601) (nil tag-type start 27600 . 27601) (nil face web-mode-variable-name-face 27600 . 27601) (nil block-side t 27599 . 27600) (nil tag-attr t 27599 . 27600) (nil tag-name "v-treeview" 27599 . 27600) (nil tag-type start 27599 . 27600) (nil face web-mode-variable-name-face 27599 . 27600) (nil block-side t 27598 . 27599) (nil tag-attr t 27598 . 27599) (nil tag-name "v-treeview" 27598 . 27599) (nil tag-type start 27598 . 27599) (nil face web-mode-variable-name-face 27598 . 27599) (nil block-side t 27597 . 27598) (nil tag-attr t 27597 . 27598) (nil tag-name "v-treeview" 27597 . 27598) (nil tag-type start 27597 . 27598) (nil face web-mode-variable-name-face 27597 . 27598) (nil block-side t 27596 . 27597) (nil tag-attr t 27596 . 27597) (nil tag-name "v-treeview" 27596 . 27597) (nil tag-type start 27596 . 27597) (nil face web-mode-variable-name-face 27596 . 27597) (nil block-side t 27595 . 27596) (nil tag-attr t 27595 . 27596) (nil tag-name "v-treeview" 27595 . 27596) (nil tag-type start 27595 . 27596) (nil face web-mode-variable-name-face 27595 . 27596) (nil block-side t 27594 . 27595) (nil tag-attr t 27594 . 27595) (nil tag-name "v-treeview" 27594 . 27595) (nil tag-type start 27594 . 27595) (nil face web-mode-variable-name-face 27594 . 27595) (nil block-side t 27593 . 27594) (nil tag-attr t 27593 . 27594) (nil tag-name "v-treeview" 27593 . 27594) (nil tag-type start 27593 . 27594) (nil face web-mode-variable-name-face 27593 . 27594) (nil block-side t 27592 . 27593) (nil tag-attr t 27592 . 27593) (nil tag-name "v-treeview" 27592 . 27593) (nil tag-type start 27592 . 27593) (nil face web-mode-variable-name-face 27592 . 27593) (nil block-side t 27591 . 27592) (nil tag-attr t 27591 . 27592) (nil tag-name "v-treeview" 27591 . 27592) (nil tag-type start 27591 . 27592) (nil face web-mode-variable-name-face 27591 . 27592) (nil block-side t 27590 . 27591) (nil tag-attr t 27590 . 27591) (nil tag-name "v-treeview" 27590 . 27591) (nil tag-type start 27590 . 27591) (nil face web-mode-variable-name-face 27590 . 27591) (nil block-side t 27589 . 27590) (nil tag-attr t 27589 . 27590) (nil tag-name "v-treeview" 27589 . 27590) (nil tag-type start 27589 . 27590) (nil face web-mode-variable-name-face 27589 . 27590) (nil block-side t 27588 . 27589) (nil tag-attr t 27588 . 27589) (nil tag-name "v-treeview" 27588 . 27589) (nil tag-type start 27588 . 27589) (nil face web-mode-variable-name-face 27588 . 27589) (nil block-side t 27587 . 27588) (nil tag-attr t 27587 . 27588) (nil tag-name "v-treeview" 27587 . 27588) (nil tag-type start 27587 . 27588) (nil face web-mode-variable-name-face 27587 . 27588) (nil block-side t 27586 . 27587) (nil tag-attr t 27586 . 27587) (nil tag-name "v-treeview" 27586 . 27587) (nil tag-type start 27586 . 27587) (nil face web-mode-variable-name-face 27586 . 27587) (nil block-side t 27585 . 27586) (nil tag-attr t 27585 . 27586) (nil tag-name "v-treeview" 27585 . 27586) (nil tag-type start 27585 . 27586) (nil face web-mode-variable-name-face 27585 . 27586) (nil block-side t 27584 . 27585) (nil tag-attr t 27584 . 27585) (nil tag-name "v-treeview" 27584 . 27585) (nil tag-type start 27584 . 27585) (nil face web-mode-variable-name-face 27584 . 27585) (nil block-side t 27583 . 27584) (nil tag-attr t 27583 . 27584) (nil tag-name "v-treeview" 27583 . 27584) (nil tag-type start 27583 . 27584) (nil face web-mode-variable-name-face 27583 . 27584) (nil block-side t 27582 . 27583) (nil tag-attr t 27582 . 27583) (nil tag-name "v-treeview" 27582 . 27583) (nil tag-type start 27582 . 27583) (nil face web-mode-variable-name-face 27582 . 27583) (nil block-side t 27581 . 27582) (nil tag-attr t 27581 . 27582) (nil tag-name "v-treeview" 27581 . 27582) (nil tag-type start 27581 . 27582) (nil face web-mode-variable-name-face 27581 . 27582) (nil block-side t 27580 . 27581) (nil tag-attr t 27580 . 27581) (nil tag-name "v-treeview" 27580 . 27581) (nil tag-type start 27580 . 27581) (nil face web-mode-variable-name-face 27580 . 27581) (nil block-side t 27579 . 27580) (nil tag-attr t 27579 . 27580) (nil tag-name "v-treeview" 27579 . 27580) (nil tag-type start 27579 . 27580) (nil face web-mode-variable-name-face 27579 . 27580) (nil block-side t 27578 . 27579) (nil tag-attr t 27578 . 27579) (nil tag-name "v-treeview" 27578 . 27579) (nil tag-type start 27578 . 27579) (nil face web-mode-variable-name-face 27578 . 27579) (nil block-side t 27577 . 27578) (nil block-token delimiter-beg 27577 . 27578) (nil tag-attr t 27577 . 27578) (nil tag-name "v-treeview" 27577 . 27578) (nil tag-type start 27577 . 27578) (nil font-lock-face web-mode-block-delimiter-face 27577 . 27578) (nil block-side t 27576 . 27577) (nil block-token delimiter-beg 27576 . 27577) (nil tag-attr t 27576 . 27577) (nil tag-name "v-treeview" 27576 . 27577) (nil tag-type start 27576 . 27577) (nil font-lock-face web-mode-block-delimiter-face 27576 . 27577) (nil block-side t 27575 . 27576) (nil block-token delimiter-beg 27575 . 27576) (nil tag-attr t 27575 . 27576) (nil tag-name "v-treeview" 27575 . 27576) (nil tag-type start 27575 . 27576) (nil font-lock-face web-mode-block-delimiter-face 27575 . 27576) (nil block-side t 27574 . 27575) (nil block-token delimiter-beg 27574 . 27575) (nil tag-attr t 27574 . 27575) (nil tag-name "v-treeview" 27574 . 27575) (nil tag-type start 27574 . 27575) (nil font-lock-face web-mode-block-delimiter-face 27574 . 27575) (nil block-side t 27573 . 27574) (nil block-token delimiter-beg 27573 . 27574) (nil tag-attr t 27573 . 27574) (nil tag-name "v-treeview" 27573 . 27574) (nil tag-type start 27573 . 27574) (nil font-lock-face web-mode-block-delimiter-face 27573 . 27574) (nil block-side t 27572 . 27573) (nil block-token delimiter-beg 27572 . 27573) (nil tag-attr t 27572 . 27573) (nil tag-name "v-treeview" 27572 . 27573) (nil tag-type start 27572 . 27573) (nil font-lock-face web-mode-block-delimiter-face 27572 . 27573) (nil block-side t 27571 . 27572) (nil block-token delimiter-beg 27571 . 27572) (nil tag-attr t 27571 . 27572) (nil tag-name "v-treeview" 27571 . 27572) (nil tag-type start 27571 . 27572) (nil font-lock-face web-mode-block-delimiter-face 27571 . 27572) (nil block-side t 27570 . 27571) (nil block-token delimiter-beg 27570 . 27571) (nil tag-attr t 27570 . 27571) (nil tag-name "v-treeview" 27570 . 27571) (nil tag-type start 27570 . 27571) (nil font-lock-face web-mode-block-delimiter-face 27570 . 27571) (nil block-beg 0 27569 . 27570) (nil block-controls 0 27569 . 27570) (nil block-side t 27569 . 27570) (nil block-token delimiter-beg 27569 . 27570) (nil tag-attr t 27569 . 27570) (nil tag-name "v-treeview" 27569 . 27570) (nil tag-type start 27569 . 27570) (nil font-lock-face web-mode-block-delimiter-face 27569 . 27570) (nil tag-attr t 27563 . 27569) (nil tag-name "v-treeview" 27563 . 27569) (nil tag-type start 27563 . 27569) (nil font-lock-face web-mode-html-attr-engine-face 27563 . 27569) (nil tag-attr-beg 2 27562 . 27563) (nil tag-attr t 27562 . 27563) (nil tag-name "v-treeview" 27562 . 27563) (nil tag-type start 27562 . 27563) (nil font-lock-face web-mode-html-attr-engine-face 27562 . 27563) (nil tag-name "v-treeview" 27545 . 27562) (nil tag-type start 27545 . 27562) (nil block-side t 27544 . 27545) (nil block-end t 27544 . 27545) (nil block-token delimiter-end 27544 . 27545) (nil tag-attr t 27544 . 27545) (nil tag-attr-end 7 27544 . 27545) (nil tag-name "v-treeview" 27544 . 27545) (nil tag-type start 27544 . 27545) (nil font-lock-face web-mode-block-delimiter-face 27544 . 27545) (nil block-side t 27543 . 27544) (nil tag-attr t 27543 . 27544) (nil tag-name "v-treeview" 27543 . 27544) (nil tag-type start 27543 . 27544) (nil face web-mode-variable-name-face 27543 . 27544) (nil block-side t 27542 . 27543) (nil tag-attr t 27542 . 27543) (nil tag-name "v-treeview" 27542 . 27543) (nil tag-type start 27542 . 27543) (nil face web-mode-variable-name-face 27542 . 27543) (nil block-side t 27541 . 27542) (nil tag-attr t 27541 . 27542) (nil tag-name "v-treeview" 27541 . 27542) (nil tag-type start 27541 . 27542) (nil face web-mode-variable-name-face 27541 . 27542) (nil block-side t 27540 . 27541) (nil tag-attr t 27540 . 27541) (nil tag-name "v-treeview" 27540 . 27541) (nil tag-type start 27540 . 27541) (nil face web-mode-variable-name-face 27540 . 27541) (nil block-side t 27539 . 27540) (nil tag-attr t 27539 . 27540) (nil tag-name "v-treeview" 27539 . 27540) (nil tag-type start 27539 . 27540) (nil face web-mode-variable-name-face 27539 . 27540) (nil block-side t 27538 . 27539) (nil tag-attr t 27538 . 27539) (nil tag-name "v-treeview" 27538 . 27539) (nil tag-type start 27538 . 27539) (nil face web-mode-variable-name-face 27538 . 27539) (nil block-side t 27537 . 27538) (nil tag-attr t 27537 . 27538) (nil tag-name "v-treeview" 27537 . 27538) (nil tag-type start 27537 . 27538) (nil face web-mode-variable-name-face 27537 . 27538) (nil block-side t 27536 . 27537) (nil tag-attr t 27536 . 27537) (nil tag-name "v-treeview" 27536 . 27537) (nil tag-type start 27536 . 27537) (nil face web-mode-variable-name-face 27536 . 27537) (nil block-side t 27535 . 27536) (nil tag-attr t 27535 . 27536) (nil tag-name "v-treeview" 27535 . 27536) (nil tag-type start 27535 . 27536) (nil face web-mode-variable-name-face 27535 . 27536) (nil block-side t 27534 . 27535) (nil tag-attr t 27534 . 27535) (nil tag-name "v-treeview" 27534 . 27535) (nil tag-type start 27534 . 27535) (nil face web-mode-variable-name-face 27534 . 27535) (nil block-side t 27533 . 27534) (nil tag-attr t 27533 . 27534) (nil tag-name "v-treeview" 27533 . 27534) (nil tag-type start 27533 . 27534) (nil face web-mode-variable-name-face 27533 . 27534) (nil block-side t 27532 . 27533) (nil tag-attr t 27532 . 27533) (nil tag-name "v-treeview" 27532 . 27533) (nil tag-type start 27532 . 27533) (nil face web-mode-variable-name-face 27532 . 27533) (nil block-side t 27531 . 27532) (nil tag-attr t 27531 . 27532) (nil tag-name "v-treeview" 27531 . 27532) (nil tag-type start 27531 . 27532) (nil face web-mode-variable-name-face 27531 . 27532) (nil block-side t 27530 . 27531) (nil tag-attr t 27530 . 27531) (nil tag-name "v-treeview" 27530 . 27531) (nil tag-type start 27530 . 27531) (nil face web-mode-variable-name-face 27530 . 27531) (nil block-side t 27529 . 27530) (nil tag-attr t 27529 . 27530) (nil tag-name "v-treeview" 27529 . 27530) (nil tag-type start 27529 . 27530) (nil face web-mode-variable-name-face 27529 . 27530) (nil block-side t 27528 . 27529) (nil tag-attr t 27528 . 27529) (nil tag-name "v-treeview" 27528 . 27529) (nil tag-type start 27528 . 27529) (nil face web-mode-variable-name-face 27528 . 27529) (nil block-side t 27527 . 27528) (nil tag-attr t 27527 . 27528) (nil tag-name "v-treeview" 27527 . 27528) (nil tag-type start 27527 . 27528) (nil face web-mode-variable-name-face 27527 . 27528) (nil block-side t 27526 . 27527) (nil tag-attr t 27526 . 27527) (nil tag-name "v-treeview" 27526 . 27527) (nil tag-type start 27526 . 27527) (nil face web-mode-variable-name-face 27526 . 27527) (nil block-side t 27525 . 27526) (nil tag-attr t 27525 . 27526) (nil tag-name "v-treeview" 27525 . 27526) (nil tag-type start 27525 . 27526) (nil face web-mode-variable-name-face 27525 . 27526) (nil block-side t 27524 . 27525) (nil tag-attr t 27524 . 27525) (nil tag-name "v-treeview" 27524 . 27525) (nil tag-type start 27524 . 27525) (nil face web-mode-variable-name-face 27524 . 27525) (nil block-side t 27523 . 27524) (nil tag-attr t 27523 . 27524) (nil tag-name "v-treeview" 27523 . 27524) (nil tag-type start 27523 . 27524) (nil face web-mode-variable-name-face 27523 . 27524) (nil block-side t 27522 . 27523) (nil block-token delimiter-beg 27522 . 27523) (nil tag-attr t 27522 . 27523) (nil tag-name "v-treeview" 27522 . 27523) (nil tag-type start 27522 . 27523) (nil font-lock-face web-mode-block-delimiter-face 27522 . 27523) (nil block-side t 27521 . 27522) (nil block-token delimiter-beg 27521 . 27522) (nil tag-attr t 27521 . 27522) (nil tag-name "v-treeview" 27521 . 27522) (nil tag-type start 27521 . 27522) (nil font-lock-face web-mode-block-delimiter-face 27521 . 27522) (nil block-side t 27520 . 27521) (nil block-token delimiter-beg 27520 . 27521) (nil tag-attr t 27520 . 27521) (nil tag-name "v-treeview" 27520 . 27521) (nil tag-type start 27520 . 27521) (nil font-lock-face web-mode-block-delimiter-face 27520 . 27521) (nil block-side t 27519 . 27520) (nil block-token delimiter-beg 27519 . 27520) (nil tag-attr t 27519 . 27520) (nil tag-name "v-treeview" 27519 . 27520) (nil tag-type start 27519 . 27520) (nil font-lock-face web-mode-block-delimiter-face 27519 . 27520) (nil block-side t 27518 . 27519) (nil block-token delimiter-beg 27518 . 27519) (nil tag-attr t 27518 . 27519) (nil tag-name "v-treeview" 27518 . 27519) (nil tag-type start 27518 . 27519) (nil font-lock-face web-mode-block-delimiter-face 27518 . 27519) (nil block-side t 27517 . 27518) (nil block-token delimiter-beg 27517 . 27518) (nil tag-attr t 27517 . 27518) (nil tag-name "v-treeview" 27517 . 27518) (nil tag-type start 27517 . 27518) (nil font-lock-face web-mode-block-delimiter-face 27517 . 27518) (nil block-side t 27516 . 27517) (nil block-token delimiter-beg 27516 . 27517) (nil tag-attr t 27516 . 27517) (nil tag-name "v-treeview" 27516 . 27517) (nil tag-type start 27516 . 27517) (nil font-lock-face web-mode-block-delimiter-face 27516 . 27517) (nil block-side t 27515 . 27516) (nil block-token delimiter-beg 27515 . 27516) (nil tag-attr t 27515 . 27516) (nil tag-name "v-treeview" 27515 . 27516) (nil tag-type start 27515 . 27516) (nil font-lock-face web-mode-block-delimiter-face 27515 . 27516) (nil block-beg 0 27514 . 27515) (nil block-controls 0 27514 . 27515) (nil block-side t 27514 . 27515) (nil block-token delimiter-beg 27514 . 27515) (nil tag-attr-beg 2 27514 . 27515) (nil tag-attr t 27514 . 27515) (nil tag-name "v-treeview" 27514 . 27515) (nil tag-type start 27514 . 27515) (nil font-lock-face web-mode-block-delimiter-face 27514 . 27515) (nil tag-name "v-treeview" 27497 . 27514) (nil tag-type start 27497 . 27514) (nil block-side t 27496 . 27497) (nil block-end t 27496 . 27497) (nil block-token delimiter-end 27496 . 27497) (nil tag-attr t 27496 . 27497) (nil tag-attr-end 7 27496 . 27497) (nil tag-name "v-treeview" 27496 . 27497) (nil tag-type start 27496 . 27497) (nil font-lock-face web-mode-block-delimiter-face 27496 . 27497) (nil block-side t 27495 . 27496) (nil tag-attr t 27495 . 27496) (nil tag-name "v-treeview" 27495 . 27496) (nil tag-type start 27495 . 27496) (nil face web-mode-variable-name-face 27495 . 27496) (nil block-side t 27494 . 27495) (nil tag-attr t 27494 . 27495) (nil tag-name "v-treeview" 27494 . 27495) (nil tag-type start 27494 . 27495) (nil face web-mode-variable-name-face 27494 . 27495) (nil block-side t 27493 . 27494) (nil tag-attr t 27493 . 27494) (nil tag-name "v-treeview" 27493 . 27494) (nil tag-type start 27493 . 27494) (nil face web-mode-variable-name-face 27493 . 27494) (nil block-side t 27492 . 27493) (nil tag-attr t 27492 . 27493) (nil tag-name "v-treeview" 27492 . 27493) (nil tag-type start 27492 . 27493) (nil face web-mode-variable-name-face 27492 . 27493) (nil block-side t 27491 . 27492) (nil tag-attr t 27491 . 27492) (nil tag-name "v-treeview" 27491 . 27492) (nil tag-type start 27491 . 27492) (nil face web-mode-variable-name-face 27491 . 27492) (nil block-side t 27490 . 27491) (nil tag-attr t 27490 . 27491) (nil tag-name "v-treeview" 27490 . 27491) (nil tag-type start 27490 . 27491) (nil face web-mode-variable-name-face 27490 . 27491) (nil block-side t 27489 . 27490) (nil tag-attr t 27489 . 27490) (nil tag-name "v-treeview" 27489 . 27490) (nil tag-type start 27489 . 27490) (nil face web-mode-variable-name-face 27489 . 27490) (nil block-side t 27488 . 27489) (nil tag-attr t 27488 . 27489) (nil tag-name "v-treeview" 27488 . 27489) (nil tag-type start 27488 . 27489) (nil face web-mode-variable-name-face 27488 . 27489) (nil block-side t 27487 . 27488) (nil tag-attr t 27487 . 27488) (nil tag-name "v-treeview" 27487 . 27488) (nil tag-type start 27487 . 27488) (nil face web-mode-variable-name-face 27487 . 27488) (nil block-side t 27486 . 27487) (nil tag-attr t 27486 . 27487) (nil tag-name "v-treeview" 27486 . 27487) (nil tag-type start 27486 . 27487) (nil face web-mode-variable-name-face 27486 . 27487) (nil block-side t 27485 . 27486) (nil tag-attr t 27485 . 27486) (nil tag-name "v-treeview" 27485 . 27486) (nil tag-type start 27485 . 27486) (nil face web-mode-variable-name-face 27485 . 27486) (nil block-side t 27484 . 27485) (nil tag-attr t 27484 . 27485) (nil tag-name "v-treeview" 27484 . 27485) (nil tag-type start 27484 . 27485) (nil face web-mode-variable-name-face 27484 . 27485) (nil block-side t 27483 . 27484) (nil tag-attr t 27483 . 27484) (nil tag-name "v-treeview" 27483 . 27484) (nil tag-type start 27483 . 27484) (nil face web-mode-variable-name-face 27483 . 27484) (nil block-side t 27482 . 27483) (nil tag-attr t 27482 . 27483) (nil tag-name "v-treeview" 27482 . 27483) (nil tag-type start 27482 . 27483) (nil face web-mode-variable-name-face 27482 . 27483) (nil block-side t 27481 . 27482) (nil tag-attr t 27481 . 27482) (nil tag-name "v-treeview" 27481 . 27482) (nil tag-type start 27481 . 27482) (nil face web-mode-variable-name-face 27481 . 27482) (nil block-side t 27480 . 27481) (nil tag-attr t 27480 . 27481) (nil tag-name "v-treeview" 27480 . 27481) (nil tag-type start 27480 . 27481) (nil face web-mode-variable-name-face 27480 . 27481) (nil block-side t 27479 . 27480) (nil tag-attr t 27479 . 27480) (nil tag-name "v-treeview" 27479 . 27480) (nil tag-type start 27479 . 27480) (nil face web-mode-variable-name-face 27479 . 27480) (nil block-side t 27478 . 27479) (nil tag-attr t 27478 . 27479) (nil tag-name "v-treeview" 27478 . 27479) (nil tag-type start 27478 . 27479) (nil face web-mode-variable-name-face 27478 . 27479) (nil block-side t 27477 . 27478) (nil tag-attr t 27477 . 27478) (nil tag-name "v-treeview" 27477 . 27478) (nil tag-type start 27477 . 27478) (nil face web-mode-variable-name-face 27477 . 27478) (nil block-side t 27476 . 27477) (nil block-token delimiter-beg 27476 . 27477) (nil tag-attr t 27476 . 27477) (nil tag-name "v-treeview" 27476 . 27477) (nil tag-type start 27476 . 27477) (nil font-lock-face web-mode-block-delimiter-face 27476 . 27477) (nil block-side t 27475 . 27476) (nil block-token delimiter-beg 27475 . 27476) (nil tag-attr t 27475 . 27476) (nil tag-name "v-treeview" 27475 . 27476) (nil tag-type start 27475 . 27476) (nil font-lock-face web-mode-block-delimiter-face 27475 . 27476) (nil block-side t 27474 . 27475) (nil block-token delimiter-beg 27474 . 27475) (nil tag-attr t 27474 . 27475) (nil tag-name "v-treeview" 27474 . 27475) (nil tag-type start 27474 . 27475) (nil font-lock-face web-mode-block-delimiter-face 27474 . 27475) (nil block-side t 27473 . 27474) (nil block-token delimiter-beg 27473 . 27474) (nil tag-attr t 27473 . 27474) (nil tag-name "v-treeview" 27473 . 27474) (nil tag-type start 27473 . 27474) (nil font-lock-face web-mode-block-delimiter-face 27473 . 27474) (nil block-side t 27472 . 27473) (nil block-token delimiter-beg 27472 . 27473) (nil tag-attr t 27472 . 27473) (nil tag-name "v-treeview" 27472 . 27473) (nil tag-type start 27472 . 27473) (nil font-lock-face web-mode-block-delimiter-face 27472 . 27473) (nil block-side t 27471 . 27472) (nil block-token delimiter-beg 27471 . 27472) (nil tag-attr t 27471 . 27472) (nil tag-name "v-treeview" 27471 . 27472) (nil tag-type start 27471 . 27472) (nil font-lock-face web-mode-block-delimiter-face 27471 . 27472) (nil block-side t 27470 . 27471) (nil block-token delimiter-beg 27470 . 27471) (nil tag-attr t 27470 . 27471) (nil tag-name "v-treeview" 27470 . 27471) (nil tag-type start 27470 . 27471) (nil font-lock-face web-mode-block-delimiter-face 27470 . 27471) (nil block-side t 27469 . 27470) (nil block-token delimiter-beg 27469 . 27470) (nil tag-attr t 27469 . 27470) (nil tag-name "v-treeview" 27469 . 27470) (nil tag-type start 27469 . 27470) (nil font-lock-face web-mode-block-delimiter-face 27469 . 27470) (nil block-beg 0 27468 . 27469) (nil block-controls 0 27468 . 27469) (nil block-side t 27468 . 27469) (nil block-token delimiter-beg 27468 . 27469) (nil tag-attr-beg 2 27468 . 27469) (nil tag-attr t 27468 . 27469) (nil tag-name "v-treeview" 27468 . 27469) (nil tag-type start 27468 . 27469) (nil font-lock-face web-mode-block-delimiter-face 27468 . 27469) (nil tag-name "v-treeview" 27451 . 27468) (nil tag-type start 27451 . 27468) (nil block-side t 27450 . 27451) (nil block-end t 27450 . 27451) (nil block-token delimiter-end 27450 . 27451) (nil tag-attr t 27450 . 27451) (nil tag-attr-end 6 27450 . 27451) (nil tag-name "v-treeview" 27450 . 27451) (nil tag-type start 27450 . 27451) (nil font-lock-face web-mode-block-delimiter-face 27450 . 27451) (nil block-side t 27449 . 27450) (nil tag-attr t 27449 . 27450) (nil tag-name "v-treeview" 27449 . 27450) (nil tag-type start 27449 . 27450) (nil face web-mode-variable-name-face 27449 . 27450) (nil block-side t 27448 . 27449) (nil tag-attr t 27448 . 27449) (nil tag-name "v-treeview" 27448 . 27449) (nil tag-type start 27448 . 27449) (nil face web-mode-variable-name-face 27448 . 27449) (nil block-side t 27447 . 27448) (nil tag-attr t 27447 . 27448) (nil tag-name "v-treeview" 27447 . 27448) (nil tag-type start 27447 . 27448) (nil face web-mode-variable-name-face 27447 . 27448) (nil block-side t 27446 . 27447) (nil tag-attr t 27446 . 27447) (nil tag-name "v-treeview" 27446 . 27447) (nil tag-type start 27446 . 27447) (nil face web-mode-variable-name-face 27446 . 27447) (nil block-side t 27445 . 27446) (nil tag-attr t 27445 . 27446) (nil tag-name "v-treeview" 27445 . 27446) (nil tag-type start 27445 . 27446) (nil face web-mode-variable-name-face 27445 . 27446) (nil block-side t 27444 . 27445) (nil tag-attr t 27444 . 27445) (nil tag-name "v-treeview" 27444 . 27445) (nil tag-type start 27444 . 27445) (nil face web-mode-variable-name-face 27444 . 27445) (nil block-side t 27443 . 27444) (nil tag-attr t 27443 . 27444) (nil tag-name "v-treeview" 27443 . 27444) (nil tag-type start 27443 . 27444) (nil face web-mode-variable-name-face 27443 . 27444) (nil block-side t 27442 . 27443) (nil tag-attr t 27442 . 27443) (nil tag-name "v-treeview" 27442 . 27443) (nil tag-type start 27442 . 27443) (nil face web-mode-variable-name-face 27442 . 27443) (nil block-side t 27441 . 27442) (nil tag-attr t 27441 . 27442) (nil tag-name "v-treeview" 27441 . 27442) (nil tag-type start 27441 . 27442) (nil face web-mode-variable-name-face 27441 . 27442) (nil block-side t 27440 . 27441) (nil tag-attr t 27440 . 27441) (nil tag-name "v-treeview" 27440 . 27441) (nil tag-type start 27440 . 27441) (nil face web-mode-variable-name-face 27440 . 27441) (nil block-side t 27439 . 27440) (nil tag-attr t 27439 . 27440) (nil tag-name "v-treeview" 27439 . 27440) (nil tag-type start 27439 . 27440) (nil face web-mode-variable-name-face 27439 . 27440) (nil block-side t 27438 . 27439) (nil tag-attr t 27438 . 27439) (nil tag-name "v-treeview" 27438 . 27439) (nil tag-type start 27438 . 27439) (nil face web-mode-variable-name-face 27438 . 27439) (nil block-side t 27437 . 27438) (nil tag-attr t 27437 . 27438) (nil tag-name "v-treeview" 27437 . 27438) (nil tag-type start 27437 . 27438) (nil face web-mode-variable-name-face 27437 . 27438) (nil block-side t 27436 . 27437) (nil tag-attr t 27436 . 27437) (nil tag-name "v-treeview" 27436 . 27437) (nil tag-type start 27436 . 27437) (nil face web-mode-variable-name-face 27436 . 27437) (nil block-side t 27435 . 27436) (nil tag-attr t 27435 . 27436) (nil tag-name "v-treeview" 27435 . 27436) (nil tag-type start 27435 . 27436) (nil face web-mode-variable-name-face 27435 . 27436) (nil block-side t 27434 . 27435) (nil tag-attr t 27434 . 27435) (nil tag-name "v-treeview" 27434 . 27435) (nil tag-type start 27434 . 27435) (nil face web-mode-variable-name-face 27434 . 27435) (nil block-side t 27433 . 27434) (nil tag-attr t 27433 . 27434) (nil tag-name "v-treeview" 27433 . 27434) (nil tag-type start 27433 . 27434) (nil face web-mode-variable-name-face 27433 . 27434) (nil block-side t 27432 . 27433) (nil tag-attr t 27432 . 27433) (nil tag-name "v-treeview" 27432 . 27433) (nil tag-type start 27432 . 27433) (nil face web-mode-variable-name-face 27432 . 27433) (nil block-side t 27431 . 27432) (nil tag-attr t 27431 . 27432) (nil tag-name "v-treeview" 27431 . 27432) (nil tag-type start 27431 . 27432) (nil face web-mode-variable-name-face 27431 . 27432) (nil block-side t 27430 . 27431) (nil tag-attr t 27430 . 27431) (nil tag-name "v-treeview" 27430 . 27431) (nil tag-type start 27430 . 27431) (nil face web-mode-variable-name-face 27430 . 27431) (nil block-side t 27429 . 27430) (nil tag-attr t 27429 . 27430) (nil tag-name "v-treeview" 27429 . 27430) (nil tag-type start 27429 . 27430) (nil face web-mode-variable-name-face 27429 . 27430) (nil block-side t 27428 . 27429) (nil tag-attr t 27428 . 27429) (nil tag-name "v-treeview" 27428 . 27429) (nil tag-type start 27428 . 27429) (nil face web-mode-variable-name-face 27428 . 27429) (nil block-side t 27427 . 27428) (nil block-token delimiter-beg 27427 . 27428) (nil tag-attr t 27427 . 27428) (nil tag-name "v-treeview" 27427 . 27428) (nil tag-type start 27427 . 27428) (nil font-lock-face web-mode-block-delimiter-face 27427 . 27428) (nil block-side t 27426 . 27427) (nil block-token delimiter-beg 27426 . 27427) (nil tag-attr t 27426 . 27427) (nil tag-name "v-treeview" 27426 . 27427) (nil tag-type start 27426 . 27427) (nil font-lock-face web-mode-block-delimiter-face 27426 . 27427) (nil block-side t 27425 . 27426) (nil block-token delimiter-beg 27425 . 27426) (nil tag-attr t 27425 . 27426) (nil tag-name "v-treeview" 27425 . 27426) (nil tag-type start 27425 . 27426) (nil font-lock-face web-mode-block-delimiter-face 27425 . 27426) (nil block-side t 27424 . 27425) (nil block-token delimiter-beg 27424 . 27425) (nil tag-attr t 27424 . 27425) (nil tag-name "v-treeview" 27424 . 27425) (nil tag-type start 27424 . 27425) (nil font-lock-face web-mode-block-delimiter-face 27424 . 27425) (nil block-side t 27423 . 27424) (nil block-token delimiter-beg 27423 . 27424) (nil tag-attr t 27423 . 27424) (nil tag-name "v-treeview" 27423 . 27424) (nil tag-type start 27423 . 27424) (nil font-lock-face web-mode-block-delimiter-face 27423 . 27424) (nil block-side t 27422 . 27423) (nil block-token delimiter-beg 27422 . 27423) (nil tag-attr t 27422 . 27423) (nil tag-name "v-treeview" 27422 . 27423) (nil tag-type start 27422 . 27423) (nil font-lock-face web-mode-block-delimiter-face 27422 . 27423) (nil block-side t 27421 . 27422) (nil block-token delimiter-beg 27421 . 27422) (nil tag-attr t 27421 . 27422) (nil tag-name "v-treeview" 27421 . 27422) (nil tag-type start 27421 . 27422) (nil font-lock-face web-mode-block-delimiter-face 27421 . 27422) (nil block-beg 0 27420 . 27421) (nil block-controls 0 27420 . 27421) (nil block-side t 27420 . 27421) (nil block-token delimiter-beg 27420 . 27421) (nil tag-attr-beg 2 27420 . 27421) (nil tag-attr t 27420 . 27421) (nil tag-name "v-treeview" 27420 . 27421) (nil tag-type start 27420 . 27421) (nil font-lock-face web-mode-block-delimiter-face 27420 . 27421) (nil tag-name "v-treeview" 27403 . 27420) (nil tag-type start 27403 . 27420) (nil tag-name "v-treeview" 27393 . 27403) (nil tag-type start 27393 . 27403) (nil font-lock-face web-mode-html-tag-custom-face 27393 . 27403) (nil tag-name "v-treeview" 27392 . 27393) (nil tag-type start 27392 . 27393) (nil tag-beg 19 27392 . 27393) (nil font-lock-face web-mode-html-tag-bracket-face 27392 . 27393) (27378 . 27831)) nil (25812 51035 104333 893000) 0 nil])
([nil nil ((#("          <v-spacer></v-spacer>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-spacer") 11 19 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-spacer") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-spacer") 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-spacer") 21 22 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-spacer") 22 30 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-spacer") 30 31 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-spacer")) . 27182) (27163 . 27182) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27131) (undo-tree-id81 . -12) (27150 . 27182) 27143) ((#("          <v-spacer></v-spacer>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-spacer") 11 19 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-spacer") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-spacer") 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-spacer") 21 22 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-spacer") 22 30 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-spacer") 30 31 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-spacer")) . 27150) (undo-tree-id1113 . -32) (undo-tree-id1114 . -32) (undo-tree-id1115 . -32) (undo-tree-id1116 . -32) (undo-tree-id1117 . -32) (undo-tree-id1118 . -32) (undo-tree-id1119 . -32) (undo-tree-id1120 . -32) (undo-tree-id1121 . -32) (undo-tree-id1122 . -32) (undo-tree-id1123 . -32) (undo-tree-id1124 . -32) (undo-tree-id1125 . -32) (undo-tree-id1126 . -32) (undo-tree-id1127 . -32) (undo-tree-id1128 . -32) (undo-tree-id1129 . -32) (undo-tree-id1130 . -32) (undo-tree-id1131 . -32) (undo-tree-id1132 . -32) (undo-tree-id1133 . -32) (undo-tree-id1134 . -32) (undo-tree-id1135 . -32) (undo-tree-id1136 . -32) (undo-tree-id1137 . -32) (undo-tree-id1138 . -32) (undo-tree-id1139 . -32) (undo-tree-id1140 . -32) (undo-tree-id1141 . -32) (undo-tree-id1142 . -32) (undo-tree-id1143 . -32) (undo-tree-id1144 . -32) (undo-tree-id1145 . -32) (undo-tree-id1146 . -32) (27131 . 27150) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27163) (undo-tree-id1147 . -19) (undo-tree-id1148 . -19) (undo-tree-id1149 . -12) (undo-tree-id1150 . -19) (undo-tree-id1151 . -19) (undo-tree-id1152 . -19) (undo-tree-id1153 . -19) (undo-tree-id1154 . -19) (undo-tree-id1155 . -19) (undo-tree-id1156 . -19) (undo-tree-id1157 . -19) (undo-tree-id1158 . -19) (undo-tree-id1159 . -19) (undo-tree-id1160 . -19) (undo-tree-id1161 . -19) (undo-tree-id1162 . -19) (undo-tree-id1163 . -19) (undo-tree-id1164 . -19) (undo-tree-id1165 . -19) (undo-tree-id1166 . -19) (undo-tree-id1167 . -19) (undo-tree-id1168 . -19) (undo-tree-id1169 . -19) (undo-tree-id1170 . -19) (undo-tree-id1171 . -19) (undo-tree-id1172 . -12) (undo-tree-id1173 . -12) (undo-tree-id1174 . -12) (undo-tree-id1175 . -12) (undo-tree-id1176 . -12) (undo-tree-id1177 . -12) (undo-tree-id1178 . -12) (undo-tree-id1179 . -12) (27182 . 27214)) (25812 50918 866875 4000) 0 nil])
([nil nil ((#("    " 0 4 (tag-type start tag-name "v-treeview")) . -27768) (#("    " 0 4 (tag-type start tag-name "v-treeview")) . -27735) (#("    " 0 4 (tag-type start tag-name "v-treeview")) . -27717) (#("    " 0 4 (tag-type start tag-name "v-treeview")) . -27691) (#("    " 0 4 (tag-type start tag-name "v-treeview")) . -27669) (#("    " 0 4 (tag-type start tag-name "v-treeview")) . -27645) (#("    " 0 4 (tag-type start tag-name "v-treeview")) . -27619) (#("    " 0 4 (tag-type start tag-name "v-treeview")) . -27585) (#("    " 0 4 (tag-type start tag-name "v-treeview")) . -27532) (#("    " 0 4 (tag-type start tag-name "v-treeview")) . -27488) (#("    " 0 4 (tag-type start tag-name "v-treeview")) . -27446) (#("    " 0 4 (tag-type start tag-name "v-treeview")) . -27402) ("              " . -27378) 27368) nil (25812 51035 104164 705000) 0 nil])
([nil nil ((#("          <v-btn
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-btn") 11 16 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-btn") 16 17 (tag-type start tag-name "v-btn")) . 27199) (27180 . 27199) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27163) (undo-tree-id80 . -12) (27182 . 27199) 27175) ((#("          <v-btn
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 2 tag-type start tag-name "v-btn") 11 16 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-btn") 16 17 (tag-type start tag-name "v-btn")) . 27182) (undo-tree-id1062 . -17) (undo-tree-id1063 . -17) (undo-tree-id1064 . -17) (undo-tree-id1065 . -17) (undo-tree-id1066 . -17) (undo-tree-id1067 . -17) (undo-tree-id1068 . -17) (undo-tree-id1069 . -17) (undo-tree-id1070 . -17) (undo-tree-id1071 . -17) (undo-tree-id1072 . -17) (undo-tree-id1073 . -17) (undo-tree-id1074 . -17) (undo-tree-id1075 . -17) (undo-tree-id1076 . -17) (undo-tree-id1077 . -17) (undo-tree-id1078 . -17) (undo-tree-id1079 . -17) (undo-tree-id1080 . -17) (undo-tree-id1081 . -17) (undo-tree-id1082 . -17) (undo-tree-id1083 . -17) (undo-tree-id1084 . -17) (undo-tree-id1085 . -17) (undo-tree-id1086 . -17) (undo-tree-id1087 . -17) (27163 . 27182) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-btn") 9 10 (tag-end t tag-type start tag-name "v-btn") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27180) (undo-tree-id1088 . -19) (undo-tree-id1089 . -19) (undo-tree-id1090 . -12) (undo-tree-id1091 . -19) (undo-tree-id1092 . -19) (undo-tree-id1093 . -19) (undo-tree-id1094 . -19) (undo-tree-id1095 . -19) (undo-tree-id1096 . -19) (undo-tree-id1097 . -19) (undo-tree-id1098 . -19) (undo-tree-id1099 . -19) (undo-tree-id1100 . -19) (undo-tree-id1101 . -19) (undo-tree-id1102 . -19) (undo-tree-id1103 . -19) (undo-tree-id1104 . -19) (undo-tree-id1105 . -19) (undo-tree-id1106 . -19) (undo-tree-id1107 . -19) (undo-tree-id1108 . -19) (undo-tree-id1109 . -12) (undo-tree-id1110 . -12) (undo-tree-id1111 . -12) (undo-tree-id1112 . -12) (27199 . 27216)) (25812 50918 736014 227000) 0 nil])
([nil nil ((27770 . 27782)) nil (25812 51035 104160 811000) 0 nil])
([nil nil (("            icon
" . 27216) (27197 . 27216) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-btn") 9 10 (tag-end t tag-type start tag-name "v-btn") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27180) (undo-tree-id79 . -12) (27199 . 27216) 27192) (("            icon
" . 27199) (undo-tree-id1019 . -17) (undo-tree-id1020 . -17) (undo-tree-id1021 . -17) (undo-tree-id1022 . -17) (undo-tree-id1023 . -17) (undo-tree-id1024 . -17) (undo-tree-id1025 . -17) (undo-tree-id1026 . -17) (undo-tree-id1027 . -17) (undo-tree-id1028 . -17) (undo-tree-id1029 . -17) (undo-tree-id1030 . -17) (undo-tree-id1031 . -17) (undo-tree-id1032 . -17) (undo-tree-id1033 . -17) (undo-tree-id1034 . -17) (undo-tree-id1035 . -17) (undo-tree-id1036 . -17) (undo-tree-id1037 . -17) (undo-tree-id1038 . -17) (undo-tree-id1039 . -17) (undo-tree-id1040 . -17) (27180 . 27199) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-btn") 9 10 (tag-end t tag-type start tag-name "v-btn") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27197) (undo-tree-id1041 . -19) (undo-tree-id1042 . -19) (undo-tree-id1043 . -12) (undo-tree-id1044 . -19) (undo-tree-id1045 . -19) (undo-tree-id1046 . -19) (undo-tree-id1047 . -19) (undo-tree-id1048 . -19) (undo-tree-id1049 . -19) (undo-tree-id1050 . -19) (undo-tree-id1051 . -19) (undo-tree-id1052 . -19) (undo-tree-id1053 . -19) (undo-tree-id1054 . -12) (undo-tree-id1055 . -12) (undo-tree-id1056 . -12) (undo-tree-id1057 . -12) (undo-tree-id1058 . -12) (undo-tree-id1059 . -12) (undo-tree-id1060 . -12) (undo-tree-id1061 . -12) (27216 . 27233)) (25812 50918 545370 108000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28708 . 28709) (nil tag-name "template" 28708 . 28709) (nil tag-type end 28708 . 28709) (nil tag-end t 28708 . 28709) (nil font-lock-face web-mode-html-tag-bracket-face 28708 . 28709) (nil tag-name "template" 28700 . 28708) (nil tag-type end 28700 . 28708) (nil font-lock-face web-mode-html-tag-face 28700 . 28708) (nil tag-name "template" 28699 . 28700) (nil tag-type end 28699 . 28700) (nil font-lock-face web-mode-html-tag-bracket-face 28699 . 28700) (nil tag-name "template" 28698 . 28699) (nil tag-type end 28698 . 28699) (nil tag-beg 20 28698 . 28699) (nil font-lock-face web-mode-html-tag-bracket-face 28698 . 28699) (nil tag-name "v-row" 28680 . 28681) (nil tag-type end 28680 . 28681) (nil tag-end t 28680 . 28681) (nil font-lock-face web-mode-html-tag-bracket-face 28680 . 28681) (nil tag-name "v-row" 28675 . 28680) (nil tag-type end 28675 . 28680) (nil font-lock-face web-mode-html-tag-custom-face 28675 . 28680) (nil tag-name "v-row" 28674 . 28675) (nil tag-type end 28674 . 28675) (nil font-lock-face web-mode-html-tag-bracket-face 28674 . 28675) (nil tag-name "v-row" 28673 . 28674) (nil tag-type end 28673 . 28674) (nil tag-beg 22 28673 . 28674) (nil font-lock-face web-mode-html-tag-bracket-face 28673 . 28674) (nil tag-name "v-col" 28653 . 28654) (nil tag-type end 28653 . 28654) (nil tag-end t 28653 . 28654) (nil font-lock-face web-mode-html-tag-bracket-face 28653 . 28654) (nil tag-name "v-col" 28648 . 28653) (nil tag-type end 28648 . 28653) (nil font-lock-face web-mode-html-tag-custom-face 28648 . 28653) (nil tag-name "v-col" 28647 . 28648) (nil tag-type end 28647 . 28648) (nil font-lock-face web-mode-html-tag-bracket-face 28647 . 28648) (nil tag-name "v-col" 28646 . 28647) (nil tag-type end 28646 . 28647) (nil tag-beg 22 28646 . 28647) (nil font-lock-face web-mode-html-tag-bracket-face 28646 . 28647) (nil block-side t 28624 . 28625) (nil block-end t 28624 . 28625) (nil block-token delimiter-end 28624 . 28625) (nil font-lock-face web-mode-block-delimiter-face 28624 . 28625) (nil face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) 28624 . 28625) (nil block-side t 28623 . 28624) (nil block-token delimiter-end 28623 . 28624) (nil font-lock-face web-mode-block-delimiter-face 28623 . 28624) (nil face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) 28623 . 28624) (nil block-side t 28622 . 28623) (nil face web-mode-variable-name-face 28622 . 28623) (nil block-side t 28621 . 28622) (nil face web-mode-variable-name-face 28621 . 28622) (nil block-side t 28620 . 28621) (nil face web-mode-variable-name-face 28620 . 28621) (nil block-side t 28619 . 28620) (nil face web-mode-variable-name-face 28619 . 28620) (nil block-side t 28618 . 28619) (nil block-side t 28617 . 28618) (nil face web-mode-variable-name-face 28617 . 28618) (nil block-side t 28616 . 28617) (nil face web-mode-variable-name-face 28616 . 28617) (nil block-side t 28615 . 28616) (nil face web-mode-variable-name-face 28615 . 28616) (nil block-side t 28614 . 28615) (nil face web-mode-variable-name-face 28614 . 28615) (nil block-side t 28613 . 28614) (nil block-token delimiter-beg 28613 . 28614) (nil font-lock-face web-mode-block-delimiter-face 28613 . 28614) (nil face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) 28613 . 28614) (nil block-beg 0 28612 . 28613) (nil block-controls 0 28612 . 28613) (nil block-side t 28612 . 28613) (nil block-token delimiter-beg 28612 . 28613) (nil font-lock-face web-mode-block-delimiter-face 28612 . 28613) (nil face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) 28612 . 28613) (nil tag-name "v-col" 28588 . 28589) (nil tag-type start 28588 . 28589) (nil tag-end t 28588 . 28589) (nil font-lock-face web-mode-html-tag-bracket-face 28588 . 28589) (nil tag-attr t 28587 . 28588) (nil tag-attr-end 5 28587 . 28588) (nil tag-name "v-col" 28587 . 28588) (nil tag-type start 28587 . 28588) (nil font-lock-face web-mode-html-attr-value-face 28587 . 28588) (nil tag-attr t 28571 . 28587) (nil tag-name "v-col" 28571 . 28587) (nil tag-type start 28571 . 28587) (nil font-lock-face web-mode-html-attr-value-face 28571 . 28587) (nil tag-attr t 28570 . 28571) (nil tag-name "v-col" 28570 . 28571) (nil tag-type start 28570 . 28571) (nil font-lock-face web-mode-html-attr-equal-face 28570 . 28571) (nil tag-attr t 28566 . 28570) (nil tag-name "v-col" 28566 . 28570) (nil tag-type start 28566 . 28570) (nil font-lock-face web-mode-html-attr-name-face 28566 . 28570) (nil tag-attr-beg 0 28565 . 28566) (nil tag-attr t 28565 . 28566) (nil tag-name "v-col" 28565 . 28566) (nil tag-type start 28565 . 28566) (nil font-lock-face web-mode-html-attr-name-face 28565 . 28566) (nil tag-name "v-col" 28564 . 28565) (nil tag-type start 28564 . 28565) (nil tag-name "v-col" 28559 . 28564) (nil tag-type start 28559 . 28564) (nil font-lock-face web-mode-html-tag-custom-face 28559 . 28564) (nil tag-name "v-col" 28558 . 28559) (nil tag-type start 28558 . 28559) (nil tag-beg 19 28558 . 28559) (nil font-lock-face web-mode-html-tag-bracket-face 28558 . 28559) (nil tag-name "v-row" 28536 . 28537) (nil tag-type start 28536 . 28537) (nil tag-end t 28536 . 28537) (nil font-lock-face web-mode-html-tag-bracket-face 28536 . 28537) (nil tag-name "v-row" 28517 . 28536) (nil tag-type start 28517 . 28536) (nil block-side t 28516 . 28517) (nil block-end t 28516 . 28517) (nil block-token delimiter-end 28516 . 28517) (nil tag-attr t 28516 . 28517) (nil tag-attr-end 11 28516 . 28517) (nil tag-name "v-row" 28516 . 28517) (nil tag-type start 28516 . 28517) (nil font-lock-face web-mode-block-delimiter-face 28516 . 28517) (nil block-side t 28515 . 28516) (nil tag-attr t 28515 . 28516) (nil tag-name "v-row" 28515 . 28516) (nil tag-type start 28515 . 28516) (nil face web-mode-variable-name-face 28515 . 28516) (nil block-side t 28514 . 28515) (nil tag-attr t 28514 . 28515) (nil tag-name "v-row" 28514 . 28515) (nil tag-type start 28514 . 28515) (nil face web-mode-variable-name-face 28514 . 28515) (nil block-side t 28513 . 28514) (nil tag-attr t 28513 . 28514) (nil tag-name "v-row" 28513 . 28514) (nil tag-type start 28513 . 28514) (nil face web-mode-variable-name-face 28513 . 28514) (nil block-side t 28512 . 28513) (nil tag-attr t 28512 . 28513) (nil tag-name "v-row" 28512 . 28513) (nil tag-type start 28512 . 28513) (nil face web-mode-variable-name-face 28512 . 28513) (nil block-side t 28511 . 28512) (nil tag-attr t 28511 . 28512) (nil tag-name "v-row" 28511 . 28512) (nil tag-type start 28511 . 28512) (nil face web-mode-variable-name-face 28511 . 28512) (nil block-side t 28510 . 28511) (nil tag-attr t 28510 . 28511) (nil tag-name "v-row" 28510 . 28511) (nil tag-type start 28510 . 28511) (nil face web-mode-variable-name-face 28510 . 28511) (nil block-side t 28509 . 28510) (nil tag-attr t 28509 . 28510) (nil tag-name "v-row" 28509 . 28510) (nil tag-type start 28509 . 28510) (nil face web-mode-variable-name-face 28509 . 28510) (nil block-side t 28508 . 28509) (nil tag-attr t 28508 . 28509) (nil tag-name "v-row" 28508 . 28509) (nil tag-type start 28508 . 28509) (nil face web-mode-variable-name-face 28508 . 28509) (nil block-side t 28507 . 28508) (nil tag-attr t 28507 . 28508) (nil tag-name "v-row" 28507 . 28508) (nil tag-type start 28507 . 28508) (nil face web-mode-variable-name-face 28507 . 28508) (nil block-side t 28506 . 28507) (nil tag-attr t 28506 . 28507) (nil tag-name "v-row" 28506 . 28507) (nil tag-type start 28506 . 28507) (nil face web-mode-variable-name-face 28506 . 28507) (nil block-side t 28505 . 28506) (nil tag-attr t 28505 . 28506) (nil tag-name "v-row" 28505 . 28506) (nil tag-type start 28505 . 28506) (nil face web-mode-variable-name-face 28505 . 28506) (nil block-side t 28504 . 28505) (nil tag-attr t 28504 . 28505) (nil tag-name "v-row" 28504 . 28505) (nil tag-type start 28504 . 28505) (nil face web-mode-variable-name-face 28504 . 28505) (nil block-side t 28503 . 28504) (nil tag-attr t 28503 . 28504) (nil tag-name "v-row" 28503 . 28504) (nil tag-type start 28503 . 28504) (nil face web-mode-variable-name-face 28503 . 28504) (nil block-side t 28502 . 28503) (nil tag-attr t 28502 . 28503) (nil tag-name "v-row" 28502 . 28503) (nil tag-type start 28502 . 28503) (nil face web-mode-variable-name-face 28502 . 28503) (nil block-side t 28501 . 28502) (nil tag-attr t 28501 . 28502) (nil tag-name "v-row" 28501 . 28502) (nil tag-type start 28501 . 28502) (nil face web-mode-variable-name-face 28501 . 28502) (nil block-side t 28500 . 28501) (nil tag-attr t 28500 . 28501) (nil tag-name "v-row" 28500 . 28501) (nil tag-type start 28500 . 28501) (nil face web-mode-variable-name-face 28500 . 28501) (nil block-side t 28499 . 28500) (nil tag-attr t 28499 . 28500) (nil tag-name "v-row" 28499 . 28500) (nil tag-type start 28499 . 28500) (nil face web-mode-variable-name-face 28499 . 28500) (nil block-side t 28498 . 28499) (nil tag-attr t 28498 . 28499) (nil tag-name "v-row" 28498 . 28499) (nil tag-type start 28498 . 28499) (nil face web-mode-variable-name-face 28498 . 28499) (nil block-side t 28497 . 28498) (nil tag-attr t 28497 . 28498) (nil tag-name "v-row" 28497 . 28498) (nil tag-type start 28497 . 28498) (nil face web-mode-variable-name-face 28497 . 28498) (nil block-side t 28496 . 28497) (nil tag-attr t 28496 . 28497) (nil tag-name "v-row" 28496 . 28497) (nil tag-type start 28496 . 28497) (nil face web-mode-variable-name-face 28496 . 28497) (nil block-side t 28495 . 28496) (nil tag-attr t 28495 . 28496) (nil tag-name "v-row" 28495 . 28496) (nil tag-type start 28495 . 28496) (nil face web-mode-variable-name-face 28495 . 28496) (nil block-side t 28494 . 28495) (nil tag-attr t 28494 . 28495) (nil tag-name "v-row" 28494 . 28495) (nil tag-type start 28494 . 28495) (nil face web-mode-variable-name-face 28494 . 28495) (nil block-side t 28493 . 28494) (nil block-token delimiter-beg 28493 . 28494) (nil tag-attr t 28493 . 28494) (nil tag-name "v-row" 28493 . 28494) (nil tag-type start 28493 . 28494) (nil font-lock-face web-mode-block-delimiter-face 28493 . 28494) (nil block-side t 28492 . 28493) (nil block-token delimiter-beg 28492 . 28493) (nil tag-attr t 28492 . 28493) (nil tag-name "v-row" 28492 . 28493) (nil tag-type start 28492 . 28493) (nil font-lock-face web-mode-block-delimiter-face 28492 . 28493) (nil block-side t 28491 . 28492) (nil block-token delimiter-beg 28491 . 28492) (nil tag-attr t 28491 . 28492) (nil tag-name "v-row" 28491 . 28492) (nil tag-type start 28491 . 28492) (nil font-lock-face web-mode-block-delimiter-face 28491 . 28492) (nil block-side t 28490 . 28491) (nil block-token delimiter-beg 28490 . 28491) (nil tag-attr t 28490 . 28491) (nil tag-name "v-row" 28490 . 28491) (nil tag-type start 28490 . 28491) (nil font-lock-face web-mode-block-delimiter-face 28490 . 28491) (nil block-side t 28489 . 28490) (nil block-token delimiter-beg 28489 . 28490) (nil tag-attr t 28489 . 28490) (nil tag-name "v-row" 28489 . 28490) (nil tag-type start 28489 . 28490) (nil font-lock-face web-mode-block-delimiter-face 28489 . 28490) (nil block-side t 28488 . 28489) (nil block-token delimiter-beg 28488 . 28489) (nil tag-attr t 28488 . 28489) (nil tag-name "v-row" 28488 . 28489) (nil tag-type start 28488 . 28489) (nil font-lock-face web-mode-block-delimiter-face 28488 . 28489) (nil block-side t 28487 . 28488) (nil block-token delimiter-beg 28487 . 28488) (nil tag-attr t 28487 . 28488) (nil tag-name "v-row" 28487 . 28488) (nil tag-type start 28487 . 28488) (nil font-lock-face web-mode-block-delimiter-face 28487 . 28488) (nil block-side t 28486 . 28487) (nil block-token delimiter-beg 28486 . 28487) (nil tag-attr t 28486 . 28487) (nil tag-name "v-row" 28486 . 28487) (nil tag-type start 28486 . 28487) (nil font-lock-face web-mode-block-delimiter-face 28486 . 28487) (nil block-side t 28485 . 28486) (nil block-token delimiter-beg 28485 . 28486) (nil tag-attr t 28485 . 28486) (nil tag-name "v-row" 28485 . 28486) (nil tag-type start 28485 . 28486) (nil font-lock-face web-mode-block-delimiter-face 28485 . 28486) (nil block-side t 28484 . 28485) (nil block-token delimiter-beg 28484 . 28485) (nil tag-attr t 28484 . 28485) (nil tag-name "v-row" 28484 . 28485) (nil tag-type start 28484 . 28485) (nil font-lock-face web-mode-block-delimiter-face 28484 . 28485) (nil block-side t 28483 . 28484) (nil block-token delimiter-beg 28483 . 28484) (nil tag-attr t 28483 . 28484) (nil tag-name "v-row" 28483 . 28484) (nil tag-type start 28483 . 28484) (nil font-lock-face web-mode-block-delimiter-face 28483 . 28484) (nil block-side t 28482 . 28483) (nil block-token delimiter-beg 28482 . 28483) (nil tag-attr t 28482 . 28483) (nil tag-name "v-row" 28482 . 28483) (nil tag-type start 28482 . 28483) (nil font-lock-face web-mode-block-delimiter-face 28482 . 28483) (nil block-beg 0 28481 . 28482) (nil block-controls 0 28481 . 28482) (nil block-side t 28481 . 28482) (nil block-token delimiter-beg 28481 . 28482) (nil tag-attr-beg 2 28481 . 28482) (nil tag-attr t 28481 . 28482) (nil tag-name "v-row" 28481 . 28482) (nil tag-type start 28481 . 28482) (nil font-lock-face web-mode-block-delimiter-face 28481 . 28482) (nil tag-name "v-row" 28460 . 28481) (nil tag-type start 28460 . 28481) (nil block-side t 28459 . 28460) (nil block-end t 28459 . 28460) (nil block-token delimiter-end 28459 . 28460) (nil tag-attr t 28459 . 28460) (nil tag-attr-end 10 28459 . 28460) (nil tag-name "v-row" 28459 . 28460) (nil tag-type start 28459 . 28460) (nil font-lock-face web-mode-block-delimiter-face 28459 . 28460) (nil block-side t 28458 . 28459) (nil tag-attr t 28458 . 28459) (nil tag-name "v-row" 28458 . 28459) (nil tag-type start 28458 . 28459) (nil block-side t 28457 . 28458) (nil tag-attr t 28457 . 28458) (nil tag-name "v-row" 28457 . 28458) (nil tag-type start 28457 . 28458) (nil face web-mode-variable-name-face 28457 . 28458) (nil block-side t 28456 . 28457) (nil tag-attr t 28456 . 28457) (nil tag-name "v-row" 28456 . 28457) (nil tag-type start 28456 . 28457) (nil face web-mode-variable-name-face 28456 . 28457) (nil block-side t 28455 . 28456) (nil tag-attr t 28455 . 28456) (nil tag-name "v-row" 28455 . 28456) (nil tag-type start 28455 . 28456) (nil block-side t 28454 . 28455) (nil tag-attr t 28454 . 28455) (nil tag-name "v-row" 28454 . 28455) (nil tag-type start 28454 . 28455) (nil face web-mode-variable-name-face 28454 . 28455) (nil block-side t 28453 . 28454) (nil tag-attr t 28453 . 28454) (nil tag-name "v-row" 28453 . 28454) (nil tag-type start 28453 . 28454) (nil face web-mode-variable-name-face 28453 . 28454) (nil block-side t 28452 . 28453) (nil tag-attr t 28452 . 28453) (nil tag-name "v-row" 28452 . 28453) (nil tag-type start 28452 . 28453) (nil face web-mode-variable-name-face 28452 . 28453) (nil block-side t 28451 . 28452) (nil tag-attr t 28451 . 28452) (nil tag-name "v-row" 28451 . 28452) (nil tag-type start 28451 . 28452) (nil face web-mode-variable-name-face 28451 . 28452) (nil block-side t 28450 . 28451) (nil tag-attr t 28450 . 28451) (nil tag-name "v-row" 28450 . 28451) (nil tag-type start 28450 . 28451) (nil block-side t 28428 . 28450) (nil tag-attr t 28428 . 28450) (nil tag-name "v-row" 28428 . 28450) (nil tag-type start 28428 . 28450) (nil face web-mode-function-call-face 28428 . 28450) (nil block-side t 28427 . 28428) (nil block-token delimiter-beg 28427 . 28428) (nil tag-attr t 28427 . 28428) (nil tag-name "v-row" 28427 . 28428) (nil tag-type start 28427 . 28428) (nil font-lock-face web-mode-block-delimiter-face 28427 . 28428) (nil block-side t 28426 . 28427) (nil block-token delimiter-beg 28426 . 28427) (nil tag-attr t 28426 . 28427) (nil tag-name "v-row" 28426 . 28427) (nil tag-type start 28426 . 28427) (nil font-lock-face web-mode-block-delimiter-face 28426 . 28427) (nil block-side t 28425 . 28426) (nil block-token delimiter-beg 28425 . 28426) (nil tag-attr t 28425 . 28426) (nil tag-name "v-row" 28425 . 28426) (nil tag-type start 28425 . 28426) (nil font-lock-face web-mode-block-delimiter-face 28425 . 28426) (nil block-side t 28424 . 28425) (nil block-token delimiter-beg 28424 . 28425) (nil tag-attr t 28424 . 28425) (nil tag-name "v-row" 28424 . 28425) (nil tag-type start 28424 . 28425) (nil font-lock-face web-mode-block-delimiter-face 28424 . 28425) (nil block-side t 28423 . 28424) (nil block-token delimiter-beg 28423 . 28424) (nil tag-attr t 28423 . 28424) (nil tag-name "v-row" 28423 . 28424) (nil tag-type start 28423 . 28424) (nil font-lock-face web-mode-block-delimiter-face 28423 . 28424) (nil block-side t 28422 . 28423) (nil block-token delimiter-beg 28422 . 28423) (nil tag-attr t 28422 . 28423) (nil tag-name "v-row" 28422 . 28423) (nil tag-type start 28422 . 28423) (nil font-lock-face web-mode-block-delimiter-face 28422 . 28423) (nil block-side t 28421 . 28422) (nil block-token delimiter-beg 28421 . 28422) (nil tag-attr t 28421 . 28422) (nil tag-name "v-row" 28421 . 28422) (nil tag-type start 28421 . 28422) (nil font-lock-face web-mode-block-delimiter-face 28421 . 28422) (nil block-side t 28420 . 28421) (nil block-token delimiter-beg 28420 . 28421) (nil tag-attr t 28420 . 28421) (nil tag-name "v-row" 28420 . 28421) (nil tag-type start 28420 . 28421) (nil font-lock-face web-mode-block-delimiter-face 28420 . 28421) (nil block-side t 28419 . 28420) (nil block-token delimiter-beg 28419 . 28420) (nil tag-attr t 28419 . 28420) (nil tag-name "v-row" 28419 . 28420) (nil tag-type start 28419 . 28420) (nil font-lock-face web-mode-block-delimiter-face 28419 . 28420) (nil block-side t 28418 . 28419) (nil block-token delimiter-beg 28418 . 28419) (nil tag-attr t 28418 . 28419) (nil tag-name "v-row" 28418 . 28419) (nil tag-type start 28418 . 28419) (nil font-lock-face web-mode-block-delimiter-face 28418 . 28419) (nil block-side t 28417 . 28418) (nil block-token delimiter-beg 28417 . 28418) (nil tag-attr t 28417 . 28418) (nil tag-name "v-row" 28417 . 28418) (nil tag-type start 28417 . 28418) (nil font-lock-face web-mode-block-delimiter-face 28417 . 28418) (nil block-beg 0 28416 . 28417) (nil block-controls 0 28416 . 28417) (nil block-side t 28416 . 28417) (nil block-token delimiter-beg 28416 . 28417) (nil tag-attr-beg 2 28416 . 28417) (nil tag-attr t 28416 . 28417) (nil tag-name "v-row" 28416 . 28417) (nil tag-type start 28416 . 28417) (nil font-lock-face web-mode-block-delimiter-face 28416 . 28417) (nil tag-name "v-row" 28395 . 28416) (nil tag-type start 28395 . 28416) (nil tag-name "v-row" 28390 . 28395) (nil tag-type start 28390 . 28395) (nil font-lock-face web-mode-html-tag-custom-face 28390 . 28395) (nil tag-name "v-row" 28389 . 28390) (nil tag-type start 28389 . 28390) (nil tag-beg 19 28389 . 28390) (nil font-lock-face web-mode-html-tag-bracket-face 28389 . 28390) (nil tag-name "template" 28369 . 28370) (nil tag-type start 28369 . 28370) (nil tag-end t 28369 . 28370) (nil font-lock-face web-mode-html-tag-bracket-face 28369 . 28370) (nil block-side t 28368 . 28369) (nil block-end t 28368 . 28369) (nil block-token delimiter-end 28368 . 28369) (nil tag-attr t 28368 . 28369) (nil tag-attr-end 12 28368 . 28369) (nil tag-name "template" 28368 . 28369) (nil tag-type start 28368 . 28369) (nil font-lock-face web-mode-block-delimiter-face 28368 . 28369) (nil block-side t 28366 . 28368) (nil tag-attr t 28366 . 28368) (nil tag-name "template" 28366 . 28368) (nil tag-type start 28366 . 28368) (nil block-side t 28365 . 28366) (nil tag-attr t 28365 . 28366) (nil tag-name "template" 28365 . 28366) (nil tag-type start 28365 . 28366) (nil face web-mode-variable-name-face 28365 . 28366) (nil block-side t 28364 . 28365) (nil tag-attr t 28364 . 28365) (nil tag-name "template" 28364 . 28365) (nil tag-type start 28364 . 28365) (nil face web-mode-variable-name-face 28364 . 28365) (nil block-side t 28363 . 28364) (nil tag-attr t 28363 . 28364) (nil tag-name "template" 28363 . 28364) (nil tag-type start 28363 . 28364) (nil face web-mode-variable-name-face 28363 . 28364) (nil block-side t 28362 . 28363) (nil tag-attr t 28362 . 28363) (nil tag-name "template" 28362 . 28363) (nil tag-type start 28362 . 28363) (nil face web-mode-variable-name-face 28362 . 28363) (nil block-side t 28360 . 28362) (nil tag-attr t 28360 . 28362) (nil tag-name "template" 28360 . 28362) (nil tag-type start 28360 . 28362) (nil block-side t 28359 . 28360) (nil block-token delimiter-beg 28359 . 28360) (nil tag-attr t 28359 . 28360) (nil tag-name "template" 28359 . 28360) (nil tag-type start 28359 . 28360) (nil font-lock-face web-mode-block-delimiter-face 28359 . 28360) (nil block-side t 28358 . 28359) (nil block-token delimiter-beg 28358 . 28359) (nil tag-attr t 28358 . 28359) (nil tag-name "template" 28358 . 28359) (nil tag-type start 28358 . 28359) (nil font-lock-face web-mode-block-delimiter-face 28358 . 28359) (nil block-side t 28357 . 28358) (nil block-token delimiter-beg 28357 . 28358) (nil tag-attr t 28357 . 28358) (nil tag-name "template" 28357 . 28358) (nil tag-type start 28357 . 28358) (nil font-lock-face web-mode-block-delimiter-face 28357 . 28358) (nil block-side t 28356 . 28357) (nil block-token delimiter-beg 28356 . 28357) (nil tag-attr t 28356 . 28357) (nil tag-name "template" 28356 . 28357) (nil tag-type start 28356 . 28357) (nil font-lock-face web-mode-block-delimiter-face 28356 . 28357) (nil block-side t 28355 . 28356) (nil block-token delimiter-beg 28355 . 28356) (nil tag-attr t 28355 . 28356) (nil tag-name "template" 28355 . 28356) (nil tag-type start 28355 . 28356) (nil font-lock-face web-mode-block-delimiter-face 28355 . 28356) (nil block-side t 28354 . 28355) (nil block-token delimiter-beg 28354 . 28355) (nil tag-attr t 28354 . 28355) (nil tag-name "template" 28354 . 28355) (nil tag-type start 28354 . 28355) (nil font-lock-face web-mode-block-delimiter-face 28354 . 28355) (nil block-side t 28353 . 28354) (nil block-token delimiter-beg 28353 . 28354) (nil tag-attr t 28353 . 28354) (nil tag-name "template" 28353 . 28354) (nil tag-type start 28353 . 28354) (nil font-lock-face web-mode-block-delimiter-face 28353 . 28354) (nil block-beg 0 28352 . 28353) (nil block-controls 0 28352 . 28353) (nil block-side t 28352 . 28353) (nil block-token delimiter-beg 28352 . 28353) (nil tag-attr t 28352 . 28353) (nil tag-name "template" 28352 . 28353) (nil tag-type start 28352 . 28353) (nil font-lock-face web-mode-block-delimiter-face 28352 . 28353) (nil tag-attr t 28347 . 28352) (nil tag-name "template" 28347 . 28352) (nil tag-type start 28347 . 28352) (nil font-lock-face web-mode-html-attr-engine-face 28347 . 28352) (nil tag-attr-beg 2 28346 . 28347) (nil tag-attr t 28346 . 28347) (nil tag-name "template" 28346 . 28347) (nil tag-type start 28346 . 28347) (nil font-lock-face web-mode-html-attr-engine-face 28346 . 28347) (nil tag-name "template" 28345 . 28346) (nil tag-type start 28345 . 28346) (nil tag-name "template" 28337 . 28345) (nil tag-type start 28337 . 28345) (nil font-lock-face web-mode-html-tag-face 28337 . 28345) (nil tag-name "template" 28336 . 28337) (nil tag-type start 28336 . 28337) (nil tag-beg 17 28336 . 28337) (nil font-lock-face web-mode-html-tag-bracket-face 28336 . 28337) (nil tag-name "template" 28318 . 28319) (nil tag-type end 28318 . 28319) (nil tag-end t 28318 . 28319) (nil font-lock-face web-mode-html-tag-bracket-face 28318 . 28319) (nil tag-name "template" 28310 . 28318) (nil tag-type end 28310 . 28318) (nil font-lock-face web-mode-html-tag-face 28310 . 28318) (nil tag-name "template" 28309 . 28310) (nil tag-type end 28309 . 28310) (nil font-lock-face web-mode-html-tag-bracket-face 28309 . 28310) (nil tag-name "template" 28308 . 28309) (nil tag-type end 28308 . 28309) (nil tag-beg 20 28308 . 28309) (nil font-lock-face web-mode-html-tag-bracket-face 28308 . 28309) (nil tag-name "v-icon" 28290 . 28291) (nil tag-type end 28290 . 28291) (nil tag-end t 28290 . 28291) (nil font-lock-face web-mode-html-tag-bracket-face 28290 . 28291) (nil tag-name "v-icon" 28284 . 28290) (nil tag-type end 28284 . 28290) (nil font-lock-face web-mode-html-tag-custom-face 28284 . 28290) (nil tag-name "v-icon" 28283 . 28284) (nil tag-type end 28283 . 28284) (nil font-lock-face web-mode-html-tag-bracket-face 28283 . 28284) (nil tag-name "v-icon" 28282 . 28283) (nil tag-type end 28282 . 28283) (nil tag-beg 22 28282 . 28283) (nil font-lock-face web-mode-html-tag-bracket-face 28282 . 28283) (nil block-side t 28262 . 28263) (nil block-end t 28262 . 28263) (nil block-token delimiter-end 28262 . 28263) (nil font-lock-face web-mode-block-delimiter-face 28262 . 28263) (nil face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) 28262 . 28263) (nil block-side t 28261 . 28262) (nil block-token delimiter-end 28261 . 28262) (nil font-lock-face web-mode-block-delimiter-face 28261 . 28262) (nil face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) 28261 . 28262) (nil block-side t 28259 . 28261) (nil block-side t 28258 . 28259) (nil face web-mode-variable-name-face 28258 . 28259) (nil block-side t 28257 . 28258) (nil face web-mode-variable-name-face 28257 . 28258) (nil block-side t 28256 . 28257) (nil face web-mode-variable-name-face 28256 . 28257) (nil block-side t 28255 . 28256) (nil face web-mode-variable-name-face 28255 . 28256) (nil block-side t 28254 . 28255) (nil face web-mode-variable-name-face 28254 . 28255) (nil block-side t 28253 . 28254) (nil face web-mode-variable-name-face 28253 . 28254) (nil block-side t 28252 . 28253) (nil block-side t 28251 . 28252) (nil face web-mode-variable-name-face 28251 . 28252) (nil block-side t 28250 . 28251) (nil face web-mode-variable-name-face 28250 . 28251) (nil block-side t 28249 . 28250) (nil face web-mode-variable-name-face 28249 . 28250) (nil block-side t 28244 . 28249) (nil block-side t 28243 . 28244) (nil face web-mode-variable-name-face 28243 . 28244) (nil block-side t 28242 . 28243) (nil face web-mode-variable-name-face 28242 . 28243) (nil block-side t 28241 . 28242) (nil face web-mode-variable-name-face 28241 . 28242) (nil block-side t 28240 . 28241) (nil face web-mode-variable-name-face 28240 . 28241) (nil block-side t 28239 . 28240) (nil block-side t 28238 . 28239) (nil face web-mode-variable-name-face 28238 . 28239) (nil block-side t 28237 . 28238) (nil face web-mode-variable-name-face 28237 . 28238) (nil block-side t 28236 . 28237) (nil face web-mode-variable-name-face 28236 . 28237) (nil block-side t 28235 . 28236) (nil face web-mode-variable-name-face 28235 . 28236) (nil block-side t 28234 . 28235) (nil face web-mode-variable-name-face 28234 . 28235) (nil block-side t 28233 . 28234) (nil face web-mode-variable-name-face 28233 . 28234) (nil block-side t 28232 . 28233) (nil block-side t 28231 . 28232) (nil face web-mode-variable-name-face 28231 . 28232) (nil block-side t 28230 . 28231) (nil face web-mode-variable-name-face 28230 . 28231) (nil block-side t 28229 . 28230) (nil face web-mode-variable-name-face 28229 . 28230) (nil block-side t 28225 . 28229) (nil block-side t 28224 . 28225) (nil face web-mode-variable-name-face 28224 . 28225) (nil block-side t 28223 . 28224) (nil face web-mode-variable-name-face 28223 . 28224) (nil block-side t 28222 . 28223) (nil face web-mode-variable-name-face 28222 . 28223) (nil block-side t 28221 . 28222) (nil face web-mode-variable-name-face 28221 . 28222) (nil block-side t 28220 . 28221) (nil block-side t 28219 . 28220) (nil block-token delimiter-beg 28219 . 28220) (nil font-lock-face web-mode-block-delimiter-face 28219 . 28220) (nil face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) 28219 . 28220) (nil block-beg 0 28218 . 28219) (nil block-controls 0 28218 . 28219) (nil block-side t 28218 . 28219) (nil block-token delimiter-beg 28218 . 28219) (nil font-lock-face web-mode-block-delimiter-face 28218 . 28219) (nil face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) 28218 . 28219) (nil tag-name "v-icon" 28196 . 28197) (nil tag-type start 28196 . 28197) (nil tag-end t 28196 . 28197) (nil font-lock-face web-mode-html-tag-bracket-face 28196 . 28197) (nil tag-attr t 28195 . 28196) (nil tag-attr-end 0 28195 . 28196) (nil tag-name "v-icon" 28195 . 28196) (nil tag-type start 28195 . 28196) (nil font-lock-face web-mode-html-attr-engine-face 28195 . 28196) (nil tag-attr t 28191 . 28195) (nil tag-name "v-icon" 28191 . 28195) (nil tag-type start 28191 . 28195) (nil font-lock-face web-mode-html-attr-engine-face 28191 . 28195) (nil tag-attr-beg 2 28190 . 28191) (nil tag-attr t 28190 . 28191) (nil tag-name "v-icon" 28190 . 28191) (nil tag-type start 28190 . 28191) (nil font-lock-face web-mode-html-attr-engine-face 28190 . 28191) (nil tag-name "v-icon" 28189 . 28190) (nil tag-type start 28189 . 28190) (nil tag-name "v-icon" 28183 . 28189) (nil tag-type start 28183 . 28189) (nil font-lock-face web-mode-html-tag-custom-face 28183 . 28189) (nil tag-name "v-icon" 28182 . 28183) (nil tag-type start 28182 . 28183) (nil tag-beg 19 28182 . 28183) (nil font-lock-face web-mode-html-tag-bracket-face 28182 . 28183) (nil tag-name "v-icon" 28162 . 28163) (nil tag-type end 28162 . 28163) (nil tag-end t 28162 . 28163) (nil font-lock-face web-mode-html-tag-bracket-face 28162 . 28163) (nil tag-name "v-icon" 28156 . 28162) (nil tag-type end 28156 . 28162) (nil font-lock-face web-mode-html-tag-custom-face 28156 . 28162) (nil tag-name "v-icon" 28155 . 28156) (nil tag-type end 28155 . 28156) (nil font-lock-face web-mode-html-tag-bracket-face 28155 . 28156) (nil tag-name "v-icon" 28154 . 28155) (nil tag-type end 28154 . 28155) (nil tag-beg 22 28154 . 28155) (nil font-lock-face web-mode-html-tag-bracket-face 28154 . 28155) (nil tag-name "v-icon" 28090 . 28091) (nil tag-type start 28090 . 28091) (nil tag-end t 28090 . 28091) (nil font-lock-face web-mode-html-tag-bracket-face 28090 . 28091) (nil tag-name "v-icon" 28071 . 28090) (nil tag-type start 28071 . 28090) (nil block-side t 28070 . 28071) (nil block-end t 28070 . 28071) (nil block-token delimiter-end 28070 . 28071) (nil tag-attr t 28070 . 28071) (nil tag-attr-end 11 28070 . 28071) (nil tag-name "v-icon" 28070 . 28071) (nil tag-type start 28070 . 28071) (nil font-lock-face web-mode-block-delimiter-face 28070 . 28071) (nil block-side t 28069 . 28070) (nil tag-attr t 28069 . 28070) (nil tag-name "v-icon" 28069 . 28070) (nil tag-type start 28069 . 28070) (nil face web-mode-variable-name-face 28069 . 28070) (nil block-side t 28068 . 28069) (nil tag-attr t 28068 . 28069) (nil tag-name "v-icon" 28068 . 28069) (nil tag-type start 28068 . 28069) (nil face web-mode-variable-name-face 28068 . 28069) (nil block-side t 28067 . 28068) (nil tag-attr t 28067 . 28068) (nil tag-name "v-icon" 28067 . 28068) (nil tag-type start 28067 . 28068) (nil face web-mode-variable-name-face 28067 . 28068) (nil block-side t 28066 . 28067) (nil tag-attr t 28066 . 28067) (nil tag-name "v-icon" 28066 . 28067) (nil tag-type start 28066 . 28067) (nil face web-mode-variable-name-face 28066 . 28067) (nil block-side t 28065 . 28066) (nil tag-attr t 28065 . 28066) (nil tag-name "v-icon" 28065 . 28066) (nil tag-type start 28065 . 28066) (nil face web-mode-variable-name-face 28065 . 28066) (nil block-side t 28064 . 28065) (nil tag-attr t 28064 . 28065) (nil tag-name "v-icon" 28064 . 28065) (nil tag-type start 28064 . 28065) (nil face web-mode-variable-name-face 28064 . 28065) (nil block-side t 28063 . 28064) (nil tag-attr t 28063 . 28064) (nil tag-name "v-icon" 28063 . 28064) (nil tag-type start 28063 . 28064) (nil face web-mode-variable-name-face 28063 . 28064) (nil block-side t 28062 . 28063) (nil tag-attr t 28062 . 28063) (nil tag-name "v-icon" 28062 . 28063) (nil tag-type start 28062 . 28063) (nil face web-mode-variable-name-face 28062 . 28063) (nil block-side t 28061 . 28062) (nil tag-attr t 28061 . 28062) (nil tag-name "v-icon" 28061 . 28062) (nil tag-type start 28061 . 28062) (nil face web-mode-variable-name-face 28061 . 28062) (nil block-side t 28060 . 28061) (nil tag-attr t 28060 . 28061) (nil tag-name "v-icon" 28060 . 28061) (nil tag-type start 28060 . 28061) (nil face web-mode-variable-name-face 28060 . 28061) (nil block-side t 28059 . 28060) (nil tag-attr t 28059 . 28060) (nil tag-name "v-icon" 28059 . 28060) (nil tag-type start 28059 . 28060) (nil face web-mode-variable-name-face 28059 . 28060) (nil block-side t 28058 . 28059) (nil tag-attr t 28058 . 28059) (nil tag-name "v-icon" 28058 . 28059) (nil tag-type start 28058 . 28059) (nil face web-mode-variable-name-face 28058 . 28059) (nil block-side t 28057 . 28058) (nil tag-attr t 28057 . 28058) (nil tag-name "v-icon" 28057 . 28058) (nil tag-type start 28057 . 28058) (nil face web-mode-variable-name-face 28057 . 28058) (nil block-side t 28056 . 28057) (nil tag-attr t 28056 . 28057) (nil tag-name "v-icon" 28056 . 28057) (nil tag-type start 28056 . 28057) (nil face web-mode-variable-name-face 28056 . 28057) (nil block-side t 28055 . 28056) (nil tag-attr t 28055 . 28056) (nil tag-name "v-icon" 28055 . 28056) (nil tag-type start 28055 . 28056) (nil face web-mode-variable-name-face 28055 . 28056) (nil block-side t 28054 . 28055) (nil tag-attr t 28054 . 28055) (nil tag-name "v-icon" 28054 . 28055) (nil tag-type start 28054 . 28055) (nil face web-mode-variable-name-face 28054 . 28055) (nil block-side t 28053 . 28054) (nil tag-attr t 28053 . 28054) (nil tag-name "v-icon" 28053 . 28054) (nil tag-type start 28053 . 28054) (nil face web-mode-variable-name-face 28053 . 28054) (nil block-side t 28052 . 28053) (nil tag-attr t 28052 . 28053) (nil tag-name "v-icon" 28052 . 28053) (nil tag-type start 28052 . 28053) (nil face web-mode-variable-name-face 28052 . 28053) (nil block-side t 28051 . 28052) (nil tag-attr t 28051 . 28052) (nil tag-name "v-icon" 28051 . 28052) (nil tag-type start 28051 . 28052) (nil face web-mode-variable-name-face 28051 . 28052) (nil block-side t 28050 . 28051) (nil tag-attr t 28050 . 28051) (nil tag-name "v-icon" 28050 . 28051) (nil tag-type start 28050 . 28051) (nil face web-mode-variable-name-face 28050 . 28051) (nil block-side t 28049 . 28050) (nil tag-attr t 28049 . 28050) (nil tag-name "v-icon" 28049 . 28050) (nil tag-type start 28049 . 28050) (nil face web-mode-variable-name-face 28049 . 28050) (nil block-side t 28048 . 28049) (nil tag-attr t 28048 . 28049) (nil tag-name "v-icon" 28048 . 28049) (nil tag-type start 28048 . 28049) (nil face web-mode-variable-name-face 28048 . 28049) (nil block-side t 28047 . 28048) (nil block-token delimiter-beg 28047 . 28048) (nil tag-attr t 28047 . 28048) (nil tag-name "v-icon" 28047 . 28048) (nil tag-type start 28047 . 28048) (nil font-lock-face web-mode-block-delimiter-face 28047 . 28048) (nil block-side t 28046 . 28047) (nil block-token delimiter-beg 28046 . 28047) (nil tag-attr t 28046 . 28047) (nil tag-name "v-icon" 28046 . 28047) (nil tag-type start 28046 . 28047) (nil font-lock-face web-mode-block-delimiter-face 28046 . 28047) (nil block-side t 28045 . 28046) (nil block-token delimiter-beg 28045 . 28046) (nil tag-attr t 28045 . 28046) (nil tag-name "v-icon" 28045 . 28046) (nil tag-type start 28045 . 28046) (nil font-lock-face web-mode-block-delimiter-face 28045 . 28046) (nil block-side t 28044 . 28045) (nil block-token delimiter-beg 28044 . 28045) (nil tag-attr t 28044 . 28045) (nil tag-name "v-icon" 28044 . 28045) (nil tag-type start 28044 . 28045) (nil font-lock-face web-mode-block-delimiter-face 28044 . 28045) (nil block-side t 28043 . 28044) (nil block-token delimiter-beg 28043 . 28044) (nil tag-attr t 28043 . 28044) (nil tag-name "v-icon" 28043 . 28044) (nil tag-type start 28043 . 28044) (nil font-lock-face web-mode-block-delimiter-face 28043 . 28044) (nil block-side t 28042 . 28043) (nil block-token delimiter-beg 28042 . 28043) (nil tag-attr t 28042 . 28043) (nil tag-name "v-icon" 28042 . 28043) (nil tag-type start 28042 . 28043) (nil font-lock-face web-mode-block-delimiter-face 28042 . 28043) (nil block-side t 28041 . 28042) (nil block-token delimiter-beg 28041 . 28042) (nil tag-attr t 28041 . 28042) (nil tag-name "v-icon" 28041 . 28042) (nil tag-type start 28041 . 28042) (nil font-lock-face web-mode-block-delimiter-face 28041 . 28042) (nil block-side t 28040 . 28041) (nil block-token delimiter-beg 28040 . 28041) (nil tag-attr t 28040 . 28041) (nil tag-name "v-icon" 28040 . 28041) (nil tag-type start 28040 . 28041) (nil font-lock-face web-mode-block-delimiter-face 28040 . 28041) (nil block-side t 28039 . 28040) (nil block-token delimiter-beg 28039 . 28040) (nil tag-attr t 28039 . 28040) (nil tag-name "v-icon" 28039 . 28040) (nil tag-type start 28039 . 28040) (nil font-lock-face web-mode-block-delimiter-face 28039 . 28040) (nil block-side t 28038 . 28039) (nil block-token delimiter-beg 28038 . 28039) (nil tag-attr t 28038 . 28039) (nil tag-name "v-icon" 28038 . 28039) (nil tag-type start 28038 . 28039) (nil font-lock-face web-mode-block-delimiter-face 28038 . 28039) (nil block-side t 28037 . 28038) (nil block-token delimiter-beg 28037 . 28038) (nil tag-attr t 28037 . 28038) (nil tag-name "v-icon" 28037 . 28038) (nil tag-type start 28037 . 28038) (nil font-lock-face web-mode-block-delimiter-face 28037 . 28038) (nil block-side t 28036 . 28037) (nil block-token delimiter-beg 28036 . 28037) (nil tag-attr t 28036 . 28037) (nil tag-name "v-icon" 28036 . 28037) (nil tag-type start 28036 . 28037) (nil font-lock-face web-mode-block-delimiter-face 28036 . 28037) (nil block-beg 0 28035 . 28036) (nil block-controls 0 28035 . 28036) (nil block-side t 28035 . 28036) (nil block-token delimiter-beg 28035 . 28036) (nil tag-attr-beg 2 28035 . 28036) (nil tag-attr t 28035 . 28036) (nil tag-name "v-icon" 28035 . 28036) (nil tag-type start 28035 . 28036) (nil font-lock-face web-mode-block-delimiter-face 28035 . 28036) (nil tag-name "v-icon" 28014 . 28035) (nil tag-type start 28014 . 28035) (nil block-side t 28013 . 28014) (nil block-end t 28013 . 28014) (nil block-token delimiter-end 28013 . 28014) (nil tag-attr t 28013 . 28014) (nil tag-attr-end 10 28013 . 28014) (nil tag-name "v-icon" 28013 . 28014) (nil tag-type start 28013 . 28014) (nil font-lock-face web-mode-block-delimiter-face 28013 . 28014) (nil block-side t 28012 . 28013) (nil tag-attr t 28012 . 28013) (nil tag-name "v-icon" 28012 . 28013) (nil tag-type start 28012 . 28013) (nil block-side t 28011 . 28012) (nil tag-attr t 28011 . 28012) (nil tag-name "v-icon" 28011 . 28012) (nil tag-type start 28011 . 28012) (nil face web-mode-variable-name-face 28011 . 28012) (nil block-side t 28010 . 28011) (nil tag-attr t 28010 . 28011) (nil tag-name "v-icon" 28010 . 28011) (nil tag-type start 28010 . 28011) (nil face web-mode-variable-name-face 28010 . 28011) (nil block-side t 28009 . 28010) (nil tag-attr t 28009 . 28010) (nil tag-name "v-icon" 28009 . 28010) (nil tag-type start 28009 . 28010) (nil block-side t 28008 . 28009) (nil tag-attr t 28008 . 28009) (nil tag-name "v-icon" 28008 . 28009) (nil tag-type start 28008 . 28009) (nil face web-mode-variable-name-face 28008 . 28009) (nil block-side t 28007 . 28008) (nil tag-attr t 28007 . 28008) (nil tag-name "v-icon" 28007 . 28008) (nil tag-type start 28007 . 28008) (nil face web-mode-variable-name-face 28007 . 28008) (nil block-side t 28006 . 28007) (nil tag-attr t 28006 . 28007) (nil tag-name "v-icon" 28006 . 28007) (nil tag-type start 28006 . 28007) (nil face web-mode-variable-name-face 28006 . 28007) (nil block-side t 28005 . 28006) (nil tag-attr t 28005 . 28006) (nil tag-name "v-icon" 28005 . 28006) (nil tag-type start 28005 . 28006) (nil face web-mode-variable-name-face 28005 . 28006) (nil block-side t 28004 . 28005) (nil tag-attr t 28004 . 28005) (nil tag-name "v-icon" 28004 . 28005) (nil tag-type start 28004 . 28005) (nil block-side t 27982 . 28004) (nil tag-attr t 27982 . 28004) (nil tag-name "v-icon" 27982 . 28004) (nil tag-type start 27982 . 28004) (nil face web-mode-function-call-face 27982 . 28004) (nil block-side t 27981 . 27982) (nil block-token delimiter-beg 27981 . 27982) (nil tag-attr t 27981 . 27982) (nil tag-name "v-icon" 27981 . 27982) (nil tag-type start 27981 . 27982) (nil font-lock-face web-mode-block-delimiter-face 27981 . 27982) (nil block-side t 27980 . 27981) (nil block-token delimiter-beg 27980 . 27981) (nil tag-attr t 27980 . 27981) (nil tag-name "v-icon" 27980 . 27981) (nil tag-type start 27980 . 27981) (nil font-lock-face web-mode-block-delimiter-face 27980 . 27981) (nil block-side t 27979 . 27980) (nil block-token delimiter-beg 27979 . 27980) (nil tag-attr t 27979 . 27980) (nil tag-name "v-icon" 27979 . 27980) (nil tag-type start 27979 . 27980) (nil font-lock-face web-mode-block-delimiter-face 27979 . 27980) (nil block-side t 27978 . 27979) (nil block-token delimiter-beg 27978 . 27979) (nil tag-attr t 27978 . 27979) (nil tag-name "v-icon" 27978 . 27979) (nil tag-type start 27978 . 27979) (nil font-lock-face web-mode-block-delimiter-face 27978 . 27979) (nil block-side t 27977 . 27978) (nil block-token delimiter-beg 27977 . 27978) (nil tag-attr t 27977 . 27978) (nil tag-name "v-icon" 27977 . 27978) (nil tag-type start 27977 . 27978) (nil font-lock-face web-mode-block-delimiter-face 27977 . 27978) (nil block-side t 27976 . 27977) (nil block-token delimiter-beg 27976 . 27977) (nil tag-attr t 27976 . 27977) (nil tag-name "v-icon" 27976 . 27977) (nil tag-type start 27976 . 27977) (nil font-lock-face web-mode-block-delimiter-face 27976 . 27977) (nil block-side t 27975 . 27976) (nil block-token delimiter-beg 27975 . 27976) (nil tag-attr t 27975 . 27976) (nil tag-name "v-icon" 27975 . 27976) (nil tag-type start 27975 . 27976) (nil font-lock-face web-mode-block-delimiter-face 27975 . 27976) (nil block-side t 27974 . 27975) (nil block-token delimiter-beg 27974 . 27975) (nil tag-attr t 27974 . 27975) (nil tag-name "v-icon" 27974 . 27975) (nil tag-type start 27974 . 27975) (nil font-lock-face web-mode-block-delimiter-face 27974 . 27975) (nil block-side t 27973 . 27974) (nil block-token delimiter-beg 27973 . 27974) (nil tag-attr t 27973 . 27974) (nil tag-name "v-icon" 27973 . 27974) (nil tag-type start 27973 . 27974) (nil font-lock-face web-mode-block-delimiter-face 27973 . 27974) (nil block-side t 27972 . 27973) (nil block-token delimiter-beg 27972 . 27973) (nil tag-attr t 27972 . 27973) (nil tag-name "v-icon" 27972 . 27973) (nil tag-type start 27972 . 27973) (nil font-lock-face web-mode-block-delimiter-face 27972 . 27973) (nil block-side t 27971 . 27972) (nil block-token delimiter-beg 27971 . 27972) (nil tag-attr t 27971 . 27972) (nil tag-name "v-icon" 27971 . 27972) (nil tag-type start 27971 . 27972) (nil font-lock-face web-mode-block-delimiter-face 27971 . 27972) (nil block-beg 0 27970 . 27971) (nil block-controls 0 27970 . 27971) (nil block-side t 27970 . 27971) (nil block-token delimiter-beg 27970 . 27971) (nil tag-attr-beg 2 27970 . 27971) (nil tag-attr t 27970 . 27971) (nil tag-name "v-icon" 27970 . 27971) (nil tag-type start 27970 . 27971) (nil font-lock-face web-mode-block-delimiter-face 27970 . 27971) (nil tag-name "v-icon" 27949 . 27970) (nil tag-type start 27949 . 27970) (nil block-side t 27948 . 27949) (nil block-end t 27948 . 27949) (nil block-token delimiter-end 27948 . 27949) (nil tag-attr t 27948 . 27949) (nil tag-attr-end 6 27948 . 27949) (nil tag-name "v-icon" 27948 . 27949) (nil tag-type start 27948 . 27949) (nil font-lock-face web-mode-block-delimiter-face 27948 . 27949) (nil block-side t 27942 . 27948) (nil tag-attr t 27942 . 27948) (nil tag-name "v-icon" 27942 . 27948) (nil tag-type start 27942 . 27948) (nil block-side t 27941 . 27942) (nil tag-attr t 27941 . 27942) (nil tag-name "v-icon" 27941 . 27942) (nil tag-type start 27941 . 27942) (nil face web-mode-variable-name-face 27941 . 27942) (nil block-side t 27940 . 27941) (nil tag-attr t 27940 . 27941) (nil tag-name "v-icon" 27940 . 27941) (nil tag-type start 27940 . 27941) (nil face web-mode-variable-name-face 27940 . 27941) (nil block-side t 27939 . 27940) (nil tag-attr t 27939 . 27940) (nil tag-name "v-icon" 27939 . 27940) (nil tag-type start 27939 . 27940) (nil block-side t 27938 . 27939) (nil tag-attr t 27938 . 27939) (nil tag-name "v-icon" 27938 . 27939) (nil tag-type start 27938 . 27939) (nil face web-mode-variable-name-face 27938 . 27939) (nil block-side t 27937 . 27938) (nil tag-attr t 27937 . 27938) (nil tag-name "v-icon" 27937 . 27938) (nil tag-type start 27937 . 27938) (nil face web-mode-variable-name-face 27937 . 27938) (nil block-side t 27936 . 27937) (nil tag-attr t 27936 . 27937) (nil tag-name "v-icon" 27936 . 27937) (nil tag-type start 27936 . 27937) (nil face web-mode-variable-name-face 27936 . 27937) (nil block-side t 27935 . 27936) (nil tag-attr t 27935 . 27936) (nil tag-name "v-icon" 27935 . 27936) (nil tag-type start 27935 . 27936) (nil face web-mode-variable-name-face 27935 . 27936) (nil block-side t 27934 . 27935) (nil tag-attr t 27934 . 27935) (nil tag-name "v-icon" 27934 . 27935) (nil tag-type start 27934 . 27935) (nil block-side t 27933 . 27934) (nil tag-attr t 27933 . 27934) (nil tag-name "v-icon" 27933 . 27934) (nil tag-type start 27933 . 27934) (nil face web-mode-variable-name-face 27933 . 27934) (nil block-side t 27932 . 27933) (nil tag-attr t 27932 . 27933) (nil tag-name "v-icon" 27932 . 27933) (nil tag-type start 27932 . 27933) (nil face web-mode-variable-name-face 27932 . 27933) (nil block-side t 27931 . 27932) (nil tag-attr t 27931 . 27932) (nil tag-name "v-icon" 27931 . 27932) (nil tag-type start 27931 . 27932) (nil face web-mode-variable-name-face 27931 . 27932) (nil block-side t 27930 . 27931) (nil tag-attr t 27930 . 27931) (nil tag-name "v-icon" 27930 . 27931) (nil tag-type start 27930 . 27931) (nil face web-mode-variable-name-face 27930 . 27931) (nil block-side t 27929 . 27930) (nil tag-attr t 27929 . 27930) (nil tag-name "v-icon" 27929 . 27930) (nil tag-type start 27929 . 27930) (nil face web-mode-variable-name-face 27929 . 27930) (nil block-side t 27928 . 27929) (nil tag-attr t 27928 . 27929) (nil tag-name "v-icon" 27928 . 27929) (nil tag-type start 27928 . 27929) (nil face web-mode-variable-name-face 27928 . 27929) (nil block-side t 27927 . 27928) (nil tag-attr t 27927 . 27928) (nil tag-name "v-icon" 27927 . 27928) (nil tag-type start 27927 . 27928) (nil face web-mode-variable-name-face 27927 . 27928) (nil block-side t 27926 . 27927) (nil tag-attr t 27926 . 27927) (nil tag-name "v-icon" 27926 . 27927) (nil tag-type start 27926 . 27927) (nil face web-mode-variable-name-face 27926 . 27927) (nil block-side t 27925 . 27926) (nil tag-attr t 27925 . 27926) (nil tag-name "v-icon" 27925 . 27926) (nil tag-type start 27925 . 27926) (nil face web-mode-variable-name-face 27925 . 27926) (nil block-side t 27924 . 27925) (nil tag-attr t 27924 . 27925) (nil tag-name "v-icon" 27924 . 27925) (nil tag-type start 27924 . 27925) (nil face web-mode-variable-name-face 27924 . 27925) (nil block-side t 27923 . 27924) (nil tag-attr t 27923 . 27924) (nil tag-name "v-icon" 27923 . 27924) (nil tag-type start 27923 . 27924) (nil face web-mode-variable-name-face 27923 . 27924) (nil block-side t 27922 . 27923) (nil tag-attr t 27922 . 27923) (nil tag-name "v-icon" 27922 . 27923) (nil tag-type start 27922 . 27923) (nil face web-mode-variable-name-face 27922 . 27923) (nil block-side t 27921 . 27922) (nil tag-attr t 27921 . 27922) (nil tag-name "v-icon" 27921 . 27922) (nil tag-type start 27921 . 27922) (nil face web-mode-variable-name-face 27921 . 27922) (nil block-side t 27920 . 27921) (nil tag-attr t 27920 . 27921) (nil tag-name "v-icon" 27920 . 27921) (nil tag-type start 27920 . 27921) (nil face web-mode-variable-name-face 27920 . 27921) (nil block-side t 27919 . 27920) (nil tag-attr t 27919 . 27920) (nil tag-name "v-icon" 27919 . 27920) (nil tag-type start 27919 . 27920) (nil face web-mode-variable-name-face 27919 . 27920) (nil block-side t 27918 . 27919) (nil tag-attr t 27918 . 27919) (nil tag-name "v-icon" 27918 . 27919) (nil tag-type start 27918 . 27919) (nil face web-mode-variable-name-face 27918 . 27919) (nil block-side t 27915 . 27918) (nil tag-attr t 27915 . 27918) (nil tag-name "v-icon" 27915 . 27918) (nil tag-type start 27915 . 27918) (nil block-side t 27914 . 27915) (nil tag-attr t 27914 . 27915) (nil tag-name "v-icon" 27914 . 27915) (nil tag-type start 27914 . 27915) (nil face web-mode-variable-name-face 27914 . 27915) (nil block-side t 27913 . 27914) (nil tag-attr t 27913 . 27914) (nil tag-name "v-icon" 27913 . 27914) (nil tag-type start 27913 . 27914) (nil face web-mode-variable-name-face 27913 . 27914) (nil block-side t 27912 . 27913) (nil tag-attr t 27912 . 27913) (nil tag-name "v-icon" 27912 . 27913) (nil tag-type start 27912 . 27913) (nil face web-mode-variable-name-face 27912 . 27913) (nil block-side t 27911 . 27912) (nil tag-attr t 27911 . 27912) (nil tag-name "v-icon" 27911 . 27912) (nil tag-type start 27911 . 27912) (nil face web-mode-variable-name-face 27911 . 27912) (nil block-side t 27906 . 27911) (nil tag-attr t 27906 . 27911) (nil tag-name "v-icon" 27906 . 27911) (nil tag-type start 27906 . 27911) (nil block-side t 27905 . 27906) (nil tag-attr t 27905 . 27906) (nil tag-name "v-icon" 27905 . 27906) (nil tag-type start 27905 . 27906) (nil face web-mode-variable-name-face 27905 . 27906) (nil block-side t 27904 . 27905) (nil tag-attr t 27904 . 27905) (nil tag-name "v-icon" 27904 . 27905) (nil tag-type start 27904 . 27905) (nil face web-mode-variable-name-face 27904 . 27905) (nil block-side t 27903 . 27904) (nil tag-attr t 27903 . 27904) (nil tag-name "v-icon" 27903 . 27904) (nil tag-type start 27903 . 27904) (nil block-side t 27902 . 27903) (nil tag-attr t 27902 . 27903) (nil tag-name "v-icon" 27902 . 27903) (nil tag-type start 27902 . 27903) (nil face web-mode-variable-name-face 27902 . 27903) (nil block-side t 27901 . 27902) (nil tag-attr t 27901 . 27902) (nil tag-name "v-icon" 27901 . 27902) (nil tag-type start 27901 . 27902) (nil face web-mode-variable-name-face 27901 . 27902) (nil block-side t 27900 . 27901) (nil tag-attr t 27900 . 27901) (nil tag-name "v-icon" 27900 . 27901) (nil tag-type start 27900 . 27901) (nil face web-mode-variable-name-face 27900 . 27901) (nil block-side t 27899 . 27900) (nil tag-attr t 27899 . 27900) (nil tag-name "v-icon" 27899 . 27900) (nil tag-type start 27899 . 27900) (nil face web-mode-variable-name-face 27899 . 27900) (nil block-side t 27898 . 27899) (nil tag-attr t 27898 . 27899) (nil tag-name "v-icon" 27898 . 27899) (nil tag-type start 27898 . 27899) (nil block-side t 27897 . 27898) (nil tag-attr t 27897 . 27898) (nil tag-name "v-icon" 27897 . 27898) (nil tag-type start 27897 . 27898) (nil face web-mode-variable-name-face 27897 . 27898) (nil block-side t 27896 . 27897) (nil tag-attr t 27896 . 27897) (nil tag-name "v-icon" 27896 . 27897) (nil tag-type start 27896 . 27897) (nil face web-mode-variable-name-face 27896 . 27897) (nil block-side t 27895 . 27896) (nil tag-attr t 27895 . 27896) (nil tag-name "v-icon" 27895 . 27896) (nil tag-type start 27895 . 27896) (nil face web-mode-variable-name-face 27895 . 27896) (nil block-side t 27894 . 27895) (nil tag-attr t 27894 . 27895) (nil tag-name "v-icon" 27894 . 27895) (nil tag-type start 27894 . 27895) (nil face web-mode-variable-name-face 27894 . 27895) (nil block-side t 27893 . 27894) (nil tag-attr t 27893 . 27894) (nil tag-name "v-icon" 27893 . 27894) (nil tag-type start 27893 . 27894) (nil face web-mode-variable-name-face 27893 . 27894) (nil block-side t 27892 . 27893) (nil tag-attr t 27892 . 27893) (nil tag-name "v-icon" 27892 . 27893) (nil tag-type start 27892 . 27893) (nil face web-mode-variable-name-face 27892 . 27893) (nil block-side t 27891 . 27892) (nil tag-attr t 27891 . 27892) (nil tag-name "v-icon" 27891 . 27892) (nil tag-type start 27891 . 27892) (nil face web-mode-variable-name-face 27891 . 27892) (nil block-side t 27890 . 27891) (nil tag-attr t 27890 . 27891) (nil tag-name "v-icon" 27890 . 27891) (nil tag-type start 27890 . 27891) (nil face web-mode-variable-name-face 27890 . 27891) (nil block-side t 27889 . 27890) (nil tag-attr t 27889 . 27890) (nil tag-name "v-icon" 27889 . 27890) (nil tag-type start 27889 . 27890) (nil face web-mode-variable-name-face 27889 . 27890) (nil block-side t 27888 . 27889) (nil tag-attr t 27888 . 27889) (nil tag-name "v-icon" 27888 . 27889) (nil tag-type start 27888 . 27889) (nil face web-mode-variable-name-face 27888 . 27889) (nil block-side t 27887 . 27888) (nil tag-attr t 27887 . 27888) (nil tag-name "v-icon" 27887 . 27888) (nil tag-type start 27887 . 27888) (nil face web-mode-variable-name-face 27887 . 27888) (nil block-side t 27886 . 27887) (nil tag-attr t 27886 . 27887) (nil tag-name "v-icon" 27886 . 27887) (nil tag-type start 27886 . 27887) (nil face web-mode-variable-name-face 27886 . 27887) (nil block-side t 27885 . 27886) (nil tag-attr t 27885 . 27886) (nil tag-name "v-icon" 27885 . 27886) (nil tag-type start 27885 . 27886) (nil face web-mode-variable-name-face 27885 . 27886) (nil block-side t 27884 . 27885) (nil tag-attr t 27884 . 27885) (nil tag-name "v-icon" 27884 . 27885) (nil tag-type start 27884 . 27885) (nil face web-mode-variable-name-face 27884 . 27885) (nil block-side t 27883 . 27884) (nil tag-attr t 27883 . 27884) (nil tag-name "v-icon" 27883 . 27884) (nil tag-type start 27883 . 27884) (nil face web-mode-variable-name-face 27883 . 27884) (nil block-side t 27882 . 27883) (nil tag-attr t 27882 . 27883) (nil tag-name "v-icon" 27882 . 27883) (nil tag-type start 27882 . 27883) (nil face web-mode-variable-name-face 27882 . 27883) (nil block-side t 27881 . 27882) (nil block-token delimiter-beg 27881 . 27882) (nil tag-attr t 27881 . 27882) (nil tag-name "v-icon" 27881 . 27882) (nil tag-type start 27881 . 27882) (nil font-lock-face web-mode-block-delimiter-face 27881 . 27882) (nil block-side t 27880 . 27881) (nil block-token delimiter-beg 27880 . 27881) (nil tag-attr t 27880 . 27881) (nil tag-name "v-icon" 27880 . 27881) (nil tag-type start 27880 . 27881) (nil font-lock-face web-mode-block-delimiter-face 27880 . 27881) (nil block-side t 27879 . 27880) (nil block-token delimiter-beg 27879 . 27880) (nil tag-attr t 27879 . 27880) (nil tag-name "v-icon" 27879 . 27880) (nil tag-type start 27879 . 27880) (nil font-lock-face web-mode-block-delimiter-face 27879 . 27880) (nil block-side t 27878 . 27879) (nil block-token delimiter-beg 27878 . 27879) (nil tag-attr t 27878 . 27879) (nil tag-name "v-icon" 27878 . 27879) (nil tag-type start 27878 . 27879) (nil font-lock-face web-mode-block-delimiter-face 27878 . 27879) (nil block-side t 27877 . 27878) (nil block-token delimiter-beg 27877 . 27878) (nil tag-attr t 27877 . 27878) (nil tag-name "v-icon" 27877 . 27878) (nil tag-type start 27877 . 27878) (nil font-lock-face web-mode-block-delimiter-face 27877 . 27878) (nil block-side t 27876 . 27877) (nil block-token delimiter-beg 27876 . 27877) (nil tag-attr t 27876 . 27877) (nil tag-name "v-icon" 27876 . 27877) (nil tag-type start 27876 . 27877) (nil font-lock-face web-mode-block-delimiter-face 27876 . 27877) (nil block-side t 27875 . 27876) (nil block-token delimiter-beg 27875 . 27876) (nil tag-attr t 27875 . 27876) (nil tag-name "v-icon" 27875 . 27876) (nil tag-type start 27875 . 27876) (nil font-lock-face web-mode-block-delimiter-face 27875 . 27876) (nil block-beg 0 27874 . 27875) (nil block-controls 0 27874 . 27875) (nil block-side t 27874 . 27875) (nil block-token delimiter-beg 27874 . 27875) (nil tag-attr-beg 2 27874 . 27875) (nil tag-attr t 27874 . 27875) (nil tag-name "v-icon" 27874 . 27875) (nil tag-type start 27874 . 27875) (nil font-lock-face web-mode-block-delimiter-face 27874 . 27875) (nil tag-name "v-icon" 27873 . 27874) (nil tag-type start 27873 . 27874) (nil tag-attr t 27872 . 27873) (nil tag-attr-end 4 27872 . 27873) (nil tag-name "v-icon" 27872 . 27873) (nil tag-type start 27872 . 27873) (nil font-lock-face web-mode-html-attr-value-face 27872 . 27873) (nil tag-attr t 27856 . 27872) (nil tag-name "v-icon" 27856 . 27872) (nil tag-type start 27856 . 27872) (nil font-lock-face web-mode-html-attr-value-face 27856 . 27872) (nil tag-attr t 27855 . 27856) (nil tag-name "v-icon" 27855 . 27856) (nil tag-type start 27855 . 27856) (nil font-lock-face web-mode-html-attr-equal-face 27855 . 27856) (nil tag-attr t 27852 . 27855) (nil tag-name "v-icon" 27852 . 27855) (nil tag-type start 27852 . 27855) (nil font-lock-face web-mode-html-attr-engine-face 27852 . 27855) (nil tag-attr-beg 2 27851 . 27852) (nil tag-attr t 27851 . 27852) (nil tag-name "v-icon" 27851 . 27852) (nil tag-type start 27851 . 27852) (nil font-lock-face web-mode-html-attr-engine-face 27851 . 27852) (nil tag-name "v-icon" 27850 . 27851) (nil tag-type start 27850 . 27851) (nil tag-name "v-icon" 27844 . 27850) (nil tag-type start 27844 . 27850) (nil font-lock-face web-mode-html-tag-custom-face 27844 . 27850) (nil tag-name "v-icon" 27843 . 27844) (nil tag-type start 27843 . 27844) (nil tag-beg 19 27843 . 27844) (nil font-lock-face web-mode-html-tag-bracket-face 27843 . 27844) (nil tag-name "template" 27823 . 27824) (nil tag-type start 27823 . 27824) (nil tag-end t 27823 . 27824) (nil font-lock-face web-mode-html-tag-bracket-face 27823 . 27824) (nil block-side t 27822 . 27823) (nil block-end t 27822 . 27823) (nil block-token delimiter-end 27822 . 27823) (nil tag-attr t 27822 . 27823) (nil tag-attr-end 14 27822 . 27823) (nil tag-name "template" 27822 . 27823) (nil tag-type start 27822 . 27823) (nil font-lock-face web-mode-block-delimiter-face 27822 . 27823) (nil block-side t 27820 . 27822) (nil tag-attr t 27820 . 27822) (nil tag-name "template" 27820 . 27822) (nil tag-type start 27820 . 27822) (nil block-side t 27819 . 27820) (nil tag-attr t 27819 . 27820) (nil tag-name "template" 27819 . 27820) (nil tag-type start 27819 . 27820) (nil face web-mode-variable-name-face 27819 . 27820) (nil block-side t 27818 . 27819) (nil tag-attr t 27818 . 27819) (nil tag-name "template" 27818 . 27819) (nil tag-type start 27818 . 27819) (nil face web-mode-variable-name-face 27818 . 27819) (nil block-side t 27817 . 27818) (nil tag-attr t 27817 . 27818) (nil tag-name "template" 27817 . 27818) (nil tag-type start 27817 . 27818) (nil face web-mode-variable-name-face 27817 . 27818) (nil block-side t 27816 . 27817) (nil tag-attr t 27816 . 27817) (nil tag-name "template" 27816 . 27817) (nil tag-type start 27816 . 27817) (nil face web-mode-variable-name-face 27816 . 27817) (nil block-side t 27814 . 27816) (nil tag-attr t 27814 . 27816) (nil tag-name "template" 27814 . 27816) (nil tag-type start 27814 . 27816) (nil block-side t 27813 . 27814) (nil tag-attr t 27813 . 27814) (nil tag-name "template" 27813 . 27814) (nil tag-type start 27813 . 27814) (nil face web-mode-variable-name-face 27813 . 27814) (nil block-side t 27812 . 27813) (nil tag-attr t 27812 . 27813) (nil tag-name "template" 27812 . 27813) (nil tag-type start 27812 . 27813) (nil face web-mode-variable-name-face 27812 . 27813) (nil block-side t 27811 . 27812) (nil tag-attr t 27811 . 27812) (nil tag-name "template" 27811 . 27812) (nil tag-type start 27811 . 27812) (nil face web-mode-variable-name-face 27811 . 27812) (nil block-side t 27810 . 27811) (nil tag-attr t 27810 . 27811) (nil tag-name "template" 27810 . 27811) (nil tag-type start 27810 . 27811) (nil face web-mode-variable-name-face 27810 . 27811) (nil block-side t 27808 . 27810) (nil tag-attr t 27808 . 27810) (nil tag-name "template" 27808 . 27810) (nil tag-type start 27808 . 27810) (nil block-side t 27807 . 27808) (nil block-token delimiter-beg 27807 . 27808) (nil tag-attr t 27807 . 27808) (nil tag-name "template" 27807 . 27808) (nil tag-type start 27807 . 27808) (nil font-lock-face web-mode-block-delimiter-face 27807 . 27808) (nil block-side t 27806 . 27807) (nil block-token delimiter-beg 27806 . 27807) (nil tag-attr t 27806 . 27807) (nil tag-name "template" 27806 . 27807) (nil tag-type start 27806 . 27807) (nil font-lock-face web-mode-block-delimiter-face 27806 . 27807) (nil block-side t 27805 . 27806) (nil block-token delimiter-beg 27805 . 27806) (nil tag-attr t 27805 . 27806) (nil tag-name "template" 27805 . 27806) (nil tag-type start 27805 . 27806) (nil font-lock-face web-mode-block-delimiter-face 27805 . 27806) (nil block-side t 27804 . 27805) (nil block-token delimiter-beg 27804 . 27805) (nil tag-attr t 27804 . 27805) (nil tag-name "template" 27804 . 27805) (nil tag-type start 27804 . 27805) (nil font-lock-face web-mode-block-delimiter-face 27804 . 27805) (nil block-side t 27803 . 27804) (nil block-token delimiter-beg 27803 . 27804) (nil tag-attr t 27803 . 27804) (nil tag-name "template" 27803 . 27804) (nil tag-type start 27803 . 27804) (nil font-lock-face web-mode-block-delimiter-face 27803 . 27804) (nil block-side t 27802 . 27803) (nil block-token delimiter-beg 27802 . 27803) (nil tag-attr t 27802 . 27803) (nil tag-name "template" 27802 . 27803) (nil tag-type start 27802 . 27803) (nil font-lock-face web-mode-block-delimiter-face 27802 . 27803) (nil block-side t 27801 . 27802) (nil block-token delimiter-beg 27801 . 27802) (nil tag-attr t 27801 . 27802) (nil tag-name "template" 27801 . 27802) (nil tag-type start 27801 . 27802) (nil font-lock-face web-mode-block-delimiter-face 27801 . 27802) (nil block-side t 27800 . 27801) (nil block-token delimiter-beg 27800 . 27801) (nil tag-attr t 27800 . 27801) (nil tag-name "template" 27800 . 27801) (nil tag-type start 27800 . 27801) (nil font-lock-face web-mode-block-delimiter-face 27800 . 27801) (nil block-side t 27799 . 27800) (nil block-token delimiter-beg 27799 . 27800) (nil tag-attr t 27799 . 27800) (nil tag-name "template" 27799 . 27800) (nil tag-type start 27799 . 27800) (nil font-lock-face web-mode-block-delimiter-face 27799 . 27800) (nil block-beg 0 27798 . 27799) (nil block-controls 0 27798 . 27799) (nil block-side t 27798 . 27799) (nil block-token delimiter-beg 27798 . 27799) (nil tag-attr t 27798 . 27799) (nil tag-name "template" 27798 . 27799) (nil tag-type start 27798 . 27799) (nil font-lock-face web-mode-block-delimiter-face 27798 . 27799) (nil tag-attr t 27793 . 27798) (nil tag-name "template" 27793 . 27798) (nil tag-type start 27793 . 27798) (nil font-lock-face web-mode-html-attr-engine-face 27793 . 27798) (nil tag-attr-beg 2 27792 . 27793) (nil tag-attr t 27792 . 27793) (nil tag-name "template" 27792 . 27793) (nil tag-type start 27792 . 27793) (nil font-lock-face web-mode-html-attr-engine-face 27792 . 27793) (nil tag-name "template" 27791 . 27792) (nil tag-type start 27791 . 27792) (nil tag-name "template" 27783 . 27791) (nil tag-type start 27783 . 27791) (nil font-lock-face web-mode-html-tag-face 27783 . 27791) (nil tag-name "template" 27782 . 27783) (nil tag-type start 27782 . 27783) (nil tag-beg 17 27782 . 27783) (nil font-lock-face web-mode-html-tag-bracket-face 27782 . 27783) (27782 . 28709)) nil (25812 51035 104078 293000) 0 nil])
([nil nil ((#("            @click=\"save_filter_dialog=false; filter_items=[]\">
" 12 13 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 13 14 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 14 15 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 15 16 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 16 17 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 17 18 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 18 19 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 19 20 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 20 21 (face web-mode-variable-name-face block-side t) 21 22 (face web-mode-variable-name-face block-side t) 22 23 (face web-mode-variable-name-face block-side t) 23 24 (face web-mode-variable-name-face block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 28 (face web-mode-variable-name-face block-side t) 28 29 (face web-mode-variable-name-face block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (face web-mode-variable-name-face block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (face web-mode-variable-name-face block-side t) 43 44 (face web-mode-variable-name-face block-side t) 44 46 (block-side t) 46 47 (face web-mode-variable-name-face block-side t) 47 48 (face web-mode-variable-name-face block-side t) 48 49 (face web-mode-variable-name-face block-side t) 49 50 (face web-mode-variable-name-face block-side t) 50 51 (face web-mode-variable-name-face block-side t) 51 52 (face web-mode-variable-name-face block-side t) 52 53 (face web-mode-variable-name-face block-side t) 53 54 (face web-mode-variable-name-face block-side t) 54 55 (face web-mode-variable-name-face block-side t) 55 56 (face web-mode-variable-name-face block-side t) 56 57 (face web-mode-variable-name-face block-side t) 57 58 (face web-mode-variable-name-face block-side t) 58 61 (block-side t) 61 62 (font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 27280) (27261 . 27280) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-btn") 9 10 (tag-end t tag-type start tag-name "v-btn") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27197) (undo-tree-id78 . -12) (27216 . 27280) 27209) ((#("            @click=\"save_filter_dialog=false; filter_items=[]\">
" 12 13 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 13 14 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 14 15 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 15 16 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 16 17 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 17 18 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 18 19 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 19 20 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 20 21 (face web-mode-variable-name-face block-side t) 21 22 (face web-mode-variable-name-face block-side t) 22 23 (face web-mode-variable-name-face block-side t) 23 24 (face web-mode-variable-name-face block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 28 (face web-mode-variable-name-face block-side t) 28 29 (face web-mode-variable-name-face block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (face web-mode-variable-name-face block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (face web-mode-variable-name-face block-side t) 43 44 (face web-mode-variable-name-face block-side t) 44 46 (block-side t) 46 47 (face web-mode-variable-name-face block-side t) 47 48 (face web-mode-variable-name-face block-side t) 48 49 (face web-mode-variable-name-face block-side t) 49 50 (face web-mode-variable-name-face block-side t) 50 51 (face web-mode-variable-name-face block-side t) 51 52 (face web-mode-variable-name-face block-side t) 52 53 (face web-mode-variable-name-face block-side t) 53 54 (face web-mode-variable-name-face block-side t) 54 55 (face web-mode-variable-name-face block-side t) 55 56 (face web-mode-variable-name-face block-side t) 56 57 (face web-mode-variable-name-face block-side t) 57 58 (face web-mode-variable-name-face block-side t) 58 61 (block-side t) 61 62 (font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 27216) (undo-tree-id992 . -64) (undo-tree-id993 . -64) (undo-tree-id994 . -64) (undo-tree-id995 . -64) (undo-tree-id996 . -64) (undo-tree-id997 . -64) (undo-tree-id998 . -64) (undo-tree-id999 . -64) (undo-tree-id1000 . -64) (undo-tree-id1001 . -64) (undo-tree-id1002 . -64) (undo-tree-id1003 . -64) (undo-tree-id1004 . -64) (undo-tree-id1005 . -64) (27197 . 27216) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27261) (undo-tree-id1006 . -19) (undo-tree-id1007 . -19) (undo-tree-id1008 . -12) (undo-tree-id1009 . -19) (undo-tree-id1010 . -19) (undo-tree-id1011 . -12) (undo-tree-id1012 . -12) (undo-tree-id1013 . -12) (undo-tree-id1014 . -12) (undo-tree-id1015 . -12) (undo-tree-id1016 . -12) (undo-tree-id1017 . -12) (undo-tree-id1018 . -12) (27280 . 27344)) (25812 50918 379059 944000) 0 nil])
([nil nil ((28709 . 28726)) nil (25812 51035 103740 883000) 0 nil])
([nil nil ((#("            <v-icon>mdi-close</v-icon>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-icon") 13 19 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-icon") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-icon") 29 30 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-icon") 30 31 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-icon") 31 37 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-icon") 37 38 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-icon")) . 27319) (27300 . 27319) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27261) (undo-tree-id77 . -12) (27280 . 27319) 27273) ((#("            <v-icon>mdi-close</v-icon>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-icon") 13 19 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-icon") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-icon") 29 30 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-icon") 30 31 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-icon") 31 37 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-icon") 37 38 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-icon")) . 27280) (undo-tree-id981 . -39) (undo-tree-id982 . -39) (undo-tree-id983 . -39) (undo-tree-id984 . -39) (undo-tree-id985 . -39) (undo-tree-id986 . -39) (27261 . 27280) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27300) (undo-tree-id987 . -18) (undo-tree-id988 . -18) (undo-tree-id989 . -18) (undo-tree-id990 . -19) (undo-tree-id991 . -18) (27319 . 27358)) (25812 50918 123190 999000) 0 nil])
([nil nil (("      " . -28720) (28726 . 28739)) nil (25812 51035 103739 747000) 0 nil])
([nil nil ((27318 . 27329)) ((#("
          " 1 11 (face whitespace-trailing)) . 27318) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1)) (25812 50918 105615 790000) 0 nil])
([nil nil ((28733 . 28744)) nil (25812 51035 103738 545000) 0 nil])
([nil nil ((#("          
" 0 10 (face whitespace-trailing)) . 27330) (27311 . 27330) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27300) (undo-tree-id76 . -10) (27319 . 27330) 27310) ((#("          
" 0 10 (face whitespace-trailing)) . 27319) (undo-tree-id837 . -11) (undo-tree-id838 . -11) (undo-tree-id839 . -11) (undo-tree-id840 . -11) (undo-tree-id841 . -11) (undo-tree-id842 . -11) (undo-tree-id843 . -11) (undo-tree-id844 . -11) (undo-tree-id845 . -11) (undo-tree-id846 . -11) (undo-tree-id847 . -11) (undo-tree-id848 . -11) (undo-tree-id849 . -11) (undo-tree-id850 . -11) (undo-tree-id851 . -11) (undo-tree-id852 . -11) (undo-tree-id853 . -11) (undo-tree-id854 . -11) (undo-tree-id855 . -11) (undo-tree-id856 . -11) (undo-tree-id857 . -11) (undo-tree-id858 . -11) (undo-tree-id859 . -11) (undo-tree-id860 . -11) (undo-tree-id861 . -11) (undo-tree-id862 . -11) (undo-tree-id863 . -11) (undo-tree-id864 . -11) (undo-tree-id865 . -11) (undo-tree-id866 . -11) (undo-tree-id867 . -11) (undo-tree-id868 . -11) (undo-tree-id869 . -11) (undo-tree-id870 . -11) (undo-tree-id871 . -11) (undo-tree-id872 . -11) (undo-tree-id873 . -11) (undo-tree-id874 . -11) (undo-tree-id875 . -10) (undo-tree-id876 . -10) (undo-tree-id877 . -10) (undo-tree-id878 . -10) (undo-tree-id879 . -11) (undo-tree-id880 . -11) (undo-tree-id881 . -11) (undo-tree-id882 . -11) (undo-tree-id883 . -11) (undo-tree-id884 . -11) (undo-tree-id885 . -11) (undo-tree-id886 . -11) (undo-tree-id887 . -10) (27300 . 27319) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27311) (undo-tree-id888 . -19) (undo-tree-id889 . -19) (undo-tree-id890 . -10) (undo-tree-id891 . -19) (undo-tree-id892 . -19) (undo-tree-id893 . -19) (undo-tree-id894 . -19) (undo-tree-id895 . -19) (undo-tree-id896 . -19) (undo-tree-id897 . -19) (undo-tree-id898 . -19) (undo-tree-id899 . -19) (undo-tree-id900 . -19) (undo-tree-id901 . -19) (undo-tree-id902 . -19) (undo-tree-id903 . -19) (undo-tree-id904 . -19) (undo-tree-id905 . -19) (undo-tree-id906 . -19) (undo-tree-id907 . -19) (undo-tree-id908 . -19) (undo-tree-id909 . -19) (undo-tree-id910 . -19) (undo-tree-id911 . -19) (undo-tree-id912 . -19) (undo-tree-id913 . -19) (undo-tree-id914 . -19) (undo-tree-id915 . -19) (undo-tree-id916 . -19) (undo-tree-id917 . -19) (undo-tree-id918 . -19) (undo-tree-id919 . -19) (undo-tree-id920 . -19) (undo-tree-id921 . -19) (undo-tree-id922 . -19) (undo-tree-id923 . -19) (undo-tree-id924 . -19) (undo-tree-id925 . -10) (undo-tree-id926 . -10) (undo-tree-id927 . -10) (undo-tree-id928 . -10) (undo-tree-id929 . -10) (undo-tree-id930 . -10) (undo-tree-id931 . -10) (undo-tree-id932 . -10) (27330 . 27341)) (25812 50918 59545 673000) 0 nil])
([nil nil ((28744 . 28745)) nil (25812 51035 103737 473000) 0 nil])
([nil nil ((#("          </v-btn>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-btn") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-btn") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-btn") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-btn")) . 27349) (undo-tree-id73 . -18) (undo-tree-id74 . -19) (27330 . 27349) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27311) (undo-tree-id75 . -10) (27330 . 27349) 27321) ((#("          </v-btn>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-btn") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-btn") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-btn") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-btn")) . 27330) (undo-tree-id770 . -19) (undo-tree-id771 . -19) (undo-tree-id772 . -19) (undo-tree-id773 . -19) (undo-tree-id774 . -19) (undo-tree-id775 . -19) (undo-tree-id776 . -19) (undo-tree-id777 . -19) (undo-tree-id778 . -19) (undo-tree-id779 . -19) (undo-tree-id780 . -19) (undo-tree-id781 . -19) (undo-tree-id782 . -19) (undo-tree-id783 . -19) (undo-tree-id784 . -19) (undo-tree-id785 . -19) (undo-tree-id786 . -19) (undo-tree-id787 . -19) (undo-tree-id788 . -19) (undo-tree-id789 . -19) (undo-tree-id790 . -19) (undo-tree-id791 . -19) (undo-tree-id792 . -19) (undo-tree-id793 . -19) (undo-tree-id794 . -19) (undo-tree-id795 . -19) (undo-tree-id796 . -19) (undo-tree-id797 . -19) (undo-tree-id798 . -19) (undo-tree-id799 . -19) (undo-tree-id800 . -19) (undo-tree-id801 . -19) (undo-tree-id802 . -10) (undo-tree-id803 . -10) (undo-tree-id804 . -10) (27311 . 27330) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27330) (undo-tree-id805 . -18) (undo-tree-id806 . -18) (undo-tree-id807 . -18) (undo-tree-id808 . -19) (undo-tree-id809 . -19) (undo-tree-id810 . -19) (undo-tree-id811 . -19) (undo-tree-id812 . -19) (undo-tree-id813 . -19) (undo-tree-id814 . -19) (undo-tree-id815 . -19) (undo-tree-id816 . -18) (undo-tree-id817 . -18) (undo-tree-id818 . -18) (undo-tree-id819 . -18) (undo-tree-id820 . -18) (undo-tree-id821 . -18) (undo-tree-id822 . -18) (undo-tree-id823 . -18) (undo-tree-id824 . -18) (undo-tree-id825 . -18) (undo-tree-id826 . -18) (undo-tree-id827 . -18) (undo-tree-id828 . -18) (undo-tree-id829 . -18) (undo-tree-id830 . -18) (undo-tree-id831 . -18) (undo-tree-id832 . -18) (undo-tree-id833 . -18) (undo-tree-id834 . -18) (undo-tree-id835 . -18) (undo-tree-id836 . -18) (27349 . 27368)) (25812 50918 26990 3000) 0 nil])
([nil nil (("
" . -28733) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (" " . -28734) (undo-tree-id1338 . -1) (" " . -28735) (undo-tree-id1339 . -1) (" " . -28736) (undo-tree-id1340 . -1) (" " . -28737) (undo-tree-id1341 . -1) (" " . -28738) (undo-tree-id1342 . -1) (" " . -28739) (undo-tree-id1343 . -1) (" " . -28740) (undo-tree-id1344 . -1) (" " . -28741) (undo-tree-id1345 . -1) (" " . -28742) (undo-tree-id1346 . -1) (" " . -28743) (undo-tree-id1347 . -1) ("<" . -28744) (undo-tree-id1348 . -1) 28745) nil (25812 51035 732273 308000) 0 nil])
([nil nil (("
" . 27310) (undo-tree-id71 . -1) (undo-tree-id72 . 1)) ((27310 . 27311)) (25812 50917 997317 309000) 0 nil])
([nil nil ((27367 . 27378)) nil (25812 51047 435238 383000) 0 nil] [nil nil ((27769 . 27782)) (("
            " . 27769) (undo-tree-id1387 . -13) (undo-tree-id1388 . -1) (undo-tree-id1389 . -13) (undo-tree-id1390 . -13) (undo-tree-id1391 . -13) (undo-tree-id1392 . -13) (undo-tree-id1393 . -13) (undo-tree-id1394 . -13) (undo-tree-id1395 . -13) (undo-tree-id1396 . -13) (undo-tree-id1397 . -13) (undo-tree-id1398 . -13) (undo-tree-id1399 . -13) (undo-tree-id1400 . -13) (undo-tree-id1401 . -13) (undo-tree-id1402 . -13) (undo-tree-id1403 . -13) (undo-tree-id1404 . -13) (undo-tree-id1405 . -13) (undo-tree-id1406 . -13) (undo-tree-id1407 . -13) (undo-tree-id1408 . -13) (undo-tree-id1409 . -13) (undo-tree-id1410 . -13) (undo-tree-id1411 . -13) (undo-tree-id1412 . -13) (undo-tree-id1413 . -13) (undo-tree-id1414 . -13) (undo-tree-id1415 . -13) (undo-tree-id1416 . -13) (undo-tree-id1417 . -13) (undo-tree-id1418 . -13) (undo-tree-id1419 . -13) (undo-tree-id1420 . -1) (undo-tree-id1421 . -13) (undo-tree-id1422 . -13) (undo-tree-id1423 . -13) (undo-tree-id1424 . -13) (undo-tree-id1425 . -13) (undo-tree-id1426 . -13) (undo-tree-id1427 . -13) (undo-tree-id1428 . -13) (undo-tree-id1429 . -13) (undo-tree-id1430 . -13) (undo-tree-id1431 . -13)) (25812 51035 417611 213000) 0 nil])
([nil nil (("          " . -27310)) ((27310 . 27320)) (25812 50917 969479 304000) 0 nil])
([nil nil ((27378 . 27393)) nil (25812 51047 435237 212000) 0 nil])
([nil nil ((27782 . 27783)) (("<" . 27782) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1)) (25812 51035 106350 356000) 0 nil])
([nil nil ((27337 . 27348)) (("
          " . 27337) (undo-tree-id746 . -11) (undo-tree-id747 . -11) (undo-tree-id748 . -11) (undo-tree-id749 . -1) (undo-tree-id750 . -11) (undo-tree-id751 . -11) (undo-tree-id752 . -11) (undo-tree-id753 . -11) (undo-tree-id754 . -11) (undo-tree-id755 . -11) (undo-tree-id756 . -11) (undo-tree-id757 . -11) (undo-tree-id758 . -11) (undo-tree-id759 . -11) (undo-tree-id760 . -11) (undo-tree-id761 . -11) (undo-tree-id762 . -11) (undo-tree-id763 . -11) (undo-tree-id764 . -11) (undo-tree-id765 . -11) (undo-tree-id766 . -1) (undo-tree-id767 . -11) (undo-tree-id768 . -11) (undo-tree-id769 . -11)) (25812 50917 937414 156000) 0 nil])
([nil nil ((27386 . 27398) (27387 . 27397) (#("            " 0 12 (face whitespace-trailing)) . 27386) (27386 . 27398) (27386 . 27387) ("          " . 27386) (27385 . 27396)) nil (25812 51047 435235 511000) 0 nil])
([nil nil (("<" . -27782) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) 27783) ((27782 . 27783)) (25812 51035 103708 586000) 0 nil])
([nil nil ((27348 . 27363)) ((#("<v-row></v-row>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-row") 1 6 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-row") 6 7 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-row") 7 8 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 8 9 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 9 14 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 14 15 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27348) (undo-tree-id727 . -7) (undo-tree-id728 . -7) (undo-tree-id729 . -7) (undo-tree-id730 . -7) (undo-tree-id731 . -7) (undo-tree-id732 . -7) (undo-tree-id733 . -7) (undo-tree-id734 . -7) (undo-tree-id735 . -7) (undo-tree-id736 . -7) (undo-tree-id737 . -7) (undo-tree-id738 . -7) (undo-tree-id739 . -7) (undo-tree-id740 . -7) (undo-tree-id741 . -7) (undo-tree-id742 . -7) (undo-tree-id743 . -7) (undo-tree-id744 . -7) (undo-tree-id745 . -7)) (25812 50917 448628 394000) 0 nil])
([nil nil ((#("          <v-treeview
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-treeview") 11 21 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-treeview") 21 22 (tag-type start tag-name "v-treeview")) . 27440) (undo-tree-id1467 . -10) (27421 . 27440) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27399) (undo-tree-id1468 . -12) (27418 . 27440) 27411) nil (25812 51047 435232 235000) 0 nil])
nil
([nil nil ((27356 . 27368) (27357 . 27367) (#("            " 0 12 (face whitespace-trailing)) . 27356) (27356 . 27368) (27356 . 27357) ("          " . 27356) (27355 . 27366)) (("
          " . 27355) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (27356 . 27366) ("
" . 27356) (undo-tree-id726 . -1) (#("            " 0 12 (face whitespace-trailing)) . 27356) (27356 . 27368) ("          " . 27357) (#("            " 0 12 (face whitespace-trailing)) . 27356)) (25812 50917 260231 516000) 0 nil])
([nil nil ((#("            :items=\"filter_selections_tree\"
" 12 13 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 13 14 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 14 15 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 15 16 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 16 17 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 17 18 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 18 19 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 19 20 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 20 21 (face web-mode-variable-name-face block-side t) 21 22 (face web-mode-variable-name-face block-side t) 22 23 (face web-mode-variable-name-face block-side t) 23 24 (face web-mode-variable-name-face block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 28 (face web-mode-variable-name-face block-side t) 28 29 (face web-mode-variable-name-face block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (face web-mode-variable-name-face block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (face web-mode-variable-name-face block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 27484) (27465 . 27484) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-treeview") 9 10 (tag-end t tag-type start tag-name "v-treeview") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27421) (undo-tree-id1466 . -12) (27440 . 27484) 27433) nil (25812 51047 435227 232000) 0 nil])
([nil nil ((#("          <v-divider></v-divider>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-divider") 11 20 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-divider") 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-divider") 21 22 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-divider") 22 23 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-divider") 23 32 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-divider") 32 33 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-divider")) . 27422) (undo-tree-id68 . -12) (undo-tree-id69 . -34) (undo-tree-id70 . -34) (27403 . 27422) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27369) (27388 . 27422) 27400) ((#("          <v-divider></v-divider>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-divider") 11 20 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-divider") 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-divider") 21 22 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-divider") 22 23 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-divider") 23 32 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-divider") 32 33 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-divider")) . 27388) (undo-tree-id711 . -34) (undo-tree-id712 . -34) (undo-tree-id713 . -12) (undo-tree-id714 . -34) (undo-tree-id715 . -12) (undo-tree-id716 . -12) (undo-tree-id717 . -12) (undo-tree-id718 . -12) (undo-tree-id719 . -12) (undo-tree-id720 . -12) (undo-tree-id721 . -12) (undo-tree-id722 . -12) (27369 . 27388) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27403) (27422 . 27456)) (25812 50916 920371 440000) 0 nil])
([nil nil ((#("            :search=\"search_filterselect\"
" 12 13 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 13 14 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 14 15 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 15 16 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 16 17 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 17 18 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 18 19 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 19 20 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 20 21 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 21 22 (face web-mode-variable-name-face block-side t) 22 23 (face web-mode-variable-name-face block-side t) 23 24 (face web-mode-variable-name-face block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 28 (face web-mode-variable-name-face block-side t) 28 29 (face web-mode-variable-name-face block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (face web-mode-variable-name-face block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (face web-mode-variable-name-face block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 27526) (27507 . 27526) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-treeview") 9 10 (tag-end t tag-type start tag-name "v-treeview") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27465) (undo-tree-id1465 . -12) (27484 . 27526) 27477) nil (25812 51047 435223 627000) 0 nil])
([nil nil ((#("          <v-divider></v-divider>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-divider") 11 20 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-divider") 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-divider") 21 22 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-divider") 22 23 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-divider") 23 32 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-divider") 32 33 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-divider")) . 27403) (undo-tree-id64 . -12) (undo-tree-id65 . -34) (undo-tree-id66 . -34) (undo-tree-id67 . -34) (27390 . 27403) (#("            
" 0 12 (face whitespace-trailing)) . 27356) (27369 . 27403) 27381) ((#("          <v-divider></v-divider>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-divider") 11 20 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-divider") 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-divider") 21 22 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-divider") 22 23 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-divider") 23 32 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-divider") 32 33 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-divider")) . 27369) (undo-tree-id708 . -12) (undo-tree-id709 . -34) (undo-tree-id710 . -12) (27356 . 27369) (#("            
" 0 12 (face whitespace-trailing)) . 27390) (27403 . 27437)) (25812 50916 841115 960000) 0 nil])
([nil nil ((#("            :active=\"chosenFilterSelection\"
" 12 13 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 13 14 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 14 15 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 15 16 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 16 17 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 17 18 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 18 19 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 19 20 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 20 21 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 21 22 (face web-mode-variable-name-face block-side t) 22 23 (face web-mode-variable-name-face block-side t) 23 24 (face web-mode-variable-name-face block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 28 (face web-mode-variable-name-face block-side t) 28 29 (face web-mode-variable-name-face block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (face web-mode-variable-name-face block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (face web-mode-variable-name-face block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 27570) (27551 . 27570) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-treeview") 9 10 (tag-end t tag-type start tag-name "v-treeview") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27507) (undo-tree-id1464 . -12) (27526 . 27570) 27519) nil (25812 51047 435220 218000) 0 nil])
([nil nil ((27366 . 27368) 27368) (("  " . 27366)) (25812 50916 807407 205000) 0 nil])
([nil nil ((#("            @update:active=\"insert_filter_selection\"
" 19 20 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 20 21 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 21 22 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 22 23 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 23 24 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 24 25 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 25 26 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 26 27 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 27 28 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 28 29 (face web-mode-variable-name-face block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (face web-mode-variable-name-face block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (face web-mode-variable-name-face block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (face web-mode-variable-name-face block-side t) 43 44 (face web-mode-variable-name-face block-side t) 44 45 (face web-mode-variable-name-face block-side t) 45 46 (face web-mode-variable-name-face block-side t) 46 47 (face web-mode-variable-name-face block-side t) 47 48 (face web-mode-variable-name-face block-side t) 48 49 (face web-mode-variable-name-face block-side t) 49 50 (face web-mode-variable-name-face block-side t) 50 51 (face web-mode-variable-name-face block-side t) 51 52 (font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 27623) (27604 . 27623) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-treeview") 9 10 (tag-end t tag-type start tag-name "v-treeview") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27551) (undo-tree-id1463 . -12) (27570 . 27623) 27563) nil (25812 51047 435216 741000) 0 nil])
([nil nil (("
" . 27391) (undo-tree-id63 . -1)) ((27391 . 27392)) (25812 50916 777282 780000) 0 nil])
([nil nil (("            selection-type=\"leaf\"
" . 27657) (27638 . 27657) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-treeview") 9 10 (tag-end t tag-type start tag-name "v-treeview") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27604) (undo-tree-id1462 . -12) (27623 . 27657) 27616) nil (25812 51047 435212 950000) 0 nil])
([nil nil ((#("            " 0 12 (face whitespace-trailing)) . -27379) (#("            " 0 12 (face whitespace-trailing)) . -27071) 27391) ((27071 . 27083) (27379 . 27391)) (25812 50916 747328 915000) 0 nil])
([nil nil (("            open-on-click
" . 27683) (27664 . 27683) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-treeview") 9 10 (tag-end t tag-type start tag-name "v-treeview") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27638) (undo-tree-id1461 . -12) (27657 . 27683) 27650) nil (25812 51047 435209 460000) 0 nil])
([nil nil ((27070 . 27083) (t 25812 50860 808612 468000)) (("
            " . 27070) (undo-tree-id694 . -13) (undo-tree-id695 . -1) (undo-tree-id696 . -13) (undo-tree-id697 . -13) (undo-tree-id698 . -13) (undo-tree-id699 . -13) (undo-tree-id700 . -13) (undo-tree-id701 . -13) (undo-tree-id702 . -13) (undo-tree-id703 . -13) (undo-tree-id704 . -1) (undo-tree-id705 . -13) (undo-tree-id706 . -13) (undo-tree-id707 . -13)) (25812 50916 717176 871000) 0 nil])
([nil nil (("            activatable
" . 27707) (27688 . 27707) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-treeview") 9 10 (tag-end t tag-type start tag-name "v-treeview") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27664) (undo-tree-id1460 . -12) (27683 . 27707) 27676) nil (25812 51047 435205 926000) 0 nil])
([nil nil ((27083 . 27098)) ((#("<v-col></v-col>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-col") 1 6 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-col") 6 7 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-col") 7 8 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 8 9 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 9 14 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 14 15 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27083) (undo-tree-id685 . -7) (undo-tree-id686 . -9) (undo-tree-id687 . -9) (undo-tree-id688 . -9) (undo-tree-id689 . -9) (undo-tree-id690 . -7) (undo-tree-id691 . -7) (undo-tree-id692 . -7) (undo-tree-id693 . -7)) (25812 50916 689633 132000) 0 nil])
([nil nil (("            hoverable
" . 27729) (27710 . 27729) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-treeview") 9 10 (tag-end t tag-type start tag-name "v-treeview") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27688) (undo-tree-id1459 . -12) (27707 . 27729) 27700) nil (25812 51047 435202 483000) 0 nil])
([nil nil ((27091 . 27105) (27092 . 27104) (#("              " 0 14 (face whitespace-trailing)) . 27091) (27091 . 27105) (27091 . 27092) ("            " . 27091) (27090 . 27103)) (("
            " . 27090) (undo-tree-id683 . -1) (27091 . 27103) ("
" . 27091) (undo-tree-id684 . -1) (#("              " 0 14 (face whitespace-trailing)) . 27091) (27091 . 27105) ("            " . 27092) (#("              " 0 14 (face whitespace-trailing)) . 27091)) (25812 50916 659265 753000) 0 nil])
([nil nil (("            return-object
" . 27755) (27736 . 27755) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-treeview") 9 10 (tag-end t tag-type start tag-name "v-treeview") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27710) (27729 . 27755) 27722) nil (25812 51047 435183 923000) 0 nil])
([nil nil (("
" . 27128) (27107 . 27128) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27106) (undo-tree-id98 . -14) (27127 . 27128) 27120) (("
" . 27127) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (27106 . 27127) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27107) (undo-tree-id649 . -14) (undo-tree-id650 . -21) (undo-tree-id651 . -21) (undo-tree-id652 . -21) (undo-tree-id653 . -21) (undo-tree-id654 . -21) (undo-tree-id655 . -21) (undo-tree-id656 . -21) (undo-tree-id657 . -21) (undo-tree-id658 . -21) (undo-tree-id659 . -21) (undo-tree-id660 . -21) (undo-tree-id661 . -21) (undo-tree-id662 . -21) (undo-tree-id663 . -21) (undo-tree-id664 . -21) (undo-tree-id665 . -21) (undo-tree-id666 . -21) (undo-tree-id667 . -21) (undo-tree-id668 . -21) (undo-tree-id669 . -21) (undo-tree-id670 . -21) (undo-tree-id671 . -21) (undo-tree-id672 . -21) (undo-tree-id673 . -21) (undo-tree-id674 . -21) (undo-tree-id675 . -21) (undo-tree-id676 . -21) (undo-tree-id677 . -21) (undo-tree-id678 . -21) (undo-tree-id679 . -14) (undo-tree-id680 . -14) (undo-tree-id681 . -14) (undo-tree-id682 . -14) (27128 . 27129)) (25812 50916 629341 631000) 0 nil])
([nil nil (("            dense
" . 27773) (27754 . 27773) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-treeview") 9 10 (tag-end t tag-type start tag-name "v-treeview") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27736) (undo-tree-id1458 . -12) (27755 . 27773) 27748) nil (25812 51047 435181 616000) 0 nil])
([nil nil ((#("          {{$t('AnalysisNetwork.saveFilter')}}
" 10 11 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 11 12 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 12 13 (block-side t) 13 14 (face web-mode-variable-name-face block-side t) 14 15 (face (rainbow-delimiters-depth-3-face) block-side t) 15 16 (block-side t) 16 17 (face web-mode-variable-name-face block-side t) 17 18 (face web-mode-variable-name-face block-side t) 18 19 (face web-mode-variable-name-face block-side t) 19 20 (face web-mode-variable-name-face block-side t) 20 21 (face web-mode-variable-name-face block-side t) 21 22 (face web-mode-variable-name-face block-side t) 22 23 (face web-mode-variable-name-face block-side t) 23 24 (face web-mode-variable-name-face block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 28 (face web-mode-variable-name-face block-side t) 28 29 (face web-mode-variable-name-face block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (face web-mode-variable-name-face block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (block-side t) 43 44 (face (rainbow-delimiters-depth-3-face) block-side t) 44 45 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-side t) 45 46 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 27175) (27154 . 27175) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27107) (undo-tree-id97 . -14) (27128 . 27175) 27121) ((#("          {{$t('AnalysisNetwork.saveFilter')}}
" 10 11 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 11 12 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 12 13 (block-side t) 13 14 (face web-mode-variable-name-face block-side t) 14 15 (face (rainbow-delimiters-depth-3-face) block-side t) 15 16 (block-side t) 16 17 (face web-mode-variable-name-face block-side t) 17 18 (face web-mode-variable-name-face block-side t) 18 19 (face web-mode-variable-name-face block-side t) 19 20 (face web-mode-variable-name-face block-side t) 20 21 (face web-mode-variable-name-face block-side t) 21 22 (face web-mode-variable-name-face block-side t) 22 23 (face web-mode-variable-name-face block-side t) 23 24 (face web-mode-variable-name-face block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 28 (face web-mode-variable-name-face block-side t) 28 29 (face web-mode-variable-name-face block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (face web-mode-variable-name-face block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (block-side t) 43 44 (face (rainbow-delimiters-depth-3-face) block-side t) 44 45 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-side t) 45 46 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 27128) (undo-tree-id553 . -47) (undo-tree-id554 . -47) (undo-tree-id555 . -47) (undo-tree-id556 . -47) (undo-tree-id557 . -47) (undo-tree-id558 . -47) (undo-tree-id559 . -47) (undo-tree-id560 . -47) (undo-tree-id561 . -47) (undo-tree-id562 . -47) (undo-tree-id563 . -47) (undo-tree-id564 . -47) (undo-tree-id565 . -47) (undo-tree-id566 . -47) (undo-tree-id567 . -47) (undo-tree-id568 . -47) (undo-tree-id569 . -47) (undo-tree-id570 . -47) (undo-tree-id571 . -47) (undo-tree-id572 . -47) (undo-tree-id573 . -47) (undo-tree-id574 . -47) (undo-tree-id575 . -47) (undo-tree-id576 . -47) (undo-tree-id577 . -47) (undo-tree-id578 . -47) (undo-tree-id579 . -47) (undo-tree-id580 . -47) (undo-tree-id581 . -47) (undo-tree-id582 . -47) (undo-tree-id583 . -47) (27107 . 27128) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27154) (undo-tree-id584 . -14) (undo-tree-id585 . -21) (undo-tree-id586 . -21) (undo-tree-id587 . -21) (undo-tree-id588 . -21) (undo-tree-id589 . -21) (undo-tree-id590 . -21) (undo-tree-id591 . -21) (undo-tree-id592 . -21) (undo-tree-id593 . -21) (undo-tree-id594 . -21) (undo-tree-id595 . -21) (undo-tree-id596 . -21) (undo-tree-id597 . -21) (undo-tree-id598 . -21) (undo-tree-id599 . -21) (undo-tree-id600 . -21) (undo-tree-id601 . -21) (undo-tree-id602 . -21) (undo-tree-id603 . -21) (undo-tree-id604 . -21) (undo-tree-id605 . -21) (undo-tree-id606 . -21) (undo-tree-id607 . -21) (undo-tree-id608 . -21) (undo-tree-id609 . -21) (undo-tree-id610 . -14) (undo-tree-id611 . -14) (undo-tree-id612 . -14) (undo-tree-id613 . -14) (27175 . 27222)) (25812 50916 597110 42000) 0 nil])
([nil nil (("            class=\"filterTreeView\"
" . 27808) (27789 . 27808) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-treeview") 9 10 (tag-end t tag-type start tag-name "v-treeview") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27754) (undo-tree-id1457 . -12) (27773 . 27808) 27766) nil (25812 51047 435178 2000) 0 nil])
([nil nil ((#("          <v-spacer></v-spacer>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-spacer") 11 19 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-spacer") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-spacer") 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-spacer") 21 22 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-spacer") 22 30 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-spacer") 30 31 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-spacer")) . 27207) (27186 . 27207) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27154) (undo-tree-id96 . -14) (27175 . 27207) 27168) ((#("          <v-spacer></v-spacer>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-spacer") 11 19 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-spacer") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-spacer") 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-spacer") 21 22 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-spacer") 22 30 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-spacer") 30 31 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-spacer")) . 27175) (undo-tree-id500 . -32) (undo-tree-id501 . -32) (undo-tree-id502 . -32) (undo-tree-id503 . -32) (undo-tree-id504 . -32) (undo-tree-id505 . -32) (undo-tree-id506 . -32) (undo-tree-id507 . -32) (undo-tree-id508 . -32) (undo-tree-id509 . -32) (undo-tree-id510 . -32) (undo-tree-id511 . -32) (undo-tree-id512 . -32) (undo-tree-id513 . -32) (undo-tree-id514 . -32) (undo-tree-id515 . -32) (undo-tree-id516 . -32) (undo-tree-id517 . -32) (undo-tree-id518 . -32) (undo-tree-id519 . -32) (undo-tree-id520 . -32) (undo-tree-id521 . -32) (undo-tree-id522 . -32) (undo-tree-id523 . -32) (undo-tree-id524 . -32) (undo-tree-id525 . -32) (undo-tree-id526 . -32) (27154 . 27175) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27186) (undo-tree-id527 . -14) (undo-tree-id528 . -21) (undo-tree-id529 . -21) (undo-tree-id530 . -21) (undo-tree-id531 . -21) (undo-tree-id532 . -21) (undo-tree-id533 . -21) (undo-tree-id534 . -21) (undo-tree-id535 . -21) (undo-tree-id536 . -21) (undo-tree-id537 . -21) (undo-tree-id538 . -21) (undo-tree-id539 . -21) (undo-tree-id540 . -21) (undo-tree-id541 . -21) (undo-tree-id542 . -21) (undo-tree-id543 . -21) (undo-tree-id544 . -21) (undo-tree-id545 . -21) (undo-tree-id546 . -21) (undo-tree-id547 . -21) (undo-tree-id548 . -21) (undo-tree-id549 . -14) (undo-tree-id550 . -14) (undo-tree-id551 . -14) (undo-tree-id552 . -14) (27207 . 27239)) (25812 50916 569509 466000) 0 nil])
([nil nil ((#("          >
" 10 11 (rear-nonsticky t)) . 27820) (undo-tree-id1454 . -12) (undo-tree-id1455 . -11) (27801 . 27820) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-treeview") 9 10 (tag-end t tag-type start tag-name "v-treeview") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27789) (undo-tree-id1456 . -12) (27808 . 27820) 27801) nil (25812 51047 435173 956000) 0 nil])
([nil nil ((#("          <v-btn
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-btn") 11 16 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-btn") 16 17 (tag-type start tag-name "v-btn")) . 27224) (27203 . 27224) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27186) (undo-tree-id95 . -14) (27207 . 27224) 27200) ((#("          <v-btn
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 2 tag-type start tag-name "v-btn") 11 16 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-btn") 16 17 (tag-type start tag-name "v-btn")) . 27207) (undo-tree-id455 . -17) (undo-tree-id456 . -17) (undo-tree-id457 . -17) (undo-tree-id458 . -17) (undo-tree-id459 . -17) (undo-tree-id460 . -17) (undo-tree-id461 . -17) (undo-tree-id462 . -17) (undo-tree-id463 . -17) (undo-tree-id464 . -17) (undo-tree-id465 . -17) (undo-tree-id466 . -17) (undo-tree-id467 . -17) (undo-tree-id468 . -17) (undo-tree-id469 . -17) (undo-tree-id470 . -17) (undo-tree-id471 . -17) (undo-tree-id472 . -17) (undo-tree-id473 . -17) (undo-tree-id474 . -17) (undo-tree-id475 . -17) (undo-tree-id476 . -17) (undo-tree-id477 . -17) (27186 . 27207) (#("            </v-col>
" 0 11 (tag-type start tag-name "v-btn") 11 12 (tag-end t tag-type start tag-name "v-btn") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27203) (undo-tree-id478 . -14) (undo-tree-id479 . -21) (undo-tree-id480 . -21) (undo-tree-id481 . -21) (undo-tree-id482 . -21) (undo-tree-id483 . -21) (undo-tree-id484 . -21) (undo-tree-id485 . -21) (undo-tree-id486 . -21) (undo-tree-id487 . -21) (undo-tree-id488 . -21) (undo-tree-id489 . -21) (undo-tree-id490 . -21) (undo-tree-id491 . -21) (undo-tree-id492 . -21) (undo-tree-id493 . -21) (undo-tree-id494 . -21) (undo-tree-id495 . -21) (undo-tree-id496 . -14) (undo-tree-id497 . -14) (undo-tree-id498 . -14) (undo-tree-id499 . -14) (27224 . 27241)) (25812 50916 539455 556000) 0 nil])
([nil nil ((#("            <template v-slot:prepend=\"{ item, open }\">
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 17 tag-type start tag-name "template") 13 21 (font-lock-face web-mode-html-tag-face tag-type start tag-name "template") 21 22 (tag-type start tag-name "template") 22 23 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "template" tag-attr t tag-attr-beg 2) 23 28 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "template" tag-attr t) 28 29 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t block-controls 0 block-beg 0) 29 30 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 30 31 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 31 32 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 32 33 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 33 34 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 34 35 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 35 36 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 36 37 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 37 38 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 38 40 (tag-type start tag-name "template" tag-attr t block-side t) 40 41 (face web-mode-variable-name-face tag-type start tag-name "template" tag-attr t block-side t) 41 42 (face web-mode-variable-name-face tag-type start tag-name "template" tag-attr t block-side t) 42 43 (face web-mode-variable-name-face tag-type start tag-name "template" tag-attr t block-side t) 43 44 (face web-mode-variable-name-face tag-type start tag-name "template" tag-attr t block-side t) 44 46 (tag-type start tag-name "template" tag-attr t block-side t) 46 47 (face web-mode-variable-name-face tag-type start tag-name "template" tag-attr t block-side t) 47 48 (face web-mode-variable-name-face tag-type start tag-name "template" tag-attr t block-side t) 48 49 (face web-mode-variable-name-face tag-type start tag-name "template" tag-attr t block-side t) 49 50 (face web-mode-variable-name-face tag-type start tag-name "template" tag-attr t block-side t) 50 52 (tag-type start tag-name "template" tag-attr t block-side t) 52 53 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr-end 14 tag-attr t block-token delimiter-end block-end t block-side t) 53 54 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "template")) . 27875) (undo-tree-id1452 . -12) (27856 . 27875) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27801) (undo-tree-id1453 . -12) (27820 . 27875) 27813) nil (25812 51047 435168 179000) 0 nil])
([nil nil (("            icon
" . 27241) (27220 . 27241) (#("            </v-col>
" 0 11 (tag-type start tag-name "v-btn") 11 12 (tag-end t tag-type start tag-name "v-btn") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27203) (undo-tree-id94 . -14) (27224 . 27241) 27217) (("            icon
" . 27224) (undo-tree-id418 . -17) (undo-tree-id419 . -17) (undo-tree-id420 . -17) (undo-tree-id421 . -17) (undo-tree-id422 . -17) (undo-tree-id423 . -17) (undo-tree-id424 . -17) (undo-tree-id425 . -17) (undo-tree-id426 . -17) (undo-tree-id427 . -17) (undo-tree-id428 . -17) (undo-tree-id429 . -17) (undo-tree-id430 . -17) (undo-tree-id431 . -17) (undo-tree-id432 . -17) (undo-tree-id433 . -17) (undo-tree-id434 . -17) (undo-tree-id435 . -17) (undo-tree-id436 . -17) (27203 . 27224) (#("            </v-col>
" 0 11 (tag-type start tag-name "v-btn") 11 12 (tag-end t tag-type start tag-name "v-btn") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27220) (undo-tree-id437 . -14) (undo-tree-id438 . -21) (undo-tree-id439 . -21) (undo-tree-id440 . -21) (undo-tree-id441 . -21) (undo-tree-id442 . -21) (undo-tree-id443 . -21) (undo-tree-id444 . -21) (undo-tree-id445 . -21) (undo-tree-id446 . -21) (undo-tree-id447 . -21) (undo-tree-id448 . -21) (undo-tree-id449 . -21) (undo-tree-id450 . -21) (undo-tree-id451 . -14) (undo-tree-id452 . -14) (undo-tree-id453 . -14) (undo-tree-id454 . -14) (27241 . 27258)) (25812 50916 514135 845000) 0 nil])
([nil nil ((#("                  <v-icon v-if=\"item.filter_sel\" :color=\"differenceHolder[item.id] != null ? differenceHolder[item.id] : ''\"
" 18 19 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-icon") 19 25 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-icon") 25 26 (tag-type start tag-name "v-icon") 26 27 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-icon" tag-attr t tag-attr-beg 2) 27 30 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-icon" tag-attr t) 30 31 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-icon" tag-attr t) 31 47 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-icon" tag-attr t) 47 48 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-icon" tag-attr-end 4 tag-attr t) 48 49 (tag-type start tag-name "v-icon") 49 50 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t tag-attr-beg 2 block-token delimiter-beg block-side t block-controls 0 block-beg 0) 50 51 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 51 52 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 52 53 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 53 54 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 54 55 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 55 56 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 56 57 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 57 58 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 58 59 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 59 60 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 60 61 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 61 62 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 62 63 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 63 64 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 64 65 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 65 66 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 66 67 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 67 68 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 68 69 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 69 70 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 70 71 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 71 72 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 72 73 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 73 74 (tag-type start tag-name "v-icon" tag-attr t block-side t) 74 75 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 75 76 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 76 77 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 77 78 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 78 79 (tag-type start tag-name "v-icon" tag-attr t block-side t) 79 80 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 80 81 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 81 86 (tag-type start tag-name "v-icon" tag-attr t block-side t) 86 87 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 87 88 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 88 89 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 89 90 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 90 93 (tag-type start tag-name "v-icon" tag-attr t block-side t) 93 94 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 94 95 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 95 96 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 96 97 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 97 98 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 98 99 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 99 100 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 100 101 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 101 102 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 102 103 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 103 104 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 104 105 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 105 106 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 106 107 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 107 108 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 108 109 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 109 110 (tag-type start tag-name "v-icon" tag-attr t block-side t) 110 111 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 111 112 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 112 113 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 113 114 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 114 115 (tag-type start tag-name "v-icon" tag-attr t block-side t) 115 116 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 116 117 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 117 123 (tag-type start tag-name "v-icon" tag-attr t block-side t) 123 124 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr-end 6 tag-attr t block-token delimiter-end block-end t block-side t) 124 125 (tag-type start tag-name "v-icon")) . 28000) (27981 . 28000) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27856) (undo-tree-id1451 . -12) (27875 . 28000) 27868) nil (25812 51047 435163 508000) 0 nil])
([nil nil ((#("            @click=\"save_filter_dialog=false; filter_items=[]\">
" 12 13 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 13 14 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 14 15 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 15 16 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 16 17 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 17 18 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 18 19 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 19 20 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 20 21 (face web-mode-variable-name-face block-side t) 21 22 (face web-mode-variable-name-face block-side t) 22 23 (face web-mode-variable-name-face block-side t) 23 24 (face web-mode-variable-name-face block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 28 (face web-mode-variable-name-face block-side t) 28 29 (face web-mode-variable-name-face block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (face web-mode-variable-name-face block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (face web-mode-variable-name-face block-side t) 43 44 (face web-mode-variable-name-face block-side t) 44 46 (block-side t) 46 47 (face web-mode-variable-name-face block-side t) 47 48 (face web-mode-variable-name-face block-side t) 48 49 (face web-mode-variable-name-face block-side t) 49 50 (face web-mode-variable-name-face block-side t) 50 51 (face web-mode-variable-name-face block-side t) 51 52 (face web-mode-variable-name-face block-side t) 52 53 (face web-mode-variable-name-face block-side t) 53 54 (face web-mode-variable-name-face block-side t) 54 55 (face web-mode-variable-name-face block-side t) 55 56 (face web-mode-variable-name-face block-side t) 56 57 (face web-mode-variable-name-face block-side t) 57 58 (face web-mode-variable-name-face block-side t) 58 61 (block-side t) 61 62 (font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 27305) (27284 . 27305) (#("            </v-col>
" 0 11 (tag-type start tag-name "v-btn") 11 12 (tag-end t tag-type start tag-name "v-btn") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27220) (undo-tree-id93 . -14) (27241 . 27305) 27234) ((#("            @click=\"save_filter_dialog=false; filter_items=[]\">
" 12 13 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 13 14 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 14 15 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 15 16 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 16 17 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 17 18 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 18 19 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 19 20 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 20 21 (face web-mode-variable-name-face block-side t) 21 22 (face web-mode-variable-name-face block-side t) 22 23 (face web-mode-variable-name-face block-side t) 23 24 (face web-mode-variable-name-face block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 28 (face web-mode-variable-name-face block-side t) 28 29 (face web-mode-variable-name-face block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (face web-mode-variable-name-face block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (face web-mode-variable-name-face block-side t) 43 44 (face web-mode-variable-name-face block-side t) 44 46 (block-side t) 46 47 (face web-mode-variable-name-face block-side t) 47 48 (face web-mode-variable-name-face block-side t) 48 49 (face web-mode-variable-name-face block-side t) 49 50 (face web-mode-variable-name-face block-side t) 50 51 (face web-mode-variable-name-face block-side t) 51 52 (face web-mode-variable-name-face block-side t) 52 53 (face web-mode-variable-name-face block-side t) 53 54 (face web-mode-variable-name-face block-side t) 54 55 (face web-mode-variable-name-face block-side t) 55 56 (face web-mode-variable-name-face block-side t) 56 57 (face web-mode-variable-name-face block-side t) 57 58 (face web-mode-variable-name-face block-side t) 58 61 (block-side t) 61 62 (font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 27241) (undo-tree-id389 . -64) (undo-tree-id390 . -64) (undo-tree-id391 . -64) (undo-tree-id392 . -64) (undo-tree-id393 . -64) (undo-tree-id394 . -64) (undo-tree-id395 . -64) (undo-tree-id396 . -64) (undo-tree-id397 . -64) (undo-tree-id398 . -64) (undo-tree-id399 . -64) (undo-tree-id400 . -64) (undo-tree-id401 . -64) (undo-tree-id402 . -64) (undo-tree-id403 . -64) (27220 . 27241) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27284) (undo-tree-id404 . -14) (undo-tree-id405 . -21) (undo-tree-id406 . -21) (undo-tree-id407 . -21) (undo-tree-id408 . -21) (undo-tree-id409 . -21) (undo-tree-id410 . -14) (undo-tree-id411 . -14) (undo-tree-id412 . -14) (undo-tree-id413 . -14) (undo-tree-id414 . -14) (undo-tree-id415 . -14) (undo-tree-id416 . -14) (undo-tree-id417 . -14) (27305 . 27369)) (25812 50916 478869 523000) 0 nil])
([nil nil ((#("                    @mouseover=\"select_filter_settings(item.id)\"
" 20 21 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 21 22 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 22 23 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 23 24 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 24 25 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 25 26 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 26 27 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 27 28 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 28 29 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 29 30 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 30 31 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 31 32 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 32 54 (face web-mode-function-call-face block-side t) 54 55 (block-side t) 55 56 (face web-mode-variable-name-face block-side t) 56 57 (face web-mode-variable-name-face block-side t) 57 58 (face web-mode-variable-name-face block-side t) 58 59 (face web-mode-variable-name-face block-side t) 59 60 (block-side t) 60 61 (face web-mode-variable-name-face block-side t) 61 62 (face web-mode-variable-name-face block-side t) 62 63 (block-side t) 63 64 (font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 28065) (28046 . 28065) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-icon") 9 10 (tag-end t tag-type start tag-name "v-icon") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27981) (undo-tree-id1450 . -12) (28000 . 28065) 27993) nil (25812 51047 435159 537000) 0 nil])
([nil nil ((#("            <v-icon>mdi-close</v-icon>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-icon") 13 19 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-icon") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-icon") 29 30 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-icon") 30 31 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-icon") 31 37 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-icon") 37 38 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-icon")) . 27344) (27323 . 27344) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27284) (undo-tree-id92 . -14) (27305 . 27344) 27298) ((#("            <v-icon>mdi-close</v-icon>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-icon") 13 19 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-icon") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-icon") 29 30 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-icon") 30 31 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-icon") 31 37 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-icon") 37 38 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-icon")) . 27305) (undo-tree-id376 . -39) (undo-tree-id377 . -39) (undo-tree-id378 . -39) (undo-tree-id379 . -39) (undo-tree-id380 . -39) (undo-tree-id381 . -39) (undo-tree-id382 . -39) (27284 . 27305) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27323) (undo-tree-id383 . -14) (undo-tree-id384 . -21) (undo-tree-id385 . -14) (undo-tree-id386 . -14) (undo-tree-id387 . -14) (undo-tree-id388 . -14) (27344 . 27383)) (25812 50916 458952 155000) 0 nil])
([nil nil ((#("                    @mouseleave=\"updateFilterHoverLeave\"
" 20 21 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 21 22 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 22 23 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 23 24 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 24 25 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 25 26 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 26 27 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 27 28 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 28 29 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 29 30 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 30 31 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 31 32 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 32 33 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (face web-mode-variable-name-face block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (face web-mode-variable-name-face block-side t) 43 44 (face web-mode-variable-name-face block-side t) 44 45 (face web-mode-variable-name-face block-side t) 45 46 (face web-mode-variable-name-face block-side t) 46 47 (face web-mode-variable-name-face block-side t) 47 48 (face web-mode-variable-name-face block-side t) 48 49 (face web-mode-variable-name-face block-side t) 49 50 (face web-mode-variable-name-face block-side t) 50 51 (face web-mode-variable-name-face block-side t) 51 52 (face web-mode-variable-name-face block-side t) 52 53 (face web-mode-variable-name-face block-side t) 53 54 (face web-mode-variable-name-face block-side t) 54 55 (face web-mode-variable-name-face block-side t) 55 56 (font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 28122) (28103 . 28122) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-icon") 9 10 (tag-end t tag-type start tag-name "v-icon") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28046) (undo-tree-id1449 . -12) (28065 . 28122) 28058) nil (25812 51047 435155 834000) 0 nil])
([nil nil ((#("          </v-btn>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-btn") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-btn") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-btn") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-btn")) . 27363) (27342 . 27363) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27323) (undo-tree-id91 . -14) (27344 . 27363) 27337) ((#("          </v-btn>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-btn") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-btn") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-btn") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-btn")) . 27344) (27323 . 27344) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27342) (27363 . 27382)) (25812 50916 438541 101000) 0 nil])
([nil nil (("                  >
" . 28142) (28123 . 28142) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-icon") 9 10 (tag-end t tag-type start tag-name "v-icon") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28103) (undo-tree-id1448 . -12) (28122 . 28142) 28115) nil (25812 51047 435151 613000) 0 nil])
([nil nil ((27399 . 27412)) (("
            " . 27399) (undo-tree-id372 . -13) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -13)) (25812 50916 380187 508000) 0 nil])
([nil nil (("                    mdi-filter-plus-outline
" . 28186) (28167 . 28186) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28123) (undo-tree-id1447 . -12) (28142 . 28186) 28135) nil (25812 51047 435147 889000) 0 nil])
([nil nil ((27412 . 27427)) ((#("<v-col></v-col>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-col") 1 6 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-col") 6 7 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-col") 7 8 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 8 9 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 9 14 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 14 15 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27412) (undo-tree-id364 . -7) (undo-tree-id365 . -9) (undo-tree-id366 . -9) (undo-tree-id367 . -9) (undo-tree-id368 . -9) (undo-tree-id369 . -7) (undo-tree-id370 . -7) (undo-tree-id371 . -7)) (25812 50916 354450 146000) 0 nil])
([nil nil ((#("                  </v-icon>
" 18 19 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-icon") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-icon") 20 26 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-icon") 26 27 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-icon")) . 28214) (28195 . 28214) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28167) (28186 . 28214) 28179) nil (25812 51047 435143 964000) 0 nil])
([nil nil ((27420 . 27434) (27421 . 27433) (#("              " 0 14 (face whitespace-trailing)) . 27420) (27420 . 27434) (27420 . 27421) ("            " . 27420) (27419 . 27432)) (("
            " . 27419) (undo-tree-id362 . -1) (27420 . 27432) ("
" . 27420) (undo-tree-id363 . -1) (#("              " 0 14 (face whitespace-trailing)) . 27420) (27420 . 27434) ("            " . 27421) (#("              " 0 14 (face whitespace-trailing)) . 27420)) (25812 50916 333924 808000) 0 nil])
([nil nil ((#("                  <v-icon v-else>
" 18 19 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-icon") 19 25 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-icon") 25 26 (tag-type start tag-name "v-icon") 26 27 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-icon" tag-attr t tag-attr-beg 2) 27 31 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-icon" tag-attr t) 31 32 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-icon" tag-attr-end 0 tag-attr t) 32 33 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-icon")) . 28248) (28229 . 28248) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28195) (undo-tree-id1446 . -12) (28214 . 28248) 28207) nil (25812 51047 435141 360000) 0 nil])
([nil nil ((#("            <v-divider></v-divider>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-divider") 13 22 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-divider") 22 23 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-divider") 23 24 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-divider") 24 25 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-divider") 25 34 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-divider") 34 35 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-divider")) . 27492) (undo-tree-id88 . -36) (undo-tree-id89 . -36) (27471 . 27492) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27435) (undo-tree-id90 . -14) (27456 . 27492) 27449) ((#("            <v-divider></v-divider>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-divider") 13 22 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-divider") 22 23 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-divider") 23 24 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-divider") 24 25 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-divider") 25 34 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-divider") 34 35 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-divider")) . 27456) (undo-tree-id241 . -36) (undo-tree-id242 . -36) (undo-tree-id243 . -36) (undo-tree-id244 . -36) (undo-tree-id245 . -36) (undo-tree-id246 . -36) (undo-tree-id247 . -36) (undo-tree-id248 . -36) (undo-tree-id249 . -36) (undo-tree-id250 . -36) (undo-tree-id251 . -36) (undo-tree-id252 . -36) (undo-tree-id253 . -36) (undo-tree-id254 . -36) (undo-tree-id255 . -36) (undo-tree-id256 . -36) (undo-tree-id257 . -36) (undo-tree-id258 . -36) (undo-tree-id259 . -36) (undo-tree-id260 . -36) (undo-tree-id261 . -36) (undo-tree-id262 . -36) (undo-tree-id263 . -36) (undo-tree-id264 . -36) (undo-tree-id265 . -36) (undo-tree-id266 . -36) (undo-tree-id267 . -36) (undo-tree-id268 . -36) (undo-tree-id269 . -36) (undo-tree-id270 . -36) (undo-tree-id271 . -36) (undo-tree-id272 . -36) (undo-tree-id273 . -36) (undo-tree-id274 . -36) (undo-tree-id275 . -36) (undo-tree-id276 . -36) (undo-tree-id277 . -36) (undo-tree-id278 . -36) (undo-tree-id279 . -36) (undo-tree-id280 . -36) (undo-tree-id281 . -36) (undo-tree-id282 . -36) (undo-tree-id283 . -36) (undo-tree-id284 . -36) (undo-tree-id285 . -36) (undo-tree-id286 . -36) (undo-tree-id287 . -36) (undo-tree-id288 . -36) (undo-tree-id289 . -36) (undo-tree-id290 . -36) (undo-tree-id291 . -36) (undo-tree-id292 . -36) (undo-tree-id293 . -36) (undo-tree-id294 . -36) (undo-tree-id295 . -36) (undo-tree-id296 . -36) (undo-tree-id297 . -36) (undo-tree-id298 . -36) (undo-tree-id299 . -36) (undo-tree-id300 . -36) (undo-tree-id301 . -36) (27435 . 27456) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27471) (undo-tree-id302 . -21) (undo-tree-id303 . -21) (undo-tree-id304 . -14) (undo-tree-id305 . -21) (undo-tree-id306 . -21) (undo-tree-id307 . -21) (undo-tree-id308 . -21) (undo-tree-id309 . -21) (undo-tree-id310 . -21) (undo-tree-id311 . -21) (undo-tree-id312 . -21) (undo-tree-id313 . -21) (undo-tree-id314 . -21) (undo-tree-id315 . -21) (undo-tree-id316 . -21) (undo-tree-id317 . -21) (undo-tree-id318 . -21) (undo-tree-id319 . -21) (undo-tree-id320 . -21) (undo-tree-id321 . -21) (undo-tree-id322 . -21) (undo-tree-id323 . -21) (undo-tree-id324 . -21) (undo-tree-id325 . -21) (undo-tree-id326 . -21) (undo-tree-id327 . -21) (undo-tree-id328 . -21) (undo-tree-id329 . -21) (undo-tree-id330 . -21) (undo-tree-id331 . -21) (undo-tree-id332 . -21) (undo-tree-id333 . -21) (undo-tree-id334 . -21) (undo-tree-id335 . -21) (undo-tree-id336 . -21) (undo-tree-id337 . -21) (undo-tree-id338 . -21) (undo-tree-id339 . -21) (undo-tree-id340 . -21) (undo-tree-id341 . -21) (undo-tree-id342 . -21) (undo-tree-id343 . -21) (undo-tree-id344 . -21) (undo-tree-id345 . -21) (undo-tree-id346 . -14) (undo-tree-id347 . -14) (undo-tree-id348 . -14) (undo-tree-id349 . -14) (undo-tree-id350 . -14) (undo-tree-id351 . -14) (undo-tree-id352 . -14) (undo-tree-id353 . -14) (undo-tree-id354 . -14) (undo-tree-id355 . -14) (undo-tree-id356 . -14) (undo-tree-id357 . -14) (undo-tree-id358 . -14) (undo-tree-id359 . -14) (undo-tree-id360 . -14) (undo-tree-id361 . -14) (27492 . 27528)) (25812 50915 829134 682000) 0 nil])
([nil nil ((#("                    {{ open ? 'mdi-folder-open' : 'mdi-folder' }}
" 20 21 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 21 22 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 22 23 (block-side t) 23 24 (face web-mode-variable-name-face block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 31 (block-side t) 31 32 (face web-mode-variable-name-face block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (face web-mode-variable-name-face block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (block-side t) 42 43 (face web-mode-variable-name-face block-side t) 43 44 (face web-mode-variable-name-face block-side t) 44 45 (face web-mode-variable-name-face block-side t) 45 46 (face web-mode-variable-name-face block-side t) 46 51 (block-side t) 51 52 (face web-mode-variable-name-face block-side t) 52 53 (face web-mode-variable-name-face block-side t) 53 54 (face web-mode-variable-name-face block-side t) 54 55 (block-side t) 55 56 (face web-mode-variable-name-face block-side t) 56 57 (face web-mode-variable-name-face block-side t) 57 58 (face web-mode-variable-name-face block-side t) 58 59 (face web-mode-variable-name-face block-side t) 59 60 (face web-mode-variable-name-face block-side t) 60 61 (face web-mode-variable-name-face block-side t) 61 63 (block-side t) 63 64 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-side t) 64 65 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 28314) (28295 . 28314) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28229) (undo-tree-id1445 . -12) (28248 . 28314) 28241) nil (25812 51047 435137 763000) 0 nil])
([nil nil ((#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27511) (undo-tree-id86 . -19) (27490 . 27511) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27471) (undo-tree-id87 . -14) (27492 . 27511) 27485) ((#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27492) (undo-tree-id184 . -19) (undo-tree-id185 . -19) (undo-tree-id186 . -19) (undo-tree-id187 . -19) (undo-tree-id188 . -19) (undo-tree-id189 . -19) (undo-tree-id190 . -19) (undo-tree-id191 . -19) (undo-tree-id192 . -19) (undo-tree-id193 . -19) (undo-tree-id194 . -19) (undo-tree-id195 . -19) (undo-tree-id196 . -19) (undo-tree-id197 . -19) (undo-tree-id198 . -19) (undo-tree-id199 . -19) (undo-tree-id200 . -19) (undo-tree-id201 . -19) (undo-tree-id202 . -19) (undo-tree-id203 . -19) (undo-tree-id204 . -19) (undo-tree-id205 . -19) (undo-tree-id206 . -19) (undo-tree-id207 . -19) (undo-tree-id208 . -19) (undo-tree-id209 . -19) (undo-tree-id210 . -19) (undo-tree-id211 . -19) (undo-tree-id212 . -19) (undo-tree-id213 . -19) (undo-tree-id214 . -19) (undo-tree-id215 . -19) (undo-tree-id216 . -19) (undo-tree-id217 . -19) (undo-tree-id218 . -19) (undo-tree-id219 . -19) (undo-tree-id220 . -19) (undo-tree-id221 . -19) (undo-tree-id222 . -19) (undo-tree-id223 . -19) (undo-tree-id224 . -19) (undo-tree-id225 . -19) (undo-tree-id226 . -19) (undo-tree-id227 . -19) (undo-tree-id228 . -19) (undo-tree-id229 . -19) (undo-tree-id230 . -19) (27471 . 27492) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27490) (undo-tree-id231 . -14) (undo-tree-id232 . -21) (undo-tree-id233 . -14) (undo-tree-id234 . -14) (undo-tree-id235 . -14) (undo-tree-id236 . -14) (undo-tree-id237 . -14) (undo-tree-id238 . -14) (undo-tree-id239 . -14) (undo-tree-id240 . -14) (27511 . 27530)) (25812 50915 649156 334000) 0 nil])
([nil nil ((#("                  </v-icon>
" 18 19 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-icon") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-icon") 20 26 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-icon") 26 27 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-icon")) . 28342) (28323 . 28342) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28295) (undo-tree-id1444 . -12) (28314 . 28342) 28307) nil (25812 51047 435134 74000) 0 nil])
([nil nil ((#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27511) (undo-tree-id83 . -14) (undo-tree-id84 . -21) (undo-tree-id85 . -21) (27492 . 27511) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27471) (27490 . 27511) 27504) ((#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27490) (undo-tree-id146 . -21) (undo-tree-id147 . -21) (undo-tree-id148 . -14) (undo-tree-id149 . -14) (undo-tree-id150 . -14) (undo-tree-id151 . -21) (undo-tree-id152 . -14) (undo-tree-id153 . -14) (undo-tree-id154 . -14) (undo-tree-id155 . -14) (undo-tree-id156 . -14) (undo-tree-id157 . -14) (undo-tree-id158 . -14) (undo-tree-id159 . -14) (undo-tree-id160 . -14) (undo-tree-id161 . -14) (undo-tree-id162 . -14) (undo-tree-id163 . -14) (undo-tree-id164 . -14) (undo-tree-id165 . -14) (undo-tree-id166 . -14) (undo-tree-id167 . -14) (undo-tree-id168 . -14) (undo-tree-id169 . -14) (undo-tree-id170 . -14) (undo-tree-id171 . -14) (undo-tree-id172 . -14) (undo-tree-id173 . -14) (undo-tree-id174 . -14) (undo-tree-id175 . -14) (undo-tree-id176 . -14) (undo-tree-id177 . -14) (undo-tree-id178 . -14) (undo-tree-id179 . -14) (undo-tree-id180 . -14) (undo-tree-id181 . -14) (undo-tree-id182 . -14) (undo-tree-id183 . -14) (27471 . 27490) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27492) (27511 . 27532)) (25812 50915 531801 497000) 0 nil])
([nil nil ((#("                </template>
" 16 17 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "template") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "template") 18 26 (font-lock-face web-mode-html-tag-face tag-type end tag-name "template") 26 27 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "template")) . 28370) (28351 . 28370) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28323) (undo-tree-id1443 . -12) (28342 . 28370) 28335) nil (25812 51047 435130 113000) 0 nil])
([nil nil ((27485 . 27486)) ((#("x" 0 1 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "xv-col")) . 27485) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1)) (25812 50915 334301 818000) 0 nil])
([nil nil ((#("                <template v-slot:label=\"{ item }\">
" 16 17 (font-lock-face web-mode-html-tag-bracket-face tag-beg 17 tag-type start tag-name "template") 17 25 (font-lock-face web-mode-html-tag-face tag-type start tag-name "template") 25 26 (tag-type start tag-name "template") 26 27 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "template" tag-attr t tag-attr-beg 2) 27 32 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "template" tag-attr t) 32 33 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t block-controls 0 block-beg 0) 33 34 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 34 35 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 35 36 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 36 37 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 37 38 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 38 39 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 39 40 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 40 42 (tag-type start tag-name "template" tag-attr t block-side t) 42 43 (face web-mode-variable-name-face tag-type start tag-name "template" tag-attr t block-side t) 43 44 (face web-mode-variable-name-face tag-type start tag-name "template" tag-attr t block-side t) 44 45 (face web-mode-variable-name-face tag-type start tag-name "template" tag-attr t block-side t) 45 46 (face web-mode-variable-name-face tag-type start tag-name "template" tag-attr t block-side t) 46 48 (tag-type start tag-name "template" tag-attr t block-side t) 48 49 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "template" tag-attr-end 12 tag-attr t block-token delimiter-end block-end t block-side t) 49 50 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "template")) . 28421) (28402 . 28421) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28351) (undo-tree-id1442 . -12) (28370 . 28421) 28363) nil (25812 51047 435126 181000) 0 nil])
([nil nil ((#("              " 0 14 (face whitespace-trailing)) . -27406) (#("              " 0 14 (face whitespace-trailing)) . -27091) 27486) ((27091 . 27105) (27406 . 27420)) (25812 50915 169237 948000) 0 nil])
([nil nil ((#("                  <v-row
" 18 19 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-row") 19 24 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-row") 24 25 (tag-type start tag-name "v-row")) . 28446) (28427 . 28446) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28402) (undo-tree-id1441 . -12) (28421 . 28446) 28414) nil (25812 51047 435122 903000) 0 nil])
([nil nil ((#("x" 0 1 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "xv-col")) . -27457) (undo-tree-id99 . -1) (undo-tree-id101 . -1) (undo-tree-id103 . -1) (undo-tree-id105 . -1) (undo-tree-id107 . -1) (undo-tree-id109 . -1) (undo-tree-id111 . -1) (undo-tree-id113 . -1) (undo-tree-id115 . -1) (undo-tree-id117 . -1) (undo-tree-id119 . -1) (undo-tree-id121 . -1) (undo-tree-id123 . -1) (undo-tree-id125 . -1) (undo-tree-id127 . -1) (undo-tree-id129 . -1) (undo-tree-id131 . -1) 27458 (t 25812 50897 580725 597000)) ((27457 . 27458) (t 25812 50903 780744 741000)) (25812 50903 763541 684000) 0 nil])
([nil nil ((#("                    @mouseover=\"select_filter_settings(item.id)\"
" 20 21 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 21 22 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 22 23 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 23 24 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 24 25 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 25 26 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 26 27 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 27 28 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 28 29 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 29 30 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 30 31 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 31 32 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 32 54 (face web-mode-function-call-face block-side t) 54 55 (block-side t) 55 56 (face web-mode-variable-name-face block-side t) 56 57 (face web-mode-variable-name-face block-side t) 57 58 (face web-mode-variable-name-face block-side t) 58 59 (face web-mode-variable-name-face block-side t) 59 60 (block-side t) 60 61 (face web-mode-variable-name-face block-side t) 61 62 (face web-mode-variable-name-face block-side t) 62 63 (block-side t) 63 64 (font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 28511) (28492 . 28511) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-row") 9 10 (tag-end t tag-type start tag-name "v-row") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28427) (undo-tree-id1440 . -12) (28446 . 28511) 28439) nil (25812 51047 435119 269000) 0 nil])
nil
([nil nil ((#("                    @mouseleave=\"updateFilterHoverLeave\"
" 20 21 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 21 22 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 22 23 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 23 24 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 24 25 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 25 26 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 26 27 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 27 28 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 28 29 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 29 30 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 30 31 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 31 32 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 32 33 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (face web-mode-variable-name-face block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (face web-mode-variable-name-face block-side t) 43 44 (face web-mode-variable-name-face block-side t) 44 45 (face web-mode-variable-name-face block-side t) 45 46 (face web-mode-variable-name-face block-side t) 46 47 (face web-mode-variable-name-face block-side t) 47 48 (face web-mode-variable-name-face block-side t) 48 49 (face web-mode-variable-name-face block-side t) 49 50 (face web-mode-variable-name-face block-side t) 50 51 (face web-mode-variable-name-face block-side t) 51 52 (face web-mode-variable-name-face block-side t) 52 53 (face web-mode-variable-name-face block-side t) 53 54 (face web-mode-variable-name-face block-side t) 54 55 (face web-mode-variable-name-face block-side t) 55 56 (font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 28568) (28549 . 28568) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-row") 9 10 (tag-end t tag-type start tag-name "v-row") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28492) (undo-tree-id1439 . -12) (28511 . 28568) 28504) nil (25812 51047 435115 556000) 0 nil])
([nil nil (("                  >
" . 28588) (28569 . 28588) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-row") 9 10 (tag-end t tag-type start tag-name "v-row") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28549) (undo-tree-id1438 . -12) (28568 . 28588) 28561) nil (25812 51047 435111 777000) 0 nil])
([nil nil ((#("                    <v-col style=\" display: flex;\">
" 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-col") 21 26 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-col") 26 27 (tag-type start tag-name "v-col") 27 28 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t tag-attr-beg 0) 28 32 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t) 32 33 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-col" tag-attr t) 33 49 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t) 49 50 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr-end 5 tag-attr t) 50 51 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-col")) . 28640) (28621 . 28640) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28569) (undo-tree-id1437 . -12) (28588 . 28640) 28581) nil (25812 51047 435107 988000) 0 nil])
([nil nil ((#("                      {{item.name}}
" 22 23 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 23 24 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 28 (face web-mode-variable-name-face block-side t) 28 29 (block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (face web-mode-variable-name-face block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-side t) 34 35 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 28676) (28657 . 28676) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28621) (undo-tree-id1436 . -12) (28640 . 28676) 28633) nil (25812 51047 435103 758000) 0 nil])
([nil nil ((#("                    </v-col>
" 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 21 22 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 22 27 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 27 28 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 28705) (28686 . 28705) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28657) (undo-tree-id1435 . -12) (28676 . 28705) 28669) nil (25812 51047 435099 794000) 0 nil])
([nil nil ((#("                  </v-row>
" 18 19 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 20 25 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 25 26 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28732) (28713 . 28732) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28686) (undo-tree-id1434 . -12) (28705 . 28732) 28698) nil (25812 51047 435095 860000) 0 nil])
([nil nil ((#("                </template>
" 16 17 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "template") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "template") 18 26 (font-lock-face web-mode-html-tag-face tag-type end tag-name "template") 26 27 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "template" rear-nonsticky t)) . 28760) (28741 . 28760) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28713) (undo-tree-id1433 . -12) (28732 . 28760) 28725) nil (25812 51047 435091 261000) 0 nil])
([nil nil ((#("          </v-treeview>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-treeview") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-treeview") 12 22 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-treeview") 22 23 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-treeview")) . 28784) (28765 . 28784) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 28741) (undo-tree-id1432 . -12) (28760 . 28784) 28753) nil (25812 51047 435086 442000) 0 nil])
([nil nil ((28751 . 28753) ("  " . -28729) ("  " . -28706) ("  " . -28681) ("  " . -28649) ("  " . -28597) (#("  " 0 2 (tag-type start tag-name "v-row")) . -28577) (#("  " 0 2 (tag-type start tag-name "v-row")) . -28524) (#("  " 0 2 (tag-type start tag-name "v-row")) . -28461) ("  " . -28436) ("  " . -28385) ("  " . -28359) ("  " . -28335) ("  " . -28273) ("  " . -28239) ("  " . -28213) ("  " . -28173) (#("  " 0 2 (tag-type start tag-name "v-icon")) . -28153) (28076 . 28100) (#("                    " 0 20 (tag-type start tag-name "v-icon")) . 28076) (28007 . 28031) (#("                    " 0 20 (tag-type start tag-name "v-icon")) . 28007) ("  " . -27900) (27839 . 27841) (27823 . 27825) (27788 . 27790) (27768 . 27770) (27740 . 27742) (27716 . 27718) (27690 . 27692) (27662 . 27664) (27626 . 27628) (27571 . 27573) (27525 . 27527) (27481 . 27483) (27435 . 27437) (27409 . 27411) 27399) nil (25812 51048 458783 902000) 0 nil])
([nil nil (("
" . 27385) (undo-tree-id1500 . -1)) nil (25812 51311 366945 448000) 0 nil] [nil nil ((#(">" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-row")) . 27384)) ((27384 . 27385)) (25812 51048 457700 695000) 0 nil] [nil nil ((#(">" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-row")) . 27384)) ((27384 . 27385)) (25812 51047 435053 49000) 0 nil])
([nil nil ((#("item.filter_sel" 0 15 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-icon" tag-attr t)) . 27913) (undo-tree-id1497 . -15) (undo-tree-id1498 . -15) (undo-tree-id1499 . -15)) nil (25812 51311 366942 133000) 0 nil])
nil
nil
([nil nil ((nil rear-nonsticky nil 27924 . 27925) (nil tag-attr t 27913 . 27925) (nil tag-name "v-icon" 27913 . 27925) (nil tag-type start 27913 . 27925) (nil font-lock-face web-mode-html-attr-value-face 27913 . 27925) (27913 . 27925)) nil (25812 51311 366935 836000) 0 nil])
([nil nil (("mdi-filter-plus-outline" . 28169) (undo-tree-id1494 . -23) (undo-tree-id1495 . -23) (undo-tree-id1496 . -23)) nil (25812 51311 366933 169000) 0 nil])
([nil nil ((28169 . 28179)) nil (25812 51311 366928 142000) 0 nil])
([nil nil ((#("
                  @mouseover=\"select_filter_settings(item.id)\"
                  @mouseleave=\"updateFilterHoverLeave\"" 0 1 (tag-type start tag-name "v-row") 1 19 (tag-type start tag-name "v-row") 19 20 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t tag-attr-beg 2 block-token delimiter-beg block-side t block-controls 0 block-beg 0) 20 21 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 21 22 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 22 23 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 23 24 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 24 25 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 25 26 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 26 27 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 27 28 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 28 29 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 29 30 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 30 31 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 31 53 (face web-mode-function-call-face tag-type start tag-name "v-row" tag-attr t block-side t) 53 54 (tag-type start tag-name "v-row" tag-attr t block-side t) 54 55 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 55 56 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 56 57 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 57 58 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 58 59 (tag-type start tag-name "v-row" tag-attr t block-side t) 59 60 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 60 61 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 61 62 (tag-type start tag-name "v-row" tag-attr t block-side t) 62 63 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr-end 10 tag-attr t block-token delimiter-end block-end t block-side t) 63 64 (tag-type start tag-name "v-row") 64 82 (tag-type start tag-name "v-row") 82 83 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t tag-attr-beg 2 block-token delimiter-beg block-side t block-controls 0 block-beg 0) 83 84 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 84 85 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 85 86 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 86 87 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 87 88 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 88 89 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 89 90 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 90 91 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 91 92 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 92 93 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 93 94 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 94 95 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr t block-token delimiter-beg block-side t) 95 96 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 96 97 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 97 98 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 98 99 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 99 100 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 100 101 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 101 102 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 102 103 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 103 104 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 104 105 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 105 106 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 106 107 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 107 108 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 108 109 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 109 110 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 110 111 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 111 112 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 112 113 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 113 114 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 114 115 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 115 116 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 116 117 (face web-mode-variable-name-face tag-type start tag-name "v-row" tag-attr t block-side t) 117 118 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-row" tag-attr-end 11 tag-attr t block-token delimiter-end block-end t block-side t)) . 28425) (undo-tree-id1491 . -118) (undo-tree-id1492 . -1) (undo-tree-id1493 . -118)) nil (25812 51311 366926 681000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-row")) . 28425) (#(" " 0 1 (tag-type start tag-name "v-row")) . 28425) (#(" " 0 1 (tag-type start tag-name "v-row")) . 28425) (#(" " 0 1 (tag-type start tag-name "v-row")) . 28425) (#(" " 0 1 (tag-type start tag-name "v-row")) . 28425) (#(" " 0 1 (tag-type start tag-name "v-row")) . 28425) (#(" " 0 1 (tag-type start tag-name "v-row")) . 28425) (#(" " 0 1 (tag-type start tag-name "v-row")) . 28425) (#(" " 0 1 (tag-type start tag-name "v-row")) . 28425) (#(" " 0 1 (tag-type start tag-name "v-row")) . 28425) (#(" " 0 1 (tag-type start tag-name "v-row")) . 28425) (#(" " 0 1 (tag-type start tag-name "v-row")) . 28425) (#(" " 0 1 (tag-type start tag-name "v-row")) . 28425) (#(" " 0 1 (tag-type start tag-name "v-row")) . 28425) (#(" " 0 1 (tag-type start tag-name "v-row")) . 28425) (#(" " 0 1 (tag-type start tag-name "v-row")) . 28425) (#("
" 0 1 (tag-type start tag-name "v-row")) . 28425) (undo-tree-id1490 . -1)) nil (25812 51311 366917 142000) 0 nil])
([nil nil ((#(":color=\"differenceHolder[item.id] != null ? differenceHolder[item.id] : ''\"
                        @mouseover=\"select_filter_settings(item.id)\"
                        @mouseleave=\"updateFilterHoverLeave\"" 0 1 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t tag-attr-beg 2 block-token delimiter-beg block-side t block-controls 0 block-beg 0) 1 2 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 2 3 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 3 4 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 4 5 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 5 6 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 6 7 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 7 8 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 8 9 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 9 10 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 10 11 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 11 12 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 12 13 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 13 14 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 14 15 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 15 16 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 16 17 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 17 18 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 18 19 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 19 20 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 20 21 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 21 22 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 22 23 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 23 24 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 24 25 (tag-type start tag-name "v-icon" tag-attr t block-side t) 25 26 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 26 27 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 27 28 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 28 29 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 29 30 (tag-type start tag-name "v-icon" tag-attr t block-side t) 30 31 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 31 32 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 32 37 (tag-type start tag-name "v-icon" tag-attr t block-side t) 37 38 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 38 39 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 39 40 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 40 41 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 41 44 (tag-type start tag-name "v-icon" tag-attr t block-side t) 44 45 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 45 46 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 46 47 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 47 48 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 48 49 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 49 50 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 50 51 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 51 52 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 52 53 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 53 54 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 54 55 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 55 56 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 56 57 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 57 58 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 58 59 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 59 60 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 60 61 (tag-type start tag-name "v-icon" tag-attr t block-side t) 61 62 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 62 63 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 63 64 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 64 65 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 65 66 (tag-type start tag-name "v-icon" tag-attr t block-side t) 66 67 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 67 68 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 68 74 (tag-type start tag-name "v-icon" tag-attr t block-side t) 74 75 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr-end 6 tag-attr t block-token delimiter-end block-end t block-side t) 75 100 (tag-type start tag-name "v-icon") 100 101 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t tag-attr-beg 2 block-token delimiter-beg block-side t block-controls 0 block-beg 0) 101 102 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 102 103 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 103 104 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 104 105 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 105 106 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 106 107 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 107 108 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 108 109 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 109 110 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 110 111 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 111 112 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 112 134 (face web-mode-function-call-face tag-type start tag-name "v-icon" tag-attr t block-side t) 134 135 (tag-type start tag-name "v-icon" tag-attr t block-side t) 135 136 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 136 137 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 137 138 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 138 139 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 139 140 (tag-type start tag-name "v-icon" tag-attr t block-side t) 140 141 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 141 142 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 142 143 (tag-type start tag-name "v-icon" tag-attr t block-side t) 143 144 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr-end 10 tag-attr t block-token delimiter-end block-end t block-side t) 144 169 (tag-type start tag-name "v-icon") 169 170 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t tag-attr-beg 2 block-token delimiter-beg block-side t block-controls 0 block-beg 0) 170 171 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 171 172 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 172 173 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 173 174 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 174 175 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 175 176 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 176 177 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 177 178 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 178 179 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 179 180 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 180 181 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 181 182 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr t block-token delimiter-beg block-side t) 182 183 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 183 184 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 184 185 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 185 186 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 186 187 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 187 188 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 188 189 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 189 190 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 190 191 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 191 192 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 192 193 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 193 194 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 194 195 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 195 196 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 196 197 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 197 198 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 198 199 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 199 200 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 200 201 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 201 202 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 202 203 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 203 204 (face web-mode-variable-name-face tag-type start tag-name "v-icon" tag-attr t block-side t) 204 205 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-icon" tag-attr-end 11 tag-attr t block-token delimiter-end block-end t block-side t)) . 27927) (undo-tree-id1486 . -205) (undo-tree-id1487 . -205) (undo-tree-id1488 . -76) (undo-tree-id1489 . -205)) nil (25812 51311 366908 232000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-icon")) . 27927) (#(" " 0 1 (tag-type start tag-name "v-icon")) . 27927) (#(" " 0 1 (tag-type start tag-name "v-icon")) . 27927) (#(" " 0 1 (tag-type start tag-name "v-icon")) . 27927) (#(" " 0 1 (tag-type start tag-name "v-icon")) . 27927) (#(" " 0 1 (tag-type start tag-name "v-icon")) . 27927) (#(" " 0 1 (tag-type start tag-name "v-icon")) . 27927) (#(" " 0 1 (tag-type start tag-name "v-icon")) . 27927) (#(" " 0 1 (tag-type start tag-name "v-icon")) . 27927) (#(" " 0 1 (tag-type start tag-name "v-icon")) . 27927) (#(" " 0 1 (tag-type start tag-name "v-icon")) . 27927) (#(" " 0 1 (tag-type start tag-name "v-icon")) . 27927) (#(" " 0 1 (tag-type start tag-name "v-icon")) . 27927) (#(" " 0 1 (tag-type start tag-name "v-icon")) . 27927) (#(" " 0 1 (tag-type start tag-name "v-icon")) . 27927) (#(" " 0 1 (tag-type start tag-name "v-icon")) . 27927) (#("
" 0 1 (tag-type start tag-name "v-icon")) . 27927) (undo-tree-id1485 . -1)) nil (25812 51311 366897 358000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-icon")) . -27926) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) 27927) nil (25812 51311 366888 122000) 0 nil])
([nil nil ((#("filter_selections_tree" 0 1 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 1 2 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 2 3 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 3 4 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 4 5 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 5 6 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 6 7 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 7 8 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 8 9 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 9 10 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 10 11 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 11 12 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 12 13 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 13 14 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 14 15 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 15 16 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 16 17 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 17 18 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 18 19 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 19 20 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 20 21 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 21 22 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t)) . 27444) (undo-tree-id1479 . -22) (undo-tree-id1480 . -22) (undo-tree-id1481 . -22)) nil (25812 51311 366882 805000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27454 . 27455) (nil block-side t 27454 . 27455) (nil tag-attr t 27454 . 27455) (nil tag-name "v-treeview" 27454 . 27455) (nil tag-type start 27454 . 27455) (nil face web-mode-variable-name-face 27454 . 27455) (nil block-side t 27453 . 27454) (nil tag-attr t 27453 . 27454) (nil tag-name "v-treeview" 27453 . 27454) (nil tag-type start 27453 . 27454) (nil face web-mode-variable-name-face 27453 . 27454) (nil block-side t 27452 . 27453) (nil tag-attr t 27452 . 27453) (nil tag-name "v-treeview" 27452 . 27453) (nil tag-type start 27452 . 27453) (nil face web-mode-variable-name-face 27452 . 27453) (nil block-side t 27451 . 27452) (nil tag-attr t 27451 . 27452) (nil tag-name "v-treeview" 27451 . 27452) (nil tag-type start 27451 . 27452) (nil face web-mode-variable-name-face 27451 . 27452) (nil block-side t 27450 . 27451) (nil tag-attr t 27450 . 27451) (nil tag-name "v-treeview" 27450 . 27451) (nil tag-type start 27450 . 27451) (nil face web-mode-variable-name-face 27450 . 27451) (nil block-side t 27449 . 27450) (nil tag-attr t 27449 . 27450) (nil tag-name "v-treeview" 27449 . 27450) (nil tag-type start 27449 . 27450) (nil face web-mode-variable-name-face 27449 . 27450) (nil block-side t 27448 . 27449) (nil tag-attr t 27448 . 27449) (nil tag-name "v-treeview" 27448 . 27449) (nil tag-type start 27448 . 27449) (nil face web-mode-variable-name-face 27448 . 27449) (nil block-side t 27447 . 27448) (nil tag-attr t 27447 . 27448) (nil tag-name "v-treeview" 27447 . 27448) (nil tag-type start 27447 . 27448) (nil face web-mode-variable-name-face 27447 . 27448) (nil block-side t 27446 . 27447) (nil tag-attr t 27446 . 27447) (nil tag-name "v-treeview" 27446 . 27447) (nil tag-type start 27446 . 27447) (nil face web-mode-variable-name-face 27446 . 27447) (nil block-side t 27445 . 27446) (nil tag-attr t 27445 . 27446) (nil tag-name "v-treeview" 27445 . 27446) (nil tag-type start 27445 . 27446) (nil face web-mode-variable-name-face 27445 . 27446) (nil block-side t 27444 . 27445) (nil tag-attr t 27444 . 27445) (nil tag-name "v-treeview" 27444 . 27445) (nil tag-type start 27444 . 27445) (nil face web-mode-variable-name-face 27444 . 27445) (27444 . 27455)) nil (25812 51311 366873 924000) 0 nil])
([nil nil ((#("filter_selection" 0 1 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 1 2 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 2 3 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 3 4 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 4 5 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 5 6 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 6 7 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 7 8 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 8 9 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 9 10 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 10 11 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 11 12 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 12 13 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 13 14 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 14 15 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 15 16 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t)) . 27584) (undo-tree-id1477 . -16) (undo-tree-id1478 . -16)) nil (25812 51311 366857 66000) 0 nil])
([nil nil ((27584 . 27594)) nil (25812 51311 366852 380000) 0 nil])
([nil nil ((106226 . 106227)) nil (25812 51311 366851 165000) 0 nil])
([nil nil ((106227 . 106234)) nil (25812 51311 366849 904000) 0 nil])
([nil nil ((nil rear-nonsticky nil 107066 . 107067) (nil part-side javascript 107066 . 107067) (nil part-side javascript 107065 . 107066) (nil face (rainbow-delimiters-depth-3-face) 107065 . 107066) (nil part-side javascript 107058 . 107065) (nil part-side javascript 107057 . 107058) (nil face (rainbow-delimiters-depth-4-face) 107057 . 107058) (nil part-side javascript 107056 . 107057) (nil face (rainbow-delimiters-depth-4-face) 107056 . 107057) (nil part-side javascript 107040 . 107056) (nil part-side javascript 107036 . 107040) (nil face web-mode-constant-face 107036 . 107040) (nil part-side javascript 107027 . 107036) (nil part-side javascript 107026 . 107027) (nil face (rainbow-delimiters-depth-4-face) 107026 . 107027) (nil part-side javascript 107025 . 107026) (nil face (rainbow-delimiters-depth-4-face) 107025 . 107026) (nil part-side javascript 107005 . 107025) (nil part-side javascript 107001 . 107005) (nil face web-mode-constant-face 107001 . 107005) (nil part-side javascript 106992 . 107001) (nil part-side javascript 106987 . 106992) (nil face web-mode-constant-face 106987 . 106992) (nil part-side javascript 106964 . 106987) (nil part-side javascript 106960 . 106964) (nil face web-mode-constant-face 106960 . 106964) (nil part-side javascript 106952 . 106960) (nil part-side javascript 106951 . 106952) (nil syntax-table (12) 106951 . 106952) (nil part-side javascript 106947 . 106951) (nil part-token comment 106947 . 106951) (nil font-lock-face web-mode-javascript-comment-face 106947 . 106951) (nil part-side javascript 106922 . 106947) (nil part-token comment 106922 . 106947) (nil font-lock-face web-mode-javascript-comment-face 106922 . 106947) (nil part-side javascript 106918 . 106922) (nil part-token comment 106918 . 106922) (nil font-lock-face web-mode-javascript-comment-face 106918 . 106922) (nil part-side javascript 106916 . 106918) (nil part-token comment 106916 . 106918) (nil font-lock-face web-mode-javascript-comment-face 106916 . 106918) (nil part-side javascript 106915 . 106916) (nil part-token comment 106915 . 106916) (nil syntax-table (11) 106915 . 106916) (nil font-lock-face web-mode-javascript-comment-face 106915 . 106916) (nil part-side javascript 106905 . 106915) (nil part-side javascript 106904 . 106905) (nil face (rainbow-delimiters-depth-4-face) 106904 . 106905) (nil part-side javascript 106893 . 106904) (nil part-side javascript 106892 . 106893) (nil part-token string 106892 . 106893) (nil syntax-table (15) 106892 . 106893) (nil font-lock-face web-mode-javascript-string-face 106892 . 106893) (nil part-side javascript 106883 . 106892) (nil part-token string 106883 . 106892) (nil font-lock-face web-mode-javascript-string-face 106883 . 106892) (nil part-side javascript 106877 . 106883) (nil part-token string 106877 . 106883) (nil font-lock-face web-mode-javascript-string-face 106877 . 106883) (nil part-side javascript 106876 . 106877) (nil part-token string 106876 . 106877) (nil syntax-table (15) 106876 . 106877) (nil font-lock-face web-mode-javascript-string-face 106876 . 106877) (nil part-side javascript 106875 . 106876) (nil face (rainbow-delimiters-depth-4-face) 106875 . 106876) (nil part-side javascript 106869 . 106875) (nil part-side javascript 106865 . 106869) (nil face web-mode-constant-face 106865 . 106869) (nil part-side javascript 106857 . 106865) (nil part-side javascript 106856 . 106857) (nil syntax-table (12) 106856 . 106857) (nil part-side javascript 106835 . 106856) (nil part-token comment 106835 . 106856) (nil font-lock-face web-mode-javascript-comment-face 106835 . 106856) (nil part-side javascript 106831 . 106835) (nil part-token comment 106831 . 106835) (nil font-lock-face web-mode-javascript-comment-face 106831 . 106835) (nil part-side javascript 106829 . 106831) (nil part-token comment 106829 . 106831) (nil font-lock-face web-mode-javascript-comment-face 106829 . 106831) (nil part-side javascript 106828 . 106829) (nil part-token comment 106828 . 106829) (nil syntax-table (11) 106828 . 106829) (nil font-lock-face web-mode-javascript-comment-face 106828 . 106829) (nil part-side javascript 106820 . 106828) (nil part-side javascript 106819 . 106820) (nil syntax-table (12) 106819 . 106820) (nil part-side javascript 106795 . 106819) (nil part-token comment 106795 . 106819) (nil font-lock-face web-mode-javascript-comment-face 106795 . 106819) (nil part-side javascript 106794 . 106795) (nil part-token comment 106794 . 106795) (nil syntax-table (11) 106794 . 106795) (nil font-lock-face web-mode-javascript-comment-face 106794 . 106795) (nil part-side javascript 106784 . 106794) (nil part-side javascript 106783 . 106784) (nil face (rainbow-delimiters-depth-4-face) 106783 . 106784) (nil part-side javascript 106782 . 106783) (nil face (rainbow-delimiters-depth-5-face) 106782 . 106783) (nil part-side javascript 106773 . 106782) (nil part-side javascript 106772 . 106773) (nil face (rainbow-delimiters-depth-6-face) 106772 . 106773) (nil part-side javascript 106738 . 106772) (nil part-side javascript 106737 . 106738) (nil face (rainbow-delimiters-depth-6-face) 106737 . 106738) (nil part-side javascript 106725 . 106737) (nil face web-mode-function-call-face 106725 . 106737) (nil part-side javascript 106724 . 106725) (nil part-side javascript 106720 . 106724) (nil face web-mode-constant-face 106720 . 106724) (nil part-side javascript 106709 . 106720) (nil part-side javascript 106708 . 106709) (nil face (rainbow-delimiters-depth-5-face) 106708 . 106709) (nil part-side javascript 106704 . 106708) (nil part-side javascript 106692 . 106704) (nil face web-mode-function-name-face 106692 . 106704) (nil part-side javascript 106691 . 106692) (nil face (rainbow-delimiters-depth-4-face) 106691 . 106692) (nil part-side javascript 106684 . 106691) (nil face web-mode-function-call-face 106684 . 106691) (nil part-side javascript 106675 . 106684) (nil part-side javascript 106671 . 106675) (nil face web-mode-constant-face 106671 . 106675) (nil part-side javascript 106662 . 106671) (nil part-side javascript 106661 . 106662) (nil face (rainbow-delimiters-depth-4-face) 106661 . 106662) (nil part-side javascript 106660 . 106661) (nil face (rainbow-delimiters-depth-4-face) 106660 . 106661) (nil part-side javascript 106657 . 106660) (nil part-side javascript 106648 . 106657) (nil face web-mode-variable-name-face 106648 . 106657) (nil part-side javascript 106647 . 106648) (nil part-side javascript 106642 . 106647) (nil face web-mode-keyword-face 106642 . 106647) (nil part-side javascript 106633 . 106642) (nil part-side javascript 106632 . 106633) (nil syntax-table (12) 106632 . 106633) (nil part-side javascript 106615 . 106632) (nil part-token comment 106615 . 106632) (nil font-lock-face web-mode-javascript-comment-face 106615 . 106632) (nil part-side javascript 106613 . 106615) (nil part-token comment 106613 . 106615) (nil font-lock-face web-mode-javascript-comment-face 106613 . 106615) (nil part-side javascript 106597 . 106613) (nil part-token comment 106597 . 106613) (nil font-lock-face web-mode-javascript-comment-face 106597 . 106613) (nil part-side javascript 106589 . 106597) (nil part-token comment 106589 . 106597) (nil font-lock-face web-mode-javascript-comment-face 106589 . 106597) (nil part-side javascript 106588 . 106589) (nil part-token comment 106588 . 106589) (nil font-lock-face web-mode-javascript-comment-face 106588 . 106589) (nil part-side javascript 106585 . 106588) (nil part-token comment 106585 . 106588) (nil font-lock-face web-mode-javascript-comment-face 106585 . 106588) (nil part-side javascript 106567 . 106585) (nil part-token comment 106567 . 106585) (nil font-lock-face web-mode-javascript-comment-face 106567 . 106585) (nil part-side javascript 106566 . 106567) (nil part-token comment 106566 . 106567) (nil syntax-table (11) 106566 . 106567) (nil font-lock-face web-mode-javascript-comment-face 106566 . 106567) (nil part-side javascript 106556 . 106566) (nil part-side javascript 106555 . 106556) (nil face (rainbow-delimiters-depth-4-face) 106555 . 106556) (nil part-side javascript 106541 . 106555) (nil part-side javascript 106540 . 106541) (nil face (rainbow-delimiters-depth-5-face) 106540 . 106541) (nil part-side javascript 106539 . 106540) (nil part-side javascript 106538 . 106539) (nil face (rainbow-delimiters-depth-5-face) 106538 . 106539) (nil part-side javascript 106512 . 106538) (nil part-side javascript 106508 . 106512) (nil face web-mode-constant-face 106508 . 106512) (nil part-side javascript 106497 . 106508) (nil part-side javascript 106496 . 106497) (nil face (rainbow-delimiters-depth-5-face) 106496 . 106497) (nil part-side javascript 106495 . 106496) (nil face (rainbow-delimiters-depth-6-face) 106495 . 106496) (nil part-side javascript 106494 . 106495) (nil part-side javascript 106493 . 106494) (nil face (rainbow-delimiters-depth-6-face) 106493 . 106494) (nil part-side javascript 106490 . 106493) (nil part-side javascript 106489 . 106490) (nil face (rainbow-delimiters-depth-5-face) 106489 . 106490) (nil part-side javascript 106464 . 106489) (nil part-side javascript 106460 . 106464) (nil face web-mode-constant-face 106460 . 106464) (nil part-side javascript 106449 . 106460) (nil part-side javascript 106448 . 106449) (nil face (rainbow-delimiters-depth-5-face) 106448 . 106449) (nil part-side javascript 106447 . 106448) (nil face (rainbow-delimiters-depth-6-face) 106447 . 106448) (nil part-side javascript 106446 . 106447) (nil part-side javascript 106445 . 106446) (nil face (rainbow-delimiters-depth-6-face) 106445 . 106446) (nil part-side javascript 106440 . 106445) (nil part-side javascript 106439 . 106440) (nil face web-mode-function-name-face 106439 . 106440) (nil part-side javascript 106438 . 106439) (nil face (rainbow-delimiters-depth-5-face) 106438 . 106439) (nil part-side javascript 106435 . 106438) (nil face web-mode-function-call-face 106435 . 106438) (nil part-side javascript 106434 . 106435) (nil part-side javascript 106433 . 106434) (nil face (rainbow-delimiters-depth-5-face) 106433 . 106434) (nil part-side javascript 106430 . 106433) (nil part-side javascript 106429 . 106430) (nil face (rainbow-delimiters-depth-6-face) 106429 . 106430) (nil part-side javascript 106428 . 106429) (nil part-side javascript 106427 . 106428) (nil face (rainbow-delimiters-depth-6-face) 106427 . 106428) (nil part-side javascript 106424 . 106427) (nil part-side javascript 106423 . 106424) (nil face (rainbow-delimiters-depth-5-face) 106423 . 106424) (nil part-side javascript 106412 . 106423) (nil part-side javascript 106408 . 106412) (nil face web-mode-constant-face 106408 . 106412) (nil part-side javascript 106385 . 106408) (nil part-side javascript 106384 . 106385) (nil face (rainbow-delimiters-depth-4-face) 106384 . 106385) (nil part-side javascript 106383 . 106384) (nil part-side javascript 106382 . 106383) (nil face (rainbow-delimiters-depth-4-face) 106382 . 106383) (nil part-side javascript 106381 . 106382) (nil face (rainbow-delimiters-depth-5-face) 106381 . 106382) (nil part-side javascript 106380 . 106381) (nil part-side javascript 106379 . 106380) (nil face (rainbow-delimiters-depth-5-face) 106379 . 106380) (nil part-side javascript 106375 . 106379) (nil part-side javascript 106373 . 106375) (nil face web-mode-keyword-face 106373 . 106375) (nil part-side javascript 106372 . 106373) (nil part-side javascript 106371 . 106372) (nil part-token string 106371 . 106372) (nil syntax-table (15) 106371 . 106372) (nil font-lock-face web-mode-javascript-string-face 106371 . 106372) (nil part-side javascript 106369 . 106371) (nil part-token string 106369 . 106371) (nil font-lock-face web-mode-javascript-string-face 106369 . 106371) (nil part-side javascript 106368 . 106369) (nil part-token string 106368 . 106369) (nil syntax-table (15) 106368 . 106369) (nil font-lock-face web-mode-javascript-string-face 106368 . 106369) (nil part-side javascript 106350 . 106368) (nil part-side javascript 106349 . 106350) (nil face (rainbow-delimiters-depth-4-face) 106349 . 106350) (nil part-side javascript 106348 . 106349) (nil part-side javascript 106346 . 106348) (nil face web-mode-keyword-face 106346 . 106348) (nil part-side javascript 106337 . 106346) (nil part-side javascript 106333 . 106337) (nil face web-mode-constant-face 106333 . 106337) (nil part-side javascript 106310 . 106333) (nil part-side javascript 106306 . 106310) (nil face web-mode-constant-face 106306 . 106310) (nil part-side javascript 106297 . 106306) (nil part-side javascript 106296 . 106297) (nil face (rainbow-delimiters-depth-4-face) 106296 . 106297) (nil part-side javascript 106295 . 106296) (nil face (rainbow-delimiters-depth-4-face) 106295 . 106296) (nil part-side javascript 106292 . 106295) (nil part-side javascript 106283 . 106292) (nil face web-mode-variable-name-face 106283 . 106292) (nil part-side javascript 106282 . 106283) (nil part-side javascript 106279 . 106282) (nil face web-mode-keyword-face 106279 . 106282) (nil part-side javascript 106270 . 106279) (nil part-side javascript 106269 . 106270) (nil face (rainbow-delimiters-depth-3-face) 106269 . 106270) (nil part-side javascript 106268 . 106269) (nil part-side javascript 106267 . 106268) (nil face (rainbow-delimiters-depth-3-face) 106267 . 106268) (nil part-side javascript 106264 . 106267) (nil part-side javascript 106263 . 106264) (nil face (rainbow-delimiters-depth-3-face) 106263 . 106264) (nil part-side javascript 106240 . 106263) (nil face web-mode-function-name-face 106240 . 106263) (nil part-side javascript 106234 . 106240) (106234 . 107067)) nil (25812 51311 366834 212000) 0 nil])
([nil nil ((#("et selection = []
        this.filterSelectionName = null
        if (val.length > 0 && 'id' in val[0]) {
          selection = this.filter_all[val[0].id].map(x => x[1])
          this.chosenFilterSelection = [val[0]]
          this.filterSelectionName = val[0].path
        }

        // From filtertree get frontend and backend id of selected filters

        const leafNodes = []
        this.filters.forEach(filterFolder => {
          this.getLeafNodes(leafNodes, filterFolder, selection)
        })

        // Update shown selection
        // this.selected = leafNodes
        this.$emit('update:selected', leafNodes)

        // this.chosenFilterSelection = null
        this.filterSelEditDialog = false
        this.differenceHolder = {}
        this.folderChange = {}" 0 2 (face web-mode-keyword-face part-side javascript) 2 3 (part-side javascript) 3 12 (face web-mode-variable-name-face part-side javascript) 12 15 (part-side javascript) 15 16 (face (rainbow-delimiters-depth-4-face) part-side javascript) 16 17 (face (rainbow-delimiters-depth-4-face) part-side javascript) 17 26 (part-side javascript) 26 30 (face web-mode-constant-face part-side javascript) 30 53 (part-side javascript) 53 57 (face web-mode-constant-face part-side javascript) 57 66 (part-side javascript) 66 68 (face web-mode-keyword-face part-side javascript) 68 69 (part-side javascript) 69 70 (face (rainbow-delimiters-depth-4-face) part-side javascript) 70 88 (part-side javascript) 88 89 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 89 91 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 91 92 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 92 93 (part-side javascript) 93 95 (face web-mode-keyword-face part-side javascript) 95 99 (part-side javascript) 99 100 (face (rainbow-delimiters-depth-5-face) part-side javascript) 100 101 (part-side javascript) 101 102 (face (rainbow-delimiters-depth-5-face) part-side javascript) 102 103 (face (rainbow-delimiters-depth-4-face) part-side javascript) 103 104 (part-side javascript) 104 105 (face (rainbow-delimiters-depth-4-face) part-side javascript) 105 128 (part-side javascript) 128 132 (face web-mode-constant-face part-side javascript) 132 143 (part-side javascript) 143 144 (face (rainbow-delimiters-depth-5-face) part-side javascript) 144 147 (part-side javascript) 147 148 (face (rainbow-delimiters-depth-6-face) part-side javascript) 148 149 (part-side javascript) 149 150 (face (rainbow-delimiters-depth-6-face) part-side javascript) 150 153 (part-side javascript) 153 154 (face (rainbow-delimiters-depth-5-face) part-side javascript) 154 155 (part-side javascript) 155 158 (face web-mode-function-call-face part-side javascript) 158 159 (face (rainbow-delimiters-depth-5-face) part-side javascript) 159 160 (face web-mode-function-name-face part-side javascript) 160 165 (part-side javascript) 165 166 (face (rainbow-delimiters-depth-6-face) part-side javascript) 166 167 (part-side javascript) 167 168 (face (rainbow-delimiters-depth-6-face) part-side javascript) 168 169 (face (rainbow-delimiters-depth-5-face) part-side javascript) 169 180 (part-side javascript) 180 184 (face web-mode-constant-face part-side javascript) 184 209 (part-side javascript) 209 210 (face (rainbow-delimiters-depth-5-face) part-side javascript) 210 213 (part-side javascript) 213 214 (face (rainbow-delimiters-depth-6-face) part-side javascript) 214 215 (part-side javascript) 215 216 (face (rainbow-delimiters-depth-6-face) part-side javascript) 216 217 (face (rainbow-delimiters-depth-5-face) part-side javascript) 217 228 (part-side javascript) 228 232 (face web-mode-constant-face part-side javascript) 232 258 (part-side javascript) 258 259 (face (rainbow-delimiters-depth-5-face) part-side javascript) 259 260 (part-side javascript) 260 261 (face (rainbow-delimiters-depth-5-face) part-side javascript) 261 275 (part-side javascript) 275 276 (face (rainbow-delimiters-depth-4-face) part-side javascript) 276 286 (part-side javascript) 286 287 (font-lock-face web-mode-javascript-comment-face syntax-table (11) part-token comment part-side javascript) 287 305 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 305 308 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 308 309 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 309 317 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 317 333 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 333 335 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 335 352 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 352 353 (syntax-table (12) part-side javascript) 353 362 (part-side javascript) 362 367 (face web-mode-keyword-face part-side javascript) 367 368 (part-side javascript) 368 377 (face web-mode-variable-name-face part-side javascript) 377 380 (part-side javascript) 380 381 (face (rainbow-delimiters-depth-4-face) part-side javascript) 381 382 (face (rainbow-delimiters-depth-4-face) part-side javascript) 382 391 (part-side javascript) 391 395 (face web-mode-constant-face part-side javascript) 395 404 (part-side javascript) 404 411 (face web-mode-function-call-face part-side javascript) 411 412 (face (rainbow-delimiters-depth-4-face) part-side javascript) 412 424 (face web-mode-function-name-face part-side javascript) 424 428 (part-side javascript) 428 429 (face (rainbow-delimiters-depth-5-face) part-side javascript) 429 440 (part-side javascript) 440 444 (face web-mode-constant-face part-side javascript) 444 445 (part-side javascript) 445 457 (face web-mode-function-call-face part-side javascript) 457 458 (face (rainbow-delimiters-depth-6-face) part-side javascript) 458 492 (part-side javascript) 492 493 (face (rainbow-delimiters-depth-6-face) part-side javascript) 493 502 (part-side javascript) 502 503 (face (rainbow-delimiters-depth-5-face) part-side javascript) 503 504 (face (rainbow-delimiters-depth-4-face) part-side javascript) 504 514 (part-side javascript) 514 515 (font-lock-face web-mode-javascript-comment-face syntax-table (11) part-token comment part-side javascript) 515 539 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 539 540 (syntax-table (12) part-side javascript) 540 548 (part-side javascript) 548 549 (font-lock-face web-mode-javascript-comment-face syntax-table (11) part-token comment part-side javascript) 549 551 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 551 555 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 555 576 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 576 577 (syntax-table (12) part-side javascript) 577 585 (part-side javascript) 585 589 (face web-mode-constant-face part-side javascript) 589 595 (part-side javascript) 595 596 (face (rainbow-delimiters-depth-4-face) part-side javascript) 596 597 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 597 603 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 603 612 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 612 613 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 613 624 (part-side javascript) 624 625 (face (rainbow-delimiters-depth-4-face) part-side javascript) 625 635 (part-side javascript) 635 636 (font-lock-face web-mode-javascript-comment-face syntax-table (11) part-token comment part-side javascript) 636 638 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 638 642 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 642 667 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 667 671 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 671 672 (syntax-table (12) part-side javascript) 672 680 (part-side javascript) 680 684 (face web-mode-constant-face part-side javascript) 684 707 (part-side javascript) 707 712 (face web-mode-constant-face part-side javascript) 712 721 (part-side javascript) 721 725 (face web-mode-constant-face part-side javascript) 725 745 (part-side javascript) 745 746 (face (rainbow-delimiters-depth-4-face) part-side javascript) 746 747 (face (rainbow-delimiters-depth-4-face) part-side javascript) 747 756 (part-side javascript) 756 760 (face web-mode-constant-face part-side javascript) 760 776 (part-side javascript) 776 777 (face (rainbow-delimiters-depth-4-face) part-side javascript) 777 778 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . 106280) (undo-tree-id1474 . -778) (undo-tree-id1475 . -18) (undo-tree-id1476 . -778)) nil (25812 51311 366742 460000) 0 nil])
([nil nil ((#("l" 0 1 (part-side javascript)) . -106279) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) 106280) nil (25812 51311 366734 280000) 0 nil])
([nil nil ((#("      " 0 6 (part-side javascript)) . -106234) (undo-tree-id1471 . -2) 106236) nil (25812 51311 366729 404000) 0 nil])
([nil nil ((106273 . 106283)) nil (25812 51311 366726 396000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) part-side javascript)) . 106286) (106285 . 106286) (106284 . 106286) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -106284) (106283 . 106285)) nil (25812 51311 366724 594000) 0 nil])
([nil nil ((106285 . 106288)) nil (25812 51311 366722 409000) 0 nil])
([nil nil ((#("filter_selection" 0 16 (face web-mode-function-name-face part-side javascript)) . 106241) (undo-tree-id1469 . -16) (undo-tree-id1470 . -16)) nil (25812 51311 366719 682000) 0 nil])
([nil nil ((nil rear-nonsticky nil 106250 . 106251) (nil part-side javascript 106250 . 106251) (nil face web-mode-function-name-face 106250 . 106251) (nil part-side javascript 106249 . 106250) (nil face web-mode-function-name-face 106249 . 106250) (nil part-side javascript 106248 . 106249) (nil face web-mode-function-name-face 106248 . 106249) (nil part-side javascript 106247 . 106248) (nil face web-mode-function-name-face 106247 . 106248) (nil part-side javascript 106246 . 106247) (nil face web-mode-function-name-face 106246 . 106247) (nil part-side javascript 106245 . 106246) (nil face web-mode-function-name-face 106245 . 106246) (nil part-side javascript 106244 . 106245) (nil face web-mode-function-name-face 106244 . 106245) (nil part-side javascript 106243 . 106244) (nil face web-mode-function-name-face 106243 . 106244) (nil part-side javascript 106242 . 106243) (nil face web-mode-function-name-face 106242 . 106243) (nil part-side javascript 106241 . 106242) (nil face web-mode-function-name-face 106241 . 106242) (106241 . 106251)) nil (25812 51311 366705 783000) 0 nil])
([nil nil ((#("          " 0 10 (face whitespace-trailing)) . -28382) (#("            " 0 11 (face whitespace-trailing) 11 12 (face whitespace-trailing)) . -27385) 106251) nil (25812 51311 366687 47000) 0 nil])
([nil nil ((#("select" 0 1 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 1 2 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 2 3 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 3 4 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 4 5 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 5 6 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t)) . 27481) (undo-tree-id1501 . -6) (undo-tree-id1502 . -6) (undo-tree-id1503 . -6) (undo-tree-id1504 . -6) (t 25812 51311 394035 511000)) nil (25812 51372 697309 462000) 0 nil])
([nil nil ((27052 . 27063)) nil (25812 51372 698244 915000) 0 nil])
([nil nil ((27063 . 27069)) nil (25812 51563 417780 11000) 0 nil] [nil nil ((27063 . 27078)) ((#("<v-row></v-row>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-row") 1 6 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-row") 6 7 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-row") 7 8 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 8 9 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 9 14 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 14 15 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27063) (undo-tree-id1505 . -4) (undo-tree-id1506 . -5) (undo-tree-id1507 . -7)) (25812 51372 697287 237000) 0 nil])
([nil nil (("c" . -27067) (undo-tree-id1548 . -1) ("h" . -27068) (undo-tree-id1549 . -1) 27069) nil (25812 51563 417778 746000) 0 nil])
nil
([nil nil (("s" . -27063) (undo-tree-id1544 . -1) ("e" . -27064) (undo-tree-id1545 . -1) ("a" . -27065) (undo-tree-id1546 . -1) ("r" . -27066) (undo-tree-id1547 . -1) 27067) nil (25812 51563 417774 477000) 0 nil])
([nil nil ((27063 . 27078)) nil (25812 51563 417768 706000) 0 nil])
([nil nil ((27071 . 27083) (27072 . 27082) (#("            " 0 12 (face whitespace-trailing)) . 27071) (27071 . 27083) (27071 . 27072) ("          " . 27071) (27070 . 27081)) nil (25812 51563 417766 898000) 0 nil])
([nil nil ((#("          {{$t('AnalysisNetwork.saveFilter')}}
" 10 11 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 11 12 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 12 13 (block-side t) 13 14 (face web-mode-variable-name-face block-side t) 14 15 (face (rainbow-delimiters-depth-3-face) block-side t) 15 16 (block-side t) 16 17 (face web-mode-variable-name-face block-side t) 17 18 (face web-mode-variable-name-face block-side t) 18 19 (face web-mode-variable-name-face block-side t) 19 20 (face web-mode-variable-name-face block-side t) 20 21 (face web-mode-variable-name-face block-side t) 21 22 (face web-mode-variable-name-face block-side t) 22 23 (face web-mode-variable-name-face block-side t) 23 24 (face web-mode-variable-name-face block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 28 (face web-mode-variable-name-face block-side t) 28 29 (face web-mode-variable-name-face block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (face web-mode-variable-name-face block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (block-side t) 43 44 (face (rainbow-delimiters-depth-3-face) block-side t) 44 45 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-side t) 45 46 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 27150) (27131 . 27150) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27084) (undo-tree-id1543 . -12) (27103 . 27150) 27096) nil (25812 51563 417764 347000) 0 nil])
([nil nil ((#("          <v-spacer></v-spacer>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-spacer") 11 19 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-spacer") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-spacer") 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-spacer") 21 22 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-spacer") 22 30 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-spacer") 30 31 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-spacer")) . 27182) (27163 . 27182) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27131) (undo-tree-id1542 . -12) (27150 . 27182) 27143) nil (25812 51563 417761 165000) 0 nil])
([nil nil ((#("          <v-btn
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 3 tag-type start tag-name "v-btn") 11 16 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-btn") 16 17 (tag-type start tag-name "v-btn")) . 27199) (27180 . 27199) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27163) (undo-tree-id1541 . -12) (27182 . 27199) 27175) nil (25812 51563 417758 71000) 0 nil])
([nil nil (("            icon
" . 27216) (27197 . 27216) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-btn") 9 10 (tag-end t tag-type start tag-name "v-btn") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27180) (undo-tree-id1540 . -12) (27199 . 27216) 27192) nil (25812 51563 417754 883000) 0 nil])
([nil nil ((#("            @click=\"save_filter_dialog=false; filter_items=[]\">
" 12 13 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 13 14 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 14 15 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 15 16 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 16 17 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 17 18 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 18 19 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 19 20 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 20 21 (face web-mode-variable-name-face block-side t) 21 22 (face web-mode-variable-name-face block-side t) 22 23 (face web-mode-variable-name-face block-side t) 23 24 (face web-mode-variable-name-face block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 28 (face web-mode-variable-name-face block-side t) 28 29 (face web-mode-variable-name-face block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (face web-mode-variable-name-face block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (face web-mode-variable-name-face block-side t) 43 44 (face web-mode-variable-name-face block-side t) 44 46 (block-side t) 46 47 (face web-mode-variable-name-face block-side t) 47 48 (face web-mode-variable-name-face block-side t) 48 49 (face web-mode-variable-name-face block-side t) 49 50 (face web-mode-variable-name-face block-side t) 50 51 (face web-mode-variable-name-face block-side t) 51 52 (face web-mode-variable-name-face block-side t) 52 53 (face web-mode-variable-name-face block-side t) 53 54 (face web-mode-variable-name-face block-side t) 54 55 (face web-mode-variable-name-face block-side t) 55 56 (face web-mode-variable-name-face block-side t) 56 57 (face web-mode-variable-name-face block-side t) 57 58 (face web-mode-variable-name-face block-side t) 58 61 (block-side t) 61 62 (font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 27280) (27261 . 27280) (#("          </v-row>
" 0 9 (tag-type start tag-name "v-btn") 9 10 (tag-end t tag-type start tag-name "v-btn") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27197) (undo-tree-id1539 . -12) (27216 . 27280) 27209) nil (25812 51563 417751 543000) 0 nil])
([nil nil ((#("            <v-icon>mdi-close</v-icon>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-icon") 13 19 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-icon") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-icon") 29 30 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-icon") 30 31 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-icon") 31 37 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-icon") 37 38 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-icon")) . 27319) (27300 . 27319) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27261) (undo-tree-id1538 . -12) (27280 . 27319) 27273) nil (25812 51563 417748 459000) 0 nil])
([nil nil ((#("          </v-btn>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-btn") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-btn") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-btn") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-btn")) . 27338) (27319 . 27338) (#("          </v-row>
" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 12 17 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27300) (undo-tree-id1537 . -12) (27319 . 27338) 27312) nil (25812 51563 417745 244000) 0 nil])
([nil nil ((27083 . 27098)) nil (25812 51563 417742 222000) 0 nil])
([nil nil ((27091 . 27105) (27092 . 27104) (#("              " 0 14 (face whitespace-trailing)) . 27091) (27091 . 27105) (27091 . 27092) ("            " . 27091) (27090 . 27103)) nil (25812 51563 417740 861000) 0 nil])
([nil nil ((#("          {{$t('AnalysisNetwork.saveFilter')}}
" 10 11 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 11 12 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 12 13 (block-side t) 13 14 (face web-mode-variable-name-face block-side t) 14 15 (face (rainbow-delimiters-depth-3-face) block-side t) 15 16 (block-side t) 16 17 (face web-mode-variable-name-face block-side t) 17 18 (face web-mode-variable-name-face block-side t) 18 19 (face web-mode-variable-name-face block-side t) 19 20 (face web-mode-variable-name-face block-side t) 20 21 (face web-mode-variable-name-face block-side t) 21 22 (face web-mode-variable-name-face block-side t) 22 23 (face web-mode-variable-name-face block-side t) 23 24 (face web-mode-variable-name-face block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 28 (face web-mode-variable-name-face block-side t) 28 29 (face web-mode-variable-name-face block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (face web-mode-variable-name-face block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (block-side t) 43 44 (face (rainbow-delimiters-depth-3-face) block-side t) 44 45 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-side t) 45 46 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 27174) (27153 . 27174) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27106) (undo-tree-id1536 . -14) (27127 . 27174) 27120) nil (25812 51563 417738 159000) 0 nil])
([nil nil ((27116 . 27120) 27120) nil (25812 51563 417735 317000) 0 nil])
([nil nil (("
" . 27105) (undo-tree-id1534 . -1) (undo-tree-id1535 . 1)) nil (25812 51563 417734 30000) 0 nil])
([nil nil (("              " . -27105)) nil (25812 51563 417731 108000) 0 nil])
([nil nil ((#("
          <v-spacer></v-spacer>" 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-spacer") 12 20 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-spacer") 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-spacer") 21 22 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-spacer") 22 23 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-spacer") 23 31 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-spacer") 31 32 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-spacer")) . 27162) (undo-tree-id1531 . -32) (undo-tree-id1532 . -1) (undo-tree-id1533 . -32)) nil (25812 51563 417729 855000) 0 nil])
([nil nil ((27162 . 27175)) nil (25812 51563 417724 976000) 0 nil])
([nil nil ((27175 . 27190)) nil (25812 51563 417724 76000) 0 nil])
([nil nil ((27183 . 27197) (27184 . 27196) (#("              " 0 14 (face whitespace-trailing)) . 27183) (27183 . 27197) (27183 . 27184) ("            " . 27183) (27182 . 27195)) nil (25812 51563 417722 627000) 0 nil])
([nil nil ((27218 . 27231)) nil (25812 51563 417720 529000) 0 nil])
([nil nil ((27231 . 27246)) nil (25812 51563 417719 552000) 0 nil])
([nil nil ((27239 . 27253) (27240 . 27252) (#("              " 0 14 (face whitespace-trailing)) . 27239) (27239 . 27253) (27239 . 27240) ("            " . 27239) (27238 . 27251)) nil (25812 51563 417718 116000) 0 nil])
([nil nil ((#("          <v-btn
            icon
            @click=\"save_filter_dialog=false; filter_items=[]\">
            <v-icon>mdi-close</v-icon>
          </v-btn>" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-btn") 11 16 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-btn") 16 17 (tag-type start tag-name "v-btn") 17 29 (tag-type start tag-name "v-btn") 29 30 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-btn" tag-attr t tag-attr-beg 0) 30 32 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-btn" tag-attr t) 32 33 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-btn" tag-attr-end 0 tag-attr t) 33 34 (tag-type start tag-name "v-btn") 34 46 (tag-type start tag-name "v-btn") 46 47 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-btn" block-token delimiter-beg block-side t block-controls 0 block-beg 0) 47 48 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-btn" tag-attr t tag-attr-beg 0 block-token delimiter-beg block-side t) 48 49 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-btn" tag-attr t block-token delimiter-beg block-side t) 49 50 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-btn" tag-attr t block-token delimiter-beg block-side t) 50 51 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-btn" tag-attr t block-token delimiter-beg block-side t) 51 52 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-btn" tag-attr t block-token delimiter-beg block-side t) 52 53 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-btn" tag-attr t block-token delimiter-beg block-side t) 53 54 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-btn" tag-attr t block-token delimiter-beg block-side t) 54 55 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 55 56 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 56 57 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 57 58 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 58 59 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 59 60 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 60 61 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 61 62 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 62 63 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 63 64 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 64 65 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 65 66 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 66 67 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 67 68 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 68 69 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 69 70 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 70 71 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 71 72 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 72 73 (tag-type start tag-name "v-btn" tag-attr t block-side t) 73 74 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 74 75 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 75 76 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 76 77 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 77 78 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 78 80 (tag-type start tag-name "v-btn" tag-attr t block-side t) 80 81 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 81 82 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 82 83 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 83 84 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 84 85 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 85 86 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 86 87 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 87 88 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 88 89 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 89 90 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 90 91 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 91 92 (face web-mode-variable-name-face tag-type start tag-name "v-btn" tag-attr t block-side t) 92 95 (tag-type start tag-name "v-btn" tag-attr t block-side t) 95 96 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-btn" tag-attr-end 5 tag-attr t block-token delimiter-end block-end t block-side t) 96 97 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-btn") 110 111 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-icon") 111 117 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-icon") 117 118 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-icon") 127 128 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-icon") 128 129 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-icon") 129 135 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-icon") 135 136 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-icon") 147 148 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-btn") 148 149 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-btn") 149 154 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-btn") 154 155 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-btn")) . 27275) (undo-tree-id1528 . -155) (undo-tree-id1529 . -17) (undo-tree-id1530 . -155)) nil (25812 51563 417715 807000) 0 nil])
([nil nil (("
" . -27274) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) 27275) nil (25812 51563 417711 321000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27407 . 27408) (nil tag-name "v-btn" 27407 . 27408) (nil tag-type end 27407 . 27408) (nil tag-end t 27407 . 27408) (nil font-lock-face web-mode-html-tag-bracket-face 27407 . 27408) (nil tag-name "v-btn" 27402 . 27407) (nil tag-type end 27402 . 27407) (nil font-lock-face web-mode-html-tag-custom-face 27402 . 27407) (nil tag-name "v-btn" 27401 . 27402) (nil tag-type end 27401 . 27402) (nil font-lock-face web-mode-html-tag-bracket-face 27401 . 27402) (nil tag-name "v-btn" 27400 . 27401) (nil tag-type end 27400 . 27401) (nil tag-beg 22 27400 . 27401) (nil font-lock-face web-mode-html-tag-bracket-face 27400 . 27401) (nil tag-name "v-icon" 27388 . 27389) (nil tag-type end 27388 . 27389) (nil tag-end t 27388 . 27389) (nil font-lock-face web-mode-html-tag-bracket-face 27388 . 27389) (nil tag-name "v-icon" 27382 . 27388) (nil tag-type end 27382 . 27388) (nil font-lock-face web-mode-html-tag-custom-face 27382 . 27388) (nil tag-name "v-icon" 27381 . 27382) (nil tag-type end 27381 . 27382) (nil font-lock-face web-mode-html-tag-bracket-face 27381 . 27382) (nil tag-name "v-icon" 27380 . 27381) (nil tag-type end 27380 . 27381) (nil tag-beg 22 27380 . 27381) (nil font-lock-face web-mode-html-tag-bracket-face 27380 . 27381) (nil tag-name "v-icon" 27370 . 27371) (nil tag-type start 27370 . 27371) (nil tag-end t 27370 . 27371) (nil font-lock-face web-mode-html-tag-bracket-face 27370 . 27371) (nil tag-name "v-icon" 27364 . 27370) (nil tag-type start 27364 . 27370) (nil font-lock-face web-mode-html-tag-custom-face 27364 . 27370) (nil tag-name "v-icon" 27363 . 27364) (nil tag-type start 27363 . 27364) (nil tag-beg 18 27363 . 27364) (nil font-lock-face web-mode-html-tag-bracket-face 27363 . 27364) (nil tag-name "v-btn" 27349 . 27350) (nil tag-type start 27349 . 27350) (nil tag-end t 27349 . 27350) (nil font-lock-face web-mode-html-tag-bracket-face 27349 . 27350) (nil block-side t 27348 . 27349) (nil block-end t 27348 . 27349) (nil block-token delimiter-end 27348 . 27349) (nil tag-attr t 27348 . 27349) (nil tag-attr-end 5 27348 . 27349) (nil tag-name "v-btn" 27348 . 27349) (nil tag-type start 27348 . 27349) (nil font-lock-face web-mode-block-delimiter-face 27348 . 27349) (nil block-side t 27345 . 27348) (nil tag-attr t 27345 . 27348) (nil tag-name "v-btn" 27345 . 27348) (nil tag-type start 27345 . 27348) (nil block-side t 27344 . 27345) (nil tag-attr t 27344 . 27345) (nil tag-name "v-btn" 27344 . 27345) (nil tag-type start 27344 . 27345) (nil face web-mode-variable-name-face 27344 . 27345) (nil block-side t 27343 . 27344) (nil tag-attr t 27343 . 27344) (nil tag-name "v-btn" 27343 . 27344) (nil tag-type start 27343 . 27344) (nil face web-mode-variable-name-face 27343 . 27344) (nil block-side t 27342 . 27343) (nil tag-attr t 27342 . 27343) (nil tag-name "v-btn" 27342 . 27343) (nil tag-type start 27342 . 27343) (nil face web-mode-variable-name-face 27342 . 27343) (nil block-side t 27341 . 27342) (nil tag-attr t 27341 . 27342) (nil tag-name "v-btn" 27341 . 27342) (nil tag-type start 27341 . 27342) (nil face web-mode-variable-name-face 27341 . 27342) (nil block-side t 27340 . 27341) (nil tag-attr t 27340 . 27341) (nil tag-name "v-btn" 27340 . 27341) (nil tag-type start 27340 . 27341) (nil face web-mode-variable-name-face 27340 . 27341) (nil block-side t 27339 . 27340) (nil tag-attr t 27339 . 27340) (nil tag-name "v-btn" 27339 . 27340) (nil tag-type start 27339 . 27340) (nil face web-mode-variable-name-face 27339 . 27340) (nil block-side t 27338 . 27339) (nil tag-attr t 27338 . 27339) (nil tag-name "v-btn" 27338 . 27339) (nil tag-type start 27338 . 27339) (nil face web-mode-variable-name-face 27338 . 27339) (nil block-side t 27337 . 27338) (nil tag-attr t 27337 . 27338) (nil tag-name "v-btn" 27337 . 27338) (nil tag-type start 27337 . 27338) (nil face web-mode-variable-name-face 27337 . 27338) (nil block-side t 27336 . 27337) (nil tag-attr t 27336 . 27337) (nil tag-name "v-btn" 27336 . 27337) (nil tag-type start 27336 . 27337) (nil face web-mode-variable-name-face 27336 . 27337) (nil block-side t 27335 . 27336) (nil tag-attr t 27335 . 27336) (nil tag-name "v-btn" 27335 . 27336) (nil tag-type start 27335 . 27336) (nil face web-mode-variable-name-face 27335 . 27336) (nil block-side t 27334 . 27335) (nil tag-attr t 27334 . 27335) (nil tag-name "v-btn" 27334 . 27335) (nil tag-type start 27334 . 27335) (nil face web-mode-variable-name-face 27334 . 27335) (nil block-side t 27333 . 27334) (nil tag-attr t 27333 . 27334) (nil tag-name "v-btn" 27333 . 27334) (nil tag-type start 27333 . 27334) (nil face web-mode-variable-name-face 27333 . 27334) (nil block-side t 27331 . 27333) (nil tag-attr t 27331 . 27333) (nil tag-name "v-btn" 27331 . 27333) (nil tag-type start 27331 . 27333) (nil block-side t 27330 . 27331) (nil tag-attr t 27330 . 27331) (nil tag-name "v-btn" 27330 . 27331) (nil tag-type start 27330 . 27331) (nil face web-mode-variable-name-face 27330 . 27331) (nil block-side t 27329 . 27330) (nil tag-attr t 27329 . 27330) (nil tag-name "v-btn" 27329 . 27330) (nil tag-type start 27329 . 27330) (nil face web-mode-variable-name-face 27329 . 27330) (nil block-side t 27328 . 27329) (nil tag-attr t 27328 . 27329) (nil tag-name "v-btn" 27328 . 27329) (nil tag-type start 27328 . 27329) (nil face web-mode-variable-name-face 27328 . 27329) (nil block-side t 27327 . 27328) (nil tag-attr t 27327 . 27328) (nil tag-name "v-btn" 27327 . 27328) (nil tag-type start 27327 . 27328) (nil face web-mode-variable-name-face 27327 . 27328) (nil block-side t 27326 . 27327) (nil tag-attr t 27326 . 27327) (nil tag-name "v-btn" 27326 . 27327) (nil tag-type start 27326 . 27327) (nil face web-mode-variable-name-face 27326 . 27327) (nil block-side t 27325 . 27326) (nil tag-attr t 27325 . 27326) (nil tag-name "v-btn" 27325 . 27326) (nil tag-type start 27325 . 27326) (nil block-side t 27324 . 27325) (nil tag-attr t 27324 . 27325) (nil tag-name "v-btn" 27324 . 27325) (nil tag-type start 27324 . 27325) (nil face web-mode-variable-name-face 27324 . 27325) (nil block-side t 27323 . 27324) (nil tag-attr t 27323 . 27324) (nil tag-name "v-btn" 27323 . 27324) (nil tag-type start 27323 . 27324) (nil face web-mode-variable-name-face 27323 . 27324) (nil block-side t 27322 . 27323) (nil tag-attr t 27322 . 27323) (nil tag-name "v-btn" 27322 . 27323) (nil tag-type start 27322 . 27323) (nil face web-mode-variable-name-face 27322 . 27323) (nil block-side t 27321 . 27322) (nil tag-attr t 27321 . 27322) (nil tag-name "v-btn" 27321 . 27322) (nil tag-type start 27321 . 27322) (nil face web-mode-variable-name-face 27321 . 27322) (nil block-side t 27320 . 27321) (nil tag-attr t 27320 . 27321) (nil tag-name "v-btn" 27320 . 27321) (nil tag-type start 27320 . 27321) (nil face web-mode-variable-name-face 27320 . 27321) (nil block-side t 27319 . 27320) (nil tag-attr t 27319 . 27320) (nil tag-name "v-btn" 27319 . 27320) (nil tag-type start 27319 . 27320) (nil face web-mode-variable-name-face 27319 . 27320) (nil block-side t 27318 . 27319) (nil tag-attr t 27318 . 27319) (nil tag-name "v-btn" 27318 . 27319) (nil tag-type start 27318 . 27319) (nil face web-mode-variable-name-face 27318 . 27319) (nil block-side t 27317 . 27318) (nil tag-attr t 27317 . 27318) (nil tag-name "v-btn" 27317 . 27318) (nil tag-type start 27317 . 27318) (nil face web-mode-variable-name-face 27317 . 27318) (nil block-side t 27316 . 27317) (nil tag-attr t 27316 . 27317) (nil tag-name "v-btn" 27316 . 27317) (nil tag-type start 27316 . 27317) (nil face web-mode-variable-name-face 27316 . 27317) (nil block-side t 27315 . 27316) (nil tag-attr t 27315 . 27316) (nil tag-name "v-btn" 27315 . 27316) (nil tag-type start 27315 . 27316) (nil face web-mode-variable-name-face 27315 . 27316) (nil block-side t 27314 . 27315) (nil tag-attr t 27314 . 27315) (nil tag-name "v-btn" 27314 . 27315) (nil tag-type start 27314 . 27315) (nil face web-mode-variable-name-face 27314 . 27315) (nil block-side t 27313 . 27314) (nil tag-attr t 27313 . 27314) (nil tag-name "v-btn" 27313 . 27314) (nil tag-type start 27313 . 27314) (nil face web-mode-variable-name-face 27313 . 27314) (nil block-side t 27312 . 27313) (nil tag-attr t 27312 . 27313) (nil tag-name "v-btn" 27312 . 27313) (nil tag-type start 27312 . 27313) (nil face web-mode-variable-name-face 27312 . 27313) (nil block-side t 27311 . 27312) (nil tag-attr t 27311 . 27312) (nil tag-name "v-btn" 27311 . 27312) (nil tag-type start 27311 . 27312) (nil face web-mode-variable-name-face 27311 . 27312) (nil block-side t 27310 . 27311) (nil tag-attr t 27310 . 27311) (nil tag-name "v-btn" 27310 . 27311) (nil tag-type start 27310 . 27311) (nil face web-mode-variable-name-face 27310 . 27311) (nil block-side t 27309 . 27310) (nil tag-attr t 27309 . 27310) (nil tag-name "v-btn" 27309 . 27310) (nil tag-type start 27309 . 27310) (nil face web-mode-variable-name-face 27309 . 27310) (nil block-side t 27308 . 27309) (nil tag-attr t 27308 . 27309) (nil tag-name "v-btn" 27308 . 27309) (nil tag-type start 27308 . 27309) (nil face web-mode-variable-name-face 27308 . 27309) (nil block-side t 27307 . 27308) (nil tag-attr t 27307 . 27308) (nil tag-name "v-btn" 27307 . 27308) (nil tag-type start 27307 . 27308) (nil face web-mode-variable-name-face 27307 . 27308) (nil block-side t 27306 . 27307) (nil block-token delimiter-beg 27306 . 27307) (nil tag-attr t 27306 . 27307) (nil tag-name "v-btn" 27306 . 27307) (nil tag-type start 27306 . 27307) (nil font-lock-face web-mode-block-delimiter-face 27306 . 27307) (nil block-side t 27305 . 27306) (nil block-token delimiter-beg 27305 . 27306) (nil tag-attr t 27305 . 27306) (nil tag-name "v-btn" 27305 . 27306) (nil tag-type start 27305 . 27306) (nil font-lock-face web-mode-block-delimiter-face 27305 . 27306) (nil block-side t 27304 . 27305) (nil block-token delimiter-beg 27304 . 27305) (nil tag-attr t 27304 . 27305) (nil tag-name "v-btn" 27304 . 27305) (nil tag-type start 27304 . 27305) (nil font-lock-face web-mode-block-delimiter-face 27304 . 27305) (nil block-side t 27303 . 27304) (nil block-token delimiter-beg 27303 . 27304) (nil tag-attr t 27303 . 27304) (nil tag-name "v-btn" 27303 . 27304) (nil tag-type start 27303 . 27304) (nil font-lock-face web-mode-block-delimiter-face 27303 . 27304) (nil block-side t 27302 . 27303) (nil block-token delimiter-beg 27302 . 27303) (nil tag-attr t 27302 . 27303) (nil tag-name "v-btn" 27302 . 27303) (nil tag-type start 27302 . 27303) (nil font-lock-face web-mode-block-delimiter-face 27302 . 27303) (nil block-side t 27301 . 27302) (nil block-token delimiter-beg 27301 . 27302) (nil tag-attr t 27301 . 27302) (nil tag-name "v-btn" 27301 . 27302) (nil tag-type start 27301 . 27302) (nil font-lock-face web-mode-block-delimiter-face 27301 . 27302) (nil block-side t 27300 . 27301) (nil block-token delimiter-beg 27300 . 27301) (nil tag-attr-beg 0 27300 . 27301) (nil tag-attr t 27300 . 27301) (nil tag-name "v-btn" 27300 . 27301) (nil tag-type start 27300 . 27301) (nil font-lock-face web-mode-block-delimiter-face 27300 . 27301) (nil block-beg 0 27299 . 27300) (nil block-controls 0 27299 . 27300) (nil block-side t 27299 . 27300) (nil block-token delimiter-beg 27299 . 27300) (nil tag-name "v-btn" 27299 . 27300) (nil tag-type start 27299 . 27300) (nil font-lock-face web-mode-block-delimiter-face 27299 . 27300) (nil tag-name "v-btn" 27287 . 27299) (nil tag-type start 27287 . 27299) (nil tag-name "v-btn" 27286 . 27287) (nil tag-type start 27286 . 27287) (nil tag-attr t 27285 . 27286) (nil tag-attr-end 0 27285 . 27286) (nil tag-name "v-btn" 27285 . 27286) (nil tag-type start 27285 . 27286) (nil font-lock-face web-mode-html-attr-name-face 27285 . 27286) (nil tag-attr t 27283 . 27285) (nil tag-name "v-btn" 27283 . 27285) (nil tag-type start 27283 . 27285) (nil font-lock-face web-mode-html-attr-name-face 27283 . 27285) (nil tag-attr-beg 0 27282 . 27283) (nil tag-attr t 27282 . 27283) (nil tag-name "v-btn" 27282 . 27283) (nil tag-type start 27282 . 27283) (nil font-lock-face web-mode-html-attr-name-face 27282 . 27283) (nil tag-name "v-btn" 27270 . 27282) (nil tag-type start 27270 . 27282) (nil tag-name "v-btn" 27269 . 27270) (nil tag-type start 27269 . 27270) (nil tag-name "v-btn" 27264 . 27269) (nil tag-type start 27264 . 27269) (nil font-lock-face web-mode-html-tag-custom-face 27264 . 27269) (nil tag-name "v-btn" 27263 . 27264) (nil tag-type start 27263 . 27264) (nil tag-beg 19 27263 . 27264) (nil font-lock-face web-mode-html-tag-bracket-face 27263 . 27264) (27253 . 27408)) nil (25812 51563 417691 866000) 0 nil])
([nil nil (("          " . -27253) (undo-tree-id1524 . -4) 27257) nil (25812 51563 417627 966000) 0 nil])
([nil nil ((27260 . 27276) (#("            " 0 12 (tag-type start tag-name "v-btn")) . 27260) 27274) nil (25812 51563 417625 437000) 0 nil])
([nil nil ((27281 . 27297) (#("            " 0 12 (tag-type start tag-name "v-btn")) . 27281) 27299) nil (25812 51563 417623 935000) 0 nil])
([nil nil ((27349 . 27365) ("            " . 27349) 27371) nil (25812 51563 417622 508000) 0 nil])
([nil nil ((27402 . 27406) 27410) nil (25812 51563 417621 81000) 0 nil])
([nil nil ((27347 . 27362)) nil (25812 51563 417619 995000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27502 . 27503) (nil tag-name "v-text-field" 27502 . 27503) (nil tag-type end 27502 . 27503) (nil tag-end t 27502 . 27503) (nil font-lock-face web-mode-html-tag-bracket-face 27502 . 27503) (nil tag-name "v-text-field" 27490 . 27502) (nil tag-type end 27490 . 27502) (nil font-lock-face web-mode-html-tag-custom-face 27490 . 27502) (nil tag-name "v-text-field" 27489 . 27490) (nil tag-type end 27489 . 27490) (nil font-lock-face web-mode-html-tag-bracket-face 27489 . 27490) (nil tag-name "v-text-field" 27488 . 27489) (nil tag-type end 27488 . 27489) (nil tag-beg 22 27488 . 27489) (nil font-lock-face web-mode-html-tag-bracket-face 27488 . 27489) (nil tag-name "v-text-field" 27487 . 27488) (nil tag-type start 27487 . 27488) (nil tag-end t 27487 . 27488) (nil font-lock-face web-mode-html-tag-bracket-face 27487 . 27488) (nil tag-name "v-text-field" 27474 . 27487) (nil tag-type start 27474 . 27487) (nil tag-attr t 27473 . 27474) (nil tag-attr-end 10 27473 . 27474) (nil tag-name "v-text-field" 27473 . 27474) (nil tag-type start 27473 . 27474) (nil font-lock-face web-mode-html-attr-value-face 27473 . 27474) (nil tag-attr t 27448 . 27473) (nil tag-name "v-text-field" 27448 . 27473) (nil tag-type start 27448 . 27473) (nil font-lock-face web-mode-html-attr-value-face 27448 . 27473) (nil tag-attr t 27447 . 27448) (nil tag-name "v-text-field" 27447 . 27448) (nil tag-type start 27447 . 27448) (nil font-lock-face web-mode-html-attr-equal-face 27447 . 27448) (nil tag-attr t 27438 . 27447) (nil tag-name "v-text-field" 27438 . 27447) (nil tag-type start 27438 . 27447) (nil font-lock-face web-mode-html-attr-name-face 27438 . 27447) (nil tag-attr-beg 0 27437 . 27438) (nil tag-attr t 27437 . 27438) (nil tag-name "v-text-field" 27437 . 27438) (nil tag-type start 27437 . 27438) (nil font-lock-face web-mode-html-attr-name-face 27437 . 27438) (nil tag-name "v-text-field" 27422 . 27437) (nil tag-type start 27422 . 27437) (nil tag-attr t 27421 . 27422) (nil tag-attr-end 0 27421 . 27422) (nil tag-name "v-text-field" 27421 . 27422) (nil tag-type start 27421 . 27422) (nil font-lock-face web-mode-html-attr-name-face 27421 . 27422) (nil tag-attr t 27414 . 27421) (nil tag-name "v-text-field" 27414 . 27421) (nil tag-type start 27414 . 27421) (nil font-lock-face web-mode-html-attr-name-face 27414 . 27421) (nil tag-attr-beg 0 27413 . 27414) (nil tag-attr t 27413 . 27414) (nil tag-name "v-text-field" 27413 . 27414) (nil tag-type start 27413 . 27414) (nil font-lock-face web-mode-html-attr-name-face 27413 . 27414) (nil tag-name "v-text-field" 27398 . 27413) (nil tag-type start 27398 . 27413) (nil tag-attr t 27397 . 27398) (nil tag-attr-end 0 27397 . 27398) (nil tag-name "v-text-field" 27397 . 27398) (nil tag-type start 27397 . 27398) (nil font-lock-face web-mode-html-attr-name-face 27397 . 27398) (nil tag-attr t 27387 . 27397) (nil tag-name "v-text-field" 27387 . 27397) (nil tag-type start 27387 . 27397) (nil font-lock-face web-mode-html-attr-name-face 27387 . 27397) (nil tag-attr-beg 0 27386 . 27387) (nil tag-attr t 27386 . 27387) (nil tag-name "v-text-field" 27386 . 27387) (nil tag-type start 27386 . 27387) (nil font-lock-face web-mode-html-attr-name-face 27386 . 27387) (nil tag-name "v-text-field" 27371 . 27386) (nil tag-type start 27371 . 27386) (nil tag-attr t 27370 . 27371) (nil tag-attr-end 0 27370 . 27371) (nil tag-name "v-text-field" 27370 . 27371) (nil tag-type start 27370 . 27371) (nil font-lock-face web-mode-html-attr-name-face 27370 . 27371) (nil tag-attr t 27368 . 27370) (nil tag-name "v-text-field" 27368 . 27370) (nil tag-type start 27368 . 27370) (nil font-lock-face web-mode-html-attr-name-face 27368 . 27370) (nil tag-attr-beg 0 27367 . 27368) (nil tag-attr t 27367 . 27368) (nil tag-name "v-text-field" 27367 . 27368) (nil tag-type start 27367 . 27368) (nil font-lock-face web-mode-html-attr-name-face 27367 . 27368) (nil tag-name "v-text-field" 27352 . 27367) (nil tag-type start 27352 . 27367) (nil block-side t 27351 . 27352) (nil block-end t 27351 . 27352) (nil block-token delimiter-end 27351 . 27352) (nil tag-attr t 27351 . 27352) (nil tag-attr-end 6 27351 . 27352) (nil tag-name "v-text-field" 27351 . 27352) (nil tag-type start 27351 . 27352) (nil font-lock-face web-mode-block-delimiter-face 27351 . 27352) (nil block-side t 27348 . 27351) (nil tag-attr t 27348 . 27351) (nil tag-name "v-text-field" 27348 . 27351) (nil tag-type start 27348 . 27351) (nil block-side t 27347 . 27348) (nil tag-attr t 27347 . 27348) (nil tag-name "v-text-field" 27347 . 27348) (nil tag-type start 27347 . 27348) (nil face web-mode-variable-name-face 27347 . 27348) (nil block-side t 27346 . 27347) (nil tag-attr t 27346 . 27347) (nil tag-name "v-text-field" 27346 . 27347) (nil tag-type start 27346 . 27347) (nil face web-mode-variable-name-face 27346 . 27347) (nil block-side t 27345 . 27346) (nil tag-attr t 27345 . 27346) (nil tag-name "v-text-field" 27345 . 27346) (nil tag-type start 27345 . 27346) (nil face web-mode-variable-name-face 27345 . 27346) (nil block-side t 27344 . 27345) (nil tag-attr t 27344 . 27345) (nil tag-name "v-text-field" 27344 . 27345) (nil tag-type start 27344 . 27345) (nil face web-mode-variable-name-face 27344 . 27345) (nil block-side t 27343 . 27344) (nil tag-attr t 27343 . 27344) (nil tag-name "v-text-field" 27343 . 27344) (nil tag-type start 27343 . 27344) (nil face web-mode-variable-name-face 27343 . 27344) (nil block-side t 27342 . 27343) (nil tag-attr t 27342 . 27343) (nil tag-name "v-text-field" 27342 . 27343) (nil tag-type start 27342 . 27343) (nil face web-mode-variable-name-face 27342 . 27343) (nil block-side t 27341 . 27342) (nil tag-attr t 27341 . 27342) (nil tag-name "v-text-field" 27341 . 27342) (nil tag-type start 27341 . 27342) (nil face web-mode-variable-name-face 27341 . 27342) (nil block-side t 27340 . 27341) (nil tag-attr t 27340 . 27341) (nil tag-name "v-text-field" 27340 . 27341) (nil tag-type start 27340 . 27341) (nil face web-mode-variable-name-face 27340 . 27341) (nil block-side t 27339 . 27340) (nil tag-attr t 27339 . 27340) (nil tag-name "v-text-field" 27339 . 27340) (nil tag-type start 27339 . 27340) (nil face web-mode-variable-name-face 27339 . 27340) (nil block-side t 27338 . 27339) (nil tag-attr t 27338 . 27339) (nil tag-name "v-text-field" 27338 . 27339) (nil tag-type start 27338 . 27339) (nil face web-mode-variable-name-face 27338 . 27339) (nil block-side t 27337 . 27338) (nil tag-attr t 27337 . 27338) (nil tag-name "v-text-field" 27337 . 27338) (nil tag-type start 27337 . 27338) (nil face web-mode-variable-name-face 27337 . 27338) (nil block-side t 27336 . 27337) (nil tag-attr t 27336 . 27337) (nil tag-name "v-text-field" 27336 . 27337) (nil tag-type start 27336 . 27337) (nil block-side t 27335 . 27336) (nil tag-attr t 27335 . 27336) (nil tag-name "v-text-field" 27335 . 27336) (nil tag-type start 27335 . 27336) (nil face web-mode-variable-name-face 27335 . 27336) (nil block-side t 27334 . 27335) (nil tag-attr t 27334 . 27335) (nil tag-name "v-text-field" 27334 . 27335) (nil tag-type start 27334 . 27335) (nil face web-mode-variable-name-face 27334 . 27335) (nil block-side t 27333 . 27334) (nil tag-attr t 27333 . 27334) (nil tag-name "v-text-field" 27333 . 27334) (nil tag-type start 27333 . 27334) (nil face web-mode-variable-name-face 27333 . 27334) (nil block-side t 27332 . 27333) (nil tag-attr t 27332 . 27333) (nil tag-name "v-text-field" 27332 . 27333) (nil tag-type start 27332 . 27333) (nil face web-mode-variable-name-face 27332 . 27333) (nil block-side t 27331 . 27332) (nil tag-attr t 27331 . 27332) (nil tag-name "v-text-field" 27331 . 27332) (nil tag-type start 27331 . 27332) (nil face web-mode-variable-name-face 27331 . 27332) (nil block-side t 27330 . 27331) (nil tag-attr t 27330 . 27331) (nil tag-name "v-text-field" 27330 . 27331) (nil tag-type start 27330 . 27331) (nil face web-mode-variable-name-face 27330 . 27331) (nil block-side t 27329 . 27330) (nil tag-attr t 27329 . 27330) (nil tag-name "v-text-field" 27329 . 27330) (nil tag-type start 27329 . 27330) (nil face web-mode-variable-name-face 27329 . 27330) (nil block-side t 27328 . 27329) (nil tag-attr t 27328 . 27329) (nil tag-name "v-text-field" 27328 . 27329) (nil tag-type start 27328 . 27329) (nil face web-mode-variable-name-face 27328 . 27329) (nil block-side t 27327 . 27328) (nil tag-attr t 27327 . 27328) (nil tag-name "v-text-field" 27327 . 27328) (nil tag-type start 27327 . 27328) (nil face web-mode-variable-name-face 27327 . 27328) (nil block-side t 27326 . 27327) (nil tag-attr t 27326 . 27327) (nil tag-name "v-text-field" 27326 . 27327) (nil tag-type start 27326 . 27327) (nil face web-mode-variable-name-face 27326 . 27327) (nil block-side t 27325 . 27326) (nil tag-attr t 27325 . 27326) (nil tag-name "v-text-field" 27325 . 27326) (nil tag-type start 27325 . 27326) (nil face web-mode-variable-name-face 27325 . 27326) (nil block-side t 27324 . 27325) (nil tag-attr t 27324 . 27325) (nil tag-name "v-text-field" 27324 . 27325) (nil tag-type start 27324 . 27325) (nil face web-mode-variable-name-face 27324 . 27325) (nil block-side t 27323 . 27324) (nil tag-attr t 27323 . 27324) (nil tag-name "v-text-field" 27323 . 27324) (nil tag-type start 27323 . 27324) (nil face web-mode-variable-name-face 27323 . 27324) (nil block-side t 27322 . 27323) (nil tag-attr t 27322 . 27323) (nil tag-name "v-text-field" 27322 . 27323) (nil tag-type start 27322 . 27323) (nil face web-mode-variable-name-face 27322 . 27323) (nil block-side t 27321 . 27322) (nil tag-attr t 27321 . 27322) (nil tag-name "v-text-field" 27321 . 27322) (nil tag-type start 27321 . 27322) (nil face web-mode-variable-name-face 27321 . 27322) (nil block-side t 27319 . 27321) (nil tag-attr t 27319 . 27321) (nil tag-name "v-text-field" 27319 . 27321) (nil tag-type start 27319 . 27321) (nil block-side t 27318 . 27319) (nil tag-attr t 27318 . 27319) (nil tag-name "v-text-field" 27318 . 27319) (nil tag-type start 27318 . 27319) (nil face web-mode-variable-name-face 27318 . 27319) (nil block-side t 27317 . 27318) (nil tag-attr t 27317 . 27318) (nil tag-name "v-text-field" 27317 . 27318) (nil tag-type start 27317 . 27318) (nil block-side t 27316 . 27317) (nil block-token delimiter-beg 27316 . 27317) (nil tag-attr t 27316 . 27317) (nil tag-name "v-text-field" 27316 . 27317) (nil tag-type start 27316 . 27317) (nil font-lock-face web-mode-block-delimiter-face 27316 . 27317) (nil block-side t 27315 . 27316) (nil block-token delimiter-beg 27315 . 27316) (nil tag-attr t 27315 . 27316) (nil tag-name "v-text-field" 27315 . 27316) (nil tag-type start 27315 . 27316) (nil font-lock-face web-mode-block-delimiter-face 27315 . 27316) (nil block-side t 27314 . 27315) (nil block-token delimiter-beg 27314 . 27315) (nil tag-attr t 27314 . 27315) (nil tag-name "v-text-field" 27314 . 27315) (nil tag-type start 27314 . 27315) (nil font-lock-face web-mode-block-delimiter-face 27314 . 27315) (nil block-side t 27313 . 27314) (nil block-token delimiter-beg 27313 . 27314) (nil tag-attr t 27313 . 27314) (nil tag-name "v-text-field" 27313 . 27314) (nil tag-type start 27313 . 27314) (nil font-lock-face web-mode-block-delimiter-face 27313 . 27314) (nil block-side t 27312 . 27313) (nil block-token delimiter-beg 27312 . 27313) (nil tag-attr t 27312 . 27313) (nil tag-name "v-text-field" 27312 . 27313) (nil tag-type start 27312 . 27313) (nil font-lock-face web-mode-block-delimiter-face 27312 . 27313) (nil block-side t 27311 . 27312) (nil block-token delimiter-beg 27311 . 27312) (nil tag-attr t 27311 . 27312) (nil tag-name "v-text-field" 27311 . 27312) (nil tag-type start 27311 . 27312) (nil font-lock-face web-mode-block-delimiter-face 27311 . 27312) (nil block-side t 27310 . 27311) (nil block-token delimiter-beg 27310 . 27311) (nil tag-attr t 27310 . 27311) (nil tag-name "v-text-field" 27310 . 27311) (nil tag-type start 27310 . 27311) (nil font-lock-face web-mode-block-delimiter-face 27310 . 27311) (nil block-beg 0 27309 . 27310) (nil block-controls 0 27309 . 27310) (nil block-side t 27309 . 27310) (nil block-token delimiter-beg 27309 . 27310) (nil tag-attr-beg 2 27309 . 27310) (nil tag-attr t 27309 . 27310) (nil tag-name "v-text-field" 27309 . 27310) (nil tag-type start 27309 . 27310) (nil font-lock-face web-mode-block-delimiter-face 27309 . 27310) (nil tag-name "v-text-field" 27294 . 27309) (nil tag-type start 27294 . 27309) (nil tag-attr t 27293 . 27294) (nil tag-attr-end 7 27293 . 27294) (nil tag-name "v-text-field" 27293 . 27294) (nil tag-type start 27293 . 27294) (nil font-lock-face web-mode-html-attr-value-face 27293 . 27294) (nil tag-attr t 27286 . 27293) (nil tag-name "v-text-field" 27286 . 27293) (nil tag-type start 27286 . 27293) (nil font-lock-face web-mode-html-attr-value-face 27286 . 27293) (nil tag-attr t 27285 . 27286) (nil tag-name "v-text-field" 27285 . 27286) (nil tag-type start 27285 . 27286) (nil font-lock-face web-mode-html-attr-equal-face 27285 . 27286) (nil tag-attr t 27279 . 27285) (nil tag-name "v-text-field" 27279 . 27285) (nil tag-type start 27279 . 27285) (nil font-lock-face web-mode-html-attr-engine-face 27279 . 27285) (nil tag-attr-beg 2 27278 . 27279) (nil tag-attr t 27278 . 27279) (nil tag-name "v-text-field" 27278 . 27279) (nil tag-type start 27278 . 27279) (nil font-lock-face web-mode-html-attr-engine-face 27278 . 27279) (nil tag-name "v-text-field" 27263 . 27278) (nil tag-type start 27263 . 27278) (nil tag-attr t 27262 . 27263) (nil tag-attr-end 5 27262 . 27263) (nil tag-name "v-text-field" 27262 . 27263) (nil tag-type start 27262 . 27263) (nil font-lock-face web-mode-html-attr-value-face 27262 . 27263) (nil tag-attr t 27231 . 27262) (nil tag-name "v-text-field" 27231 . 27262) (nil tag-type start 27231 . 27262) (nil font-lock-face web-mode-html-attr-value-face 27231 . 27262) (nil tag-attr t 27230 . 27231) (nil tag-name "v-text-field" 27230 . 27231) (nil tag-type start 27230 . 27231) (nil font-lock-face web-mode-html-attr-equal-face 27230 . 27231) (nil tag-attr t 27226 . 27230) (nil tag-name "v-text-field" 27226 . 27230) (nil tag-type start 27226 . 27230) (nil font-lock-face web-mode-html-attr-name-face 27226 . 27230) (nil tag-attr-beg 0 27225 . 27226) (nil tag-attr t 27225 . 27226) (nil tag-name "v-text-field" 27225 . 27226) (nil tag-type start 27225 . 27226) (nil font-lock-face web-mode-html-attr-name-face 27225 . 27226) (nil tag-name "v-text-field" 27210 . 27225) (nil tag-type start 27210 . 27225) (nil tag-name "v-text-field" 27198 . 27210) (nil tag-type start 27198 . 27210) (nil font-lock-face web-mode-html-tag-custom-face 27198 . 27210) (nil tag-name "v-text-field" 27197 . 27198) (nil tag-type start 27197 . 27198) (nil tag-beg 19 27197 . 27198) (nil font-lock-face web-mode-html-tag-bracket-face 27197 . 27198) (27197 . 27503)) nil (25812 51563 417602 224000) 0 nil])
([nil nil ((#("search" 0 6 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-text-field" tag-attr t)) . 27287) (undo-tree-id1522 . -6) (undo-tree-id1523 . -6)) nil (25812 51563 417530 149000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27299 . 27300) (nil tag-attr t 27299 . 27300) (nil tag-name "v-text-field" 27299 . 27300) (nil tag-type start 27299 . 27300) (nil font-lock-face web-mode-html-attr-value-face 27299 . 27300) (nil tag-attr t 27298 . 27299) (nil tag-name "v-text-field" 27298 . 27299) (nil tag-type start 27298 . 27299) (nil font-lock-face web-mode-html-attr-value-face 27298 . 27299) (nil tag-attr t 27297 . 27298) (nil tag-name "v-text-field" 27297 . 27298) (nil tag-type start 27297 . 27298) (nil font-lock-face web-mode-html-attr-value-face 27297 . 27298) (nil tag-attr t 27296 . 27297) (nil tag-name "v-text-field" 27296 . 27297) (nil tag-type start 27296 . 27297) (nil font-lock-face web-mode-html-attr-value-face 27296 . 27297) (nil tag-attr t 27295 . 27296) (nil tag-name "v-text-field" 27295 . 27296) (nil tag-type start 27295 . 27296) (nil font-lock-face web-mode-html-attr-value-face 27295 . 27296) (nil tag-attr t 27294 . 27295) (nil tag-name "v-text-field" 27294 . 27295) (nil tag-type start 27294 . 27295) (nil font-lock-face web-mode-html-attr-value-face 27294 . 27295) (nil tag-attr t 27293 . 27294) (nil tag-name "v-text-field" 27293 . 27294) (nil tag-type start 27293 . 27294) (nil font-lock-face web-mode-html-attr-value-face 27293 . 27294) (nil tag-attr t 27292 . 27293) (nil tag-name "v-text-field" 27292 . 27293) (nil tag-type start 27292 . 27293) (nil font-lock-face web-mode-html-attr-value-face 27292 . 27293) (nil tag-attr t 27291 . 27292) (nil tag-name "v-text-field" 27291 . 27292) (nil tag-type start 27291 . 27292) (nil font-lock-face web-mode-html-attr-value-face 27291 . 27292) (nil tag-attr t 27290 . 27291) (nil tag-name "v-text-field" 27290 . 27291) (nil tag-type start 27290 . 27291) (nil font-lock-face web-mode-html-attr-value-face 27290 . 27291) (nil tag-attr t 27289 . 27290) (nil tag-name "v-text-field" 27289 . 27290) (nil tag-type start 27289 . 27290) (nil font-lock-face web-mode-html-attr-value-face 27289 . 27290) (nil tag-attr t 27288 . 27289) (nil tag-name "v-text-field" 27288 . 27289) (nil tag-type start 27288 . 27289) (nil font-lock-face web-mode-html-attr-value-face 27288 . 27289) (nil tag-attr t 27287 . 27288) (nil tag-name "v-text-field" 27287 . 27288) (nil tag-type start 27287 . 27288) (nil font-lock-face web-mode-html-attr-value-face 27287 . 27288) (27287 . 27300)) nil (25812 51563 417524 603000) 0 nil])
([nil nil ((43030 . 43039)) nil (25812 51563 417512 990000) 0 nil])
([nil nil ((43030 . 43031)) nil (25812 51563 417512 152000) 0 nil])
([nil nil ((43033 . 43041) (#("        " 0 8 (part-side javascript)) . 43032) (undo-tree-id1521 . -8) (43040 . 43041)) nil (25812 51563 417510 936000) 0 nil])
([nil nil ((43032 . 43040)) nil (25812 51563 417508 626000) 0 nil])
([nil nil ((43040 . 43060)) nil (25812 51563 417507 732000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -43059) (undo-tree-id1520 . -1) 43060) nil (25812 51563 417506 696000) 0 nil])
([nil nil ((43059 . 43068)) nil (25812 51563 417504 448000) 0 nil])
([nil nil ((nil rear-nonsticky nil 43080 . 43081) (nil part-side javascript 43080 . 43081) (nil part-side javascript 43079 . 43080) (nil part-side javascript 43078 . 43079) (nil part-side javascript 43077 . 43078) (nil part-side javascript 43076 . 43077) (nil part-side javascript 43075 . 43076) (nil part-side javascript 43074 . 43075) (nil part-side javascript 43073 . 43074) (nil part-side javascript 43072 . 43073) (nil part-side javascript 43071 . 43072) (nil part-side javascript 43070 . 43071) (nil part-side javascript 43069 . 43070) (nil part-side javascript 43068 . 43069) (43068 . 43081)) nil (25812 51563 417502 691000) 0 nil])
([nil nil ((43081 . 43088)) nil (25812 51563 417498 758000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -43087) (undo-tree-id1519 . -1) 43088) nil (25812 51563 417497 608000) 0 nil])
([nil nil ((43087 . 43089)) nil (25812 51563 417495 382000) 0 nil])
([nil nil ((#("," 0 1 (part-side javascript)) . -43087) (undo-tree-id1517 . -1) (#(" " 0 1 (part-side javascript)) . -43088) (undo-tree-id1518 . -1) 43089) nil (25812 51563 417493 975000) 0 nil])
([nil nil ((43087 . 43096)) nil (25812 51563 417490 482000) 0 nil])
([nil nil ((43096 . 43103)) nil (25812 51563 417489 519000) 0 nil])
([nil nil ((#(":" 0 1 (part-side javascript)) . -43102) (undo-tree-id1516 . -1) 43103) nil (25812 51563 417488 110000) 0 nil])
([nil nil ((43102 . 43117)) nil (25812 51563 417485 838000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -43116) (undo-tree-id1515 . -1) 43117) nil (25812 51563 417484 697000) 0 nil])
([nil nil ((43116 . 43118)) nil (25812 51563 417482 568000) 0 nil])
([nil nil ((#("," 0 1 (part-side javascript)) . -43116) (undo-tree-id1513 . -1) (#(" " 0 1 (part-side javascript)) . -43117) (undo-tree-id1514 . -1) 43118) nil (25812 51563 417481 32000) 0 nil])
([nil nil ((43087 . 43088)) nil (25812 51563 417477 321000) 0 nil])
([nil nil ((#("hosenFilterSelection" 0 1 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 1 2 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 2 3 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 3 4 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 4 5 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 5 6 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 6 7 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 7 8 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 8 9 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 9 10 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 10 11 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 11 12 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 12 13 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 13 14 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 14 15 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 15 16 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 16 17 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 17 18 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 18 19 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t) 19 20 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t)) . 28002) (undo-tree-id1511 . -20) (undo-tree-id1512 . -20)) nil (25812 51563 417476 93000) 0 nil])
([nil nil ((#("c" 0 1 (face web-mode-variable-name-face tag-type start tag-name "v-treeview" tag-attr t block-side t)) . -28001) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) 28002) nil (25812 51563 417472 438000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28014 . 28015) (nil block-side t 28014 . 28015) (nil tag-attr t 28014 . 28015) (nil tag-name "v-treeview" 28014 . 28015) (nil tag-type start 28014 . 28015) (nil face web-mode-variable-name-face 28014 . 28015) (nil block-side t 28013 . 28014) (nil tag-attr t 28013 . 28014) (nil tag-name "v-treeview" 28013 . 28014) (nil tag-type start 28013 . 28014) (nil face web-mode-variable-name-face 28013 . 28014) (nil block-side t 28012 . 28013) (nil tag-attr t 28012 . 28013) (nil tag-name "v-treeview" 28012 . 28013) (nil tag-type start 28012 . 28013) (nil face web-mode-variable-name-face 28012 . 28013) (nil block-side t 28011 . 28012) (nil tag-attr t 28011 . 28012) (nil tag-name "v-treeview" 28011 . 28012) (nil tag-type start 28011 . 28012) (nil face web-mode-variable-name-face 28011 . 28012) (nil block-side t 28010 . 28011) (nil tag-attr t 28010 . 28011) (nil tag-name "v-treeview" 28010 . 28011) (nil tag-type start 28010 . 28011) (nil face web-mode-variable-name-face 28010 . 28011) (nil block-side t 28009 . 28010) (nil tag-attr t 28009 . 28010) (nil tag-name "v-treeview" 28009 . 28010) (nil tag-type start 28009 . 28010) (nil face web-mode-variable-name-face 28009 . 28010) (nil block-side t 28008 . 28009) (nil tag-attr t 28008 . 28009) (nil tag-name "v-treeview" 28008 . 28009) (nil tag-type start 28008 . 28009) (nil face web-mode-variable-name-face 28008 . 28009) (nil block-side t 28007 . 28008) (nil tag-attr t 28007 . 28008) (nil tag-name "v-treeview" 28007 . 28008) (nil tag-type start 28007 . 28008) (nil face web-mode-variable-name-face 28007 . 28008) (nil block-side t 28006 . 28007) (nil tag-attr t 28006 . 28007) (nil tag-name "v-treeview" 28006 . 28007) (nil tag-type start 28006 . 28007) (nil face web-mode-variable-name-face 28006 . 28007) (nil block-side t 28005 . 28006) (nil tag-attr t 28005 . 28006) (nil tag-name "v-treeview" 28005 . 28006) (nil tag-type start 28005 . 28006) (nil face web-mode-variable-name-face 28005 . 28006) (nil block-side t 28004 . 28005) (nil tag-attr t 28004 . 28005) (nil tag-name "v-treeview" 28004 . 28005) (nil tag-type start 28004 . 28005) (nil face web-mode-variable-name-face 28004 . 28005) (nil block-side t 28003 . 28004) (nil tag-attr t 28003 . 28004) (nil tag-name "v-treeview" 28003 . 28004) (nil tag-type start 28003 . 28004) (nil face web-mode-variable-name-face 28003 . 28004) (nil block-side t 28002 . 28003) (nil tag-attr t 28002 . 28003) (nil tag-name "v-treeview" 28002 . 28003) (nil tag-type start 28002 . 28003) (nil face web-mode-variable-name-face 28002 . 28003) (nil block-side t 28001 . 28002) (nil tag-attr t 28001 . 28002) (nil tag-name "v-treeview" 28001 . 28002) (nil tag-type start 28001 . 28002) (nil face web-mode-variable-name-face 28001 . 28002) (28001 . 28015)) nil (25812 51563 417464 940000) 0 nil])
([nil nil ((111942 . 111945)) nil (25812 51563 417449 716000) 0 nil])
([nil nil ((nil rear-nonsticky nil 112012 . 112013) (nil part-side css 112012 . 112013) (nil face (rainbow-delimiters-depth-1-face) 112012 . 112013) (nil part-side css 112001 . 112012) (nil part-side css 111992 . 112001) (nil face web-mode-css-property-name-face 111992 . 112001) (nil part-side css 111987 . 111992) (nil part-side css 111986 . 111987) (nil face (rainbow-delimiters-depth-1-face) 111986 . 111987) (nil part-side css 111963 . 111986) (nil face web-mode-css-selector-class-face 111963 . 111986) (nil part-side css 111962 . 111963) (nil part-side css 111947 . 111962) (nil face web-mode-css-selector-class-face 111947 . 111962) (nil part-side css 111945 . 111947) (111945 . 112013)) nil (25812 51563 417447 841000) 0 nil])
([nil nil ((#("  " 0 2 (part-side css)) . -111945) (undo-tree-id1508 . -1) 111946) nil (25812 51563 417442 880000) 0 nil])
([nil nil ((#("        " 0 8 (face whitespace-trailing part-side javascript)) . -43111) 111945) nil (25812 51563 417426 92000) 0 nil])
([nil nil ((#("              <v-text-field
              style=\"position: relative; top: -5px;\"
              v-model=\"search_filter\"
              :label=\"$t('AnalysisNetwork.tree_search' )\"
              flat
              hide-details
              clearable
              clear-icon=\"mdi-close-circle-outline\"
            ></v-text-field>" 14 15 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-text-field") 15 27 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-text-field") 27 42 (tag-type start tag-name "v-text-field") 42 43 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-text-field" tag-attr t tag-attr-beg 0) 43 47 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-text-field" tag-attr t) 47 48 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-text-field" tag-attr t) 48 79 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-text-field" tag-attr t) 79 80 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-text-field" tag-attr-end 5 tag-attr t) 80 95 (tag-type start tag-name "v-text-field") 95 96 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-text-field" tag-attr t tag-attr-beg 2) 96 102 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-text-field" tag-attr t) 102 103 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-text-field" tag-attr t) 103 104 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-text-field" tag-attr t) 104 116 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-text-field" tag-attr t) 116 117 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-text-field" tag-attr t rear-nonsticky t) 117 118 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-text-field" tag-attr-end 7 tag-attr t) 118 133 (tag-type start tag-name "v-text-field") 133 134 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-text-field" tag-attr t tag-attr-beg 2 block-token delimiter-beg block-side t block-controls 0 block-beg 0) 134 135 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-text-field" tag-attr t block-token delimiter-beg block-side t) 135 136 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-text-field" tag-attr t block-token delimiter-beg block-side t) 136 137 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-text-field" tag-attr t block-token delimiter-beg block-side t) 137 138 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-text-field" tag-attr t block-token delimiter-beg block-side t) 138 139 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-text-field" tag-attr t block-token delimiter-beg block-side t) 139 140 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-text-field" tag-attr t block-token delimiter-beg block-side t) 140 141 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-text-field" tag-attr t block-token delimiter-beg block-side t) 141 142 (tag-type start tag-name "v-text-field" tag-attr t block-side t) 142 143 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 143 145 (tag-type start tag-name "v-text-field" tag-attr t block-side t) 145 146 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 146 147 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 147 148 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 148 149 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 149 150 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 150 151 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 151 152 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 152 153 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 153 154 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 154 155 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 155 156 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 156 157 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 157 158 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 158 159 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 159 160 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 160 161 (tag-type start tag-name "v-text-field" tag-attr t block-side t) 161 162 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 162 163 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 163 164 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 164 165 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 165 166 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 166 167 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 167 168 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 168 169 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 169 170 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 170 171 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 171 172 (face web-mode-variable-name-face tag-type start tag-name "v-text-field" tag-attr t block-side t) 172 175 (tag-type start tag-name "v-text-field" tag-attr t block-side t) 175 176 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-text-field" tag-attr-end 6 tag-attr t block-token delimiter-end block-end t block-side t) 176 191 (tag-type start tag-name "v-text-field") 191 192 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-text-field" tag-attr t tag-attr-beg 0) 192 194 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-text-field" tag-attr t) 194 195 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-text-field" tag-attr-end 0 tag-attr t) 195 210 (tag-type start tag-name "v-text-field") 210 211 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-text-field" tag-attr t tag-attr-beg 0) 211 221 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-text-field" tag-attr t) 221 222 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-text-field" tag-attr-end 0 tag-attr t) 222 237 (tag-type start tag-name "v-text-field") 237 238 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-text-field" tag-attr t tag-attr-beg 0) 238 245 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-text-field" tag-attr t) 245 246 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-text-field" tag-attr-end 0 tag-attr t) 246 261 (tag-type start tag-name "v-text-field") 261 262 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-text-field" tag-attr t tag-attr-beg 0) 262 271 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-text-field" tag-attr t) 271 272 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-text-field" tag-attr t) 272 297 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-text-field" tag-attr t) 297 298 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-text-field" tag-attr-end 10 tag-attr t) 298 311 (tag-type start tag-name "v-text-field") 311 312 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-text-field") 312 313 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-text-field") 313 314 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-text-field") 314 326 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-text-field") 326 327 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-text-field" rear-nonsticky t)) . 27183) (undo-tree-id1556 . -327) (undo-tree-id1557 . -117) (undo-tree-id1558 . -14) (undo-tree-id1559 . -104) (undo-tree-id1560 . -28) (undo-tree-id1561 . -327) (t 25812 51563 446843 699000)) nil (25812 51702 976703 689000) 0 nil])
([nil nil (("
" . -27182) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) 27183) nil (25812 51702 976694 612000) 0 nil])
([nil nil ((27534 . 27545)) nil (25812 51702 976678 693000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27871 . 27872) (nil rear-nonsticky t 27871 . 27872) (nil tag-name "v-text-field" 27871 . 27872) (nil tag-type end 27871 . 27872) (nil tag-end t 27871 . 27872) (nil font-lock-face web-mode-html-tag-bracket-face 27871 . 27872) (nil tag-name "v-text-field" 27859 . 27871) (nil tag-type end 27859 . 27871) (nil font-lock-face web-mode-html-tag-custom-face 27859 . 27871) (nil tag-name "v-text-field" 27858 . 27859) (nil tag-type end 27858 . 27859) (nil font-lock-face web-mode-html-tag-bracket-face 27858 . 27859) (nil tag-name "v-text-field" 27857 . 27858) (nil tag-type end 27857 . 27858) (nil tag-beg 22 27857 . 27858) (nil font-lock-face web-mode-html-tag-bracket-face 27857 . 27858) (nil tag-name "v-text-field" 27856 . 27857) (nil tag-type start 27856 . 27857) (nil tag-end t 27856 . 27857) (nil font-lock-face web-mode-html-tag-bracket-face 27856 . 27857) (nil tag-name "v-text-field" 27843 . 27856) (nil tag-type start 27843 . 27856) (nil tag-attr t 27842 . 27843) (nil tag-attr-end 10 27842 . 27843) (nil tag-name "v-text-field" 27842 . 27843) (nil tag-type start 27842 . 27843) (nil font-lock-face web-mode-html-attr-value-face 27842 . 27843) (nil tag-attr t 27817 . 27842) (nil tag-name "v-text-field" 27817 . 27842) (nil tag-type start 27817 . 27842) (nil font-lock-face web-mode-html-attr-value-face 27817 . 27842) (nil tag-attr t 27816 . 27817) (nil tag-name "v-text-field" 27816 . 27817) (nil tag-type start 27816 . 27817) (nil font-lock-face web-mode-html-attr-equal-face 27816 . 27817) (nil tag-attr t 27807 . 27816) (nil tag-name "v-text-field" 27807 . 27816) (nil tag-type start 27807 . 27816) (nil font-lock-face web-mode-html-attr-name-face 27807 . 27816) (nil tag-attr-beg 0 27806 . 27807) (nil tag-attr t 27806 . 27807) (nil tag-name "v-text-field" 27806 . 27807) (nil tag-type start 27806 . 27807) (nil font-lock-face web-mode-html-attr-name-face 27806 . 27807) (nil tag-name "v-text-field" 27791 . 27806) (nil tag-type start 27791 . 27806) (nil tag-attr t 27790 . 27791) (nil tag-attr-end 0 27790 . 27791) (nil tag-name "v-text-field" 27790 . 27791) (nil tag-type start 27790 . 27791) (nil font-lock-face web-mode-html-attr-name-face 27790 . 27791) (nil tag-attr t 27783 . 27790) (nil tag-name "v-text-field" 27783 . 27790) (nil tag-type start 27783 . 27790) (nil font-lock-face web-mode-html-attr-name-face 27783 . 27790) (nil tag-attr-beg 0 27782 . 27783) (nil tag-attr t 27782 . 27783) (nil tag-name "v-text-field" 27782 . 27783) (nil tag-type start 27782 . 27783) (nil font-lock-face web-mode-html-attr-name-face 27782 . 27783) (nil tag-name "v-text-field" 27767 . 27782) (nil tag-type start 27767 . 27782) (nil tag-attr t 27766 . 27767) (nil tag-attr-end 0 27766 . 27767) (nil tag-name "v-text-field" 27766 . 27767) (nil tag-type start 27766 . 27767) (nil font-lock-face web-mode-html-attr-name-face 27766 . 27767) (nil tag-attr t 27756 . 27766) (nil tag-name "v-text-field" 27756 . 27766) (nil tag-type start 27756 . 27766) (nil font-lock-face web-mode-html-attr-name-face 27756 . 27766) (nil tag-attr-beg 0 27755 . 27756) (nil tag-attr t 27755 . 27756) (nil tag-name "v-text-field" 27755 . 27756) (nil tag-type start 27755 . 27756) (nil font-lock-face web-mode-html-attr-name-face 27755 . 27756) (nil tag-name "v-text-field" 27740 . 27755) (nil tag-type start 27740 . 27755) (nil tag-attr t 27739 . 27740) (nil tag-attr-end 0 27739 . 27740) (nil tag-name "v-text-field" 27739 . 27740) (nil tag-type start 27739 . 27740) (nil font-lock-face web-mode-html-attr-name-face 27739 . 27740) (nil tag-attr t 27737 . 27739) (nil tag-name "v-text-field" 27737 . 27739) (nil tag-type start 27737 . 27739) (nil font-lock-face web-mode-html-attr-name-face 27737 . 27739) (nil tag-attr-beg 0 27736 . 27737) (nil tag-attr t 27736 . 27737) (nil tag-name "v-text-field" 27736 . 27737) (nil tag-type start 27736 . 27737) (nil font-lock-face web-mode-html-attr-name-face 27736 . 27737) (nil tag-name "v-text-field" 27721 . 27736) (nil tag-type start 27721 . 27736) (nil block-side t 27720 . 27721) (nil block-end t 27720 . 27721) (nil block-token delimiter-end 27720 . 27721) (nil tag-attr t 27720 . 27721) (nil tag-attr-end 6 27720 . 27721) (nil tag-name "v-text-field" 27720 . 27721) (nil tag-type start 27720 . 27721) (nil font-lock-face web-mode-block-delimiter-face 27720 . 27721) (nil block-side t 27717 . 27720) (nil tag-attr t 27717 . 27720) (nil tag-name "v-text-field" 27717 . 27720) (nil tag-type start 27717 . 27720) (nil block-side t 27716 . 27717) (nil tag-attr t 27716 . 27717) (nil tag-name "v-text-field" 27716 . 27717) (nil tag-type start 27716 . 27717) (nil face web-mode-variable-name-face 27716 . 27717) (nil block-side t 27715 . 27716) (nil tag-attr t 27715 . 27716) (nil tag-name "v-text-field" 27715 . 27716) (nil tag-type start 27715 . 27716) (nil face web-mode-variable-name-face 27715 . 27716) (nil block-side t 27714 . 27715) (nil tag-attr t 27714 . 27715) (nil tag-name "v-text-field" 27714 . 27715) (nil tag-type start 27714 . 27715) (nil face web-mode-variable-name-face 27714 . 27715) (nil block-side t 27713 . 27714) (nil tag-attr t 27713 . 27714) (nil tag-name "v-text-field" 27713 . 27714) (nil tag-type start 27713 . 27714) (nil face web-mode-variable-name-face 27713 . 27714) (nil block-side t 27712 . 27713) (nil tag-attr t 27712 . 27713) (nil tag-name "v-text-field" 27712 . 27713) (nil tag-type start 27712 . 27713) (nil face web-mode-variable-name-face 27712 . 27713) (nil block-side t 27711 . 27712) (nil tag-attr t 27711 . 27712) (nil tag-name "v-text-field" 27711 . 27712) (nil tag-type start 27711 . 27712) (nil face web-mode-variable-name-face 27711 . 27712) (nil block-side t 27710 . 27711) (nil tag-attr t 27710 . 27711) (nil tag-name "v-text-field" 27710 . 27711) (nil tag-type start 27710 . 27711) (nil face web-mode-variable-name-face 27710 . 27711) (nil block-side t 27709 . 27710) (nil tag-attr t 27709 . 27710) (nil tag-name "v-text-field" 27709 . 27710) (nil tag-type start 27709 . 27710) (nil face web-mode-variable-name-face 27709 . 27710) (nil block-side t 27708 . 27709) (nil tag-attr t 27708 . 27709) (nil tag-name "v-text-field" 27708 . 27709) (nil tag-type start 27708 . 27709) (nil face web-mode-variable-name-face 27708 . 27709) (nil block-side t 27707 . 27708) (nil tag-attr t 27707 . 27708) (nil tag-name "v-text-field" 27707 . 27708) (nil tag-type start 27707 . 27708) (nil face web-mode-variable-name-face 27707 . 27708) (nil block-side t 27706 . 27707) (nil tag-attr t 27706 . 27707) (nil tag-name "v-text-field" 27706 . 27707) (nil tag-type start 27706 . 27707) (nil face web-mode-variable-name-face 27706 . 27707) (nil block-side t 27705 . 27706) (nil tag-attr t 27705 . 27706) (nil tag-name "v-text-field" 27705 . 27706) (nil tag-type start 27705 . 27706) (nil block-side t 27704 . 27705) (nil tag-attr t 27704 . 27705) (nil tag-name "v-text-field" 27704 . 27705) (nil tag-type start 27704 . 27705) (nil face web-mode-variable-name-face 27704 . 27705) (nil block-side t 27703 . 27704) (nil tag-attr t 27703 . 27704) (nil tag-name "v-text-field" 27703 . 27704) (nil tag-type start 27703 . 27704) (nil face web-mode-variable-name-face 27703 . 27704) (nil block-side t 27702 . 27703) (nil tag-attr t 27702 . 27703) (nil tag-name "v-text-field" 27702 . 27703) (nil tag-type start 27702 . 27703) (nil face web-mode-variable-name-face 27702 . 27703) (nil block-side t 27701 . 27702) (nil tag-attr t 27701 . 27702) (nil tag-name "v-text-field" 27701 . 27702) (nil tag-type start 27701 . 27702) (nil face web-mode-variable-name-face 27701 . 27702) (nil block-side t 27700 . 27701) (nil tag-attr t 27700 . 27701) (nil tag-name "v-text-field" 27700 . 27701) (nil tag-type start 27700 . 27701) (nil face web-mode-variable-name-face 27700 . 27701) (nil block-side t 27699 . 27700) (nil tag-attr t 27699 . 27700) (nil tag-name "v-text-field" 27699 . 27700) (nil tag-type start 27699 . 27700) (nil face web-mode-variable-name-face 27699 . 27700) (nil block-side t 27698 . 27699) (nil tag-attr t 27698 . 27699) (nil tag-name "v-text-field" 27698 . 27699) (nil tag-type start 27698 . 27699) (nil face web-mode-variable-name-face 27698 . 27699) (nil block-side t 27697 . 27698) (nil tag-attr t 27697 . 27698) (nil tag-name "v-text-field" 27697 . 27698) (nil tag-type start 27697 . 27698) (nil face web-mode-variable-name-face 27697 . 27698) (nil block-side t 27696 . 27697) (nil tag-attr t 27696 . 27697) (nil tag-name "v-text-field" 27696 . 27697) (nil tag-type start 27696 . 27697) (nil face web-mode-variable-name-face 27696 . 27697) (nil block-side t 27695 . 27696) (nil tag-attr t 27695 . 27696) (nil tag-name "v-text-field" 27695 . 27696) (nil tag-type start 27695 . 27696) (nil face web-mode-variable-name-face 27695 . 27696) (nil block-side t 27694 . 27695) (nil tag-attr t 27694 . 27695) (nil tag-name "v-text-field" 27694 . 27695) (nil tag-type start 27694 . 27695) (nil face web-mode-variable-name-face 27694 . 27695) (nil block-side t 27693 . 27694) (nil tag-attr t 27693 . 27694) (nil tag-name "v-text-field" 27693 . 27694) (nil tag-type start 27693 . 27694) (nil face web-mode-variable-name-face 27693 . 27694) (nil block-side t 27692 . 27693) (nil tag-attr t 27692 . 27693) (nil tag-name "v-text-field" 27692 . 27693) (nil tag-type start 27692 . 27693) (nil face web-mode-variable-name-face 27692 . 27693) (nil block-side t 27691 . 27692) (nil tag-attr t 27691 . 27692) (nil tag-name "v-text-field" 27691 . 27692) (nil tag-type start 27691 . 27692) (nil face web-mode-variable-name-face 27691 . 27692) (nil block-side t 27690 . 27691) (nil tag-attr t 27690 . 27691) (nil tag-name "v-text-field" 27690 . 27691) (nil tag-type start 27690 . 27691) (nil face web-mode-variable-name-face 27690 . 27691) (nil block-side t 27688 . 27690) (nil tag-attr t 27688 . 27690) (nil tag-name "v-text-field" 27688 . 27690) (nil tag-type start 27688 . 27690) (nil block-side t 27687 . 27688) (nil tag-attr t 27687 . 27688) (nil tag-name "v-text-field" 27687 . 27688) (nil tag-type start 27687 . 27688) (nil face web-mode-variable-name-face 27687 . 27688) (nil block-side t 27686 . 27687) (nil tag-attr t 27686 . 27687) (nil tag-name "v-text-field" 27686 . 27687) (nil tag-type start 27686 . 27687) (nil block-side t 27685 . 27686) (nil block-token delimiter-beg 27685 . 27686) (nil tag-attr t 27685 . 27686) (nil tag-name "v-text-field" 27685 . 27686) (nil tag-type start 27685 . 27686) (nil font-lock-face web-mode-block-delimiter-face 27685 . 27686) (nil block-side t 27684 . 27685) (nil block-token delimiter-beg 27684 . 27685) (nil tag-attr t 27684 . 27685) (nil tag-name "v-text-field" 27684 . 27685) (nil tag-type start 27684 . 27685) (nil font-lock-face web-mode-block-delimiter-face 27684 . 27685) (nil block-side t 27683 . 27684) (nil block-token delimiter-beg 27683 . 27684) (nil tag-attr t 27683 . 27684) (nil tag-name "v-text-field" 27683 . 27684) (nil tag-type start 27683 . 27684) (nil font-lock-face web-mode-block-delimiter-face 27683 . 27684) (nil block-side t 27682 . 27683) (nil block-token delimiter-beg 27682 . 27683) (nil tag-attr t 27682 . 27683) (nil tag-name "v-text-field" 27682 . 27683) (nil tag-type start 27682 . 27683) (nil font-lock-face web-mode-block-delimiter-face 27682 . 27683) (nil block-side t 27681 . 27682) (nil block-token delimiter-beg 27681 . 27682) (nil tag-attr t 27681 . 27682) (nil tag-name "v-text-field" 27681 . 27682) (nil tag-type start 27681 . 27682) (nil font-lock-face web-mode-block-delimiter-face 27681 . 27682) (nil block-side t 27680 . 27681) (nil block-token delimiter-beg 27680 . 27681) (nil tag-attr t 27680 . 27681) (nil tag-name "v-text-field" 27680 . 27681) (nil tag-type start 27680 . 27681) (nil font-lock-face web-mode-block-delimiter-face 27680 . 27681) (nil block-side t 27679 . 27680) (nil block-token delimiter-beg 27679 . 27680) (nil tag-attr t 27679 . 27680) (nil tag-name "v-text-field" 27679 . 27680) (nil tag-type start 27679 . 27680) (nil font-lock-face web-mode-block-delimiter-face 27679 . 27680) (nil block-beg 0 27678 . 27679) (nil block-controls 0 27678 . 27679) (nil block-side t 27678 . 27679) (nil block-token delimiter-beg 27678 . 27679) (nil tag-attr-beg 2 27678 . 27679) (nil tag-attr t 27678 . 27679) (nil tag-name "v-text-field" 27678 . 27679) (nil tag-type start 27678 . 27679) (nil font-lock-face web-mode-block-delimiter-face 27678 . 27679) (nil tag-name "v-text-field" 27663 . 27678) (nil tag-type start 27663 . 27678) (nil tag-attr t 27662 . 27663) (nil tag-attr-end 7 27662 . 27663) (nil tag-name "v-text-field" 27662 . 27663) (nil tag-type start 27662 . 27663) (nil font-lock-face web-mode-html-attr-value-face 27662 . 27663) (nil rear-nonsticky t 27661 . 27662) (nil tag-attr t 27661 . 27662) (nil tag-name "v-text-field" 27661 . 27662) (nil tag-type start 27661 . 27662) (nil font-lock-face web-mode-html-attr-value-face 27661 . 27662) (nil tag-attr t 27649 . 27661) (nil tag-name "v-text-field" 27649 . 27661) (nil tag-type start 27649 . 27661) (nil font-lock-face web-mode-html-attr-value-face 27649 . 27661) (nil tag-attr t 27648 . 27649) (nil tag-name "v-text-field" 27648 . 27649) (nil tag-type start 27648 . 27649) (nil font-lock-face web-mode-html-attr-value-face 27648 . 27649) (nil tag-attr t 27647 . 27648) (nil tag-name "v-text-field" 27647 . 27648) (nil tag-type start 27647 . 27648) (nil font-lock-face web-mode-html-attr-equal-face 27647 . 27648) (nil tag-attr t 27641 . 27647) (nil tag-name "v-text-field" 27641 . 27647) (nil tag-type start 27641 . 27647) (nil font-lock-face web-mode-html-attr-engine-face 27641 . 27647) (nil tag-attr-beg 2 27640 . 27641) (nil tag-attr t 27640 . 27641) (nil tag-name "v-text-field" 27640 . 27641) (nil tag-type start 27640 . 27641) (nil font-lock-face web-mode-html-attr-engine-face 27640 . 27641) (nil tag-name "v-text-field" 27625 . 27640) (nil tag-type start 27625 . 27640) (nil tag-attr t 27624 . 27625) (nil tag-attr-end 5 27624 . 27625) (nil tag-name "v-text-field" 27624 . 27625) (nil tag-type start 27624 . 27625) (nil font-lock-face web-mode-html-attr-value-face 27624 . 27625) (nil tag-attr t 27593 . 27624) (nil tag-name "v-text-field" 27593 . 27624) (nil tag-type start 27593 . 27624) (nil font-lock-face web-mode-html-attr-value-face 27593 . 27624) (nil tag-attr t 27592 . 27593) (nil tag-name "v-text-field" 27592 . 27593) (nil tag-type start 27592 . 27593) (nil font-lock-face web-mode-html-attr-equal-face 27592 . 27593) (nil tag-attr t 27588 . 27592) (nil tag-name "v-text-field" 27588 . 27592) (nil tag-type start 27588 . 27592) (nil font-lock-face web-mode-html-attr-name-face 27588 . 27592) (nil tag-attr-beg 0 27587 . 27588) (nil tag-attr t 27587 . 27588) (nil tag-name "v-text-field" 27587 . 27588) (nil tag-type start 27587 . 27588) (nil font-lock-face web-mode-html-attr-name-face 27587 . 27588) (nil tag-name "v-text-field" 27572 . 27587) (nil tag-type start 27572 . 27587) (nil tag-name "v-text-field" 27560 . 27572) (nil tag-type start 27560 . 27572) (nil font-lock-face web-mode-html-tag-custom-face 27560 . 27572) (nil tag-name "v-text-field" 27559 . 27560) (nil tag-type start 27559 . 27560) (nil tag-beg 19 27559 . 27560) (nil font-lock-face web-mode-html-tag-bracket-face 27559 . 27560) (27545 . 27872)) nil (25812 51702 976660 328000) 0 nil])
([nil nil ((#("  " 0 2 (tag-type start tag-name "v-text-field")) . -27826) (#("  " 0 2 (tag-type start tag-name "v-text-field")) . -27778) (#("  " 0 2 (tag-type start tag-name "v-text-field")) . -27756) (#("  " 0 2 (tag-type start tag-name "v-text-field")) . -27731) (#("  " 0 2 (tag-type start tag-name "v-text-field")) . -27714) (#("  " 0 2 (tag-type start tag-name "v-text-field")) . -27658) (#("  " 0 2 (tag-type start tag-name "v-text-field")) . -27622) (#("  " 0 2 (tag-type start tag-name "v-text-field")) . -27571) ("              " . -27545) 27536) nil (25812 51702 976584 391000) 0 nil])
([nil nil ((27534 . 27545)) nil (25812 51702 976581 475000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27822 . 27823) (nil tag-name "v-col" 27822 . 27823) (nil tag-type start 27822 . 27823) (nil tag-end t 27822 . 27823) (nil font-lock-face web-mode-html-tag-bracket-face 27822 . 27823) (nil tag-attr t 27821 . 27822) (nil tag-attr-end 5 27821 . 27822) (nil tag-name "v-col" 27821 . 27822) (nil tag-type start 27821 . 27822) (nil font-lock-face web-mode-html-attr-value-face 27821 . 27822) (nil tag-attr t 27815 . 27821) (nil tag-name "v-col" 27815 . 27821) (nil tag-type start 27815 . 27821) (nil font-lock-face web-mode-html-attr-value-face 27815 . 27821) (nil tag-attr t 27814 . 27815) (nil tag-name "v-col" 27814 . 27815) (nil tag-type start 27814 . 27815) (nil font-lock-face web-mode-html-attr-equal-face 27814 . 27815) (nil tag-attr t 27810 . 27814) (nil tag-name "v-col" 27810 . 27814) (nil tag-type start 27810 . 27814) (nil font-lock-face web-mode-html-attr-name-face 27810 . 27814) (nil tag-attr-beg 0 27809 . 27810) (nil tag-attr t 27809 . 27810) (nil tag-name "v-col" 27809 . 27810) (nil tag-type start 27809 . 27810) (nil font-lock-face web-mode-html-attr-name-face 27809 . 27810) (nil tag-name "v-col" 27808 . 27809) (nil tag-type start 27808 . 27809) (nil tag-attr t 27807 . 27808) (nil tag-attr-end 4 27807 . 27808) (nil tag-name "v-col" 27807 . 27808) (nil tag-type start 27807 . 27808) (nil font-lock-face web-mode-html-attr-value-face 27807 . 27808) (nil tag-attr t 27805 . 27807) (nil tag-name "v-col" 27805 . 27807) (nil tag-type start 27805 . 27807) (nil font-lock-face web-mode-html-attr-value-face 27805 . 27807) (nil tag-attr t 27804 . 27805) (nil tag-name "v-col" 27804 . 27805) (nil tag-type start 27804 . 27805) (nil font-lock-face web-mode-html-attr-equal-face 27804 . 27805) (nil tag-attr t 27801 . 27804) (nil tag-name "v-col" 27801 . 27804) (nil tag-type start 27801 . 27804) (nil font-lock-face web-mode-html-attr-name-face 27801 . 27804) (nil tag-attr-beg 0 27800 . 27801) (nil tag-attr t 27800 . 27801) (nil tag-name "v-col" 27800 . 27801) (nil tag-type start 27800 . 27801) (nil font-lock-face web-mode-html-attr-name-face 27800 . 27801) (nil tag-name "v-col" 27799 . 27800) (nil tag-type start 27799 . 27800) (nil tag-attr t 27798 . 27799) (nil tag-attr-end 2 27798 . 27799) (nil tag-name "v-col" 27798 . 27799) (nil tag-type start 27798 . 27799) (nil font-lock-face web-mode-html-attr-value-face 27798 . 27799) (nil tag-attr t 27796 . 27798) (nil tag-name "v-col" 27796 . 27798) (nil tag-type start 27796 . 27798) (nil font-lock-face web-mode-html-attr-value-face 27796 . 27798) (nil tag-attr t 27795 . 27796) (nil tag-name "v-col" 27795 . 27796) (nil tag-type start 27795 . 27796) (nil font-lock-face web-mode-html-attr-equal-face 27795 . 27796) (nil tag-attr t 27794 . 27795) (nil tag-name "v-col" 27794 . 27795) (nil tag-type start 27794 . 27795) (nil font-lock-face web-mode-html-attr-name-face 27794 . 27795) (nil tag-attr-beg 0 27793 . 27794) (nil tag-attr t 27793 . 27794) (nil tag-name "v-col" 27793 . 27794) (nil tag-type start 27793 . 27794) (nil font-lock-face web-mode-html-attr-name-face 27793 . 27794) (nil tag-name "v-col" 27792 . 27793) (nil tag-type start 27792 . 27793) (nil tag-attr t 27791 . 27792) (nil tag-attr-end 2 27791 . 27792) (nil tag-name "v-col" 27791 . 27792) (nil tag-type start 27791 . 27792) (nil font-lock-face web-mode-html-attr-value-face 27791 . 27792) (nil tag-attr t 27789 . 27791) (nil tag-name "v-col" 27789 . 27791) (nil tag-type start 27789 . 27791) (nil font-lock-face web-mode-html-attr-value-face 27789 . 27791) (nil tag-attr t 27788 . 27789) (nil tag-name "v-col" 27788 . 27789) (nil tag-type start 27788 . 27789) (nil font-lock-face web-mode-html-attr-equal-face 27788 . 27789) (nil tag-attr t 27787 . 27788) (nil tag-name "v-col" 27787 . 27788) (nil tag-type start 27787 . 27788) (nil font-lock-face web-mode-html-attr-name-face 27787 . 27788) (nil tag-attr-beg 0 27786 . 27787) (nil tag-attr t 27786 . 27787) (nil tag-name "v-col" 27786 . 27787) (nil tag-type start 27786 . 27787) (nil font-lock-face web-mode-html-attr-name-face 27786 . 27787) (nil tag-name "v-col" 27785 . 27786) (nil tag-type start 27785 . 27786) (nil tag-attr t 27784 . 27785) (nil tag-attr-end 5 27784 . 27785) (nil tag-name "v-col" 27784 . 27785) (nil tag-type start 27784 . 27785) (nil font-lock-face web-mode-html-attr-value-face 27784 . 27785) (nil tag-attr t 27774 . 27784) (nil tag-name "v-col" 27774 . 27784) (nil tag-type start 27774 . 27784) (nil font-lock-face web-mode-html-attr-value-face 27774 . 27784) (nil tag-attr t 27773 . 27774) (nil tag-name "v-col" 27773 . 27774) (nil tag-type start 27773 . 27774) (nil font-lock-face web-mode-html-attr-equal-face 27773 . 27774) (nil tag-attr t 27769 . 27773) (nil tag-name "v-col" 27769 . 27773) (nil tag-type start 27769 . 27773) (nil font-lock-face web-mode-html-attr-name-face 27769 . 27773) (nil tag-attr-beg 0 27768 . 27769) (nil tag-attr t 27768 . 27769) (nil tag-name "v-col" 27768 . 27769) (nil tag-type start 27768 . 27769) (nil font-lock-face web-mode-html-attr-name-face 27768 . 27769) (nil tag-name "v-col" 27767 . 27768) (nil tag-type start 27767 . 27768) (nil tag-name "v-col" 27762 . 27767) (nil tag-type start 27762 . 27767) (nil font-lock-face web-mode-html-tag-custom-face 27762 . 27767) (nil tag-name "v-col" 27761 . 27762) (nil tag-type start 27761 . 27762) (nil tag-beg 19 27761 . 27762) (nil font-lock-face web-mode-html-tag-bracket-face 27761 . 27762) (nil tag-name "v-col" 27749 . 27750) (nil tag-type end 27749 . 27750) (nil tag-end t 27749 . 27750) (nil font-lock-face web-mode-html-tag-bracket-face 27749 . 27750) (nil tag-name "v-col" 27744 . 27749) (nil tag-type end 27744 . 27749) (nil font-lock-face web-mode-html-tag-custom-face 27744 . 27749) (nil tag-name "v-col" 27743 . 27744) (nil tag-type end 27743 . 27744) (nil font-lock-face web-mode-html-tag-bracket-face 27743 . 27744) (nil tag-name "v-col" 27742 . 27743) (nil tag-type end 27742 . 27743) (nil tag-beg 22 27742 . 27743) (nil font-lock-face web-mode-html-tag-bracket-face 27742 . 27743) (nil tag-name "v-subheader" 27730 . 27731) (nil tag-type end 27730 . 27731) (nil tag-end t 27730 . 27731) (nil font-lock-face web-mode-html-tag-bracket-face 27730 . 27731) (nil tag-name "v-subheader" 27719 . 27730) (nil tag-type end 27719 . 27730) (nil font-lock-face web-mode-html-tag-custom-face 27719 . 27730) (nil tag-name "v-subheader" 27718 . 27719) (nil tag-type end 27718 . 27719) (nil font-lock-face web-mode-html-tag-bracket-face 27718 . 27719) (nil tag-name "v-subheader" 27717 . 27718) (nil tag-type end 27717 . 27718) (nil tag-beg 22 27717 . 27718) (nil font-lock-face web-mode-html-tag-bracket-face 27717 . 27718) (nil block-side t 27716 . 27717) (nil block-end t 27716 . 27717) (nil block-token delimiter-end 27716 . 27717) (nil font-lock-face web-mode-block-delimiter-face 27716 . 27717) (nil face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) 27716 . 27717) (nil block-side t 27715 . 27716) (nil block-token delimiter-end 27715 . 27716) (nil font-lock-face web-mode-block-delimiter-face 27715 . 27716) (nil face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) 27715 . 27716) (nil block-side t 27714 . 27715) (nil block-side t 27713 . 27714) (nil face (rainbow-delimiters-depth-3-face) 27713 . 27714) (nil block-side t 27712 . 27713) (nil block-side t 27711 . 27712) (nil face web-mode-variable-name-face 27711 . 27712) (nil block-side t 27710 . 27711) (nil face web-mode-variable-name-face 27710 . 27711) (nil block-side t 27709 . 27710) (nil face web-mode-variable-name-face 27709 . 27710) (nil block-side t 27708 . 27709) (nil face web-mode-variable-name-face 27708 . 27709) (nil block-side t 27707 . 27708) (nil face web-mode-variable-name-face 27707 . 27708) (nil block-side t 27706 . 27707) (nil face web-mode-variable-name-face 27706 . 27707) (nil block-side t 27705 . 27706) (nil face web-mode-variable-name-face 27705 . 27706) (nil block-side t 27704 . 27705) (nil face web-mode-variable-name-face 27704 . 27705) (nil block-side t 27703 . 27704) (nil face web-mode-variable-name-face 27703 . 27704) (nil block-side t 27702 . 27703) (nil face web-mode-variable-name-face 27702 . 27703) (nil block-side t 27701 . 27702) (nil face web-mode-variable-name-face 27701 . 27702) (nil block-side t 27700 . 27701) (nil face web-mode-variable-name-face 27700 . 27701) (nil block-side t 27699 . 27700) (nil face web-mode-variable-name-face 27699 . 27700) (nil block-side t 27698 . 27699) (nil face web-mode-variable-name-face 27698 . 27699) (nil block-side t 27697 . 27698) (nil face web-mode-variable-name-face 27697 . 27698) (nil block-side t 27696 . 27697) (nil block-side t 27695 . 27696) (nil face web-mode-variable-name-face 27695 . 27696) (nil block-side t 27694 . 27695) (nil face web-mode-variable-name-face 27694 . 27695) (nil block-side t 27693 . 27694) (nil face web-mode-variable-name-face 27693 . 27694) (nil block-side t 27692 . 27693) (nil face web-mode-variable-name-face 27692 . 27693) (nil block-side t 27691 . 27692) (nil face web-mode-variable-name-face 27691 . 27692) (nil block-side t 27690 . 27691) (nil face web-mode-variable-name-face 27690 . 27691) (nil block-side t 27689 . 27690) (nil face web-mode-variable-name-face 27689 . 27690) (nil block-side t 27688 . 27689) (nil face web-mode-variable-name-face 27688 . 27689) (nil block-side t 27687 . 27688) (nil face web-mode-variable-name-face 27687 . 27688) (nil block-side t 27686 . 27687) (nil face web-mode-variable-name-face 27686 . 27687) (nil block-side t 27685 . 27686) (nil face web-mode-variable-name-face 27685 . 27686) (nil block-side t 27684 . 27685) (nil face web-mode-variable-name-face 27684 . 27685) (nil block-side t 27683 . 27684) (nil face web-mode-variable-name-face 27683 . 27684) (nil block-side t 27682 . 27683) (nil face web-mode-variable-name-face 27682 . 27683) (nil block-side t 27681 . 27682) (nil face web-mode-variable-name-face 27681 . 27682) (nil block-side t 27680 . 27681) (nil block-side t 27679 . 27680) (nil face (rainbow-delimiters-depth-3-face) 27679 . 27680) (nil block-side t 27678 . 27679) (nil face web-mode-variable-name-face 27678 . 27679) (nil block-side t 27676 . 27678) (nil block-side t 27675 . 27676) (nil block-token delimiter-beg 27675 . 27676) (nil font-lock-face web-mode-block-delimiter-face 27675 . 27676) (nil face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) 27675 . 27676) (nil block-beg 0 27674 . 27675) (nil block-controls 0 27674 . 27675) (nil block-side t 27674 . 27675) (nil block-token delimiter-beg 27674 . 27675) (nil font-lock-face web-mode-block-delimiter-face 27674 . 27675) (nil face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) 27674 . 27675) (nil tag-name "v-subheader" 27673 . 27674) (nil tag-type start 27673 . 27674) (nil tag-end t 27673 . 27674) (nil font-lock-face web-mode-html-tag-bracket-face 27673 . 27674) (nil tag-name "v-subheader" 27662 . 27673) (nil tag-type start 27662 . 27673) (nil font-lock-face web-mode-html-tag-custom-face 27662 . 27673) (nil tag-name "v-subheader" 27661 . 27662) (nil tag-type start 27661 . 27662) (nil tag-beg 18 27661 . 27662) (nil font-lock-face web-mode-html-tag-bracket-face 27661 . 27662) (nil tag-name "v-col" 27647 . 27648) (nil tag-type start 27647 . 27648) (nil tag-end t 27647 . 27648) (nil font-lock-face web-mode-html-tag-bracket-face 27647 . 27648) (nil tag-attr t 27646 . 27647) (nil tag-attr-end 5 27646 . 27647) (nil tag-name "v-col" 27646 . 27647) (nil tag-type start 27646 . 27647) (nil font-lock-face web-mode-html-attr-value-face 27646 . 27647) (nil tag-attr t 27640 . 27646) (nil tag-name "v-col" 27640 . 27646) (nil tag-type start 27640 . 27646) (nil font-lock-face web-mode-html-attr-value-face 27640 . 27646) (nil tag-attr t 27639 . 27640) (nil tag-name "v-col" 27639 . 27640) (nil tag-type start 27639 . 27640) (nil font-lock-face web-mode-html-attr-equal-face 27639 . 27640) (nil tag-attr t 27635 . 27639) (nil tag-name "v-col" 27635 . 27639) (nil tag-type start 27635 . 27639) (nil font-lock-face web-mode-html-attr-name-face 27635 . 27639) (nil tag-attr-beg 0 27634 . 27635) (nil tag-attr t 27634 . 27635) (nil tag-name "v-col" 27634 . 27635) (nil tag-type start 27634 . 27635) (nil font-lock-face web-mode-html-attr-name-face 27634 . 27635) (nil tag-name "v-col" 27633 . 27634) (nil tag-type start 27633 . 27634) (nil tag-attr t 27632 . 27633) (nil tag-attr-end 4 27632 . 27633) (nil tag-name "v-col" 27632 . 27633) (nil tag-type start 27632 . 27633) (nil font-lock-face web-mode-html-attr-value-face 27632 . 27633) (nil tag-attr t 27630 . 27632) (nil tag-name "v-col" 27630 . 27632) (nil tag-type start 27630 . 27632) (nil font-lock-face web-mode-html-attr-value-face 27630 . 27632) (nil tag-attr t 27629 . 27630) (nil tag-name "v-col" 27629 . 27630) (nil tag-type start 27629 . 27630) (nil font-lock-face web-mode-html-attr-equal-face 27629 . 27630) (nil tag-attr t 27626 . 27629) (nil tag-name "v-col" 27626 . 27629) (nil tag-type start 27626 . 27629) (nil font-lock-face web-mode-html-attr-name-face 27626 . 27629) (nil tag-attr-beg 0 27625 . 27626) (nil tag-attr t 27625 . 27626) (nil tag-name "v-col" 27625 . 27626) (nil tag-type start 27625 . 27626) (nil font-lock-face web-mode-html-attr-name-face 27625 . 27626) (nil tag-name "v-col" 27624 . 27625) (nil tag-type start 27624 . 27625) (nil tag-attr t 27623 . 27624) (nil tag-attr-end 2 27623 . 27624) (nil tag-name "v-col" 27623 . 27624) (nil tag-type start 27623 . 27624) (nil font-lock-face web-mode-html-attr-value-face 27623 . 27624) (nil tag-attr t 27621 . 27623) (nil tag-name "v-col" 27621 . 27623) (nil tag-type start 27621 . 27623) (nil font-lock-face web-mode-html-attr-value-face 27621 . 27623) (nil tag-attr t 27620 . 27621) (nil tag-name "v-col" 27620 . 27621) (nil tag-type start 27620 . 27621) (nil font-lock-face web-mode-html-attr-equal-face 27620 . 27621) (nil tag-attr t 27619 . 27620) (nil tag-name "v-col" 27619 . 27620) (nil tag-type start 27619 . 27620) (nil font-lock-face web-mode-html-attr-name-face 27619 . 27620) (nil tag-attr-beg 0 27618 . 27619) (nil tag-attr t 27618 . 27619) (nil tag-name "v-col" 27618 . 27619) (nil tag-type start 27618 . 27619) (nil font-lock-face web-mode-html-attr-name-face 27618 . 27619) (nil tag-name "v-col" 27617 . 27618) (nil tag-type start 27617 . 27618) (nil tag-attr t 27616 . 27617) (nil tag-attr-end 2 27616 . 27617) (nil tag-name "v-col" 27616 . 27617) (nil tag-type start 27616 . 27617) (nil font-lock-face web-mode-html-attr-value-face 27616 . 27617) (nil tag-attr t 27614 . 27616) (nil tag-name "v-col" 27614 . 27616) (nil tag-type start 27614 . 27616) (nil font-lock-face web-mode-html-attr-value-face 27614 . 27616) (nil tag-attr t 27613 . 27614) (nil tag-name "v-col" 27613 . 27614) (nil tag-type start 27613 . 27614) (nil font-lock-face web-mode-html-attr-equal-face 27613 . 27614) (nil tag-attr t 27612 . 27613) (nil tag-name "v-col" 27612 . 27613) (nil tag-type start 27612 . 27613) (nil font-lock-face web-mode-html-attr-name-face 27612 . 27613) (nil tag-attr-beg 0 27611 . 27612) (nil tag-attr t 27611 . 27612) (nil tag-name "v-col" 27611 . 27612) (nil tag-type start 27611 . 27612) (nil font-lock-face web-mode-html-attr-name-face 27611 . 27612) (nil tag-name "v-col" 27610 . 27611) (nil tag-type start 27610 . 27611) (nil tag-attr t 27609 . 27610) (nil tag-attr-end 5 27609 . 27610) (nil tag-name "v-col" 27609 . 27610) (nil tag-type start 27609 . 27610) (nil font-lock-face web-mode-html-attr-value-face 27609 . 27610) (nil tag-attr t 27599 . 27609) (nil tag-name "v-col" 27599 . 27609) (nil tag-type start 27599 . 27609) (nil font-lock-face web-mode-html-attr-value-face 27599 . 27609) (nil tag-attr t 27598 . 27599) (nil tag-name "v-col" 27598 . 27599) (nil tag-type start 27598 . 27599) (nil font-lock-face web-mode-html-attr-equal-face 27598 . 27599) (nil tag-attr t 27594 . 27598) (nil tag-name "v-col" 27594 . 27598) (nil tag-type start 27594 . 27598) (nil font-lock-face web-mode-html-attr-name-face 27594 . 27598) (nil tag-attr-beg 0 27593 . 27594) (nil tag-attr t 27593 . 27594) (nil tag-name "v-col" 27593 . 27594) (nil tag-type start 27593 . 27594) (nil font-lock-face web-mode-html-attr-name-face 27593 . 27594) (nil tag-name "v-col" 27592 . 27593) (nil tag-type start 27592 . 27593) (nil tag-name "v-col" 27587 . 27592) (nil tag-type start 27587 . 27592) (nil font-lock-face web-mode-html-tag-custom-face 27587 . 27592) (nil tag-name "v-col" 27586 . 27587) (nil tag-type start 27586 . 27587) (nil tag-beg 19 27586 . 27587) (nil font-lock-face web-mode-html-tag-bracket-face 27586 . 27587) (nil tag-name "v-row" 27574 . 27575) (nil tag-type start 27574 . 27575) (nil tag-end t 27574 . 27575) (nil font-lock-face web-mode-html-tag-bracket-face 27574 . 27575) (nil tag-attr t 27573 . 27574) (nil tag-attr-end 5 27573 . 27574) (nil tag-name "v-row" 27573 . 27574) (nil tag-type start 27573 . 27574) (nil font-lock-face web-mode-html-attr-value-face 27573 . 27574) (nil tag-attr t 27558 . 27573) (nil tag-name "v-row" 27558 . 27573) (nil tag-type start 27558 . 27573) (nil font-lock-face web-mode-html-attr-value-face 27558 . 27573) (nil tag-attr t 27557 . 27558) (nil tag-name "v-row" 27557 . 27558) (nil tag-type start 27557 . 27558) (nil font-lock-face web-mode-html-attr-equal-face 27557 . 27558) (nil tag-attr t 27553 . 27557) (nil tag-name "v-row" 27553 . 27557) (nil tag-type start 27553 . 27557) (nil font-lock-face web-mode-html-attr-name-face 27553 . 27557) (nil tag-attr-beg 0 27552 . 27553) (nil tag-attr t 27552 . 27553) (nil tag-name "v-row" 27552 . 27553) (nil tag-type start 27552 . 27553) (nil font-lock-face web-mode-html-attr-name-face 27552 . 27553) (nil tag-name "v-row" 27551 . 27552) (nil tag-type start 27551 . 27552) (nil tag-name "v-row" 27546 . 27551) (nil tag-type start 27546 . 27551) (nil font-lock-face web-mode-html-tag-custom-face 27546 . 27551) (nil tag-name "v-row" 27545 . 27546) (nil tag-type start 27545 . 27546) (nil tag-beg 19 27545 . 27546) (nil font-lock-face web-mode-html-tag-bracket-face 27545 . 27546) (27545 . 27823)) nil (25812 51702 976560 197000) 0 nil])
([nil nil ((28131 . 28142)) nil (25812 51702 976475 162000) 0 nil])
([nil nil ((28142 . 28150)) nil (25812 51702 976474 230000) 0 nil])
([nil nil ((28150 . 28161)) nil (25812 51702 976473 262000) 0 nil])
([nil nil ((28161 . 28169)) nil (25812 51702 976472 304000) 0 nil])
([nil nil ((28186 . 28188) (28155 . 28159) (28091 . 28107) (#("            " 0 12 (tag-type start tag-name "v-text-field")) . 28091) (28065 . 28081) (#("            " 0 12 (tag-type start tag-name "v-text-field")) . 28065) (28036 . 28052) (#("            " 0 12 (tag-type start tag-name "v-text-field")) . 28036) (28015 . 28031) (#("            " 0 12 (tag-type start tag-name "v-text-field")) . 28015) (27955 . 27971) (#("            " 0 12 (tag-type start tag-name "v-text-field")) . 27955) (27915 . 27931) (#("            " 0 12 (tag-type start tag-name "v-text-field")) . 27915) (27860 . 27876) (#("            " 0 12 (tag-type start tag-name "v-text-field")) . 27860) (27842 . 27846) (27767 . 27769) (27746 . 27748) (27663 . 27665) (27586 . 27588) 27501) nil (25812 51702 976469 519000) 0 nil])
([nil nil ((28232 . 28233)) nil (25812 51702 976464 418000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28249 . 28250) (nil tag-attr t 28249 . 28250) (nil tag-attr-end 5 28249 . 28250) (nil tag-name "v-row" 28249 . 28250) (nil tag-type start 28249 . 28250) (nil font-lock-face web-mode-html-attr-value-face 28249 . 28250) (nil tag-attr t 28239 . 28249) (nil tag-name "v-row" 28239 . 28249) (nil tag-type start 28239 . 28249) (nil font-lock-face web-mode-html-attr-value-face 28239 . 28249) (nil tag-attr t 28238 . 28239) (nil tag-name "v-row" 28238 . 28239) (nil tag-type start 28238 . 28239) (nil font-lock-face web-mode-html-attr-equal-face 28238 . 28239) (nil tag-attr t 28234 . 28238) (nil tag-name "v-row" 28234 . 28238) (nil tag-type start 28234 . 28238) (nil font-lock-face web-mode-html-attr-name-face 28234 . 28238) (nil tag-attr-beg 0 28233 . 28234) (nil tag-attr t 28233 . 28234) (nil tag-name "v-row" 28233 . 28234) (nil tag-type start 28233 . 28234) (nil font-lock-face web-mode-html-attr-name-face 28233 . 28234) (28233 . 28250)) nil (25812 51702 976462 338000) 0 nil])
([nil nil ((28251 . 28264)) nil (25812 51702 976456 837000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28288 . 28289) (nil tag-name "v-col" 28288 . 28289) (nil tag-type start 28288 . 28289) (nil tag-end t 28288 . 28289) (nil font-lock-face web-mode-html-tag-bracket-face 28288 . 28289) (nil tag-attr t 28287 . 28288) (nil tag-attr-end 5 28287 . 28288) (nil tag-name "v-col" 28287 . 28288) (nil tag-type start 28287 . 28288) (nil font-lock-face web-mode-html-attr-value-face 28287 . 28288) (nil tag-attr t 28277 . 28287) (nil tag-name "v-col" 28277 . 28287) (nil tag-type start 28277 . 28287) (nil font-lock-face web-mode-html-attr-value-face 28277 . 28287) (nil tag-attr t 28276 . 28277) (nil tag-name "v-col" 28276 . 28277) (nil tag-type start 28276 . 28277) (nil font-lock-face web-mode-html-attr-equal-face 28276 . 28277) (nil tag-attr t 28272 . 28276) (nil tag-name "v-col" 28272 . 28276) (nil tag-type start 28272 . 28276) (nil font-lock-face web-mode-html-attr-name-face 28272 . 28276) (nil tag-attr-beg 0 28271 . 28272) (nil tag-attr t 28271 . 28272) (nil tag-name "v-col" 28271 . 28272) (nil tag-type start 28271 . 28272) (nil font-lock-face web-mode-html-attr-name-face 28271 . 28272) (nil tag-name "v-col" 28270 . 28271) (nil tag-type start 28270 . 28271) (nil tag-name "v-col" 28265 . 28270) (nil tag-type start 28265 . 28270) (nil font-lock-face web-mode-html-tag-custom-face 28265 . 28270) (nil tag-name "v-col" 28264 . 28265) (nil tag-type start 28264 . 28265) (nil tag-beg 19 28264 . 28265) (nil font-lock-face web-mode-html-tag-bracket-face 28264 . 28265) (28264 . 28289)) nil (25812 51702 976454 47000) 0 nil])
([nil nil ((29253 . 29266)) nil (25812 51702 976445 218000) 0 nil])
([nil nil ((29266 . 29274)) nil (25812 51702 976444 235000) 0 nil])
([nil nil ((29295 . 29305) (#("          " 0 10 (face whitespace-trailing)) . 29294) (29294 . 29304) (29294 . 29295)) nil (25812 51702 977955 113000) 0 nil])
([nil nil ((29305 . 29320)) nil (25812 51714 597385 827000) 0 nil] [nil nil ((29305 . 29318)) ((#("<v-co></v-co>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-co") 1 5 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-co") 5 6 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-co") 6 7 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-co") 7 8 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-co") 8 12 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-co") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-co")) . 29305) (undo-tree-id1562 . -4) (undo-tree-id1563 . -5) (undo-tree-id1564 . -6)) (25812 51702 976433 746000) 0 nil])
([nil nil ((#("</v-row>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 1 2 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 2 7 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 7 8 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 29312) (undo-tree-id1565 . -8) (undo-tree-id1566 . -8)) nil (25812 51714 598643 798000) 0 nil])
nil
([nil nil ((31558 . 31569)) nil (25812 51724 875721 297000) 0 nil] [nil nil ((31511 . 31526)) (("
              " . 31511) (undo-tree-id1567 . -15) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1)) (25812 51714 597366 875000) 0 nil])
([nil nil ((nil rear-nonsticky nil 31576 . 31577) (nil tag-name "v-row" 31576 . 31577) (nil tag-type end 31576 . 31577) (nil tag-end t 31576 . 31577) (nil font-lock-face web-mode-html-tag-bracket-face 31576 . 31577) (nil tag-name "v-row" 31571 . 31576) (nil tag-type end 31571 . 31576) (nil font-lock-face web-mode-html-tag-custom-face 31571 . 31576) (nil tag-name "v-row" 31570 . 31571) (nil tag-type end 31570 . 31571) (nil font-lock-face web-mode-html-tag-bracket-face 31570 . 31571) (nil tag-name "v-row" 31569 . 31570) (nil tag-type end 31569 . 31570) (nil tag-beg 22 31569 . 31570) (nil font-lock-face web-mode-html-tag-bracket-face 31569 . 31570) (31569 . 31577)) nil (25812 51724 875719 413000) 0 nil])
nil
([nil nil ((29312 . 29325)) nil (25812 51724 875714 935000) 0 nil])
([nil nil ((29325 . 29340)) nil (25812 51724 876303 67000) 0 nil])
([nil nil ((#("</v-col>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 1 2 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 2 7 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 7 8 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 29332) (undo-tree-id1570 . -8) (undo-tree-id1571 . -8) (undo-tree-id1572 . -8)) nil (25812 51743 772751 686000) 0 nil] [nil nil ((29332 . 29340)) ((#("</v-col>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 1 2 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 2 7 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 7 8 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 29332)) (25812 51724 875706 314000) 0 nil])
([nil nil ((31578 . 31589)) nil (25812 51743 772740 261000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 31596 . 31597) (nil tag-name "v-col" 31596 . 31597) (nil tag-type end 31596 . 31597) (nil tag-end t 31596 . 31597) (nil font-lock-face web-mode-html-tag-bracket-face 31596 . 31597) (nil tag-name "v-col" 31591 . 31596) (nil tag-type end 31591 . 31596) (nil font-lock-face web-mode-html-tag-custom-face 31591 . 31596) (nil tag-name "v-col" 31590 . 31591) (nil tag-type end 31590 . 31591) (nil font-lock-face web-mode-html-tag-bracket-face 31590 . 31591) (nil tag-name "v-col" 31589 . 31590) (nil tag-type end 31589 . 31590) (nil tag-beg 22 31589 . 31590) (nil font-lock-face web-mode-html-tag-bracket-face 31589 . 31590) (31589 . 31597)) nil (25812 51743 772738 315000) 0 nil])
([nil nil ((31793 . 31795) (31769 . 31773) (31728 . 31744) ("            " . 31728) (31701 . 31719) ("              " . 31701) (31688 . 31692) (31654 . 31658) (31600 . 31624) ("                    " . 31600) (31559 . 31585) ("                      " . 31559) (31532 . 31536) (31483 . 31487) (31321 . 31353) ("                            " . 31321) (31297 . 31301) (31245 . 31249) (31181 . 31207) ("                      " . 31181) (31131 . 31155) ("                    " . 31131) (31079 . 31103) ("                    " . 31079) (31059 . 31063) (31014 . 31018) (30904 . 30928) ("                    " . 30904) (30797 . 30821) ("                    " . 30797) (30791 . 30795) (30705 . 30729) (#("                    " 0 20 (tag-type start tag-name "v-combobox")) . 30705) (30647 . 30671) (#("                    " 0 20 (tag-type start tag-name "v-combobox")) . 30647) (30542 . 30566) (#("                    " 0 20 (tag-type start tag-name "v-combobox")) . 30542) (30440 . 30464) (#("                    " 0 20 (tag-type start tag-name "v-combobox")) . 30440) (30400 . 30424) (#("                    " 0 20 (tag-type start tag-name "v-combobox")) . 30400) (30368 . 30392) (#("                    " 0 20 (tag-type start tag-name "v-combobox")) . 30368) (30321 . 30345) (#("                    " 0 20 (tag-type start tag-name "v-combobox")) . 30321) (30288 . 30312) (#("                    " 0 20 (tag-type start tag-name "v-combobox")) . 30288) (30255 . 30279) (#("                    " 0 20 (tag-type start tag-name "v-combobox")) . 30255) (30216 . 30240) (#("                    " 0 20 (tag-type start tag-name "v-combobox")) . 30216) (30170 . 30194) (#("                    " 0 20 (tag-type start tag-name "v-combobox")) . 30170) (30124 . 30148) (#("                    " 0 20 (tag-type start tag-name "v-combobox")) . 30124) (30071 . 30095) (#("                    " 0 20 (tag-type start tag-name "v-combobox")) . 30071) (30055 . 30059) (30015 . 30019) (29986 . 29990) (29954 . 29958) (29930 . 29934) (29842 . 29866) (#("                    " 0 20 (tag-type start tag-name "v-select")) . 29842) (29774 . 29798) (#("                    " 0 20 (tag-type start tag-name "v-select")) . 29774) (29712 . 29736) (#("                    " 0 20 (tag-type start tag-name "v-select")) . 29712) (29668 . 29692) (#("                    " 0 20 (tag-type start tag-name "v-select")) . 29668) (29635 . 29659) (#("                    " 0 20 (tag-type start tag-name "v-select")) . 29635) (29591 . 29615) (#("                    " 0 20 (tag-type start tag-name "v-select")) . 29591) (29540 . 29564) (#("                    " 0 20 (tag-type start tag-name "v-select")) . 29540) (29507 . 29531) (#("                    " 0 20 (tag-type start tag-name "v-select")) . 29507) (29493 . 29497) (29453 . 29457) (29411 . 29429) ("              " . 29411) (29381 . 29397) ("            " . 29381) (29343 . 29347) 29314) nil (25812 51743 772724 751000) 0 nil])
([nil nil ((29311 . 29312)) nil (25812 51743 772700 348000) 0 nil])
([nil nil ((nil rear-nonsticky nil 29328 . 29329) (nil rear-nonsticky t 29328 . 29329) (nil tag-attr t 29328 . 29329) (nil tag-attr-end 5 29328 . 29329) (nil tag-name "v-row" 29328 . 29329) (nil tag-type start 29328 . 29329) (nil font-lock-face web-mode-html-attr-value-face 29328 . 29329) (nil tag-attr t 29318 . 29328) (nil tag-name "v-row" 29318 . 29328) (nil tag-type start 29318 . 29328) (nil font-lock-face web-mode-html-attr-value-face 29318 . 29328) (nil tag-attr t 29317 . 29318) (nil tag-name "v-row" 29317 . 29318) (nil tag-type start 29317 . 29318) (nil font-lock-face web-mode-html-attr-equal-face 29317 . 29318) (nil tag-attr t 29313 . 29317) (nil tag-name "v-row" 29313 . 29317) (nil tag-type start 29313 . 29317) (nil font-lock-face web-mode-html-attr-name-face 29313 . 29317) (nil tag-attr-beg 0 29312 . 29313) (nil tag-attr t 29312 . 29313) (nil tag-name "v-row" 29312 . 29313) (nil tag-type start 29312 . 29313) (nil font-lock-face web-mode-html-attr-name-face 29312 . 29313) (29312 . 29329)) nil (25812 51743 772697 296000) 0 nil])
([nil nil ((29349 . 29350)) nil (25812 51743 772687 996000) 0 nil])
([nil nil ((nil rear-nonsticky nil 29366 . 29367) (nil rear-nonsticky t 29366 . 29367) (nil tag-attr t 29366 . 29367) (nil tag-attr-end 5 29366 . 29367) (nil tag-name "v-col" 29366 . 29367) (nil tag-type start 29366 . 29367) (nil font-lock-face web-mode-html-attr-value-face 29366 . 29367) (nil tag-attr t 29356 . 29366) (nil tag-name "v-col" 29356 . 29366) (nil tag-type start 29356 . 29366) (nil font-lock-face web-mode-html-attr-value-face 29356 . 29366) (nil tag-attr t 29355 . 29356) (nil tag-name "v-col" 29355 . 29356) (nil tag-type start 29355 . 29356) (nil font-lock-face web-mode-html-attr-equal-face 29355 . 29356) (nil tag-attr t 29351 . 29355) (nil tag-name "v-col" 29351 . 29355) (nil tag-type start 29351 . 29355) (nil font-lock-face web-mode-html-attr-name-face 29351 . 29355) (nil tag-attr-beg 0 29350 . 29351) (nil tag-attr t 29350 . 29351) (nil tag-name "v-col" 29350 . 29351) (nil tag-type start 29350 . 29351) (nil font-lock-face web-mode-html-attr-name-face 29350 . 29351) (29350 . 29367)) nil (25812 51743 772679 639000) 0 nil])
([nil nil ((112747 . 112752) (t 25812 51743 807309 965000)) nil (25812 51856 250686 666000) 0 nil])
([nil nil ((nil rear-nonsticky nil 112795 . 112796) (nil part-side css 112790 . 112796) (nil part-side css 112777 . 112790) (nil face web-mode-css-property-name-face 112777 . 112790) (nil part-side css 112765 . 112777) (nil part-side css 112752 . 112765) (nil face web-mode-css-property-name-face 112752 . 112765) (112752 . 112796)) nil (25812 51856 250678 433000) 0 nil])
([nil nil ((#("
    border-style: solid;
    border-width: thin;" 0 1 (part-side css) 1 5 (part-side css) 5 18 (face web-mode-css-property-name-face part-side css) 18 30 (part-side css) 30 43 (face web-mode-css-property-name-face part-side css) 43 48 (part-side css) 48 49 (part-side css rear-nonsticky t)) . 112747) (undo-tree-id1573 . -49) (undo-tree-id1574 . -1) (undo-tree-id1575 . -5) (undo-tree-id1576 . -49) (t 25812 51856 291619 286000)) nil (25812 51982 657701 563000) 0 nil])
([nil nil ((28287 . 28288)) nil (25812 51982 657688 978000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28297 . 28298) (nil tag-attr t 28288 . 28298) (nil tag-name "v-col" 28288 . 28298) (nil tag-type start 28288 . 28298) (nil font-lock-face web-mode-html-attr-value-face 28288 . 28298) (28288 . 28298)) nil (25812 51982 657681 800000) 0 nil])
([nil nil ((#("            </v-col>
          </v-row>" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col") 31 32 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 32 33 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 33 38 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 38 39 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27415) (undo-tree-id1609 . -39) (undo-tree-id1610 . -21) (undo-tree-id1611 . -39) (t 25812 51982 687979 706000)) nil (25812 52091 260520 907000) 0 nil])
([nil nil (("
" . -27414) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) 27415) nil (25812 52091 260516 44000) 0 nil])
([nil nil ((#("            </v-col>
            <v-col>
            </v-col>
            <v-col>" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col") 33 34 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-col") 34 39 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-col") 39 40 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-col") 53 54 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 54 55 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 55 60 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 60 61 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col") 74 75 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-col") 75 80 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-col") 80 81 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-col")) . 27142) (undo-tree-id1602 . -81) (undo-tree-id1603 . -40) (undo-tree-id1604 . -21) (undo-tree-id1605 . -81)) nil (25812 52091 260511 123000) 0 nil])
([nil nil (("
" . -27141) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) 27142) nil (25812 52091 260505 374000) 0 nil])
([nil nil ((#("          <v-row>
            <v-col>" 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-row") 11 16 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-row") 16 17 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-row") 30 31 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-col") 31 36 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-col") 36 37 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-col")) . 27053) (undo-tree-id1595 . -37) (undo-tree-id1596 . -18) (undo-tree-id1597 . -37)) nil (25812 52091 260499 339000) 0 nil])
([nil nil (("
" . -27052) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) 27053) nil (25812 52091 260494 529000) 0 nil])
([nil nil (("    " . -27258) ("    " . -27221) (#("    " 0 4 (tag-type start tag-name "v-btn")) . -27207) (#("    " 0 4 (tag-type start tag-name "v-btn")) . -27146) (#("    " 0 4 (tag-type start tag-name "v-btn")) . -27129) ("    " . -27110) ("    " . -27063) 27053) nil (25812 52091 260489 112000) 0 nil])
([nil nil ((27099 . 27110)) nil (25812 52091 260486 667000) 0 nil])
([nil nil ((27110 . 27112)) nil (25812 52091 260485 522000) 0 nil])
([nil nil (("v" . -27110) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) ("-" . -27111) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) 27112) nil (25812 52091 260483 766000) 0 nil])
([nil nil ((27110 . 27114)) nil (25812 52091 260477 51000) 0 nil])
([nil nil ((#("d" 0 1 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-d")) . -27113) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) 27114) nil (25812 52091 260475 114000) 0 nil])
([nil nil ((#("<v-" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 2 tag-type start tag-name "v-") 1 3 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-")) . 27110) (undo-tree-id1577 . -3) (undo-tree-id1578 . -3) (undo-tree-id1579 . -3) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -3) (undo-tree-id1584 . -3)) nil (25812 52091 260468 584000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27130 . 27131) (nil tag-name "v-spacer" 27130 . 27131) (nil tag-type end 27130 . 27131) (nil tag-end t 27130 . 27131) (nil font-lock-face web-mode-html-tag-bracket-face 27130 . 27131) (nil tag-name "v-spacer" 27122 . 27130) (nil tag-type end 27122 . 27130) (nil font-lock-face web-mode-html-tag-custom-face 27122 . 27130) (nil tag-name "v-spacer" 27121 . 27122) (nil tag-type end 27121 . 27122) (nil font-lock-face web-mode-html-tag-bracket-face 27121 . 27122) (nil tag-name "v-spacer" 27120 . 27121) (nil tag-type end 27120 . 27121) (nil tag-beg 22 27120 . 27121) (nil font-lock-face web-mode-html-tag-bracket-face 27120 . 27121) (nil tag-name "v-spacer" 27119 . 27120) (nil tag-type start 27119 . 27120) (nil tag-end t 27119 . 27120) (nil font-lock-face web-mode-html-tag-bracket-face 27119 . 27120) (nil tag-name "v-spacer" 27111 . 27119) (nil tag-type start 27111 . 27119) (nil font-lock-face web-mode-html-tag-custom-face 27111 . 27119) (nil tag-name "v-spacer" 27110 . 27111) (nil tag-type start 27110 . 27111) (nil tag-beg 18 27110 . 27111) (nil font-lock-face web-mode-html-tag-bracket-face 27110 . 27111) (27110 . 27131)) nil (25812 52091 260445 869000) 0 nil])
([nil nil ((#("rounded-sm" 0 9 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t) 9 10 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t rear-nonsticky t)) . 28132) (undo-tree-id1615 . -10) (undo-tree-id1616 . -10) (t 25812 52091 292298 67000)) nil (25812 52122 895420 35000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t)) . -28131) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) 28132) nil (25812 52122 896532 541000) 0 nil])
([nil nil ((28132 . 28134)) nil (25812 52222 897258 291000) 0 nil] [nil nil ((28132 . 28141)) ((#(" class=\"\"" 0 1 (tag-type start tag-name "v-col") 1 2 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t tag-attr-beg 0) 2 3 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t) 3 4 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t) 4 5 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t) 5 6 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t) 6 7 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-col" tag-attr t) 7 8 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t) 8 9 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr-end 5 tag-attr t)) . 28132) (undo-tree-id1617 . -4) (undo-tree-id1618 . -5) (undo-tree-id1619 . -8)) (25812 52122 895394 619000) 0 nil])
([nil nil ((#("s" 0 1 (tag-type start tag-name "v-col")) . -28132) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (#("t" 0 1 (tag-type start tag-name "v-col")) . -28133) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) 28134) nil (25812 52222 897256 521000) 0 nil])
nil
([nil nil ((28140 . 28151) (28132 . 28141)) nil (25812 52222 897249 682000) 0 nil])
([nil nil ((#("-" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t)) . -28150) (undo-tree-id1695 . -1) 28151) nil (25812 52222 897247 969000) 0 nil])
([nil nil ((28150 . 28157)) nil (25812 52222 897245 180000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t)) . -28156) (undo-tree-id1694 . -1) 28157) nil (25812 52222 897243 921000) 0 nil])
([nil nil ((28156 . 28158)) nil (25812 52222 897241 382000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t)) . -28157) (undo-tree-id1693 . -1) 28158) nil (25812 52222 897239 896000) 0 nil])
([nil nil ((28150 . 28152)) nil (25812 52222 897237 366000) 0 nil])
([nil nil ((#("o" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t)) . -28151) (undo-tree-id1692 . -1) 28152) nil (25812 52222 897235 977000) 0 nil])
([nil nil ((28151 . 28157)) nil (25812 52222 897232 700000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t)) . -28156) (undo-tree-id1691 . -1) 28157) nil (25812 52222 897231 247000) 0 nil])
([nil nil ((28163 . 28166)) nil (25812 52222 897228 821000) 0 nil])
([nil nil ((28166 . 28170)) nil (25812 52222 897227 696000) 0 nil])
([nil nil ((112634 . 112637)) nil (25812 52222 897226 424000) 0 nil])
([nil nil ((112637 . 112639)) nil (25812 52222 897224 851000) 0 nil])
([nil nil ((#("-" 0 1 (part-side css)) . -112637) (undo-tree-id1689 . -1) (#("." 0 1 (part-side css)) . -112638) (undo-tree-id1690 . -1) 112639) nil (25812 52222 897223 198000) 0 nil])
([nil nil ((112637 . 112638)) nil (25812 52222 897218 688000) 0 nil])
([nil nil ((#("." 0 1 (part-side css)) . -112637) (undo-tree-id1688 . -1) 112638) nil (25812 52222 897217 120000) 0 nil])
([nil nil ((112637 . 112646)) nil (25812 52222 897214 663000) 0 nil])
([nil nil ((#("f" 0 1 (part-side css)) . -112638) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (#("i" 0 1 (part-side css)) . -112639) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (#("l" 0 1 (part-side css)) . -112640) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (#("t" 0 1 (part-side css)) . -112641) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (#("e" 0 1 (part-side css)) . -112642) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (#("r" 0 1 (part-side css)) . -112643) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (#("t" 0 1 (part-side css)) . -112644) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (#("r" 0 1 (part-side css)) . -112645) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) 112646) nil (25812 52222 897210 968000) 0 nil])
([nil nil ((112638 . 112654)) nil (25812 52222 897182 143000) 0 nil])
([nil nil ((112654 . 112656) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face) part-side css)) . -112654) (112654 . 112655)) nil (25812 52222 897180 486000) 0 nil])
([nil nil ((112655 . 112658)) nil (25812 52222 897178 529000) 0 nil])
([nil nil ((112607 . 112608)) nil (25812 52222 897177 299000) 0 nil])
([nil nil ((112656 . 112661)) nil (25812 52222 897176 42000) 0 nil])
([nil nil ((nil rear-nonsticky nil 112690 . 112691) (nil part-side css 112678 . 112691) (nil part-side css 112661 . 112678) (nil face web-mode-css-property-name-face 112661 . 112678) (112661 . 112691)) nil (25812 52222 897174 605000) 0 nil])
([nil nil ((112685 . 112689) (#(" " 0 1 (part-side css)) . 112684) (undo-tree-id1664 . -1) (112685 . 112686)) nil (25812 52222 897172 139000) 0 nil])
([nil nil ((#("border" 0 5 (part-side css) 5 6 (part-side css rear-nonsticky t)) . 112689) (undo-tree-id1662 . -6) (undo-tree-id1663 . -6)) nil (25812 52222 897169 280000) 0 nil])
([nil nil ((nil rear-nonsticky nil 112764 . 112765) (nil part-side css 112764 . 112765) (nil part-side css 112754 . 112764) (nil face web-mode-css-priority-face 112754 . 112764) (nil part-side css 112749 . 112754) (nil part-side css 112735 . 112749) (nil face web-mode-css-property-name-face 112735 . 112749) (nil part-side css 112729 . 112735) (nil part-side css 112719 . 112729) (nil face web-mode-css-priority-face 112719 . 112729) (nil part-side css 112718 . 112719) (nil part-side css 112717 . 112718) (nil face (rainbow-delimiters-depth-2-face) 112717 . 112718) (nil part-side css 112708 . 112717) (nil part-side css 112707 . 112708) (nil face (rainbow-delimiters-depth-2-face) 112707 . 112708) (nil part-side css 112703 . 112707) (nil face web-mode-css-function-face 112703 . 112707) (nil part-side css 112702 . 112703) (nil part-side css 112689 . 112702) (nil face web-mode-css-property-name-face 112689 . 112702) (112689 . 112765)) nil (25812 52222 897164 948000) 0 nil])
([nil nil ((28131 . 28133)) nil (25812 52222 897157 578000) 0 nil])
([nil nil ((#("v" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t)) . -28132) (undo-tree-id1661 . -1) 28133) nil (25812 52222 897156 85000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28146 . 28147) (nil tag-attr t 28132 . 28147) (nil tag-name "v-col" 28132 . 28147) (nil tag-type start 28132 . 28147) (nil font-lock-face web-mode-html-attr-value-face 28132 . 28147) (28132 . 28147)) nil (25812 52222 897152 801000) 0 nil])
([nil nil ((#("tyle=\"background-color: gray; border\"" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t) 1 2 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t) 2 3 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t) 3 4 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t) 4 5 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-col" tag-attr t) 5 36 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t) 36 37 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr-end 5 tag-attr t)) . 28150) (undo-tree-id1656 . -37) (undo-tree-id1657 . -36) (undo-tree-id1658 . -6) (undo-tree-id1659 . -36) (undo-tree-id1660 . -37)) nil (25812 52222 897149 302000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-col")) . -28148) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (#("s" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr-end 0 tag-attr t tag-attr-beg 0)) . -28149) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) 28150) nil (25812 52222 897135 437000) 0 nil])
([nil nil ((#(" save_filtertree" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t) 1 15 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t) 15 16 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t rear-nonsticky t)) . 28131) (undo-tree-id1716 . -16) (undo-tree-id1717 . -1) (undo-tree-id1718 . -16) (t 25812 52222 932692 398000)) nil (25812 52346 225812 581000) 0 nil])
([nil nil ((27378 . 27389)) nil (25812 52346 225774 760000) 0 nil])
([nil nil ((27389 . 27396)) nil (25812 52346 225773 860000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-row")) . -27395) (undo-tree-id1715 . -1) 27396) nil (25812 52346 225772 687000) 0 nil])
([nil nil ((27396 . 27397) (27395 . 27404)) nil (25812 52346 225770 235000) 0 nil])
([nil nil ((" " . -27396) (undo-tree-id1714 . -1) 27397) nil (25812 52346 225768 841000) 0 nil])
([nil nil ((27395 . 27404)) nil (25812 52346 225766 184000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27418 . 27419) (nil rear-nonsticky t 27418 . 27419) (nil tag-attr t 27418 . 27419) (nil tag-name "v-row" 27418 . 27419) (nil tag-type start 27418 . 27419) (nil font-lock-face web-mode-html-attr-value-face 27418 . 27419) (nil tag-attr t 27404 . 27418) (nil tag-name "v-row" 27404 . 27418) (nil tag-type start 27404 . 27418) (nil font-lock-face web-mode-html-attr-value-face 27404 . 27418) (nil tag-attr t 27403 . 27404) (nil tag-name "v-row" 27403 . 27404) (nil tag-type start 27403 . 27404) (nil font-lock-face web-mode-html-attr-value-face 27403 . 27404) (27403 . 27419)) nil (25812 52346 225764 381000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27403) (undo-tree-id1713 . -1) 27404) nil (25812 52346 225760 123000) 0 nil])
([nil nil ((#("g" 0 1 (part-side css)) . -112690) (undo-tree-id1709 . -1) (#("r" 0 1 (part-side css)) . -112691) (undo-tree-id1710 . -1) (#("a" 0 1 (part-side css)) . -112692) (undo-tree-id1711 . -1) (#("y" 0 1 (part-side css)) . -112693) (undo-tree-id1712 . -1) 112694) nil (25812 52346 225757 110000) 0 nil])
([nil nil ((112690 . 112693)) nil (25812 52346 225751 143000) 0 nil])
([nil nil ((#("</v-row>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 1 2 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 2 7 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 7 8 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27420) (undo-tree-id1707 . -8) (undo-tree-id1708 . -8)) nil (25812 52346 225749 970000) 0 nil])
([nil nil ((29179 . 29190)) nil (25812 52346 225746 714000) 0 nil])
([nil nil ((nil rear-nonsticky nil 29197 . 29198) (nil tag-name "v-row" 29197 . 29198) (nil tag-type end 29197 . 29198) (nil tag-end t 29197 . 29198) (nil font-lock-face web-mode-html-tag-bracket-face 29197 . 29198) (nil tag-name "v-row" 29192 . 29197) (nil tag-type end 29192 . 29197) (nil font-lock-face web-mode-html-tag-custom-face 29192 . 29197) (nil tag-name "v-row" 29191 . 29192) (nil tag-type end 29191 . 29192) (nil font-lock-face web-mode-html-tag-bracket-face 29191 . 29192) (nil tag-name "v-row" 29190 . 29191) (nil tag-type end 29190 . 29191) (nil tag-beg 22 29190 . 29191) (nil font-lock-face web-mode-html-tag-bracket-face 29190 . 29191) (29190 . 29198)) nil (25812 52346 225744 851000) 0 nil])
([nil nil ((27378 . 27389)) nil (25812 52346 225740 920000) 0 nil])
([nil nil ((27431 . 27432)) nil (25812 52346 225740 7000) 0 nil])
([nil nil ((27432 . 27445)) nil (25812 52346 225738 795000) 0 nil])
([nil nil ((27445 . 27460)) nil (25812 52346 225737 624000) 0 nil])
([nil nil ((27414 . 27415)) nil (25812 52346 225736 690000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27423 . 27424) (nil tag-attr t 27415 . 27424) (nil tag-name "v-row" 27415 . 27424) (nil tag-type start 27415 . 27424) (nil font-lock-face web-mode-html-attr-value-face 27415 . 27424) (27415 . 27424)) nil (25812 52346 225735 346000) 0 nil])
([nil nil ((27461 . 27466)) nil (25812 52346 225733 327000) 0 nil])
([nil nil ((#("c" 0 1 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-colc")) . -27461) (undo-tree-id1702 . -1) (#("l" 0 1 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-colcl")) . -27462) (undo-tree-id1703 . -1) (#("a" 0 1 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-colcla")) . -27463) (undo-tree-id1704 . -1) (#("s" 0 1 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-colclas")) . -27464) (undo-tree-id1705 . -1) (#("s" 0 1 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-colclass")) . -27465) (undo-tree-id1706 . -1) 27466) nil (25812 52346 225731 370000) 0 nil])
([nil nil ((27461 . 27470)) nil (25812 52346 225722 902000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27477 . 27478) (nil tag-attr t 27469 . 27478) (nil tag-name "v-col" 27469 . 27478) (nil tag-type start 27469 . 27478) (nil font-lock-face web-mode-html-attr-value-face 27469 . 27478) (27469 . 27478)) nil (25812 52346 225721 569000) 0 nil])
([nil nil ((27424 . 27425)) nil (25812 52346 225719 228000) 0 nil])
([nil nil ((#("</v-col>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 1 2 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 2 7 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 7 8 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 27481) (undo-tree-id1700 . -8) (undo-tree-id1701 . -8)) nil (25812 52346 225717 963000) 0 nil])
([nil nil ((29240 . 29251)) nil (25812 52346 225706 41000) 0 nil])
([nil nil ((nil rear-nonsticky nil 29258 . 29259) (nil tag-name "v-col" 29258 . 29259) (nil tag-type end 29258 . 29259) (nil tag-end t 29258 . 29259) (nil font-lock-face web-mode-html-tag-bracket-face 29258 . 29259) (nil tag-name "v-col" 29253 . 29258) (nil tag-type end 29253 . 29258) (nil font-lock-face web-mode-html-tag-custom-face 29253 . 29258) (nil tag-name "v-col" 29252 . 29253) (nil tag-type end 29252 . 29253) (nil font-lock-face web-mode-html-tag-bracket-face 29252 . 29253) (nil tag-name "v-col" 29251 . 29252) (nil tag-type end 29251 . 29252) (nil tag-beg 22 29251 . 29252) (nil font-lock-face web-mode-html-tag-bracket-face 29251 . 29252) (29251 . 29259)) nil (25812 52346 225703 664000) 0 nil])
([nil nil ((29505 . 29507) (29482 . 29486) (29447 . 29463) ("            " . 29447) (29415 . 29433) ("            " . 29415) (29383 . 29403) ("              " . 29383) (29368 . 29374) (29319 . 29343) ("                  " . 29319) (29279 . 29305) ("                    " . 29279) (29223 . 29247) ("                  " . 29223) (29209 . 29215) (29138 . 29158) ("              " . 29138) (29106 . 29126) ("              " . 29106) (29090 . 29096) (29004 . 29028) ("                  " . 29004) (28982 . 28988) (28950 . 28956) (28899 . 28923) ("                  " . 28899) (28864 . 28870) (28785 . 28805) ("              " . 28785) (28765 . 28783) (#("            " 0 12 (tag-type start tag-name "v-treeview")) . 28765) (28722 . 28742) (#("              " 0 14 (tag-type start tag-name "v-treeview")) . 28722) (28696 . 28716) (#("              " 0 14 (tag-type start tag-name "v-treeview")) . 28696) (28662 . 28682) (#("              " 0 14 (tag-type start tag-name "v-treeview")) . 28662) (28632 . 28652) (#("              " 0 14 (tag-type start tag-name "v-treeview")) . 28632) (28600 . 28620) (#("              " 0 14 (tag-type start tag-name "v-treeview")) . 28600) (28566 . 28586) (#("              " 0 14 (tag-type start tag-name "v-treeview")) . 28566) (28524 . 28544) (#("              " 0 14 (tag-type start tag-name "v-treeview")) . 28524) (28469 . 28489) (#("              " 0 14 (tag-type start tag-name "v-treeview")) . 28469) (28424 . 28444) (#("              " 0 14 (tag-type start tag-name "v-treeview")) . 28424) (28380 . 28400) (#("              " 0 14 (tag-type start tag-name "v-treeview")) . 28380) (28339 . 28359) (#("              " 0 14 (tag-type start tag-name "v-treeview")) . 28339) (28309 . 28327) ("            " . 28309) (28267 . 28283) ("            " . 28267) (28237 . 28241) (28214 . 28218) (28179 . 28195) ("            " . 28179) (28144 . 28162) (#("              " 0 14 (tag-type start tag-name "v-text-field")) . 28144) (28102 . 28106) (28072 . 28076) (28039 . 28043) (28014 . 28018) (27950 . 27954) (27906 . 27910) (27847 . 27851) (27799 . 27817) ("              " . 27799) (27720 . 27736) ("            " . 27720) (27695 . 27711) ("            " . 27695) (27606 . 27624) ("              " . 27606) (27527 . 27543) ("            " . 27527) (27492 . 27496) 27390) nil (25812 52346 225691 398000) 0 nil])
([nil nil ((#("          " 0 10 (face whitespace-trailing)) . -27379) 27998) nil (25812 52346 225665 354000) 0 nil])
([nil nil ((#("#" 0 1 (face web-mode-css-selector-tag-face part-side css)) . -112986) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) 112987 (t 25812 52346 261068 486000)) nil (25812 52384 440441 191000) 0 nil])
([nil nil ((112986 . 112987)) nil (25812 52384 440436 205000) 0 nil])
([nil nil ((#("-" 0 1 (face web-mode-css-selector-tag-face part-side css)) . -112986) (undo-tree-id1719 . -1) 112987) nil (25812 52384 440433 772000) 0 nil])
([nil nil ((112986 . 112987)) nil (25812 52384 440418 551000) 0 nil])
([nil nil ((#("red" 0 3 (part-side css)) . 113027) (undo-tree-id1722 . -3) (undo-tree-id1723 . -3) (undo-tree-id1724 . -3) (undo-tree-id1725 . -3) (undo-tree-id1726 . -3) (undo-tree-id1727 . -3) (undo-tree-id1728 . -3) (undo-tree-id1729 . -3) (undo-tree-id1730 . -3) (undo-tree-id1731 . -2) (undo-tree-id1732 . -2) (undo-tree-id1733 . -2) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -3) (undo-tree-id1738 . -3) (t 25812 52384 473186 81000)) nil (25812 52447 498080 397000) 0 nil])
([nil nil ((nil rear-nonsticky nil 113038 . 113039) (nil part-side css 113027 . 113039) (113027 . 113039)) nil (25812 52447 498047 368000) 0 nil])
([nil nil ((#("grey_light_3" 0 11 (part-side css) 11 12 (part-side css rear-nonsticky t)) . 113027) (undo-tree-id1739 . -12) (undo-tree-id1740 . -12) (undo-tree-id1741 . -8) (undo-tree-id1742 . -5) (undo-tree-id1743 . -5) (undo-tree-id1744 . -5) (undo-tree-id1745 . -4) (undo-tree-id1746 . -4) (undo-tree-id1747 . -4) (undo-tree-id1748 . -3) (undo-tree-id1749 . -3) (undo-tree-id1750 . -3) (undo-tree-id1751 . -2) (undo-tree-id1752 . -2) (undo-tree-id1753 . -2) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -12) (undo-tree-id1770 . -12) (t 25812 52447 533381 113000)) nil (25812 52497 549637 516000) 0 nil])
([nil nil ((nil rear-nonsticky nil 113040 . 113041) (nil part-side css 113027 . 113041) (113027 . 113041)) nil (25812 52497 549572 686000) 0 nil])
([nil nil ((27431 . 27432) (t 25812 52497 581536 674000)) nil (25812 52559 794381 593000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27449 . 27450) (nil tag-attr t 27449 . 27450) (nil tag-attr-end 5 27449 . 27450) (nil tag-name "v-row" 27449 . 27450) (nil tag-type start 27449 . 27450) (nil font-lock-face web-mode-html-attr-value-face 27449 . 27450) (nil tag-attr t 27438 . 27449) (nil tag-name "v-row" 27438 . 27449) (nil tag-type start 27438 . 27449) (nil font-lock-face web-mode-html-attr-value-face 27438 . 27449) (nil tag-attr t 27437 . 27438) (nil tag-name "v-row" 27437 . 27438) (nil tag-type start 27437 . 27438) (nil font-lock-face web-mode-html-attr-equal-face 27437 . 27438) (nil tag-attr t 27433 . 27437) (nil tag-name "v-row" 27433 . 27437) (nil tag-type start 27433 . 27437) (nil font-lock-face web-mode-html-attr-name-face 27433 . 27437) (nil tag-attr-beg 0 27432 . 27433) (nil tag-attr t 27432 . 27433) (nil tag-name "v-row" 27432 . 27433) (nil tag-type start 27432 . 27433) (nil font-lock-face web-mode-html-attr-name-face 27432 . 27433) (27432 . 27450)) nil (25812 52559 794379 228000) 0 nil])
([nil nil (("'" . -27451) (undo-tree-id1775 . -1) 27452) nil (25812 52559 794373 479000) 0 nil])
([nil nil ((#("red_dark_3" 0 10 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . 27439) (undo-tree-id1773 . -10) (undo-tree-id1774 . -10)) nil (25812 52559 794370 696000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27452 . 27453) (nil rear-nonsticky t 27452 . 27453) (nil tag-attr t 27452 . 27453) (nil tag-name "v-row" 27452 . 27453) (nil tag-type start 27452 . 27453) (nil font-lock-face web-mode-html-attr-value-face 27452 . 27453) (nil tag-attr t 27439 . 27452) (nil tag-name "v-row" 27439 . 27452) (nil tag-type start 27439 . 27452) (nil font-lock-face web-mode-html-attr-value-face 27439 . 27452) (27439 . 27453)) nil (25812 52559 794366 394000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27443) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) 27444) nil (25812 52559 794361 723000) 0 nil])
([nil nil ((27443 . 27444)) nil (25812 52559 794345 549000) 0 nil])
([nil nil ((#("color=\"grey_lighten-3" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t tag-attr-beg 0) 1 5 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t) 5 6 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-row" tag-attr t) 6 7 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t) 7 20 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t) 20 21 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t rear-nonsticky t)) . 27432) (undo-tree-id1783 . -21) (undo-tree-id1784 . -12) (undo-tree-id1785 . -7) (undo-tree-id1786 . -12) (undo-tree-id1787 . -7) (undo-tree-id1788 . -21) (t 25812 52559 829731 5000)) nil (25812 52602 879988 846000) 0 nil])
([nil nil ((#("\"" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr-end 0 tag-attr t tag-attr-beg 0 rear-nonsticky t)) . 27432)) nil (25812 52615 252693 494000) 0 nil] [nil nil ((#(" " 0 1 (tag-type start tag-name "v-row")) . -27431) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) 27432) ((27431 . 27432)) (25812 52602 878788 926000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-row")) . -27431) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) 27432) nil (25812 52615 252691 887000) 0 nil])
nil
([nil nil ((#(" " 0 1 (part-side css)) . -113030) (undo-tree-id1790 . -1) 113031) nil (25812 52615 252681 2000) 0 nil])
([nil nil ((113030 . 113031)) nil (25812 52615 252678 343000) 0 nil])
([nil nil ((#("-" 0 1 (part-side css)) . 113038)) nil (25812 52615 252677 301000) 0 nil])
([nil nil ((113038 . 113039)) nil (25812 52615 252676 187000) 0 nil])
([nil nil ((#(":" 0 1 (face web-mode-css-property-name-face part-side css)) . -113038) (undo-tree-id1789 . -1) 113039) nil (25812 52615 252673 619000) 0 nil])
([nil nil ((113038 . 113039)) nil (25812 52615 252660 222000) 0 nil])
([nil nil ((27431 . 27441) (t 25812 52615 289904 863000)) nil (25812 52671 1791 15000) 0 nil])
([nil nil ((#("o" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr-end 0 tag-attr t)) . -27435) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (#("l" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr-end 0 tag-attr t)) . -27436) (undo-tree-id1801 . -1) (#("r" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr-end 0 tag-attr t)) . -27437) (undo-tree-id1802 . -1) (#("=" 0 1 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-row" tag-attr-end 6 tag-attr t)) . -27438) (undo-tree-id1803 . -1) (#("\"" 0 1 (tag-type start tag-name "v-row")) . -27439) (undo-tree-id1804 . -1) (#("\"" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr-end 6 tag-attr t)) . 27440)) nil (25812 52671 1786 805000) 0 nil])
([nil nil ((27439 . 27442) (27435 . 27440)) nil (25812 52671 1764 722000) 0 nil])
([nil nil ((nil rear-nonsticky nil 113045 . 113046) (nil part-side css 113042 . 113046) (nil face web-mode-css-variable-face 113042 . 113046) (nil part-side css 113041 . 113042) (nil face (rainbow-delimiters-depth-2-face) 113041 . 113042) (nil part-side css 113038 . 113041) (nil face web-mode-css-function-face 113038 . 113041) (113038 . 113046) (t 25812 52671 38080 224000)) nil (25812 52847 226702 398000) 0 nil])
([nil nil ((113060 . 113061)) nil (25812 52847 226693 293000) 0 nil])
([nil nil ((#("color=\"red\"" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t tag-attr-beg 0) 1 2 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t) 2 3 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t) 3 4 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t) 4 5 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t) 5 6 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-row" tag-attr t) 6 10 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t) 10 11 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr-end 5 tag-attr t)) . 27432) (undo-tree-id1848 . -11) (undo-tree-id1849 . -3) (undo-tree-id1850 . -3) (undo-tree-id1851 . -3) (undo-tree-id1852 . -2) (undo-tree-id1853 . -2) (undo-tree-id1854 . -2) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -11) (undo-tree-id1863 . -11)) nil (25812 52847 226685 897000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-row")) . -27431) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) 27432) nil (25812 52847 226623 144000) 0 nil])
([nil nil ((#("var(--v-grey_lighten_3)" 0 3 (face web-mode-css-function-face part-side css) 3 4 (face (rainbow-delimiters-depth-2-face) part-side css) 4 7 (face web-mode-css-variable-face part-side css) 7 8 (face web-mode-css-variable-face part-side css rear-nonsticky t) 8 12 (face web-mode-css-variable-face part-side css) 12 13 (part-side css) 13 21 (part-side css) 21 22 (part-side css rear-nonsticky t) 22 23 (face (rainbow-delimiters-depth-2-face) part-side css)) . 113026) (undo-tree-id1864 . -23) (undo-tree-id1865 . -22) (undo-tree-id1866 . -22) (undo-tree-id1867 . -22) (undo-tree-id1868 . -22) (undo-tree-id1869 . -23) (undo-tree-id1870 . -23) (undo-tree-id1871 . -23) (undo-tree-id1872 . -23) (t 25812 52847 262637 873000)) nil (25812 52930 179359 390000) 0 nil])
([nil nil ((nil rear-nonsticky nil 113046 . 113047) (nil part-side css 113046 . 113047) (nil face (rainbow-delimiters-depth-2-face) 113046 . 113047) (nil part-side css 113030 . 113046) (nil face web-mode-css-variable-face 113030 . 113046) (nil part-side css 113029 . 113030) (nil face (rainbow-delimiters-depth-2-face) 113029 . 113030) (nil part-side css 113026 . 113029) (nil face web-mode-css-function-face 113026 . 113029) (113026 . 113047)) nil (25812 52930 179330 284000) 0 nil])
([nil nil ((27439 . 27453) (27431 . 27440) (t 25812 52930 214901 745000)) nil (25812 53709 781268 379000) 0 nil])
([nil nil ((27453 . 27465)) nil (25812 53709 781266 951000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27464) (undo-tree-id1881 . -1) 27465) nil (25812 53709 781265 577000) 0 nil])
([nil nil ((27464 . 27466)) nil (25812 53709 781262 330000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27465) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) 27466) nil (25812 53709 781257 152000) 0 nil])
([nil nil ((#("p" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27457) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (#("r" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27458) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (#("i" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27459) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (#("m" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27460) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (#("a" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27461) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (#("r" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27462) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (#("y" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27463) (undo-tree-id1897 . -1) 27464 (t 25812 53709 816970 279000)) nil (25812 53723 78687 673000) 0 nil])
([nil nil ((27457 . 27460)) nil (25812 53723 78654 33000) 0 nil])
([nil nil ((#("style=\"background-color: red;\"" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t tag-attr-beg 0) 1 2 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t) 2 3 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t) 3 4 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t) 4 5 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t) 5 6 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-row" tag-attr t) 6 29 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t) 29 30 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr-end 5 tag-attr t)) . 27432) (undo-tree-id1902 . -30) (undo-tree-id1903 . -25) (undo-tree-id1904 . -28) (undo-tree-id1905 . -30) (t 25812 53723 112965 996000)) nil (25812 54262 37687 266000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-row")) . -27431) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) 27432) nil (25812 54262 37677 67000) 0 nil])
([nil nil ((#("primary-base" 0 12 (face web-mode-css-variable-face part-side css)) . 113034) (undo-tree-id1906 . -12) (undo-tree-id1907 . -12) (undo-tree-id1908 . -12) (t 25812 54262 69398 10000)) nil (25812 54293 471292 451000) 0 nil])
([nil nil ((nil rear-nonsticky nil 113045 . 113046) (nil part-side css 113038 . 113046) (nil part-side css 113034 . 113038) (nil face web-mode-css-variable-face 113034 . 113038) (113034 . 113046)) nil (25812 54293 471273 509000) 0 nil])
([nil nil ((113046 . 113052) (t 25812 54293 509448 260000)) nil (25812 54323 202964 394000) 0 nil])
([nil nil ((#(" " 0 1 (part-side css)) . -113051) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) 113052) nil (25812 54323 202958 899000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27404) (undo-tree-id1939 . -1) 27405 (t 25812 54323 241497 442000)) nil (25812 54371 236448 983000) 0 nil])
([nil nil ((#("a" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . 27405)) nil (25812 54371 236446 443000) 0 nil])
([nil nil ((27405 . 27406)) nil (25812 54371 236445 508000) 0 nil])
([nil nil ((#("d" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27405) (undo-tree-id1938 . -1) 27406) nil (25812 54371 236444 391000) 0 nil])
([nil nil ((27405 . 27406)) nil (25812 54371 236441 994000) 0 nil])
([nil nil ((#("0" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27407) (undo-tree-id1937 . -1) 27408) nil (25812 54371 236440 792000) 0 nil])
([nil nil ((27407 . 27412)) nil (25812 54371 236438 568000) 0 nil])
([nil nil ((#("-" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27409) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (#("p" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27410) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (#("l" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27411) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) 27412) nil (25812 54371 236436 524000) 0 nil])
([nil nil ((27409 . 27421)) nil (25812 54371 236425 546000) 0 nil])
([nil nil ((27421 . 27424)) nil (25812 54371 236424 604000) 0 nil])
([nil nil ((#("2" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27422) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27423) (undo-tree-id1927 . -1) 27424) nil (25812 54371 236422 882000) 0 nil])
([nil nil ((27422 . 27424)) nil (25812 54371 236417 95000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27423) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) 27424) nil (25812 54420 471460 693000) 0 nil])
([nil nil ((#("a" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27425) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) 27426 (t 25812 54421 309669 988000)) nil (25812 54541 433550 82000) 0 nil] [nil nil ((#("rgba(0,0,0,.42)" 0 4 (face web-mode-css-function-face part-side css) 4 5 (face (rainbow-delimiters-depth-2-face) part-side css) 5 14 (part-side css) 14 15 (face (rainbow-delimiters-depth-2-face) part-side css)) . 113086) (undo-tree-id1948 . -15) (undo-tree-id1949 . -15) (t 25812 54371 273580 71000)) ((113086 . 113101)) (25812 54420 152818 451000) 0 nil])
([nil nil ((27425 . 27426)) nil (25812 54541 433537 746000) 0 nil])
([nil nil ((113086 . 113092)) ((#("black " 0 5 (part-side css) 5 6 (part-side css)) . 113086) (undo-tree-id1950 . -4) (undo-tree-id1951 . -6) (undo-tree-id1952 . -5) (undo-tree-id1953 . -5) (undo-tree-id1954 . -5) (undo-tree-id1955 . -5) (undo-tree-id1956 . -5) (undo-tree-id1957 . -5) (undo-tree-id1958 . -5) (undo-tree-id1959 . -5) (undo-tree-id1960 . -5) (undo-tree-id1961 . -5) (undo-tree-id1962 . -5) (undo-tree-id1963 . -5) (undo-tree-id1964 . -6) (undo-tree-id1965 . -6) (undo-tree-id1966 . -6) (undo-tree-id1967 . -6) (undo-tree-id1968 . -6) (undo-tree-id1969 . -6) (undo-tree-id1970 . -6) (undo-tree-id1971 . -6) (undo-tree-id1972 . -6) (undo-tree-id1973 . -6) (undo-tree-id1974 . -6)) (25812 54419 758763 159000) 0 nil])
([nil nil ((#("0" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t rear-nonsticky t)) . 27427)) nil (25812 54541 433535 283000) 0 nil])
([nil nil ((#(" " 0 1 (part-side css)) . -113091) (undo-tree-id1940 . -1) (undo-tree-id1942 . -1) (undo-tree-id1944 . -1) (undo-tree-id1946 . -1) 113092) ((113091 . 113092) (t 25812 54401 173633 354000)) (25812 54401 137040 571000) 0 nil])
([nil nil ((27427 . 27428)) nil (25812 54541 433528 183000) 0 nil])
nil
([nil nil ((27428 . 27434) (t 25812 54541 469899 834000)) nil (25812 54557 456591 701000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -27433) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) 27434) nil (25812 54557 456585 823000) 0 nil])
([nil nil ((#("0" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-dialog" tag-attr t)) . -26797) (undo-tree-id1989 . -1) 26798 (t 25812 54557 493931 798000)) nil (25812 54587 678568 832000) 0 nil])
([nil nil ((26797 . 26798)) nil (25812 54587 678554 498000) 0 nil])
([nil nil ((26803 . 26810) (t 25812 54587 713992 836000)) nil (25812 54660 925518 83000) 0 nil])
([nil nil ((26810 . 26816)) nil (25812 54660 925516 894000) 0 nil])
([nil nil ((#("i" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-dialog" tag-attr-end 0 tag-attr t)) . -26811) (undo-tree-id1999 . -1) (#("g" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-dialog" tag-attr-end 0 tag-attr t)) . -26812) (undo-tree-id2000 . -1) (#("h" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-dialog" tag-attr-end 0 tag-attr t)) . -26813) (undo-tree-id2001 . -1) (#("t" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-dialog" tag-attr-end 0 tag-attr t)) . -26814) (undo-tree-id2002 . -1) (#(" " 0 1 (tag-type start tag-name "v-dialog")) . -26815) (undo-tree-id2003 . -1) 26816) nil (25812 54660 925514 858000) 0 nil])
([nil nil ((26811 . 26820)) nil (25812 54660 925507 319000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-dialog")) . -26816) (undo-tree-id1996 . -1) (#("=" 0 1 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-dialog" tag-attr t)) . -26817) (undo-tree-id1997 . -1) (#("\"" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-dialog" tag-attr t)) . -26818) (undo-tree-id1998 . -1) (#("\"" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-dialog" tag-attr-end 7 tag-attr t)) . 26819)) nil (25812 54660 925505 317000) 0 nil])
([nil nil ((26816 . 26819)) nil (25812 54660 925499 50000) 0 nil])
([nil nil ((26818 . 26823)) nil (25812 54660 925497 577000) 0 nil])
([nil nil ((#("c" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-dialog" tag-attr t)) . -26822) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) 26823) nil (25812 54660 925494 687000) 0 nil])
([nil nil ((26822 . 26823)) nil (25812 54660 925471 865000) 0 nil])
([nil nil ((#("
      height=\"800px\"" 0 1 (tag-type start tag-name "v-dialog") 1 7 (tag-type start tag-name "v-dialog") 7 8 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-dialog" tag-attr t tag-attr-beg 0) 8 9 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-dialog" tag-attr t) 9 10 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-dialog" tag-attr t) 10 11 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-dialog" tag-attr t) 11 12 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-dialog" tag-attr t) 12 13 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-dialog" tag-attr t) 13 14 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-dialog" tag-attr t) 14 20 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-dialog" tag-attr t) 20 21 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-dialog" tag-attr-end 6 tag-attr t)) . 26803) (undo-tree-id2004 . -21) (undo-tree-id2005 . -17) (undo-tree-id2006 . -14) (undo-tree-id2007 . -1) (undo-tree-id2008 . -21) (t 25812 54660 962144 551000)) nil (25812 54689 931618 812000) 0 nil])
([nil nil ((28256 . 28266)) nil (25812 54689 941857 778000) 0 nil])
([nil nil ((28264 . 28270)) nil (25812 54696 11411 679000) 0 nil] [nil nil ((nil rear-nonsticky nil 28284 . 28285) (nil tag-name "v-row" 28284 . 28285) (nil tag-type start 28284 . 28285) (nil tag-name "v-row" 28279 . 28284) (nil tag-type start 28279 . 28284) (nil tag-attr t 28278 . 28279) (nil tag-attr-end 6 28278 . 28279) (nil tag-name "v-row" 28278 . 28279) (nil tag-type start 28278 . 28279) (nil font-lock-face web-mode-html-attr-value-face 28278 . 28279) (nil tag-attr t 28277 . 28278) (nil tag-name "v-row" 28277 . 28278) (nil tag-type start 28277 . 28278) (nil font-lock-face web-mode-html-attr-value-face 28277 . 28278) (nil tag-attr t 28276 . 28277) (nil tag-name "v-row" 28276 . 28277) (nil tag-type start 28276 . 28277) (nil font-lock-face web-mode-html-attr-value-face 28276 . 28277) (nil tag-attr t 28275 . 28276) (nil tag-name "v-row" 28275 . 28276) (nil tag-type start 28275 . 28276) (nil font-lock-face web-mode-html-attr-value-face 28275 . 28276) (nil tag-attr t 28274 . 28275) (nil tag-name "v-row" 28274 . 28275) (nil tag-type start 28274 . 28275) (nil font-lock-face web-mode-html-attr-value-face 28274 . 28275) (nil tag-attr t 28273 . 28274) (nil tag-name "v-row" 28273 . 28274) (nil tag-type start 28273 . 28274) (nil font-lock-face web-mode-html-attr-value-face 28273 . 28274) (nil tag-attr t 28272 . 28273) (nil tag-name "v-row" 28272 . 28273) (nil tag-type start 28272 . 28273) (nil font-lock-face web-mode-html-attr-value-face 28272 . 28273) (nil tag-attr t 28271 . 28272) (nil tag-name "v-row" 28271 . 28272) (nil tag-type start 28271 . 28272) (nil font-lock-face web-mode-html-attr-value-face 28271 . 28272) (nil tag-attr t 28265 . 28271) (nil tag-name "v-row" 28265 . 28271) (nil tag-type start 28265 . 28271) (nil font-lock-face web-mode-html-attr-value-face 28265 . 28271) (nil tag-attr t 28264 . 28265) (nil tag-name "v-row" 28264 . 28265) (nil tag-type start 28264 . 28265) (nil font-lock-face web-mode-html-attr-value-face 28264 . 28265) (28264 . 28285)) ((#("
      height=\"800px\"" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t) 1 7 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t) 7 8 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t) 8 9 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t) 9 10 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t) 10 11 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t) 11 12 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t) 12 13 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t) 13 14 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t) 14 15 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr-end 6 tag-attr t) 15 20 (tag-type start tag-name "v-row") 20 21 (tag-type start tag-name "v-row" rear-nonsticky nil)) . 28264) (undo-tree-id2009 . -21) (undo-tree-id2010 . -1) (nil tag-name "v-row" 28264 . 28265) (nil tag-name "v-row" 28265 . 28271) (nil tag-name "v-row" 28271 . 28272) (nil tag-name "v-row" 28272 . 28273) (nil tag-name "v-row" 28273 . 28274) (nil tag-name "v-row" 28274 . 28275) (nil tag-name "v-row" 28275 . 28276) (nil tag-name "v-row" 28276 . 28277) (nil tag-name "v-row" 28277 . 28278) (nil tag-name "v-row" 28278 . 28279) (nil tag-name "v-row" 28279 . 28284) (nil tag-name "v-row" 28284 . 28285) (nil rear-nonsticky t 28284 . 28285)) (25812 54689 931594 610000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -28269) (undo-tree-id2011 . -1) 28270) nil (25812 54696 11406 162000) 0 nil])
nil
([nil nil ((#("height=\"800px\"" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t tag-attr-beg 0) 1 6 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t) 6 7 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-row" tag-attr t) 7 13 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t) 13 14 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr-end 6 tag-attr t)) . 28256) (undo-tree-id2016 . -14) (undo-tree-id2017 . -10) (undo-tree-id2018 . -8) (undo-tree-id2019 . -14) (t 25812 54696 50218 960000)) nil (25812 54736 173521 187000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-row")) . -28255) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) 28256) nil (25812 54736 173509 437000) 0 nil])
([nil nil ((28316 . 28335)) nil (25812 54736 173492 48000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28439 . 28440) (nil tag-name "v-container" 28439 . 28440) (nil tag-type start 28439 . 28440) (nil tag-end t 28439 . 28440) (nil font-lock-face web-mode-html-tag-bracket-face 28439 . 28440) (nil tag-attr t 28438 . 28439) (nil tag-attr-end 4 28438 . 28439) (nil tag-name "v-container" 28438 . 28439) (nil tag-type start 28438 . 28439) (nil font-lock-face web-mode-html-attr-value-face 28438 . 28439) (nil tag-attr t 28415 . 28438) (nil tag-name "v-container" 28415 . 28438) (nil tag-type start 28415 . 28438) (nil font-lock-face web-mode-html-attr-value-face 28415 . 28438) (nil tag-attr t 28414 . 28415) (nil tag-name "v-container" 28414 . 28415) (nil tag-type start 28414 . 28415) (nil font-lock-face web-mode-html-attr-equal-face 28414 . 28415) (nil tag-attr t 28411 . 28414) (nil tag-name "v-container" 28411 . 28414) (nil tag-type start 28411 . 28414) (nil font-lock-face web-mode-html-attr-engine-face 28411 . 28414) (nil tag-attr-beg 2 28410 . 28411) (nil tag-attr t 28410 . 28411) (nil tag-name "v-container" 28410 . 28411) (nil tag-type start 28410 . 28411) (nil font-lock-face web-mode-html-attr-engine-face 28410 . 28411) (nil tag-name "v-container" 28409 . 28410) (nil tag-type start 28409 . 28410) (nil tag-attr t 28408 . 28409) (nil tag-attr-end 5 28408 . 28409) (nil tag-name "v-container" 28408 . 28409) (nil tag-type start 28408 . 28409) (nil font-lock-face web-mode-html-attr-value-face 28408 . 28409) (nil tag-attr t 28379 . 28408) (nil tag-name "v-container" 28379 . 28408) (nil tag-type start 28379 . 28408) (nil font-lock-face web-mode-html-attr-value-face 28379 . 28408) (nil tag-attr t 28378 . 28379) (nil tag-name "v-container" 28378 . 28379) (nil tag-type start 28378 . 28379) (nil font-lock-face web-mode-html-attr-equal-face 28378 . 28379) (nil tag-attr t 28374 . 28378) (nil tag-name "v-container" 28374 . 28378) (nil tag-type start 28374 . 28378) (nil font-lock-face web-mode-html-attr-name-face 28374 . 28378) (nil tag-attr-beg 0 28373 . 28374) (nil tag-attr t 28373 . 28374) (nil tag-name "v-container" 28373 . 28374) (nil tag-type start 28373 . 28374) (nil font-lock-face web-mode-html-attr-name-face 28373 . 28374) (nil tag-name "v-container" 28372 . 28373) (nil tag-type start 28372 . 28373) (nil tag-attr t 28371 . 28372) (nil tag-attr-end 5 28371 . 28372) (nil tag-name "v-container" 28371 . 28372) (nil tag-type start 28371 . 28372) (nil font-lock-face web-mode-html-attr-value-face 28371 . 28372) (nil tag-attr t 28366 . 28371) (nil tag-name "v-container" 28366 . 28371) (nil tag-type start 28366 . 28371) (nil font-lock-face web-mode-html-attr-value-face 28366 . 28371) (nil tag-attr t 28365 . 28366) (nil tag-name "v-container" 28365 . 28366) (nil tag-type start 28365 . 28366) (nil font-lock-face web-mode-html-attr-equal-face 28365 . 28366) (nil tag-attr t 28361 . 28365) (nil tag-name "v-container" 28361 . 28365) (nil tag-type start 28361 . 28365) (nil font-lock-face web-mode-html-attr-name-face 28361 . 28365) (nil tag-attr-beg 0 28360 . 28361) (nil tag-attr t 28360 . 28361) (nil tag-name "v-container" 28360 . 28361) (nil tag-type start 28360 . 28361) (nil font-lock-face web-mode-html-attr-name-face 28360 . 28361) (nil tag-name "v-container" 28359 . 28360) (nil tag-type start 28359 . 28360) (nil tag-name "v-container" 28348 . 28359) (nil tag-type start 28348 . 28359) (nil font-lock-face web-mode-html-tag-custom-face 28348 . 28359) (nil tag-name "v-container" 28347 . 28348) (nil tag-type start 28347 . 28348) (nil tag-beg 19 28347 . 28348) (nil font-lock-face web-mode-html-tag-bracket-face 28347 . 28348) (28335 . 28440)) nil (25812 54736 173482 100000) 0 nil])
([nil nil ((29578 . 29597)) nil (25812 54736 173442 606000) 0 nil])
([nil nil ((29579 . 29609) ("                  " . 29579) (29597 . 29611)) nil (25812 54736 173439 539000) 0 nil])
([nil nil (("            " . -29643) (29609 . 29611) (29577 . 29579) (29524 . 29548) ("                      " . 29524) (29513 . 29515) (29473 . 29475) (29413 . 29415) (29357 . 29381) ("                      " . 29357) (29320 . 29322) (29286 . 29288) (29232 . 29256) ("                      " . 29232) (29184 . 29186) (29120 . 29144) ("                      " . 29120) (29086 . 29110) ("                      " . 29086) (29073 . 29075) (28996 . 29020) ("                      " . 28996) (28951 . 28953) (28927 . 28929) (28884 . 28886) (28856 . 28858) (28820 . 28822) (28788 . 28790) (28754 . 28756) (28718 . 28720) (28674 . 28676) (28617 . 28619) (28570 . 28572) (28524 . 28526) (28481 . 28483) (28447 . 28449) ("            " . -28335) 28275) nil (25812 54736 173424 618000) 0 nil])
([nil nil ((#("v-if=\"filter_selections_tree\"" 0 1 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-container" tag-attr t tag-attr-beg 2) 1 4 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-container" tag-attr t) 4 5 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-container" tag-attr t) 5 28 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-container" tag-attr t) 28 29 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-container" tag-attr-end 4 tag-attr t)) . 28398) (undo-tree-id2057 . -29) (undo-tree-id2058 . -29) (t 25812 54736 210305 390000)) nil (25812 54756 502961 964000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-container")) . -28397) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) 28398) nil (25812 54756 502940 58000) 0 nil])
([nil nil ((#("6" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-container" tag-attr t)) . -28375) (undo-tree-id2059 . -1) (#("7" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-container" tag-attr t)) . -28376) (undo-tree-id2060 . -1) (#("0" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-container" tag-attr t)) . -28377) (undo-tree-id2061 . -1) 28378 (t 25812 54756 538349 617000)) nil (25812 54772 476111 150000) 0 nil])
([nil nil ((28375 . 28378)) nil (25812 54772 476092 479000) 0 nil])
([nil nil ((28234 . 28249) (t 25812 54772 510384 581000)) nil (25812 54814 394117 661000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28271 . 28272) (nil tag-name "v-divider" 28271 . 28272) (nil tag-type end 28271 . 28272) (nil tag-end t 28271 . 28272) (nil font-lock-face web-mode-html-tag-bracket-face 28271 . 28272) (nil tag-name "v-divider" 28262 . 28271) (nil tag-type end 28262 . 28271) (nil font-lock-face web-mode-html-tag-custom-face 28262 . 28271) (nil tag-name "v-divider" 28261 . 28262) (nil tag-type end 28261 . 28262) (nil font-lock-face web-mode-html-tag-bracket-face 28261 . 28262) (nil tag-name "v-divider" 28260 . 28261) (nil tag-type end 28260 . 28261) (nil tag-beg 22 28260 . 28261) (nil font-lock-face web-mode-html-tag-bracket-face 28260 . 28261) (nil tag-name "v-divider" 28259 . 28260) (nil tag-type start 28259 . 28260) (nil tag-end t 28259 . 28260) (nil font-lock-face web-mode-html-tag-bracket-face 28259 . 28260) (nil tag-name "v-divider" 28250 . 28259) (nil tag-type start 28250 . 28259) (nil font-lock-face web-mode-html-tag-custom-face 28250 . 28259) (nil tag-name "v-divider" 28249 . 28250) (nil tag-type start 28249 . 28250) (nil tag-beg 18 28249 . 28250) (nil font-lock-face web-mode-html-tag-bracket-face 28249 . 28250) (28249 . 28272)) nil (25812 54814 394108 994000) 0 nil])
([nil nil ((29056 . 29083) (t 25812 54814 430477 199000)) nil (25812 54898 773082 573000) 0 nil])
([nil nil ((nil rear-nonsticky nil 29127 . 29128) (nil block-side t 29127 . 29128) (nil block-end t 29127 . 29128) (nil block-token delimiter-end 29127 . 29128) (nil face (rainbow-delimiters-depth-1-face) 29127 . 29128) (nil block-side t 29126 . 29127) (nil block-token delimiter-end 29126 . 29127) (nil face (rainbow-delimiters-depth-2-face) 29126 . 29127) (nil block-side t 29124 . 29126) (nil block-side t 29123 . 29124) (nil block-side t 29122 . 29123) (nil block-side t 29121 . 29122) (nil block-side t 29120 . 29121) (nil block-side t 29119 . 29120) (nil block-side t 29118 . 29119) (nil block-side t 29117 . 29118) (nil block-side t 29116 . 29117) (nil block-side t 29115 . 29116) (nil block-side t 29114 . 29115) (nil block-side t 29109 . 29114) (nil block-side t 29108 . 29109) (nil block-side t 29107 . 29108) (nil block-side t 29106 . 29107) (nil block-side t 29105 . 29106) (nil block-side t 29104 . 29105) (nil block-side t 29103 . 29104) (nil block-side t 29102 . 29103) (nil block-side t 29101 . 29102) (nil block-side t 29100 . 29101) (nil block-side t 29099 . 29100) (nil block-side t 29098 . 29099) (nil block-side t 29097 . 29098) (nil block-side t 29096 . 29097) (nil block-side t 29095 . 29096) (nil block-side t 29094 . 29095) (nil block-side t 29090 . 29094) (nil block-side t 29089 . 29090) (nil block-side t 29088 . 29089) (nil block-side t 29087 . 29088) (nil block-side t 29086 . 29087) (nil block-side t 29085 . 29086) (nil block-side t 29084 . 29085) (nil block-token delimiter-beg 29084 . 29085) (nil face (rainbow-delimiters-depth-2-face) 29084 . 29085) (nil block-beg 0 29083 . 29084) (nil block-controls 0 29083 . 29084) (nil block-side t 29083 . 29084) (nil block-token delimiter-beg 29083 . 29084) (nil face (rainbow-delimiters-depth-1-face) 29083 . 29084) (29083 . 29128)) nil (25812 54898 773078 707000) 0 nil])
([nil nil ((#("{{ open ? 'mdi-folder-open' : 'mdi-folder' }}" 0 1 (face (rainbow-delimiters-depth-1-face) block-token delimiter-beg block-side t block-controls 0 block-beg 0) 1 2 (face (rainbow-delimiters-depth-2-face) block-token delimiter-beg block-side t) 2 3 (block-side t) 3 4 (block-side t) 4 5 (block-side t) 5 6 (block-side t) 6 7 (block-side t) 7 11 (block-side t) 11 12 (block-side t) 12 13 (block-side t) 13 14 (block-side t) 14 15 (block-side t) 15 16 (block-side t) 16 17 (block-side t) 17 18 (block-side t) 18 19 (block-side t) 19 20 (block-side t) 20 21 (block-side t) 21 22 (block-side t) 22 23 (block-side t) 23 24 (block-side t) 24 25 (block-side t) 25 26 (block-side t) 26 31 (block-side t) 31 32 (block-side t) 32 33 (block-side t) 33 34 (block-side t) 34 35 (block-side t) 35 36 (block-side t) 36 37 (block-side t) 37 38 (block-side t) 38 39 (block-side t) 39 40 (block-side t) 40 41 (block-side t) 41 43 (block-side t) 43 44 (face (rainbow-delimiters-depth-2-face) block-token delimiter-end block-side t) 44 45 (face (rainbow-delimiters-depth-1-face) block-token delimiter-end block-end t block-side t)) . 29266) (undo-tree-id2078 . -45) (undo-tree-id2079 . -45)) nil (25812 54898 773066 304000) 0 nil])
([nil nil ((29266 . 29276)) nil (25812 54898 773062 466000) 0 nil])
([nil nil (("                          mdi-filter" . 29129) (undo-tree-id2073 . -36) (undo-tree-id2074 . -36) (undo-tree-id2075 . -36) (undo-tree-id2076 . -36) (undo-tree-id2077 . -36)) nil (25812 54898 773060 300000) 0 nil])
([nil nil (("
" . -29128) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) 29129) nil (25812 54898 773049 482000) 0 nil])
([nil nil ((108039 . 108048) (t 25812 54898 806667 36000)) nil (25812 56796 36815 484000) 0 nil])
([nil nil ((108048 . 108049)) nil (25812 56796 36814 103000) 0 nil])
([nil nil ((#("h" 0 1 (part-side javascript)) . -108048) (undo-tree-id2092 . -1) 108049) nil (25812 56796 36812 848000) 0 nil])
([nil nil ((108048 . 108053)) nil (25812 56796 36810 647000) 0 nil])
([nil nil ((nil rear-nonsticky nil 108063 . 108064) (nil part-side javascript 108053 . 108064) (108053 . 108064)) nil (25812 56796 36809 247000) 0 nil])
([nil nil ((108064 . 108067)) nil (25812 56796 36807 397000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -108066) (undo-tree-id2091 . -1) 108067) nil (25812 56796 36806 164000) 0 nil])
([nil nil ((108066 . 108067)) nil (25812 56796 36803 698000) 0 nil])
([nil nil ((108039 . 108048)) nil (25812 56796 36802 475000) 0 nil])
([nil nil ((108048 . 108050)) nil (25812 56796 36800 880000) 0 nil])
([nil nil ((#("v" 0 1 (part-side javascript)) . -108048) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (#("a" 0 1 (part-side javascript)) . -108049) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) 108050) nil (25812 56796 36799 123000) 0 nil])
([nil nil ((108064 . 108066) (#("[" 0 1 (face (rainbow-delimiters-depth-5-face) part-side javascript)) . -108064) (108064 . 108065) (108063 . 108065) (#("[" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -108063) (108048 . 108064)) nil (25812 56796 36791 749000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-5-face) part-side javascript)) . -108064) (undo-tree-id2086 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-5-face) part-side javascript)) . 108065)) nil (25812 56796 36788 840000) 0 nil])
([nil nil ((108064 . 108065)) nil (25812 56796 36786 332000) 0 nil])
([nil nil ((108093 . 108103)) nil (25812 56796 36785 232000) 0 nil])
([nil nil ((#(" " 0 1 (face whitespace-trailing part-side javascript)) . -108102) (undo-tree-id2085 . -1) 108103) nil (25812 56796 36783 972000) 0 nil])
([nil nil ((108103 . 108111) (#(" " 0 1 (face whitespace-trailing part-side javascript)) . 108103) (108102 . 108103)) nil (25812 56796 36780 932000) 0 nil])
([nil nil ((108111 . 108115)) nil (25812 56796 36779 516000) 0 nil])
([nil nil ((108115 . 108126)) nil (25812 56796 36777 857000) 0 nil])
([nil nil ((#("=" 0 1 (part-side javascript)) . -108125) (undo-tree-id2084 . -1) 108126) nil (25812 56796 36773 392000) 0 nil])
([nil nil ((108125 . 108128)) nil (25812 56796 36765 687000) 0 nil])
([nil nil ((108039 . 108048)) nil (25812 56796 36763 336000) 0 nil])
([nil nil ((108048 . 108056)) nil (25812 56796 36761 532000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -108055) (undo-tree-id2083 . -1) 108056) nil (25812 56796 36757 511000) 0 nil])
([nil nil ((108055 . 108060)) nil (25812 56796 36753 352000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -108059) (undo-tree-id2082 . -1) 108060) nil (25812 56796 36751 432000) 0 nil])
([nil nil ((108060 . 108075) (108059 . 108061) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -108059) (108059 . 108060)) nil (25812 56796 36746 690000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -108074) (undo-tree-id2081 . -1) 108075) nil (25812 56796 36742 633000) 0 nil])
([nil nil ((108164 . 108173)) nil (25812 56796 36736 650000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -108172) (undo-tree-id2080 . -1) 108173) nil (25812 56796 36729 565000) 0 nil])
([nil nil ((108075 . 108084) (t 25812 56796 72504 599000)) nil (25812 56836 396255 517000) 0 nil])
([nil nil ((108088 . 108092) (108087 . 108089) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -108087) (108084 . 108088)) nil (25812 56836 396254 115000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -108091) (undo-tree-id2097 . -1) 108092) nil (25812 56836 396252 380000) 0 nil])
([nil nil ((108093 . 108095) (#("{" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -108093) (108092 . 108094)) nil (25812 56836 396250 28000) 0 nil])
([nil nil ((108094 . 108103)) nil (25812 56836 396248 612000) 0 nil])
([nil nil ((#("        const fil = val[0]
" 0 8 (part-side javascript) 8 13 (face web-mode-keyword-face part-side javascript) 13 14 (part-side javascript) 14 17 (face web-mode-variable-name-face part-side javascript) 17 19 (part-side javascript) 19 23 (part-side javascript) 23 24 (face (rainbow-delimiters-depth-4-face) part-side javascript) 24 25 (part-side javascript) 25 26 (face (rainbow-delimiters-depth-4-face) part-side javascript) 26 27 (part-side javascript)) . 108132) (108122 . 108132) (#("        }
" 0 8 (part-side javascript) 8 9 (face (rainbow-delimiters-depth-4-face) part-side javascript) 9 10 (part-side javascript)) . 108095) (undo-tree-id2096 . -8) (108105 . 108132) 108103) nil (25812 56836 396247 229000) 0 nil])
([nil nil ((#("        this.filter_name = fil.path
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 13 (part-side javascript) 13 23 (part-side javascript) 23 24 (part-side javascript rear-nonsticky t) 24 26 (part-side javascript) 26 36 (part-side javascript)) . 108168) (undo-tree-id2094 . -13) (108158 . 108168) (#("        }
" 0 8 (part-side javascript) 8 9 (face (rainbow-delimiters-depth-4-face) part-side javascript) 9 10 (part-side javascript)) . 108122) (undo-tree-id2095 . -8) (108132 . 108168) 108130) nil (25812 56836 396243 576000) 0 nil])
([nil nil ((#("        this.save_root = fil.root
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 22 (part-side javascript) 22 24 (part-side javascript) 24 33 (part-side javascript) 33 34 (part-side javascript)) . 108202) (108192 . 108202) (#("        }
" 0 8 (part-side javascript) 8 9 (face (rainbow-delimiters-depth-4-face) part-side javascript) 9 10 (part-side javascript)) . 108158) (undo-tree-id2093 . -8) (108168 . 108202) 108166) nil (25812 56836 396238 250000) 0 nil])
([nil nil ((108103 . 108105)) nil (25812 56836 396226 793000) 0 nil])
([nil nil ((108132 . 108134) 108134) nil (25812 56836 396224 912000) 0 nil])
([nil nil ((108170 . 108172) 108174) nil (25812 56836 396217 39000) 0 nil])
([nil nil ((28435 . 28443) (t 25812 56836 436619 388000)) nil (25812 56909 387851 81000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28452 . 28453) (nil rear-nonsticky t 28452 . 28453) (nil tag-attr t 28452 . 28453) (nil tag-name "v-container" 28452 . 28453) (nil tag-type start 28452 . 28453) (nil font-lock-face web-mode-html-attr-value-face 28452 . 28453) (nil tag-attr t 28451 . 28452) (nil tag-name "v-container" 28451 . 28452) (nil tag-type start 28451 . 28452) (nil font-lock-face web-mode-html-attr-value-face 28451 . 28452) (nil tag-attr t 28450 . 28451) (nil tag-name "v-container" 28450 . 28451) (nil tag-type start 28450 . 28451) (nil font-lock-face web-mode-html-attr-value-face 28450 . 28451) (nil tag-attr t 28449 . 28450) (nil tag-name "v-container" 28449 . 28450) (nil tag-type start 28449 . 28450) (nil font-lock-face web-mode-html-attr-value-face 28449 . 28450) (nil tag-attr t 28448 . 28449) (nil tag-name "v-container" 28448 . 28449) (nil tag-type start 28448 . 28449) (nil font-lock-face web-mode-html-attr-value-face 28448 . 28449) (nil tag-attr t 28447 . 28448) (nil tag-name "v-container" 28447 . 28448) (nil tag-type start 28447 . 28448) (nil font-lock-face web-mode-html-attr-value-face 28447 . 28448) (nil tag-attr t 28446 . 28447) (nil tag-name "v-container" 28446 . 28447) (nil tag-type start 28446 . 28447) (nil font-lock-face web-mode-html-attr-value-face 28446 . 28447) (nil tag-attr t 28445 . 28446) (nil tag-name "v-container" 28445 . 28446) (nil tag-type start 28445 . 28446) (nil font-lock-face web-mode-html-attr-value-face 28445 . 28446) (nil tag-attr t 28444 . 28445) (nil tag-name "v-container" 28444 . 28445) (nil tag-type start 28444 . 28445) (nil font-lock-face web-mode-html-attr-value-face 28444 . 28445) (nil tag-attr t 28443 . 28444) (nil tag-name "v-container" 28443 . 28444) (nil tag-type start 28443 . 28444) (nil font-lock-face web-mode-html-attr-value-face 28443 . 28444) (nil tag-attr t 28442 . 28443) (nil tag-name "v-container" 28442 . 28443) (nil tag-type start 28442 . 28443) (nil font-lock-face web-mode-html-attr-value-face 28442 . 28443) (28442 . 28453)) nil (25812 56909 387841 189000) 0 nil])
([nil nil ((108110 . 108122) (t 25812 56909 424825 737000)) nil (25812 57005 61759 104000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -108121) (undo-tree-id2111 . -1) 108122) nil (25812 57005 61757 476000) 0 nil])
([nil nil ((108237 . 108246)) nil (25812 57005 61754 663000) 0 nil])
([nil nil ((108246 . 108248)) nil (25812 57005 61753 584000) 0 nil])
([nil nil ((108251 . 108253) (#("{" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -108251) (108248 . 108252)) nil (25812 57005 61752 137000) 0 nil])
([nil nil ((108254 . 108262) (#("          " 0 10 (face whitespace-trailing part-side javascript)) . 108253) (undo-tree-id2109 . -8) (undo-tree-id2110 . 10) (108261 . 108263) (108252 . 108262)) nil (25812 57005 61750 295000) 0 nil])
([nil nil ((108253 . 108263)) nil (25812 57005 61746 179000) 0 nil])
([nil nil ((nil rear-nonsticky nil 108289 . 108290) (nil part-side javascript 108281 . 108290) (nil part-side javascript 108279 . 108281) (nil rear-nonsticky t 108278 . 108279) (nil part-side javascript 108278 . 108279) (nil part-side javascript 108268 . 108278) (nil part-side javascript 108267 . 108268) (nil part-side javascript 108263 . 108267) (nil face web-mode-constant-face 108263 . 108267) (108263 . 108290)) nil (25812 57005 61744 606000) 0 nil])
([nil nil ((#("f" 0 1 (part-side javascript)) . -108282) (undo-tree-id2101 . -1) (#("i" 0 1 (part-side javascript)) . -108283) (undo-tree-id2102 . -1) (#("l" 0 1 (part-side javascript)) . -108284) (undo-tree-id2103 . -1) (#("." 0 1 (part-side javascript)) . -108285) (undo-tree-id2104 . -1) (#("p" 0 1 (part-side javascript)) . -108286) (undo-tree-id2105 . -1) (#("a" 0 1 (part-side javascript)) . -108287) (undo-tree-id2106 . -1) (#("t" 0 1 (part-side javascript)) . -108288) (undo-tree-id2107 . -1) (#("h" 0 1 (part-side javascript rear-nonsticky t)) . -108289) (undo-tree-id2108 . -1) 108290) nil (25812 57005 61739 857000) 0 nil])
([nil nil ((nil part-token string 108283 . 108284) (nil font-lock-face web-mode-javascript-string-face 108283 . 108284) (nil part-side javascript 108283 . 108284) (108282 . 108284) (#("\"" 0 1 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript)) . -108282) (108282 . 108283)) nil (25812 57005 61727 254000) 0 nil])
([nil nil ((108284 . 108295)) nil (25812 57005 61725 28000) 0 nil])
([nil nil ((108295 . 108305)) nil (25812 57005 61723 908000) 0 nil])
([nil nil ((#("b" 0 1 (part-side javascript)) . -108303) (undo-tree-id2099 . -1) (#("e" 0 1 (part-side javascript)) . -108304) (undo-tree-id2100 . -1) 108305) nil (25812 57005 61721 975000) 0 nil])
([nil nil ((108303 . 108317)) nil (25812 57005 61716 596000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -108316) (undo-tree-id2098 . -1) 108317) nil (25812 57497 545609 634000) 0 nil])
([nil nil ((73964 . 73965)) nil (25812 57506 365059 284000) 0 nil] [nil nil ((74105 . 74114) (74061 . 74070) (74013 . 74022) (73959 . 73968) (73925 . 74148) (#("this.save_filter_dialog = true
        this.filter_name = this.lastInsertedFilter
        this.save_root = this.prev_save_root
        // Wait for ref to properly work
        setTimeout(() => { this.$refs.saveFilterTextField.focus() }, 200)" 0 4 (face web-mode-constant-face part-side javascript) 4 26 (part-side javascript) 26 30 (face web-mode-constant-face part-side javascript) 30 39 (part-side javascript) 39 43 (face web-mode-constant-face part-side javascript) 43 58 (part-side javascript) 58 62 (face web-mode-constant-face part-side javascript) 62 90 (part-side javascript) 90 94 (face web-mode-constant-face part-side javascript) 94 107 (part-side javascript) 107 111 (face web-mode-constant-face part-side javascript) 111 135 (part-side javascript) 135 136 (font-lock-face web-mode-javascript-comment-face syntax-table (11) part-token comment part-side javascript) 136 143 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 143 146 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 146 167 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 167 168 (syntax-table (12) part-side javascript) 168 176 (part-side javascript) 176 186 (face web-mode-function-call-face part-side javascript) 186 187 (face (rainbow-delimiters-depth-4-face) part-side javascript) 187 188 (face (rainbow-delimiters-depth-5-face) part-side javascript) 188 189 (face (rainbow-delimiters-depth-5-face) part-side javascript) 189 193 (part-side javascript) 193 194 (face (rainbow-delimiters-depth-5-face) part-side javascript) 194 195 (part-side javascript) 195 199 (face web-mode-constant-face part-side javascript) 199 226 (part-side javascript) 226 231 (face web-mode-function-call-face part-side javascript) 231 232 (face (rainbow-delimiters-depth-6-face) part-side javascript) 232 233 (face (rainbow-delimiters-depth-6-face) part-side javascript) 233 234 (part-side javascript) 234 235 (face (rainbow-delimiters-depth-5-face) part-side javascript) 235 240 (part-side javascript) 240 241 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . 73925) (undo-tree-id2120 . -241) (undo-tree-id2121 . -23) (undo-tree-id2122 . -167) (undo-tree-id2123 . -31) (undo-tree-id2124 . -241) (t 25812 57479 66400 481000)) ((73925 . 74166) (#("/* this.save_filter_dialog = true
* this.filter_name = this.lastInsertedFilter
* this.save_root = this.prev_save_root
* // Wait for ref to properly work
* setTimeout(() => { this.$refs.saveFilterTextField.focus() }, 200) */" 0 1 (font-lock-face web-mode-javascript-comment-face syntax-table (11) part-token comment part-side javascript) 1 3 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 3 7 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 7 29 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 29 33 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 33 36 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 36 40 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 40 55 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 55 59 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 59 81 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 81 85 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 85 98 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 98 102 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 102 128 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 128 131 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 131 155 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 155 165 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 165 174 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 174 178 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 178 205 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 205 210 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 210 223 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . 73925) (undo-tree-id2126 . -34) (#("         " 0 9 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . 73959) (#("         " 0 9 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . 74013) (#("         " 0 9 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . 74061) (#("         " 0 9 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . 74105) (t 25812 57486 82419 618000)) (25812 57486 47020 229000) 0 nil] [nil nil ((73927 . 73936) (73907 . 73916) (73891 . 73900) (73862 . 73871) (73829 . 73838) (73737 . 73746) (73700 . 73709) (73667 . 73879) (#("if (this.checkFilterType()) {
          this.msg_objects.push({
            message: [this.$t('AnalysisNetwork.aggregation_save'), 'mdi-alert-outline'],
            color: '#E65100',
            timeout: 5000
          })
          return
        }" 0 2 (face web-mode-keyword-face part-side javascript) 2 3 (part-side javascript) 3 4 (face (rainbow-delimiters-depth-4-face) part-side javascript) 4 8 (face web-mode-constant-face part-side javascript) 8 9 (part-side javascript) 9 24 (face web-mode-function-call-face part-side javascript) 24 25 (face (rainbow-delimiters-depth-5-face) part-side javascript) 25 26 (face (rainbow-delimiters-depth-5-face) part-side javascript) 26 27 (face (rainbow-delimiters-depth-4-face) part-side javascript) 27 28 (part-side javascript) 28 29 (face (rainbow-delimiters-depth-4-face) part-side javascript) 29 40 (part-side javascript) 40 44 (face web-mode-constant-face part-side javascript) 44 57 (part-side javascript) 57 61 (face web-mode-function-call-face part-side javascript) 61 62 (face (rainbow-delimiters-depth-5-face) part-side javascript) 62 63 (face (rainbow-delimiters-depth-6-face) part-side javascript) 63 76 (part-side javascript) 76 83 (face web-mode-variable-name-face part-side javascript) 83 85 (part-side javascript) 85 86 (face (rainbow-delimiters-depth-7-face) part-side javascript) 86 90 (face web-mode-constant-face part-side javascript) 90 93 (part-side javascript) 93 94 (face (rainbow-delimiters-depth-8-face) part-side javascript) 94 95 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 95 127 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 127 128 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 128 129 (face (rainbow-delimiters-depth-8-face) part-side javascript) 129 131 (part-side javascript) 131 132 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 132 149 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 149 150 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 150 151 (face (rainbow-delimiters-depth-7-face) part-side javascript) 151 165 (part-side javascript) 165 170 (face web-mode-variable-name-face part-side javascript) 170 172 (part-side javascript) 172 173 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 173 180 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 180 181 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 181 195 (part-side javascript) 195 202 (face web-mode-variable-name-face part-side javascript) 202 219 (part-side javascript) 219 220 (face (rainbow-delimiters-depth-6-face) part-side javascript) 220 221 (face (rainbow-delimiters-depth-5-face) part-side javascript) 221 232 (part-side javascript) 232 238 (face web-mode-keyword-face part-side javascript) 238 247 (part-side javascript) 247 248 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . 73667) (undo-tree-id2112 . -248) (undo-tree-id2113 . -208) (undo-tree-id2114 . -248) (undo-tree-id2115 . -248) (undo-tree-id2116 . -30) (undo-tree-id2117 . -248) (t 25812 57005 97094 142000)) ((73667 . 73915) (#("/* if (this.checkFilterType()) {
*   this.msg_objects.push({
*     message: [this.$t('AnalysisNetwork.aggregation_save'), 'mdi-alert-outline'],
*     color: '#E65100',
*     timeout: 5000
*   })
*   return
* } */" 0 1 (font-lock-face web-mode-javascript-comment-face syntax-table (11) part-token comment part-side javascript) 1 3 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 3 5 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 5 7 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 7 11 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 11 12 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 12 27 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 27 37 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 37 41 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 41 54 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 54 58 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 58 67 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 67 74 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 74 77 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 77 81 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 81 150 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 150 155 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 155 174 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 174 181 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 181 199 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 199 205 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 205 212 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . 73667) (undo-tree-id2119 . -33) (#("         " 0 9 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . 73700) (#("         " 0 9 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . 73737) (#("         " 0 9 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . 73829) (#("         " 0 9 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . 73862) (#("         " 0 9 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . 73891) (#("         " 0 9 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . 73907) (#("         " 0 9 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . 73927) (t 25812 57459 582347 315000)) (25812 57459 547519 846000) 0 nil])
([nil nil ((#("#" 0 1 (part-side javascript)) . -73964) (undo-tree-id2127 . -1) 73965) nil (25812 57739 107668 62000) 0 nil])
nil
nil
([nil nil ((44338 . 44339) (#("[" 0 1 (face (rainbow-delimiters-depth-5-face) part-side javascript)) . 44334) (44333 . 44334) (44333 . 44334)) nil (25812 57748 522484 73000) 0 nil] [nil nil ((#("
                      @update:active=\"insert_filterpath\"" 0 23 (tag-type start tag-name "v-treeview") 23 24 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-treeview" tag-attr t tag-attr-beg 2) 24 30 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-treeview" tag-attr t) 30 31 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t block-controls 0 block-beg 0) 31 32 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 32 33 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 33 34 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 34 35 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 35 36 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 36 37 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 37 38 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 38 39 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 39 40 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 40 41 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 41 42 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 42 43 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 43 44 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 44 45 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 45 46 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 46 47 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 47 48 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 48 49 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 49 50 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 50 51 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 51 52 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 52 53 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 53 54 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 54 55 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 55 56 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 56 57 (tag-type start tag-name "v-treeview" tag-attr-end 14 tag-attr t block-token delimiter-end block-end t block-side t)) . 28623) (undo-tree-id2171 . -57) (undo-tree-id2172 . -1) (undo-tree-id2173 . -57) (undo-tree-id2174 . -57)) ((28623 . 28680) (t 25812 57720 503056 896000)) (25812 57720 460027 241000) 0 nil] [nil nil ((#("
                      :search=\"search_filter\"" 0 23 (tag-type start tag-name "v-treeview") 23 24 (tag-type start tag-name "v-treeview" tag-attr t tag-attr-beg 2 block-token delimiter-beg block-side t block-controls 0 block-beg 0) 24 25 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 25 26 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 26 27 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 27 28 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 28 29 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 29 30 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 30 31 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 31 32 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 32 33 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 33 34 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 34 35 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 35 36 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 36 37 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 37 38 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 38 39 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 39 40 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 40 41 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 41 42 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 42 43 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 43 44 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 44 45 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 45 46 (tag-type start tag-name "v-treeview" tag-attr-end 7 tag-attr t block-token delimiter-end block-end t block-side t)) . 28530) (undo-tree-id2168 . -46) (undo-tree-id2169 . -1) (undo-tree-id2170 . -46)) ((28530 . 28576) (t 25812 57708 3023 3000)) (25812 57707 960310 552000) 0 nil] [nil nil ((#("
                      :search=\"search_filter\"
                      :active=\"chosen_saveref\"
                      @update:active=\"insert_filterpath\"" 0 23 (tag-type start tag-name "v-treeview") 23 24 (tag-type start tag-name "v-treeview" tag-attr t tag-attr-beg 2 block-token delimiter-beg block-side t block-controls 0 block-beg 0) 24 25 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 25 26 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 26 27 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 27 28 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 28 29 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 29 30 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 30 31 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 31 32 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 32 33 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 33 34 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 34 35 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 35 36 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 36 37 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 37 38 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 38 39 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 39 40 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 40 41 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 41 42 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 42 43 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 43 44 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 44 45 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 45 46 (tag-type start tag-name "v-treeview" tag-attr-end 7 tag-attr t block-token delimiter-end block-end t block-side t) 46 69 (tag-type start tag-name "v-treeview") 69 70 (tag-type start tag-name "v-treeview" tag-attr t tag-attr-beg 2 block-token delimiter-beg block-side t block-controls 0 block-beg 0) 70 71 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 71 72 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 72 73 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 73 74 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 74 75 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 75 76 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 76 77 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 77 78 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 78 79 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 79 80 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 80 81 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 81 82 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 82 83 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 83 84 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 84 85 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 85 86 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 86 87 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 87 88 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 88 89 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 89 90 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 90 91 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 91 92 (tag-type start tag-name "v-treeview" tag-attr t block-side t rear-nonsticky t) 92 93 (tag-type start tag-name "v-treeview" tag-attr-end 7 tag-attr t block-token delimiter-end block-end t block-side t) 93 116 (tag-type start tag-name "v-treeview") 116 117 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-treeview" tag-attr t tag-attr-beg 2) 117 123 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-treeview" tag-attr t) 123 124 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t block-controls 0 block-beg 0) 124 125 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 125 126 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 126 127 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 127 128 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 128 129 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 129 130 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 130 131 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 131 132 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 132 133 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 133 134 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 134 135 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 135 136 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 136 137 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 137 138 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 138 139 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 139 140 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 140 141 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 141 142 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 142 143 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 143 144 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 144 145 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 145 146 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 146 147 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 147 148 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 148 149 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 149 150 (tag-type start tag-name "v-treeview" tag-attr-end 14 tag-attr t block-token delimiter-end block-end t block-side t)) . 28530) (undo-tree-id2164 . -150) (undo-tree-id2165 . -1) (undo-tree-id2166 . -93) (undo-tree-id2167 . -150)) ((28530 . 28680) (t 25812 57689 482972 771000)) (25812 57689 443420 398000) 0 nil] [nil nil ((#("nul" 0 3 (face web-mode-constant-face part-side javascript)) . 44303) (undo-tree-id2144 . -3) (undo-tree-id2145 . -3)) ((44303 . 44306)) (25812 57664 835212 661000) 0 nil] [nil nil ((29672 . 29697) (#("                    " 0 20 (font-lock-face web-mode-comment-face tag-type comment)) . 29672) (29635 . 29660) (#("                      " 0 22 (font-lock-face web-mode-comment-face tag-type comment)) . 29635) (29625 . 29626) (#(" " 0 1 (font-lock-face web-mode-comment-face tag-type comment)) . -29592) (#("   " 0 3 (font-lock-face web-mode-comment-face tag-type comment)) . -29553) (#(" " 0 1 (font-lock-face web-mode-comment-face tag-type comment)) . -29496) (29462 . 29463) (29378 . 29403) (#("                      " 0 22 (font-lock-face web-mode-comment-face tag-type comment)) . 29378) (29341 . 29366) (#("                      " 0 22 (font-lock-face web-mode-comment-face tag-type comment)) . 29341) (29330 . 29331) (#(" " 0 1 (font-lock-face web-mode-comment-face tag-type comment)) . -29295) (29253 . 29254) (29218 . 29219) (#(" " 0 1 (font-lock-face web-mode-comment-face tag-type comment)) . -29148) (29093 . 29094) (29001 . 29026) (#("                      " 0 22 (font-lock-face web-mode-comment-face tag-type comment)) . 29001) (28974 . 28999) (#("                    " 0 20 (font-lock-face web-mode-comment-face tag-type comment)) . 28974) (28926 . 28951) (#("                      " 0 22 (font-lock-face web-mode-comment-face tag-type comment)) . 28926) (28895 . 28920) (#("                      " 0 22 (font-lock-face web-mode-comment-face tag-type comment)) . 28895) (28856 . 28881) (#("                      " 0 22 (font-lock-face web-mode-comment-face tag-type comment)) . 28856) (28821 . 28846) (#("                      " 0 22 (font-lock-face web-mode-comment-face tag-type comment)) . 28821) (28784 . 28809) (#("                      " 0 22 (font-lock-face web-mode-comment-face tag-type comment)) . 28784) (28745 . 28770) (#("                      " 0 22 (font-lock-face web-mode-comment-face tag-type comment)) . 28745) (28698 . 28723) (#("                      " 0 22 (font-lock-face web-mode-comment-face tag-type comment)) . 28698) (28638 . 28663) (#("                      " 0 22 (font-lock-face web-mode-comment-face tag-type comment)) . 28638) (28588 . 28613) (#("                      " 0 22 (font-lock-face web-mode-comment-face tag-type comment)) . 28588) (28539 . 28564) (#("                      " 0 22 (font-lock-face web-mode-comment-face tag-type comment)) . 28539) (28493 . 28518) (#("                      " 0 22 (font-lock-face web-mode-comment-face tag-type comment)) . 28493) (28476 . 29660) (#("<v-treeview
                      :items=\"filter_tree\"
                      :search=\"search_filter\"
                      :active=\"chosen_saveref\"
                      @update:active=\"insert_filterpath\"
                      selection-type=\"leaf\"
                      open-on-click
                      activatable
                      hoverable
                      return-object
                      dense
                      class=\"filterTreeView\"
                    >
                      <template v-slot:prepend=\"{ item, open }\">
                        <v-icon v-if=\"!item.filter\">
                          {{ open ? 'mdi-folder-open' : 'mdi-folder' }}
                        </v-icon>
                        <v-icon v-else>
                          mdi-filter
                        </v-icon>
                      </template>
                      <template v-slot:label=\"{ item }\">
                        <v-row>
                          <v-col style=\" display: flex;\">
                            {{item.name}}
                          </v-col>
                        </v-row>
                      </template>
                    </v-treeview>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-treeview") 1 11 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-treeview") 11 34 (tag-type start tag-name "v-treeview") 34 35 (tag-type start tag-name "v-treeview" tag-attr t tag-attr-beg 2 block-token delimiter-beg block-side t block-controls 0 block-beg 0) 35 36 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 36 37 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 37 38 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 38 39 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 39 40 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 40 41 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 41 42 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 42 43 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 43 44 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 44 45 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 45 46 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 46 47 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 47 48 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 48 49 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 49 50 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 50 51 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 51 52 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 52 53 (tag-type start tag-name "v-treeview" tag-attr t block-side t rear-nonsticky t) 53 54 (tag-type start tag-name "v-treeview" tag-attr-end 6 tag-attr t block-token delimiter-end block-end t block-side t) 54 77 (tag-type start tag-name "v-treeview") 77 78 (tag-type start tag-name "v-treeview" tag-attr t tag-attr-beg 2 block-token delimiter-beg block-side t block-controls 0 block-beg 0) 78 79 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 79 80 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 80 81 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 81 82 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 82 83 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 83 84 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 84 85 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 85 86 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 86 87 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 87 88 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 88 89 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 89 90 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 90 91 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 91 92 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 92 93 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 93 94 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 94 95 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 95 96 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 96 97 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 97 98 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 98 99 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 99 100 (tag-type start tag-name "v-treeview" tag-attr-end 7 tag-attr t block-token delimiter-end block-end t block-side t) 100 123 (tag-type start tag-name "v-treeview") 123 124 (tag-type start tag-name "v-treeview" tag-attr t tag-attr-beg 2 block-token delimiter-beg block-side t block-controls 0 block-beg 0) 124 125 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 125 126 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 126 127 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 127 128 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 128 129 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 129 130 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 130 131 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 131 132 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 132 133 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 133 134 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 134 135 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 135 136 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 136 137 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 137 138 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 138 139 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 139 140 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 140 141 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 141 142 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 142 143 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 143 144 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 144 145 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 145 146 (tag-type start tag-name "v-treeview" tag-attr t block-side t rear-nonsticky t) 146 147 (tag-type start tag-name "v-treeview" tag-attr-end 7 tag-attr t block-token delimiter-end block-end t block-side t) 147 170 (tag-type start tag-name "v-treeview") 170 171 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-treeview" tag-attr t tag-attr-beg 2) 171 177 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-treeview" tag-attr t) 177 178 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t block-controls 0 block-beg 0) 178 179 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 179 180 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 180 181 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 181 182 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 182 183 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 183 184 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 184 185 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 185 186 (tag-type start tag-name "v-treeview" tag-attr t block-token delimiter-beg block-side t) 186 187 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 187 188 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 188 189 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 189 190 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 190 191 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 191 192 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 192 193 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 193 194 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 194 195 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 195 196 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 196 197 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 197 198 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 198 199 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 199 200 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 200 201 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 201 202 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 202 203 (tag-type start tag-name "v-treeview" tag-attr t block-side t) 203 204 (tag-type start tag-name "v-treeview" tag-attr-end 14 tag-attr t block-token delimiter-end block-end t block-side t) 204 227 (tag-type start tag-name "v-treeview") 227 228 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-treeview" tag-attr t tag-attr-beg 0) 228 241 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-treeview" tag-attr t) 241 242 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-treeview" tag-attr t) 242 247 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-treeview" tag-attr t) 247 248 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-treeview" tag-attr-end 14 tag-attr t) 248 271 (tag-type start tag-name "v-treeview") 271 272 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-treeview" tag-attr t tag-attr-beg 0) 272 283 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-treeview" tag-attr t) 283 284 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-treeview" tag-attr-end 0 tag-attr t) 284 307 (tag-type start tag-name "v-treeview") 307 308 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-treeview" tag-attr t tag-attr-beg 0) 308 317 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-treeview" tag-attr t) 317 318 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-treeview" tag-attr-end 0 tag-attr t) 318 341 (tag-type start tag-name "v-treeview") 341 342 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-treeview" tag-attr t tag-attr-beg 0) 342 349 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-treeview" tag-attr t) 349 350 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-treeview" tag-attr-end 0 tag-attr t) 350 373 (tag-type start tag-name "v-treeview") 373 374 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-treeview" tag-attr t tag-attr-beg 0) 374 385 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-treeview" tag-attr t) 385 386 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-treeview" tag-attr-end 0 tag-attr t) 386 409 (tag-type start tag-name "v-treeview") 409 410 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-treeview" tag-attr t tag-attr-beg 0) 410 413 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-treeview" tag-attr t) 413 414 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-treeview" tag-attr-end 0 tag-attr t) 414 437 (tag-type start tag-name "v-treeview") 437 438 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-treeview" tag-attr t tag-attr-beg 0) 438 442 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-treeview" tag-attr t) 442 443 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-treeview" tag-attr t) 443 458 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-treeview" tag-attr t) 458 459 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-treeview" tag-attr-end 5 tag-attr t) 459 480 (tag-type start tag-name "v-treeview") 480 481 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-treeview" rear-nonsticky t) 504 505 (font-lock-face web-mode-html-tag-bracket-face tag-beg 17 tag-type start tag-name "template") 505 513 (font-lock-face web-mode-html-tag-face tag-type start tag-name "template") 513 514 (tag-type start tag-name "template") 514 515 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "template" tag-attr t tag-attr-beg 2) 515 520 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "template" tag-attr t) 520 521 (tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t block-controls 0 block-beg 0) 521 522 (tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 522 523 (tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 523 524 (tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 524 525 (tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 525 526 (tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 526 527 (tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 527 528 (tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 528 529 (tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 529 530 (tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 530 532 (tag-type start tag-name "template" tag-attr t block-side t) 532 533 (tag-type start tag-name "template" tag-attr t block-side t) 533 534 (tag-type start tag-name "template" tag-attr t block-side t) 534 535 (tag-type start tag-name "template" tag-attr t block-side t) 535 536 (tag-type start tag-name "template" tag-attr t block-side t) 536 538 (tag-type start tag-name "template" tag-attr t block-side t) 538 539 (tag-type start tag-name "template" tag-attr t block-side t) 539 540 (tag-type start tag-name "template" tag-attr t block-side t) 540 541 (tag-type start tag-name "template" tag-attr t block-side t) 541 542 (tag-type start tag-name "template" tag-attr t block-side t) 542 544 (tag-type start tag-name "template" tag-attr t block-side t) 544 545 (tag-type start tag-name "template" tag-attr-end 14 tag-attr t block-token delimiter-end block-end t block-side t) 545 546 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "template") 571 572 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-icon") 572 578 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-icon") 578 579 (tag-type start tag-name "v-icon") 579 580 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-icon" tag-attr t tag-attr-beg 2) 580 583 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-icon" tag-attr t) 583 584 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-icon" tag-attr t) 584 585 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-icon" tag-attr t) 585 596 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-icon" tag-attr t) 596 597 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-icon" tag-attr t rear-nonsticky t) 597 598 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-icon" tag-attr-end 4 tag-attr t) 598 599 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-icon") 626 627 (face (rainbow-delimiters-depth-1-face) block-token delimiter-beg block-side t block-controls 0 block-beg 0) 627 628 (face (rainbow-delimiters-depth-2-face) block-token delimiter-beg block-side t) 628 669 (block-side t) 669 670 (face (rainbow-delimiters-depth-2-face) block-token delimiter-end block-side t) 670 671 (face (rainbow-delimiters-depth-1-face) block-token delimiter-end block-end t block-side t rear-nonsticky t) 696 697 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-icon") 697 698 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-icon") 698 704 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-icon") 704 705 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-icon") 730 731 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-icon") 731 737 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-icon") 737 738 (tag-type start tag-name "v-icon") 738 739 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-icon" tag-attr t tag-attr-beg 2) 739 743 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-icon" tag-attr t) 743 744 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-icon" tag-attr-end 0 tag-attr t) 744 745 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-icon") 807 808 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-icon") 808 809 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-icon") 809 815 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-icon") 815 816 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-icon") 839 840 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "template") 840 841 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "template") 841 849 (font-lock-face web-mode-html-tag-face tag-type end tag-name "template") 849 850 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "template") 873 874 (font-lock-face web-mode-html-tag-bracket-face tag-beg 17 tag-type start tag-name "template") 874 882 (font-lock-face web-mode-html-tag-face tag-type start tag-name "template") 882 883 (tag-type start tag-name "template") 883 884 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "template" tag-attr t tag-attr-beg 2) 884 889 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "template" tag-attr t) 889 890 (tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t block-controls 0 block-beg 0) 890 891 (tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 891 892 (tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 892 893 (tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 893 894 (tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 894 895 (tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 895 896 (tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 896 897 (tag-type start tag-name "template" tag-attr t block-token delimiter-beg block-side t) 897 899 (tag-type start tag-name "template" tag-attr t block-side t) 899 900 (tag-type start tag-name "template" tag-attr t block-side t) 900 901 (tag-type start tag-name "template" tag-attr t block-side t) 901 902 (tag-type start tag-name "template" tag-attr t block-side t) 902 903 (tag-type start tag-name "template" tag-attr t block-side t) 903 905 (tag-type start tag-name "template" tag-attr t block-side t) 905 906 (tag-type start tag-name "template" tag-attr-end 12 tag-attr t block-token delimiter-end block-end t block-side t) 906 907 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "template") 932 933 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-row") 933 938 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-row") 938 939 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-row") 966 967 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-col") 967 972 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-col") 972 973 (tag-type start tag-name "v-col") 973 974 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t tag-attr-beg 0) 974 978 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t) 978 979 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-col" tag-attr t) 979 995 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t) 995 996 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr-end 5 tag-attr t) 996 997 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-col") 1026 1027 (face (rainbow-delimiters-depth-1-face) block-token delimiter-beg block-side t block-controls 0 block-beg 0) 1027 1028 (face (rainbow-delimiters-depth-2-face) block-token delimiter-beg block-side t) 1028 1029 (block-side t) 1029 1030 (block-side t) 1030 1031 (block-side t) 1031 1032 (block-side t) 1032 1033 (block-side t) 1033 1034 (block-side t) 1034 1035 (block-side t) 1035 1036 (block-side t) 1036 1037 (block-side t) 1037 1038 (face (rainbow-delimiters-depth-2-face) block-token delimiter-end block-side t) 1038 1039 (face (rainbow-delimiters-depth-1-face) block-token delimiter-end block-end t block-side t) 1066 1067 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 1067 1068 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 1068 1073 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 1073 1074 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col") 1099 1100 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 1100 1101 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 1101 1106 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 1106 1107 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row") 1130 1131 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "template") 1131 1132 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "template") 1132 1140 (font-lock-face web-mode-html-tag-face tag-type end tag-name "template") 1140 1141 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "template" rear-nonsticky t) 1162 1163 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-treeview") 1163 1164 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-treeview") 1164 1174 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-treeview") 1174 1175 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-treeview")) . 28476) (undo-tree-id2137 . -1175) (undo-tree-id2138 . -11) (undo-tree-id2139 . -671) (undo-tree-id2140 . -284) (undo-tree-id2141 . -12) (undo-tree-id2142 . -1175) (t 25812 57516 906503 641000)) ((28476 . 29651) (#("<!-- <v-treeview
                      :items=\"filter_tree\"
                      :search=\"search_filter\"
                      :active=\"chosen_saveref\"
                      @update:active=\"insert_filterpath\"
                      selection-type=\"leaf\"
                      open-on-click
                      activatable
                      hoverable
                      return-object
                      dense
                      class=\"filterTreeView\"
                    >
                      <template v-slot:prepend=\"{ item, open }\">
                        <v-icon v-if=\"!item.filter\">
                          {{ open ? 'mdi-folder-open' : 'mdi-folder' }}
                        </v-icon>
                        <v-icon v-else>
                          mdi-filter
                        </v-icon>
                      </template>
                      <template v-slot:label=\"{ item }\">
                        <v-row>
                          <v-col style=\" display: flex;\">
                            {{item.name}}
                          </v-col>
                        </v-row>
                      </template>
                    </v-treeview> -->" 0 1 (font-lock-face web-mode-comment-face tag-beg 0 tag-type comment) 1 17 (font-lock-face web-mode-comment-face tag-type comment) 17 39 (font-lock-face web-mode-comment-face tag-type comment) 39 40 (tag-type comment block-token delimiter-beg block-side t block-controls 0 block-beg 0) 40 47 (tag-type comment block-token delimiter-beg block-side t) 47 58 (tag-type comment block-side t) 58 59 (tag-type comment block-token delimiter-end block-end t block-side t) 59 60 (font-lock-face web-mode-comment-face tag-type comment) 60 82 (font-lock-face web-mode-comment-face tag-type comment) 82 83 (tag-type comment block-token delimiter-beg block-side t block-controls 0 block-beg 0) 83 91 (tag-type comment block-token delimiter-beg block-side t) 91 104 (tag-type comment block-side t) 104 105 (tag-type comment block-token delimiter-end block-end t block-side t) 105 106 (font-lock-face web-mode-comment-face tag-type comment) 106 128 (font-lock-face web-mode-comment-face tag-type comment) 128 129 (tag-type comment block-token delimiter-beg block-side t block-controls 0 block-beg 0) 129 137 (tag-type comment block-token delimiter-beg block-side t) 137 151 (tag-type comment block-side t) 151 152 (tag-type comment block-token delimiter-end block-end t block-side t) 152 153 (font-lock-face web-mode-comment-face tag-type comment) 153 175 (font-lock-face web-mode-comment-face tag-type comment) 175 182 (font-lock-face web-mode-comment-face tag-type comment) 182 183 (tag-type comment block-token delimiter-beg block-side t block-controls 0 block-beg 0) 183 191 (tag-type comment block-token delimiter-beg block-side t) 191 208 (tag-type comment block-side t) 208 209 (tag-type comment block-token delimiter-end block-end t block-side t) 209 210 (font-lock-face web-mode-comment-face tag-type comment) 210 232 (font-lock-face web-mode-comment-face tag-type comment) 232 254 (font-lock-face web-mode-comment-face tag-type comment) 254 276 (font-lock-face web-mode-comment-face tag-type comment) 276 290 (font-lock-face web-mode-comment-face tag-type comment) 290 312 (font-lock-face web-mode-comment-face tag-type comment) 312 324 (font-lock-face web-mode-comment-face tag-type comment) 324 346 (font-lock-face web-mode-comment-face tag-type comment) 346 356 (font-lock-face web-mode-comment-face tag-type comment) 356 378 (font-lock-face web-mode-comment-face tag-type comment) 378 392 (font-lock-face web-mode-comment-face tag-type comment) 392 414 (font-lock-face web-mode-comment-face tag-type comment) 414 420 (font-lock-face web-mode-comment-face tag-type comment) 420 442 (font-lock-face web-mode-comment-face tag-type comment) 442 465 (font-lock-face web-mode-comment-face tag-type comment) 465 485 (font-lock-face web-mode-comment-face tag-type comment) 485 487 (font-lock-face web-mode-comment-face tag-type comment) 487 509 (font-lock-face web-mode-comment-face tag-type comment) 509 525 (font-lock-face web-mode-comment-face tag-type comment) 525 526 (tag-type comment block-token delimiter-beg block-side t block-controls 0 block-beg 0) 526 535 (tag-type comment block-token delimiter-beg block-side t) 535 549 (tag-type comment block-side t) 549 550 (tag-type comment block-token delimiter-end block-end t block-side t) 550 630 (font-lock-face web-mode-comment-face tag-type comment) 630 631 (font-lock-face web-mode-comment-face tag-type comment) 631 632 (face (rainbow-delimiters-depth-1-face) tag-type comment block-token delimiter-beg block-side t block-controls 0 block-beg 0) 632 633 (face (rainbow-delimiters-depth-2-face) tag-type comment block-token delimiter-beg block-side t) 633 674 (tag-type comment block-side t) 674 675 (face (rainbow-delimiters-depth-2-face) tag-type comment block-token delimiter-end block-side t) 675 676 (face (rainbow-delimiters-depth-1-face) tag-type comment block-token delimiter-end block-end t block-side t) 676 776 (font-lock-face web-mode-comment-face tag-type comment) 776 777 (font-lock-face web-mode-comment-face tag-type comment) 777 822 (font-lock-face web-mode-comment-face tag-type comment) 822 844 (font-lock-face web-mode-comment-face tag-type comment) 844 856 (font-lock-face web-mode-comment-face tag-type comment) 856 878 (font-lock-face web-mode-comment-face tag-type comment) 878 894 (font-lock-face web-mode-comment-face tag-type comment) 894 895 (tag-type comment block-token delimiter-beg block-side t block-controls 0 block-beg 0) 895 902 (tag-type comment block-token delimiter-beg block-side t) 902 910 (tag-type comment block-side t) 910 911 (tag-type comment block-token delimiter-end block-end t block-side t) 911 970 (font-lock-face web-mode-comment-face tag-type comment) 970 971 (font-lock-face web-mode-comment-face tag-type comment) 971 1028 (font-lock-face web-mode-comment-face tag-type comment) 1028 1031 (font-lock-face web-mode-comment-face tag-type comment) 1031 1032 (face (rainbow-delimiters-depth-1-face) tag-type comment block-token delimiter-beg block-side t block-controls 0 block-beg 0) 1032 1033 (face (rainbow-delimiters-depth-2-face) tag-type comment block-token delimiter-beg block-side t) 1033 1042 (tag-type comment block-side t) 1042 1043 (face (rainbow-delimiters-depth-2-face) tag-type comment block-token delimiter-end block-side t) 1043 1044 (face (rainbow-delimiters-depth-1-face) tag-type comment block-token delimiter-end block-end t block-side t) 1044 1070 (font-lock-face web-mode-comment-face tag-type comment) 1070 1071 (font-lock-face web-mode-comment-face tag-type comment) 1071 1113 (font-lock-face web-mode-comment-face tag-type comment) 1113 1135 (font-lock-face web-mode-comment-face tag-type comment) 1135 1147 (font-lock-face web-mode-comment-face tag-type comment) 1147 1167 (font-lock-face web-mode-comment-face tag-type comment) 1167 1183 (font-lock-face web-mode-comment-face tag-type comment) 1183 1184 (font-lock-face web-mode-comment-face tag-end t tag-type comment)) . 28476) (undo-tree-id2143 . -17) (28493 . 28515) (#("                         " 0 25 (font-lock-face web-mode-comment-face tag-type comment)) . 28493) (28539 . 28561) (#("                         " 0 25 (font-lock-face web-mode-comment-face tag-type comment)) . 28539) (28588 . 28610) (#("                         " 0 25 (font-lock-face web-mode-comment-face tag-type comment)) . 28588) (28638 . 28660) (#("                         " 0 25 (font-lock-face web-mode-comment-face tag-type comment)) . 28638) (28698 . 28720) (#("                         " 0 25 (font-lock-face web-mode-comment-face tag-type comment)) . 28698) (28745 . 28767) (#("                         " 0 25 (font-lock-face web-mode-comment-face tag-type comment)) . 28745) (28784 . 28806) (#("                         " 0 25 (font-lock-face web-mode-comment-face tag-type comment)) . 28784) (28821 . 28843) (#("                         " 0 25 (font-lock-face web-mode-comment-face tag-type comment)) . 28821) (28856 . 28878) (#("                         " 0 25 (font-lock-face web-mode-comment-face tag-type comment)) . 28856) (28895 . 28917) (#("                         " 0 25 (font-lock-face web-mode-comment-face tag-type comment)) . 28895) (28926 . 28948) (#("                         " 0 25 (font-lock-face web-mode-comment-face tag-type comment)) . 28926) (28974 . 28994) (#("                         " 0 25 (font-lock-face web-mode-comment-face tag-type comment)) . 28974) (29001 . 29023) (#("                         " 0 25 (font-lock-face web-mode-comment-face tag-type comment)) . 29001) (#(" " 0 1 (font-lock-face web-mode-comment-face tag-type comment)) . 29093) (29148 . 29149) (#(" " 0 1 (font-lock-face web-mode-comment-face tag-type comment)) . 29218) (#(" " 0 1 (font-lock-face web-mode-comment-face tag-type comment)) . 29253) (29295 . 29296) (#(" " 0 1 (font-lock-face web-mode-comment-face tag-type comment)) . 29330) (29341 . 29363) (#("                         " 0 25 (font-lock-face web-mode-comment-face tag-type comment)) . 29341) (29378 . 29400) (#("                         " 0 25 (font-lock-face web-mode-comment-face tag-type comment)) . 29378) (#(" " 0 1 (font-lock-face web-mode-comment-face tag-type comment)) . 29462) (29496 . 29497) (29553 . 29556) (29592 . 29593) (#(" " 0 1 (font-lock-face web-mode-comment-face tag-type comment)) . 29625) (29635 . 29657) (#("                         " 0 25 (font-lock-face web-mode-comment-face tag-type comment)) . 29635) (29672 . 29692) (#("                         " 0 25 (font-lock-face web-mode-comment-face tag-type comment)) . 29672) (t 25812 57611 534761 120000)) (25812 57611 497844 217000) 0 nil] [nil nil ((73964 . 73967)) ((#("// " 0 1 (font-lock-face web-mode-javascript-comment-face syntax-table (11) part-token comment part-side javascript) 1 3 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . 73964)) (25812 57515 883490 856000) 0 nil])
([nil nil ((#("l" 0 1 (part-side javascript)) . 44334) (undo-tree-id2175 . -1) (#("l" 0 1 (part-side javascript)) . 44334) (#("u" 0 1 (part-side javascript)) . 44334) (#("n" 0 1 (face web-mode-constant-face part-side javascript)) . 44334)) nil (25812 57748 522477 370000) 0 nil])
nil
nil
nil
([nil nil ((#("l" 0 1 (part-side javascript)) . 44303)) ((44303 . 44304)) (25812 57664 524319 653000) 0 nil])
nil
([nil nil ((74018 . 74021)) ((#("// " 0 1 (font-lock-face web-mode-javascript-comment-face syntax-table (11) part-token comment part-side javascript) 1 3 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . 74018)) (25812 57515 658289 833000) 0 nil])
([nil nil ((44603 . 44610) (t 25812 57748 559132 939000)) nil (25813 63341 984740 677000) 0 nil])
([nil nil ((44303 . 44305) (#("\"" 0 1 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript)) . -44303) (44303 . 44304)) ((#("\"" 0 1 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript)) . 44303) (44303 . 44304) (#("\"\"" 0 1 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 1 2 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript)) . 44303) (undo-tree-id2146 . -1) (undo-tree-id2147 . -2) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (t 25812 57655 734881 181000)) (25812 57655 696406 104000) 0 nil])
([nil nil ((74107 . 74110)) ((#("// " 0 1 (font-lock-face web-mode-javascript-comment-face syntax-table (11) part-token comment part-side javascript) 1 3 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . 74107) (undo-tree-id2128 . -3) (undo-tree-id2129 . -3) (undo-tree-id2130 . -3) (undo-tree-id2131 . -3) (undo-tree-id2132 . -3) (undo-tree-id2133 . -3) (undo-tree-id2134 . -3) (undo-tree-id2135 . -3) (undo-tree-id2136 . -3) (t 25812 57506 398475 6000)) (25812 57506 365038 740000) 0 nil])
([nil nil ((nil rear-nonsticky nil 44620 . 44621) (nil part-side javascript 44610 . 44621) (44610 . 44621)) nil (25813 63341 984739 351000) 0 nil])
nil
nil
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 44633) (44632 . 44633) (44631 . 44633) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-3-face))) . -44631) (44621 . 44632)) nil (25813 63341 984737 447000) 0 nil])
([nil nil ((44632 . 44643)) nil (25813 63341 984735 638000) 0 nil])
([nil nil ((#("O" 0 1 (part-side javascript)) . -44640) (undo-tree-id24 . -1) (#("l" 0 1 (part-side javascript)) . -44641) (undo-tree-id25 . -1) (#("d" 0 1 (part-side javascript)) . -44642) (undo-tree-id26 . -1) 44643) nil (25813 63341 984734 68000) 0 nil])
([nil nil ((44640 . 44647)) nil (25813 63341 984729 365000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -44646) (undo-tree-id23 . -1) 44647) nil (25813 63341 984728 289000) 0 nil])
([nil nil ((44648 . 44650) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-3-face))) . -44648) (44647 . 44649)) nil (25813 63341 984725 891000) 0 nil])
([nil nil ((44651 . 44657) (#("        " 0 8 (part-side javascript face whitespace-trailing)) . 44650) (undo-tree-id21 . 8) (44650 . 44658) (#("      " 0 6 (part-side javascript)) . 44650) (undo-tree-id22 . -6) (44649 . 44657)) nil (25813 63341 984723 898000) 0 nil])
([nil nil ((44658 . 44659)) nil (25813 63341 984719 673000) 0 nil])
([nil nil ((44650 . 44658)) nil (25813 63341 984718 791000) 0 nil])
([nil nil ((44658 . 44661)) nil (25813 63341 984717 802000) 0 nil])
([nil nil ((#("newVal, oldVal" 0 14 (part-side javascript)) . 44632) (undo-tree-id18 . -11) (undo-tree-id19 . -14) (undo-tree-id20 . -14)) nil (25813 63341 984716 509000) 0 nil])
([nil nil ((44632 . 44635)) nil (25813 63341 984712 288000) 0 nil])
([nil nil ((44650 . 44657)) nil (25813 63341 984711 348000) 0 nil])
([nil nil ((44657 . 44662)) nil (25813 63341 984710 443000) 0 nil])
([nil nil ((nil rear-nonsticky nil 44675 . 44676) (nil part-side javascript 44675 . 44676) (nil part-side javascript 44674 . 44675) (nil part-side javascript 44673 . 44674) (nil part-side javascript 44672 . 44673) (nil part-side javascript 44671 . 44672) (nil part-side javascript 44670 . 44671) (nil part-side javascript 44669 . 44670) (nil part-side javascript 44668 . 44669) (nil part-side javascript 44667 . 44668) (nil part-side javascript 44666 . 44667) (nil part-side javascript 44665 . 44666) (nil part-side javascript 44664 . 44665) (nil part-side javascript 44663 . 44664) (nil part-side javascript 44662 . 44663) (44662 . 44676)) nil (25813 63341 984708 665000) 0 nil])
([nil nil ((44677 . 44678) (44676 . 44678) (#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -44676) (44676 . 44677)) nil (25813 63341 984704 301000) 0 nil])
([nil nil ((#("1" 0 1 (part-side javascript)) . -44677) (undo-tree-id17 . -1) 44678) nil (25813 63341 984702 481000) 0 nil])
([nil nil ((44677 . 44678)) nil (25813 63341 984700 109000) 0 nil])
([nil nil ((44679 . 44685)) nil (25813 63341 984699 185000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -44684) (undo-tree-id16 . -1) 44685) nil (25813 63341 984698 11000) 0 nil])
([nil nil ((44684 . 44685)) nil (25813 63341 984695 784000) 0 nil])
([nil nil ((44650 . 44652) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -44650) (44650 . 44651)) nil (25813 63341 984694 694000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 44651)) nil (25813 63341 984693 174000) 0 nil])
([nil nil ((44687 . 44689) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -44687) (44686 . 44688)) nil (25813 63341 984691 934000) 0 nil])
([nil nil ((44690 . 44698) (#("          " 0 10 (part-side javascript face whitespace-trailing)) . 44689) (undo-tree-id14 . -8) (undo-tree-id15 . 10) (44697 . 44699) (44688 . 44698)) nil (25813 63341 984690 55000) 0 nil])
([nil nil ((44689 . 44699)) nil (25813 63341 984685 916000) 0 nil])
([nil nil ((44699 . 44704)) nil (25813 63341 984684 956000) 0 nil])
([nil nil ((nil rear-nonsticky nil 44717 . 44718) (nil part-side javascript 44717 . 44718) (nil part-side javascript 44716 . 44717) (nil part-side javascript 44715 . 44716) (nil part-side javascript 44714 . 44715) (nil part-side javascript 44713 . 44714) (nil part-side javascript 44712 . 44713) (nil part-side javascript 44711 . 44712) (nil part-side javascript 44710 . 44711) (nil part-side javascript 44709 . 44710) (nil part-side javascript 44708 . 44709) (nil part-side javascript 44707 . 44708) (nil part-side javascript 44706 . 44707) (nil part-side javascript 44705 . 44706) (nil part-side javascript 44704 . 44705) (44704 . 44718)) nil (25813 63341 984683 183000) 0 nil])
([nil nil ((44721 . 44723) (#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-5-face))) . -44721) (44718 . 44722)) nil (25813 63341 984678 622000) 0 nil])
([nil nil ((100770 . 100779)) nil (25813 63341 984677 103000) 0 nil])
([nil nil ((100779 . 100784)) nil (25813 63341 984675 970000) 0 nil])
([nil nil ((nil rear-nonsticky nil 100807 . 100808) (nil part-side javascript 100807 . 100808) (nil face (rainbow-delimiters-depth-4-face) 100807 . 100808) (nil part-side javascript 100806 . 100807) (nil face (rainbow-delimiters-depth-4-face) 100806 . 100807) (nil part-side javascript 100805 . 100806) (nil part-side javascript 100803 . 100805) (nil rear-nonsticky t 100802 . 100803) (nil part-side javascript 100802 . 100803) (nil part-side javascript 100789 . 100802) (nil part-side javascript 100788 . 100789) (nil part-side javascript 100784 . 100788) (nil face web-mode-constant-face 100784 . 100788) (100784 . 100808)) nil (25813 63341 984674 49000) 0 nil])
([nil nil ((#("." 0 1 (part-side javascript)) . -100783) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("t" 0 1 (part-side javascript)) . -100784) (undo-tree-id9 . -1) (#("h" 0 1 (part-side javascript)) . -100785) (undo-tree-id10 . -1) (#("i" 0 1 (part-side javascript)) . -100786) (undo-tree-id11 . -1) (#("s" 0 1 (part-side javascript)) . -100787) (undo-tree-id12 . -1) (#("." 0 1 (part-side javascript)) . -100788) (undo-tree-id13 . -1) 100789) nil (25813 63341 984666 957000) 0 nil])
([nil nil ((100783 . 100784)) nil (25813 63341 984630 48000) 0 nil])
([nil nil ((44638 . 44647) (t 25813 63342 25394 460000)) nil (25813 63393 141475 866000) 0 nil])
([nil nil ((44647 . 44648)) nil (25813 63462 839355 929000) 0 nil] [nil nil ((nil rear-nonsticky nil 44665 . 44666) (nil rear-nonsticky t 44665 . 44666) (nil part-side javascript 44665 . 44666) (nil part-side javascript 44652 . 44665) (nil part-side javascript 44651 . 44652) (nil part-side javascript 44647 . 44651) (nil face web-mode-constant-face 44647 . 44651) (44647 . 44666)) ((#("this.chosen_saveref" 0 4 (part-side javascript face web-mode-constant-face) 4 18 (part-side javascript) 18 19 (rear-nonsticky t part-side javascript)) . 44647) (undo-tree-id27 . -19) (nil rear-nonsticky nil 44665 . 44666) (nil rear-nonsticky t 44665 . 44666)) (25813 63393 135685 250000) 0 nil])
([nil nil ((#("v" 0 1 (part-side javascript)) . -44647) (undo-tree-id48 . -1) 44648) nil (25813 63462 839354 667000) 0 nil])
nil
([nil nil ((44647 . 44659)) nil (25813 63462 839352 323000) 0 nil])
([nil nil ((nil rear-nonsticky nil 44677 . 44678) (nil rear-nonsticky t 44677 . 44678) (nil part-side javascript 44677 . 44678) (nil part-side javascript 44664 . 44677) (nil part-side javascript 44663 . 44664) (nil part-side javascript 44659 . 44663) (nil face web-mode-constant-face 44659 . 44663) (44659 . 44678)) nil (25813 63462 839350 902000) 0 nil])
([nil nil ((44679 . 44680) (44678 . 44680) (#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -44678) (44678 . 44679)) nil (25813 63462 839348 187000) 0 nil])
([nil nil ((44681 . 44684)) nil (25813 63462 839346 645000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -44681) (undo-tree-id45 . -1) (#("?" 0 1 (part-side javascript)) . -44682) (undo-tree-id46 . -1) (#(" " 0 1 (part-side javascript)) . -44683) (undo-tree-id47 . -1) 44684) nil (25813 63462 839345 85000) 0 nil])
([nil nil ((44659 . 44664)) nil (25813 63462 839340 446000) 0 nil])
([nil nil ((nil rear-nonsticky nil 44682 . 44683) (nil rear-nonsticky t 44682 . 44683) (nil part-side javascript 44682 . 44683) (nil part-side javascript 44669 . 44682) (nil part-side javascript 44668 . 44669) (nil part-side javascript 44664 . 44668) (nil face web-mode-constant-face 44664 . 44668) (44664 . 44683)) nil (25813 63462 839339 39000) 0 nil])
([nil nil ((#("." 0 1 (part-side javascript)) . -44663) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("t" 0 1 (part-side javascript)) . -44664) (undo-tree-id41 . -1) (#("h" 0 1 (part-side javascript)) . -44665) (undo-tree-id42 . -1) (#("i" 0 1 (part-side javascript)) . -44666) (undo-tree-id43 . -1) (#("s" 0 1 (part-side javascript face web-mode-constant-face)) . -44667) (undo-tree-id44 . -1) 44668) nil (25813 63462 839335 456000) 0 nil])
([nil nil ((44678 . 44679)) nil (25813 63462 839327 292000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -44678) (undo-tree-id38 . -1) 44679) nil (25813 63462 839326 83000) 0 nil])
([nil nil ((44678 . 44680)) nil (25813 63462 839323 916000) 0 nil])
([nil nil ((#("e" 0 1 (part-side javascript)) . -44679) (undo-tree-id37 . -1) 44680) nil (25813 63462 839322 798000) 0 nil])
([nil nil ((44679 . 44682)) nil (25813 63462 839320 556000) 0 nil])
([nil nil ((44682 . 44683)) nil (25813 63462 839319 632000) 0 nil])
([nil nil ((#("g" 0 1 (part-side javascript)) . -44681) (undo-tree-id35 . -1) (#("n" 0 1 (part-side javascript)) . -44682) (undo-tree-id36 . -1) 44683) nil (25813 63462 839318 261000) 0 nil])
([nil nil ((44681 . 44692)) nil (25813 63462 839314 740000) 0 nil])
([nil nil ((44714 . 44722)) nil (25813 63462 839313 797000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -44721) (undo-tree-id34 . -1) 44722) nil (25813 63462 839312 596000) 0 nil])
([nil nil ((44734 . 44735)) nil (25813 63462 839310 159000) 0 nil])
([nil nil ((44735 . 44742)) nil (25813 63462 839309 172000) 0 nil])
([nil nil ((#("a" 0 1 (part-side javascript)) . -44738) (undo-tree-id30 . -1) (#("n" 0 1 (part-side javascript)) . -44739) (undo-tree-id31 . -1) (#("d" 0 1 (part-side javascript)) . -44740) (undo-tree-id32 . -1) (#(" " 0 1 (part-side javascript)) . -44741) (undo-tree-id33 . -1) 44742) nil (25813 63462 839307 264000) 0 nil])
([nil nil ((44738 . 44741)) nil (25813 63462 839300 518000) 0 nil])
([nil nil ((#("0" 0 1 (part-side javascript)) . 44748) (#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-5-face))) . 44748) (#("f" 0 1 (rear-nonsticky t part-side javascript)) . 44748) (undo-tree-id28 . -1) (#("e" 0 1 (part-side javascript)) . 44748) (#("r" 0 1 (part-side javascript)) . 44748) (#("e" 0 1 (part-side javascript)) . 44748) (#("v" 0 1 (part-side javascript)) . 44748) (#("a" 0 1 (part-side javascript)) . 44748) (#("s" 0 1 (part-side javascript)) . 44748) (#("_" 0 1 (part-side javascript)) . 44748) (#("n" 0 1 (part-side javascript)) . 44748) (#("e" 0 1 (part-side javascript)) . 44748) (#("s" 0 1 (part-side javascript)) . 44748) (#("o" 0 1 (part-side javascript)) . 44748) (#("h" 0 1 (part-side javascript)) . 44748) (#("c" 0 1 (part-side javascript)) . 44748) (#("." 0 1 (part-side javascript)) . 44748) (undo-tree-id29 . -1) (#("s" 0 1 (part-side javascript)) . 44748) (#("i" 0 1 (part-side javascript)) . 44748) (#("h" 0 1 (part-side javascript)) . 44748) (#("t" 0 1 (part-side javascript face web-mode-constant-face)) . 44748)) nil (25813 63462 839296 251000) 0 nil])
([nil nil ((#("]" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 44748)) nil (25813 63462 839280 732000) 0 nil])
([nil nil ((44748 . 44751)) nil (25813 63462 839272 344000) 0 nil])
([nil nil ((44638 . 44647) (t 25813 63462 878460 332000)) nil (25813 63505 945103 427000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 44660) (44659 . 44660) (44658 . 44660) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -44658) (44647 . 44659)) nil (25813 63505 945101 721000) 0 nil])
([nil nil ((#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . 44661) (44660 . 44661) (44659 . 44661) (#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . -44659) (44659 . 44660)) nil (25813 63505 945098 924000) 0 nil])
([nil nil ((44660 . 44668)) nil (25813 63505 945094 813000) 0 nil])
([nil nil ((44669 . 44675)) nil (25813 63505 945090 734000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -44674) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) 44675) nil (25813 63505 945079 888000) 0 nil])
([nil nil ((#("        const fil = this.chosen_saveref.length > 0 ? this.chosen_saveref[0] : null
        if (fil && val != fil.path) {
          this.chosen_saveref = []
        }" 0 8 (part-side javascript) 8 13 (part-side javascript face web-mode-keyword-face) 13 14 (part-side javascript) 14 17 (part-side javascript face web-mode-variable-name-face) 17 19 (part-side javascript) 19 20 (part-side javascript) 20 24 (part-side javascript face web-mode-constant-face) 24 38 (part-side javascript) 38 39 (rear-nonsticky t part-side javascript) 39 53 (part-side javascript) 53 57 (part-side javascript face web-mode-constant-face) 57 71 (part-side javascript) 71 72 (rear-nonsticky t part-side javascript) 72 73 (part-side javascript face (rainbow-delimiters-depth-4-face)) 73 74 (part-side javascript) 74 75 (part-side javascript face (rainbow-delimiters-depth-4-face)) 75 77 (part-side javascript) 77 78 (part-side javascript) 78 82 (part-side javascript face web-mode-constant-face) 82 83 (part-side javascript) 83 91 (part-side javascript) 91 93 (part-side javascript face web-mode-keyword-face) 93 94 (part-side javascript) 94 95 (part-side javascript face (rainbow-delimiters-depth-4-face)) 95 102 (part-side javascript) 102 105 (part-side javascript) 105 108 (part-side javascript) 108 112 (part-side javascript) 112 117 (part-side javascript) 117 118 (part-side javascript face (rainbow-delimiters-depth-4-face)) 118 119 (part-side javascript) 119 120 (part-side javascript face (rainbow-delimiters-depth-4-face)) 120 121 (part-side javascript) 121 131 (part-side javascript) 131 135 (part-side javascript face web-mode-constant-face) 135 136 (part-side javascript) 136 149 (part-side javascript) 149 150 (rear-nonsticky t part-side javascript) 150 152 (part-side javascript) 152 153 (part-side javascript) 153 154 (part-side javascript face (rainbow-delimiters-depth-5-face)) 154 155 (part-side javascript face (rainbow-delimiters-depth-5-face)) 155 164 (part-side javascript) 164 165 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 44676) (undo-tree-id102 . -83) (undo-tree-id103 . -165) (undo-tree-id104 . -20) (undo-tree-id105 . -24) (undo-tree-id106 . -82) (undo-tree-id107 . -165) (t 25813 63505 986808 56000)) nil (25813 63815 7779 607000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . -44675) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) 44676) nil (25813 63815 7772 24000) 0 nil])
([nil nil ((#("      filter_name: function(val) {
        console.log(\"HEYO VAL\", val)
      }," 0 6 (part-side javascript) 6 16 (part-side javascript face web-mode-function-name-face) 16 17 (rear-nonsticky t part-side javascript face web-mode-function-name-face) 17 18 (part-side javascript) 18 19 (part-side javascript) 19 27 (part-side javascript face web-mode-keyword-face) 27 28 (part-side javascript face (rainbow-delimiters-depth-3-face)) 28 31 (part-side javascript) 31 32 (part-side javascript face (rainbow-delimiters-depth-3-face)) 32 33 (part-side javascript) 33 34 (part-side javascript face (rainbow-delimiters-depth-3-face)) 34 35 (part-side javascript) 35 51 (part-side javascript) 51 54 (part-side javascript face web-mode-function-call-face) 54 55 (part-side javascript face (rainbow-delimiters-depth-4-face)) 55 56 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 56 64 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 64 65 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 65 70 (part-side javascript) 70 71 (part-side javascript face (rainbow-delimiters-depth-4-face)) 71 72 (part-side javascript) 72 78 (part-side javascript) 78 79 (part-side javascript face (rainbow-delimiters-depth-3-face)) 79 80 (part-side javascript)) . 44604) (undo-tree-id86 . -70) (undo-tree-id87 . -35) (undo-tree-id88 . -80) (undo-tree-id89 . -71) (undo-tree-id90 . -64) (undo-tree-id91 . -71) (undo-tree-id92 . -80) (undo-tree-id93 . -71) (undo-tree-id94 . -71) (undo-tree-id95 . -80)) nil (25813 63815 7764 65000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . -44603) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 44604) nil (25813 63815 7750 492000) 0 nil])
([nil nil ((108366 . 108373)) nil (25813 63815 7736 539000) 0 nil])
([nil nil ((108373 . 108377)) nil (25813 63815 7735 549000) 0 nil])
([nil nil ((#("a" 0 1 (part-side javascript)) . -108375) (undo-tree-id74 . -1) (#("d" 0 1 (part-side javascript)) . -108376) (undo-tree-id75 . -1) 108377) nil (25813 63815 7734 6000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 108392) (108391 . 108392) (108390 . 108392) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-3-face))) . -108390) (108375 . 108391)) nil (25813 63815 7729 749000) 0 nil])
([nil nil ((108391 . 108394)) nil (25813 63815 7727 922000) 0 nil])
([nil nil ((108396 . 108398) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-3-face))) . -108396) (108395 . 108397)) nil (25813 63815 7726 712000) 0 nil])
([nil nil ((108399 . 108405) (#("        " 0 8 (part-side javascript face whitespace-trailing)) . 108398) (undo-tree-id72 . 8) (108398 . 108406) (#("      " 0 6 (part-side javascript)) . 108398) (undo-tree-id73 . -6) (108397 . 108405)) nil (25813 63815 7724 736000) 0 nil])
([nil nil ((108398 . 108406)) nil (25813 63815 7720 722000) 0 nil])
([nil nil ((nil rear-nonsticky nil 108570 . 108571) (nil part-side javascript 108570 . 108571) (nil face (rainbow-delimiters-depth-4-face) 108570 . 108571) (nil part-side javascript 108561 . 108570) (nil part-side javascript 108560 . 108561) (nil face (rainbow-delimiters-depth-5-face) 108560 . 108561) (nil part-side javascript 108559 . 108560) (nil face (rainbow-delimiters-depth-5-face) 108559 . 108560) (nil part-side javascript 108558 . 108559) (nil part-side javascript 108556 . 108558) (nil rear-nonsticky t 108555 . 108556) (nil part-side javascript 108555 . 108556) (nil part-side javascript 108542 . 108555) (nil part-side javascript 108541 . 108542) (nil part-side javascript 108537 . 108541) (nil face web-mode-constant-face 108537 . 108541) (nil part-side javascript 108527 . 108537) (nil part-side javascript 108526 . 108527) (nil part-side javascript 108525 . 108526) (nil face (rainbow-delimiters-depth-4-face) 108525 . 108526) (nil part-side javascript 108524 . 108525) (nil part-side javascript 108523 . 108524) (nil face (rainbow-delimiters-depth-4-face) 108523 . 108524) (nil part-side javascript 108518 . 108523) (nil part-side javascript 108514 . 108518) (nil part-side javascript 108511 . 108514) (nil part-side javascript 108508 . 108511) (nil part-side javascript 108501 . 108508) (nil part-side javascript 108500 . 108501) (nil face (rainbow-delimiters-depth-4-face) 108500 . 108501) (nil part-side javascript 108499 . 108500) (nil part-side javascript 108497 . 108499) (nil face web-mode-keyword-face 108497 . 108499) (nil part-side javascript 108489 . 108497) (nil part-side javascript 108488 . 108489) (nil part-side javascript 108484 . 108488) (nil face web-mode-constant-face 108484 . 108488) (nil part-side javascript 108483 . 108484) (nil part-side javascript 108481 . 108483) (nil part-side javascript 108480 . 108481) (nil face (rainbow-delimiters-depth-4-face) 108480 . 108481) (nil part-side javascript 108479 . 108480) (nil part-side javascript 108478 . 108479) (nil face (rainbow-delimiters-depth-4-face) 108478 . 108479) (nil rear-nonsticky t 108477 . 108478) (nil part-side javascript 108477 . 108478) (nil part-side javascript 108463 . 108477) (nil part-side javascript 108459 . 108463) (nil face web-mode-constant-face 108459 . 108463) (nil part-side javascript 108445 . 108459) (nil rear-nonsticky t 108444 . 108445) (nil part-side javascript 108444 . 108445) (nil part-side javascript 108430 . 108444) (nil part-side javascript 108426 . 108430) (nil face web-mode-constant-face 108426 . 108430) (nil part-side javascript 108425 . 108426) (nil part-side javascript 108423 . 108425) (nil part-side javascript 108420 . 108423) (nil face web-mode-variable-name-face 108420 . 108423) (nil part-side javascript 108419 . 108420) (nil part-side javascript 108414 . 108419) (nil face web-mode-keyword-face 108414 . 108419) (nil part-side javascript 108406 . 108414) (108406 . 108571)) nil (25813 63815 7716 325000) 0 nil])
([nil nil ((#("        " 0 8 (part-side javascript)) . -108406) (undo-tree-id71 . -1) 108407) nil (25813 63815 7702 145000) 0 nil])
([nil nil ((#("const fil = " 0 5 (part-side javascript face web-mode-keyword-face) 5 6 (part-side javascript) 6 9 (part-side javascript face web-mode-variable-name-face) 9 12 (part-side javascript)) . 108406) (undo-tree-id69 . -12) (undo-tree-id70 . -12)) nil (25813 63815 7699 415000) 0 nil])
([nil nil ((108406 . 108409)) nil (25813 63815 7696 375000) 0 nil])
([nil nil ((108409 . 108411) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -108409) (108409 . 108410)) nil (25813 63815 7695 196000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 108410)) nil (25813 63815 7693 601000) 0 nil])
([nil nil ((#(" ? this.chosen_saveref[0] : null" 0 3 (part-side javascript) 3 7 (part-side javascript face web-mode-constant-face) 7 22 (part-side javascript) 22 23 (part-side javascript face (rainbow-delimiters-depth-5-face)) 23 24 (part-side javascript) 24 25 (part-side javascript face (rainbow-delimiters-depth-5-face)) 25 28 (part-side javascript) 28 32 (part-side javascript face web-mode-constant-face)) . 108440) (undo-tree-id67 . -32) (undo-tree-id68 . -32)) nil (25813 63815 7692 399000) 0 nil])
([nil nil ((108440 . 108442)) nil (25813 63815 7688 923000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -108441) (undo-tree-id66 . -1) 108442) nil (25813 63815 7687 780000) 0 nil])
([nil nil ((108450 . 108452) 108479) nil (25813 63815 7685 515000) 0 nil])
([nil nil ((108492 . 108494) 108516) nil (25813 63815 7684 256000) 0 nil])
([nil nil ((108527 . 108529) 108528) nil (25813 63815 7683 63000) 0 nil])
([nil nil ((108442 . 108444) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -108442) (108441 . 108443)) nil (25813 63815 7681 669000) 0 nil])
([nil nil ((#("}" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 108443)) nil (25813 63815 7680 114000) 0 nil])
([nil nil ((108532 . 108543)) nil (25813 63815 7679 158000) 0 nil])
([nil nil ((#("  " 0 2 (part-side javascript)) . -108541) (108543 . 108544)) nil (25813 63815 7678 5000) 0 nil])
([nil nil ((#("fil" 0 3 (part-side javascript)) . 108472) (undo-tree-id64 . -3) (undo-tree-id65 . -3)) nil (25813 63815 7676 657000) 0 nil])
([nil nil ((nil rear-nonsticky nil 108490 . 108491) (nil part-side javascript 108476 . 108491) (nil part-side javascript 108472 . 108476) (nil face web-mode-constant-face 108472 . 108476) (108472 . 108491)) nil (25813 63815 7673 339000) 0 nil])
([nil nil ((#("il &&" 0 5 (part-side javascript)) . 108459) (undo-tree-id62 . -5) (undo-tree-id63 . -5)) nil (25813 63815 7671 245000) 0 nil])
([nil nil ((#("f" 0 1 (part-side javascript)) . -108458) (undo-tree-id60 . -1) (undo-tree-id61 . -1) 108459) nil (25813 63815 7667 355000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . 108458)) nil (25813 63815 7663 294000) 0 nil])
([nil nil ((31287 . 31312)) nil (25813 63815 7662 338000) 0 nil])
([nil nil ((31312 . 31322)) nil (25813 63815 7661 407000) 0 nil])
([nil nil ((nil rear-nonsticky nil 31337 . 31338) (nil block-side t 31337 . 31338) (nil tag-attr t 31337 . 31338) (nil tag-name "v-combobox" 31337 . 31338) (nil tag-type start 31337 . 31338) (nil face web-mode-variable-name-face 31337 . 31338) (nil block-side t 31336 . 31337) (nil tag-attr t 31336 . 31337) (nil tag-name "v-combobox" 31336 . 31337) (nil tag-type start 31336 . 31337) (nil face web-mode-variable-name-face 31336 . 31337) (nil block-side t 31335 . 31336) (nil tag-attr t 31335 . 31336) (nil tag-name "v-combobox" 31335 . 31336) (nil tag-type start 31335 . 31336) (nil face web-mode-variable-name-face 31335 . 31336) (nil block-side t 31334 . 31335) (nil tag-attr t 31334 . 31335) (nil tag-name "v-combobox" 31334 . 31335) (nil tag-type start 31334 . 31335) (nil face web-mode-variable-name-face 31334 . 31335) (nil block-side t 31333 . 31334) (nil tag-attr t 31333 . 31334) (nil tag-name "v-combobox" 31333 . 31334) (nil tag-type start 31333 . 31334) (nil face web-mode-variable-name-face 31333 . 31334) (nil block-side t 31332 . 31333) (nil tag-attr t 31332 . 31333) (nil tag-name "v-combobox" 31332 . 31333) (nil tag-type start 31332 . 31333) (nil face web-mode-variable-name-face 31332 . 31333) (nil block-side t 31331 . 31332) (nil tag-attr t 31331 . 31332) (nil tag-name "v-combobox" 31331 . 31332) (nil tag-type start 31331 . 31332) (nil face web-mode-variable-name-face 31331 . 31332) (nil block-side t 31330 . 31331) (nil tag-attr t 31330 . 31331) (nil tag-name "v-combobox" 31330 . 31331) (nil tag-type start 31330 . 31331) (nil face web-mode-variable-name-face 31330 . 31331) (nil block-side t 31329 . 31330) (nil tag-attr t 31329 . 31330) (nil tag-name "v-combobox" 31329 . 31330) (nil tag-type start 31329 . 31330) (nil face web-mode-variable-name-face 31329 . 31330) (nil block-side t 31328 . 31329) (nil tag-attr t 31328 . 31329) (nil tag-name "v-combobox" 31328 . 31329) (nil tag-type start 31328 . 31329) (nil face web-mode-variable-name-face 31328 . 31329) (nil block-side t 31327 . 31328) (nil tag-attr t 31327 . 31328) (nil tag-name "v-combobox" 31327 . 31328) (nil tag-type start 31327 . 31328) (nil face web-mode-variable-name-face 31327 . 31328) (nil block-side t 31326 . 31327) (nil tag-attr t 31326 . 31327) (nil tag-name "v-combobox" 31326 . 31327) (nil tag-type start 31326 . 31327) (nil face web-mode-variable-name-face 31326 . 31327) (nil block-side t 31325 . 31326) (nil tag-attr t 31325 . 31326) (nil tag-name "v-combobox" 31325 . 31326) (nil tag-type start 31325 . 31326) (nil face web-mode-variable-name-face 31325 . 31326) (nil block-side t 31324 . 31325) (nil tag-attr t 31324 . 31325) (nil tag-name "v-combobox" 31324 . 31325) (nil tag-type start 31324 . 31325) (nil face web-mode-variable-name-face 31324 . 31325) (nil block-side t 31323 . 31324) (nil tag-attr t 31323 . 31324) (nil tag-name "v-combobox" 31323 . 31324) (nil tag-type start 31323 . 31324) (nil face web-mode-variable-name-face 31323 . 31324) (nil block-side t 31322 . 31323) (nil tag-attr t 31322 . 31323) (nil tag-name "v-combobox" 31322 . 31323) (nil tag-type start 31322 . 31323) (nil face web-mode-variable-name-face 31322 . 31323) (nil block-side t 31321 . 31322) (nil tag-attr t 31321 . 31322) (nil tag-name "v-combobox" 31321 . 31322) (nil tag-type start 31321 . 31322) (nil face web-mode-variable-name-face 31321 . 31322) (31321 . 31338)) nil (25813 63815 7655 989000) 0 nil])
([nil nil ((31338 . 31340) (#("(" 0 1 (block-side t tag-attr t tag-name "v-combobox" tag-type start)) . -31338) (31338 . 31339)) nil (25813 63815 7636 478000) 0 nil])
([nil nil ((31319 . 31331)) nil (25813 63815 7635 115000) 0 nil])
([nil nil ((#(")" 0 1 (tag-attr t tag-name "v-combobox" tag-type start font-lock-face web-mode-html-attr-value-face)) . 31350) (#("(" 0 1 (tag-attr t tag-name "v-combobox" tag-type start font-lock-face web-mode-html-attr-value-face)) . 31350)) nil (25813 63815 7633 821000) 0 nil])
([nil nil ((108461 . 108470)) nil (25813 63815 7632 631000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 108483) (108482 . 108483) (108481 . 108483) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -108481) (108470 . 108482)) nil (25813 63815 7631 84000) 0 nil])
([nil nil ((108483 . 108491) (nil part-token string 108483 . 108484) (nil font-lock-face web-mode-javascript-string-face 108483 . 108484) (nil part-side javascript 108483 . 108484) (108482 . 108484) (#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . -108482) (108482 . 108483)) nil (25813 63815 7628 716000) 0 nil])
([nil nil ((108492 . 108493)) nil (25813 63815 7626 373000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -108492) (undo-tree-id59 . -1) 108493) nil (25813 63815 7624 939000) 0 nil])
([nil nil ((108492 . 108496)) nil (25813 63815 7621 556000) 0 nil])
([nil nil ((108496 . 108498)) nil (25813 63815 7619 895000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -108497) (undo-tree-id58 . -1) 108498) nil (25813 63815 7614 579000) 0 nil])
([nil nil ((#(":filter_name" 0 1 (tag-attr t tag-name "v-combobox" tag-type start font-lock-face web-mode-html-attr-engine-face) 1 2 (tag-attr t tag-name "v-combobox" tag-type start font-lock-face web-mode-html-attr-engine-face) 2 3 (tag-attr t tag-name "v-combobox" tag-type start font-lock-face web-mode-html-attr-engine-face) 3 4 (tag-attr t tag-name "v-combobox" tag-type start font-lock-face web-mode-html-attr-engine-face) 4 5 (tag-attr t tag-name "v-combobox" tag-type start font-lock-face web-mode-html-attr-engine-face) 5 6 (tag-attr t tag-name "v-combobox" tag-type start font-lock-face web-mode-html-attr-engine-face) 6 12 (tag-attr t tag-name "v-combobox" tag-type start font-lock-face web-mode-html-attr-engine-face)) . 31319) (undo-tree-id108 . -12) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -12) (undo-tree-id123 . -12) (t 25813 63815 48787 784000)) nil (25813 63854 294680 404000) 0 nil])
([nil nil ((nil rear-nonsticky nil 31331 . 31332) (nil block-side t 31331 . 31332) (nil block-token delimiter-beg 31331 . 31332) (nil tag-attr t 31331 . 31332) (nil tag-name "v-combobox" 31331 . 31332) (nil tag-type start 31331 . 31332) (nil font-lock-face web-mode-block-delimiter-face 31331 . 31332) (nil block-side t 31330 . 31331) (nil block-token delimiter-beg 31330 . 31331) (nil tag-attr t 31330 . 31331) (nil tag-name "v-combobox" 31330 . 31331) (nil tag-type start 31330 . 31331) (nil font-lock-face web-mode-block-delimiter-face 31330 . 31331) (nil block-side t 31329 . 31330) (nil block-token delimiter-beg 31329 . 31330) (nil tag-attr t 31329 . 31330) (nil tag-name "v-combobox" 31329 . 31330) (nil tag-type start 31329 . 31330) (nil font-lock-face web-mode-block-delimiter-face 31329 . 31330) (nil block-side t 31328 . 31329) (nil block-token delimiter-beg 31328 . 31329) (nil tag-attr t 31328 . 31329) (nil tag-name "v-combobox" 31328 . 31329) (nil tag-type start 31328 . 31329) (nil font-lock-face web-mode-block-delimiter-face 31328 . 31329) (nil block-side t 31327 . 31328) (nil block-token delimiter-beg 31327 . 31328) (nil tag-attr t 31327 . 31328) (nil tag-name "v-combobox" 31327 . 31328) (nil tag-type start 31327 . 31328) (nil font-lock-face web-mode-block-delimiter-face 31327 . 31328) (nil block-side t 31326 . 31327) (nil block-token delimiter-beg 31326 . 31327) (nil tag-attr t 31326 . 31327) (nil tag-name "v-combobox" 31326 . 31327) (nil tag-type start 31326 . 31327) (nil font-lock-face web-mode-block-delimiter-face 31326 . 31327) (nil block-side t 31325 . 31326) (nil block-token delimiter-beg 31325 . 31326) (nil tag-attr t 31325 . 31326) (nil tag-name "v-combobox" 31325 . 31326) (nil tag-type start 31325 . 31326) (nil font-lock-face web-mode-block-delimiter-face 31325 . 31326) (nil block-side t 31324 . 31325) (nil block-token delimiter-beg 31324 . 31325) (nil tag-attr t 31324 . 31325) (nil tag-name "v-combobox" 31324 . 31325) (nil tag-type start 31324 . 31325) (nil font-lock-face web-mode-block-delimiter-face 31324 . 31325) (nil block-side t 31323 . 31324) (nil block-token delimiter-beg 31323 . 31324) (nil tag-attr t 31323 . 31324) (nil tag-name "v-combobox" 31323 . 31324) (nil tag-type start 31323 . 31324) (nil font-lock-face web-mode-block-delimiter-face 31323 . 31324) (nil block-side t 31322 . 31323) (nil block-token delimiter-beg 31322 . 31323) (nil tag-attr t 31322 . 31323) (nil tag-name "v-combobox" 31322 . 31323) (nil tag-type start 31322 . 31323) (nil font-lock-face web-mode-block-delimiter-face 31322 . 31323) (nil block-side t 31321 . 31322) (nil block-token delimiter-beg 31321 . 31322) (nil tag-attr t 31321 . 31322) (nil tag-name "v-combobox" 31321 . 31322) (nil tag-type start 31321 . 31322) (nil font-lock-face web-mode-block-delimiter-face 31321 . 31322) (nil block-side t 31320 . 31321) (nil block-token delimiter-beg 31320 . 31321) (nil tag-attr t 31320 . 31321) (nil tag-name "v-combobox" 31320 . 31321) (nil tag-type start 31320 . 31321) (nil font-lock-face web-mode-block-delimiter-face 31320 . 31321) (nil block-beg 0 31319 . 31320) (nil block-controls 0 31319 . 31320) (nil block-side t 31319 . 31320) (nil block-token delimiter-beg 31319 . 31320) (nil tag-attr t 31319 . 31320) (nil tag-name "v-combobox" 31319 . 31320) (nil tag-type start 31319 . 31320) (nil font-lock-face web-mode-block-delimiter-face 31319 . 31320) (31319 . 31332) (t 25813 63854 336989 429000)) nil (25813 64125 969690 489000) 0 nil])
([nil nil ((108499 . 108508) (t 25813 64126 18178 208000)) nil (25813 64185 379053 30000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 108521) (108520 . 108521) (108519 . 108521) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -108519) (108508 . 108520)) nil (25813 64185 379050 108000) 0 nil])
([nil nil ((nil rear-nonsticky nil 108538 . 108539) (nil part-side javascript 108524 . 108539) (nil part-side javascript 108520 . 108524) (nil face web-mode-constant-face 108520 . 108524) (108520 . 108539)) nil (25813 64185 379040 299000) 0 nil])
([nil nil ((108422 . 108431) (t 25813 64185 422400 507000)) nil (25813 64292 443318 341000) 0 nil])
([nil nil ((108431 . 108437)) nil (25813 64292 443316 931000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -108436) (undo-tree-id128 . -1) 108437) nil (25813 64292 443315 610000) 0 nil])
([nil nil ((108436 . 108441)) nil (25813 64292 443313 173000) 0 nil])
([nil nil ((#("n" 0 1 (part-side javascript)) . -108440) (undo-tree-id127 . -1) 108441) nil (25813 64292 443311 409000) 0 nil])
([nil nil ((108440 . 108442)) nil (25813 64292 443308 946000) 0 nil])
([nil nil ((108442 . 108445)) nil (25813 64292 443307 566000) 0 nil])
([nil nil ((108436 . 108450) (#("chosen_sa" 0 9 (part-side javascript)) . -108436) (undo-tree-id125 . -9) (undo-tree-id126 . -9) 108445) nil (25813 64292 443305 267000) 0 nil])
([nil nil ((108450 . 108457)) nil (25813 64292 443299 463000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -108456) (undo-tree-id124 . -1) 108457) nil (25813 64292 443293 752000) 0 nil])
([nil nil ((#("        this.chosen_saveref = val
" 0 8 (part-side javascript) 8 12 (part-side javascript face web-mode-constant-face) 12 13 (part-side javascript) 13 27 (part-side javascript) 27 29 (part-side javascript) 29 33 (part-side javascript) 33 34 (part-side javascript)) . 108457) (undo-tree-id194 . -34) (undo-tree-id195 . -13) (undo-tree-id196 . -33) (undo-tree-id197 . -33) (undo-tree-id198 . -33) (undo-tree-id199 . -33) (undo-tree-id200 . -33) (undo-tree-id201 . -33) (undo-tree-id202 . -33) (undo-tree-id203 . -33) (undo-tree-id204 . -33) (undo-tree-id205 . -33) (undo-tree-id206 . -33) (undo-tree-id207 . -33) (undo-tree-id208 . -33) (undo-tree-id209 . -33) (undo-tree-id210 . -33) (undo-tree-id211 . -33) (undo-tree-id212 . -33) (undo-tree-id213 . -33) (undo-tree-id214 . -33) (undo-tree-id215 . -33) (undo-tree-id216 . -33) (undo-tree-id217 . -33) (undo-tree-id218 . -33) (undo-tree-id219 . -33) (undo-tree-id220 . -33) (undo-tree-id221 . -33) (undo-tree-id222 . -33) (undo-tree-id223 . -33) (undo-tree-id224 . -33) (undo-tree-id225 . -33) (undo-tree-id226 . -33) (undo-tree-id227 . -33) (undo-tree-id228 . -33) (108447 . 108457) (#("        }
" 0 8 (part-side javascript) 8 9 (part-side javascript face (rainbow-delimiters-depth-4-face)) 9 10 (part-side javascript)) . 108413) (undo-tree-id229 . -9) (108423 . 108457) 108456 (t 25813 64292 490775 725000)) nil (25813 64321 384570 293000) 0 nil])
([nil nil ((#("        this.chosen_saveref = val
" 0 8 (part-side javascript) 8 12 (part-side javascript face web-mode-constant-face) 12 13 (part-side javascript) 13 27 (part-side javascript) 27 29 (part-side javascript) 29 33 (part-side javascript) 33 34 (part-side javascript)) . 108447) (undo-tree-id184 . -34) (undo-tree-id185 . -33) (undo-tree-id186 . -33) (undo-tree-id187 . -33) (undo-tree-id188 . -33) (undo-tree-id189 . -33) (undo-tree-id190 . -33) (undo-tree-id191 . -33) (undo-tree-id192 . -33) (undo-tree-id193 . -33) (108415 . 108447) (#("          this.save_root = null
" 0 10 (part-side javascript) 10 14 (part-side javascript face web-mode-constant-face) 14 27 (part-side javascript) 27 31 (part-side javascript face web-mode-constant-face) 31 32 (part-side javascript)) . 108381) (108413 . 108447) 108446) nil (25813 64321 384528 600000) 0 nil])
([nil nil ((#("        this.chosen_saveref = val
" 0 8 (part-side javascript) 8 12 (part-side javascript face web-mode-constant-face) 12 13 (part-side javascript) 13 27 (part-side javascript) 27 29 (part-side javascript) 29 33 (part-side javascript) 33 34 (part-side javascript)) . 108415) (undo-tree-id173 . -34) (undo-tree-id174 . -33) (undo-tree-id175 . -34) (undo-tree-id176 . -33) (undo-tree-id177 . -33) (undo-tree-id178 . -33) (undo-tree-id179 . -33) (undo-tree-id180 . -33) (undo-tree-id181 . -33) (undo-tree-id182 . -33) (undo-tree-id183 . -33) (108383 . 108415) (#("          this.filter_name = \"\"
" 0 10 (part-side javascript) 10 14 (part-side javascript face web-mode-constant-face) 14 29 (part-side javascript) 29 30 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 30 31 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 31 32 (part-side javascript syntax-table (15))) . 108349) (108381 . 108415) 108414) nil (25813 64321 384427 229000) 0 nil])
([nil nil ((#("        this.chosen_saveref = val
" 0 8 (part-side javascript) 8 12 (part-side javascript face web-mode-constant-face) 12 13 (part-side javascript) 13 27 (part-side javascript) 27 29 (part-side javascript) 29 33 (part-side javascript) 33 34 (part-side javascript)) . 108383) (undo-tree-id163 . -34) (undo-tree-id164 . -33) (undo-tree-id165 . -33) (undo-tree-id166 . -33) (undo-tree-id167 . -33) (undo-tree-id168 . -33) (undo-tree-id169 . -33) (undo-tree-id170 . -33) (undo-tree-id171 . -33) (undo-tree-id172 . -33) (108368 . 108383) (#("        else {
" 0 8 (part-side javascript) 8 12 (part-side javascript face web-mode-keyword-face) 12 13 (part-side javascript) 13 14 (part-side javascript face (rainbow-delimiters-depth-4-face)) 14 15 (part-side javascript)) . 108334) (108349 . 108383) 108382) nil (25813 64321 384412 818000) 0 nil])
([nil nil ((#("        this.chosen_saveref = val
" 0 8 (part-side javascript) 8 12 (part-side javascript face web-mode-constant-face) 12 13 (part-side javascript) 13 27 (part-side javascript) 27 29 (part-side javascript) 29 33 (part-side javascript) 33 34 (part-side javascript)) . 108368) (undo-tree-id161 . -34) (undo-tree-id162 . -33) (108358 . 108368) (#("        }
" 0 8 (part-side javascript) 8 9 (part-side javascript face (rainbow-delimiters-depth-4-face)) 9 10 (part-side javascript)) . 108324) (108334 . 108368) 108367) nil (25813 64321 384400 107000) 0 nil])
([nil nil ((#("        this.chosen_saveref = val
" 0 8 (part-side javascript) 8 12 (part-side javascript face web-mode-constant-face) 12 13 (part-side javascript) 13 27 (part-side javascript) 27 29 (part-side javascript) 29 33 (part-side javascript) 33 34 (part-side javascript)) . 108358) (undo-tree-id155 . -34) (undo-tree-id156 . -33) (undo-tree-id157 . -33) (undo-tree-id158 . -33) (undo-tree-id159 . -33) (undo-tree-id160 . -33) (108322 . 108358) (#("          this.save_root = fil.root
" 0 10 (part-side javascript) 10 14 (part-side javascript face web-mode-constant-face) 14 36 (part-side javascript)) . 108288) (108324 . 108358) 108357) nil (25813 64321 384395 346000) 0 nil])
([nil nil ((#("        this.chosen_saveref = val
" 0 8 (part-side javascript) 8 12 (part-side javascript face web-mode-constant-face) 12 13 (part-side javascript) 13 27 (part-side javascript) 27 29 (part-side javascript) 29 33 (part-side javascript) 33 34 (part-side javascript)) . 108322) (undo-tree-id145 . -34) (undo-tree-id146 . -33) (undo-tree-id147 . -33) (undo-tree-id148 . -33) (undo-tree-id149 . -33) (undo-tree-id150 . -33) (undo-tree-id151 . -33) (undo-tree-id152 . -33) (undo-tree-id153 . -33) (undo-tree-id154 . -33) (108284 . 108322) (#("          this.filter_name = fil.path
" 0 10 (part-side javascript) 10 14 (part-side javascript face web-mode-constant-face) 14 38 (part-side javascript)) . 108250) (108288 . 108322) 108321) nil (25813 64321 384385 524000) 0 nil])
([nil nil ((#("        this.chosen_saveref = val
" 0 8 (part-side javascript) 8 12 (part-side javascript face web-mode-constant-face) 12 13 (part-side javascript) 13 27 (part-side javascript) 27 29 (part-side javascript) 29 33 (part-side javascript) 33 34 (part-side javascript)) . 108284) (undo-tree-id139 . -34) (undo-tree-id140 . -33) (undo-tree-id141 . -33) (undo-tree-id142 . -33) (undo-tree-id143 . -33) (undo-tree-id144 . -33) (108255 . 108284) (#("          const fil = val[0]
" 0 10 (part-side javascript) 10 15 (part-side javascript face web-mode-keyword-face) 15 16 (part-side javascript) 16 19 (part-side javascript face web-mode-variable-name-face) 19 25 (part-side javascript) 25 26 (part-side javascript face (rainbow-delimiters-depth-5-face)) 26 27 (part-side javascript) 27 28 (part-side javascript face (rainbow-delimiters-depth-5-face)) 28 29 (part-side javascript)) . 108221) (108250 . 108284) 108283) nil (25813 64321 384370 208000) 0 nil])
([nil nil ((#("        this.chosen_saveref = val
" 0 8 (part-side javascript) 8 12 (part-side javascript face web-mode-constant-face) 12 13 (part-side javascript) 13 27 (part-side javascript) 27 29 (part-side javascript) 29 33 (part-side javascript) 33 34 (part-side javascript)) . 108255) (undo-tree-id129 . -34) (undo-tree-id130 . -33) (undo-tree-id131 . -33) (undo-tree-id132 . -33) (undo-tree-id133 . -33) (undo-tree-id134 . -33) (undo-tree-id135 . -33) (undo-tree-id136 . -33) (undo-tree-id137 . -33) (undo-tree-id138 . -33) (108225 . 108255) (#("        if (val.length > 0) {
" 0 8 (part-side javascript) 8 10 (part-side javascript face web-mode-keyword-face) 10 11 (part-side javascript) 11 12 (part-side javascript face (rainbow-delimiters-depth-4-face)) 12 26 (part-side javascript) 26 27 (part-side javascript face (rainbow-delimiters-depth-4-face)) 27 28 (part-side javascript) 28 29 (part-side javascript face (rainbow-delimiters-depth-4-face)) 29 30 (part-side javascript)) . 108191) (108221 . 108255) 108254) nil (25813 64321 384355 835000) 0 nil])
([nil nil ((108224 . 108233) (t 25813 64321 430872 201000)) nil (25813 64394 353521 721000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 108246) (108245 . 108246) (108244 . 108246) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -108244) (108233 . 108245)) nil (25813 64394 353519 950000) 0 nil])
([nil nil ((108246 . 108252) (108245 . 108247) (#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . -108245) (108245 . 108246)) nil (25813 64394 353517 639000) 0 nil])
([nil nil ((108253 . 108255)) nil (25813 64394 353515 973000) 0 nil])
([nil nil ((nil rear-nonsticky nil 108273 . 108274) (nil part-side javascript 108260 . 108274) (nil part-side javascript 108259 . 108260) (nil part-side javascript 108255 . 108259) (nil face web-mode-constant-face 108255 . 108259) (108255 . 108274)) nil (25813 64394 353514 570000) 0 nil])
([nil nil ((108606 . 108620) (nil part-token string 108606 . 108607) (nil font-lock-face web-mode-javascript-string-face 108606 . 108607) (nil part-side javascript 108606 . 108607) (108605 . 108607) (#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . -108605) (108605 . 108606)) nil (25813 64394 353511 544000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -108619) (undo-tree-id230 . -1) 108620) nil (25813 64394 353507 812000) 0 nil])
([nil nil ((108620 . 108622)) nil (25813 64394 353492 549000) 0 nil])
([nil nil ((108641 . 108646) (t 25813 64394 399107 317000)) nil (25813 64497 714368 347000) 0 nil])
([nil nil ((#("." 0 1 (part-side javascript)) . -108641) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (#("p" 0 1 (part-side javascript)) . -108642) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (#("a" 0 1 (part-side javascript)) . -108643) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("t" 0 1 (part-side javascript)) . -108644) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (#("h" 0 1 (part-side javascript)) . -108645) (undo-tree-id241 . -1) 108646) nil (25813 64497 714366 47000) 0 nil])
([nil nil ((108688 . 108699)) nil (25813 64497 714355 120000) 0 nil])
([nil nil ((108699 . 108708)) nil (25813 64497 714354 129000) 0 nil])
([nil nil ((#("o" 0 1 (part-side javascript)) . -108707) (undo-tree-id232 . -1) 108708) nil (25813 64497 714352 949000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 108712) (108711 . 108712) (108710 . 108712) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-5-face))) . -108710) (108707 . 108711)) nil (25813 64497 714349 495000) 0 nil])
([nil nil ((108712 . 108723) (nil part-token string 108712 . 108713) (nil font-lock-face web-mode-javascript-string-face 108712 . 108713) (nil part-side javascript 108712 . 108713) (108711 . 108713) (#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . -108711) (108711 . 108712)) nil (25813 64497 714347 312000) 0 nil])
([nil nil ((108724 . 108726)) nil (25813 64497 714344 764000) 0 nil])
([nil nil ((nil rear-nonsticky nil 108744 . 108745) (nil rear-nonsticky t 108744 . 108745) (nil part-side javascript 108744 . 108745) (nil part-side javascript 108730 . 108744) (nil part-side javascript 108726 . 108730) (nil face web-mode-constant-face 108726 . 108730) (108726 . 108745)) nil (25813 64497 714343 451000) 0 nil])
([nil nil ((108745 . 108751)) nil (25813 64497 714341 269000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -108750) (undo-tree-id231 . -1) 108751) nil (25813 64497 714339 737000) 0 nil])
([nil nil ((108751 . 108762)) nil (25813 64497 714331 465000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 108775) (108774 . 108775) (108773 . 108775) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-5-face))) . -108773) (108762 . 108774)) nil (25813 64497 714329 965000) 0 nil])
([nil nil ((#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . 108776) (108775 . 108776) (nil part-token string 108775 . 108776) (nil font-lock-face web-mode-javascript-string-face 108775 . 108776) (nil part-side javascript 108775 . 108776) (108774 . 108776) (#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . -108774) (108774 . 108775)) nil (25813 64497 714326 776000) 0 nil])
([nil nil ((108775 . 108782)) nil (25813 64497 714324 98000) 0 nil])
([nil nil ((108783 . 108792)) nil (25813 64497 714322 403000) 0 nil])
([nil nil ((nil rear-nonsticky nil 108815 . 108816) (nil part-side javascript 108811 . 108816) (nil rear-nonsticky t 108810 . 108811) (nil part-side javascript 108810 . 108811) (nil part-side javascript 108796 . 108810) (nil part-side javascript 108792 . 108796) (nil face web-mode-constant-face 108792 . 108796) (108792 . 108816)) nil (25813 64497 714314 797000) 0 nil])
([nil nil ((108746 . 108747) (108745 . 108747) (#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . -108745) (108745 . 108746) (t 25813 64497 755422 871000)) nil (25813 64725 842781 446000) 0 nil])
([nil nil ((108815 . 108816) (108814 . 108816) (#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . -108814) (108814 . 108815)) nil (25813 64725 842778 396000) 0 nil])
([nil nil ((108865 . 108866) (108864 . 108866) (#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . -108864) (108864 . 108865)) nil (25813 64725 842768 707000) 0 nil])
([nil nil ((#("        console.log(\"CHOSEN\", this.chosen_saveref)
" 0 16 (part-side javascript) 16 19 (part-side javascript face web-mode-function-call-face) 19 20 (part-side javascript face (rainbow-delimiters-depth-4-face)) 20 21 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 21 27 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 27 28 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 28 30 (part-side javascript) 30 34 (part-side javascript face web-mode-constant-face) 34 48 (part-side javascript) 48 49 (rear-nonsticky t part-side javascript) 49 50 (part-side javascript face (rainbow-delimiters-depth-4-face)) 50 51 (part-side javascript)) . 108276) (undo-tree-id244 . -30) (undo-tree-id245 . -50) (108242 . 108276) (#("        this.chosen_saveref = val
" 0 8 (part-side javascript) 8 12 (part-side javascript face web-mode-constant-face) 12 13 (part-side javascript) 13 27 (part-side javascript) 27 29 (part-side javascript) 29 34 (part-side javascript)) . 108191) (undo-tree-id246 . -33) (undo-tree-id247 . -27) (undo-tree-id248 . -33) (108225 . 108276) 108224 (t 25813 64725 888063 258000)) nil (25813 65056 902928 77000) 0 nil])
([nil nil ((108507 . 108516) (108472 . 108481) (108437 . 108446) (108427 . 108495) (#("else {
          this.filter_name = \"\"
          this.save_root = null
        }" 0 4 (part-side javascript face web-mode-keyword-face) 4 5 (part-side javascript) 5 6 (part-side javascript face (rainbow-delimiters-depth-4-face)) 6 7 (part-side javascript) 7 17 (part-side javascript) 17 21 (part-side javascript face web-mode-constant-face) 21 36 (part-side javascript) 36 37 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 37 38 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 38 39 (part-side javascript syntax-table (15)) 39 49 (part-side javascript) 49 53 (part-side javascript face web-mode-constant-face) 53 66 (part-side javascript) 66 70 (part-side javascript face web-mode-constant-face) 70 71 (part-side javascript) 71 79 (part-side javascript) 79 80 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 108427) (undo-tree-id398 . -7) (undo-tree-id399 . -80) (undo-tree-id400 . -80) (undo-tree-id401 . -80)) nil (25813 65227 80980 157000) 0 nil] [nil nil ((108418 . 108427)) ((#("
        " 0 1 (part-side javascript) 1 9 (part-side javascript)) . 108418) (undo-tree-id337 . -1) (undo-tree-id338 . -9) (undo-tree-id339 . -9) (undo-tree-id340 . -9) (undo-tree-id341 . -9) (undo-tree-id342 . -9) (undo-tree-id343 . -9) (undo-tree-id344 . -9) (undo-tree-id345 . -9) (undo-tree-id346 . -9) (undo-tree-id347 . -9) (undo-tree-id348 . -9) (undo-tree-id349 . -9) (undo-tree-id350 . -9) (undo-tree-id351 . -9) (undo-tree-id352 . -9) (undo-tree-id353 . -9) (undo-tree-id354 . -9) (undo-tree-id355 . -9) (undo-tree-id356 . -9) (undo-tree-id357 . -9) (undo-tree-id358 . -9) (undo-tree-id359 . -9) (undo-tree-id360 . -9) (undo-tree-id361 . -9) (undo-tree-id362 . -9) (undo-tree-id363 . -9) (undo-tree-id364 . -9) (undo-tree-id365 . -9) (undo-tree-id366 . -9) (undo-tree-id367 . -9) (undo-tree-id368 . -9) (undo-tree-id369 . -9) (undo-tree-id370 . -9) (undo-tree-id371 . -9) (undo-tree-id372 . -9) (undo-tree-id373 . -1) (undo-tree-id374 . -9) (undo-tree-id375 . -9) (undo-tree-id376 . -9) (undo-tree-id377 . -9) (undo-tree-id378 . -9) (undo-tree-id379 . -9) (undo-tree-id380 . -9) (undo-tree-id381 . -9) (undo-tree-id382 . -9) (undo-tree-id383 . -9) (undo-tree-id384 . -9) (undo-tree-id385 . -9) (undo-tree-id386 . -9) (undo-tree-id387 . -9) (undo-tree-id388 . -9) (undo-tree-id389 . -9) (undo-tree-id390 . -9) (undo-tree-id391 . -9) (undo-tree-id392 . -9) (undo-tree-id393 . -9) (undo-tree-id394 . -9) (undo-tree-id395 . -9) (undo-tree-id396 . -9) (undo-tree-id397 . -9)) (25813 65055 938774 283000) 0 nil] [nil nil ((#("        if (val.length > 0) {
" 0 8 (part-side javascript) 8 10 (part-side javascript face web-mode-keyword-face) 10 11 (part-side javascript) 11 12 (part-side javascript face (rainbow-delimiters-depth-5-face)) 12 26 (part-side javascript) 26 27 (part-side javascript face (rainbow-delimiters-depth-5-face)) 27 28 (part-side javascript) 28 29 (part-side javascript face (rainbow-delimiters-depth-5-face)) 29 30 (part-side javascript)) . 108306) (108272 . 108306) (#("        this.chosen_saveref = val
" 0 8 (part-side javascript) 8 12 (part-side javascript face web-mode-constant-face) 12 13 (part-side javascript) 13 27 (part-side javascript) 27 29 (part-side javascript) 29 34 (part-side javascript)) . 108242) (undo-tree-id243 . -33) (108276 . 108306) 108275) ((#("        if (val.length > 0) {
" 0 8 (part-side javascript) 8 10 (part-side javascript face web-mode-keyword-face) 10 11 (part-side javascript) 11 12 (part-side javascript face (rainbow-delimiters-depth-4-face)) 12 26 (part-side javascript) 26 27 (part-side javascript face (rainbow-delimiters-depth-4-face)) 27 28 (part-side javascript) 28 29 (part-side javascript face (rainbow-delimiters-depth-4-face)) 29 30 (part-side javascript)) . 108276) (undo-tree-id254 . -30) (undo-tree-id255 . -30) (undo-tree-id256 . -30) (undo-tree-id257 . -30) (undo-tree-id258 . -30) (undo-tree-id259 . -30) (undo-tree-id260 . -30) (undo-tree-id261 . -30) (undo-tree-id262 . -30) (undo-tree-id263 . -30) (undo-tree-id264 . -30) (undo-tree-id265 . -30) (undo-tree-id266 . -30) (undo-tree-id267 . -30) (undo-tree-id268 . -30) (undo-tree-id269 . -30) (undo-tree-id270 . -30) (108242 . 108276) (#("        this.chosen_saveref = val
" 0 8 (part-side javascript) 8 12 (part-side javascript face web-mode-constant-face) 12 13 (part-side javascript) 13 27 (part-side javascript) 27 29 (part-side javascript) 29 34 (part-side javascript)) . 108272) (undo-tree-id271 . -34) (undo-tree-id272 . -33) (undo-tree-id273 . -33) (undo-tree-id274 . -33) (undo-tree-id275 . -33) (undo-tree-id276 . -33) (undo-tree-id277 . -33) (undo-tree-id278 . -33) (undo-tree-id279 . -33) (undo-tree-id280 . -33) (undo-tree-id281 . -33) (undo-tree-id282 . -33) (undo-tree-id283 . -33) (undo-tree-id284 . -33) (108306 . 108336)) (25813 65012 214450 167000) 0 nil])
([nil nil ((#("val" 0 3 (part-side javascript)) . 108288) (undo-tree-id405 . -3) (undo-tree-id406 . -3) (t 25813 65227 125307 267000)) nil (25813 65345 552173 573000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 108434) (108433 . 108434) (108432 . 108434) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -108432) (108427 . 108433)) ((#("elif (" 0 2 (part-side javascript face web-mode-function-call-face) 2 4 (part-side javascript face web-mode-function-call-face) 4 5 (part-side javascript) 5 6 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 108427) (undo-tree-id288 . -5) (undo-tree-id289 . -2) (undo-tree-id290 . -5) (undo-tree-id291 . -5) (undo-tree-id292 . -5) (undo-tree-id293 . -5) (undo-tree-id294 . -5) (undo-tree-id295 . -5) (undo-tree-id296 . -5) (undo-tree-id297 . -5) (undo-tree-id298 . -5) (undo-tree-id299 . -5) (undo-tree-id300 . -5) (undo-tree-id301 . -5) (undo-tree-id302 . -5) (undo-tree-id303 . -2) (undo-tree-id304 . -2) (undo-tree-id305 . -2) (undo-tree-id306 . -2) (undo-tree-id307 . -2) (undo-tree-id308 . -2) (undo-tree-id309 . -2) (undo-tree-id310 . -2) (undo-tree-id311 . -2) (undo-tree-id312 . -2) (undo-tree-id313 . -2) (undo-tree-id314 . -2) (undo-tree-id315 . -2) (undo-tree-id316 . -2) (undo-tree-id317 . -2) (undo-tree-id318 . -2) (undo-tree-id319 . -2) (undo-tree-id320 . -2) (undo-tree-id321 . -2) (undo-tree-id322 . -2) (108432 . 108433) (#("()" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face)) 1 2 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 108432) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (#(")" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 108433) (108434 . 108435)) (25813 65055 350353 637000) 0 nil])
([nil nil ((#("          const fil = val[0]
" 0 10 (part-side javascript) 10 15 (part-side javascript face web-mode-keyword-face) 15 16 (part-side javascript) 16 19 (part-side javascript face web-mode-variable-name-face) 19 25 (part-side javascript) 25 26 (part-side javascript face (rainbow-delimiters-depth-5-face)) 26 27 (part-side javascript) 27 28 (part-side javascript face (rainbow-delimiters-depth-5-face)) 28 29 (part-side javascript)) . 108335) (108301 . 108335) (#("        this.chosen_saveref = val
" 0 8 (part-side javascript) 8 12 (part-side javascript face web-mode-constant-face) 12 13 (part-side javascript) 13 27 (part-side javascript) 27 29 (part-side javascript) 29 34 (part-side javascript)) . 108272) (undo-tree-id242 . -33) (108306 . 108335) 108305) ((#("          const fil = val[0]
" 0 10 (part-side javascript) 10 15 (part-side javascript face web-mode-keyword-face) 15 16 (part-side javascript) 16 19 (part-side javascript face web-mode-variable-name-face) 19 25 (part-side javascript) 25 26 (part-side javascript face (rainbow-delimiters-depth-5-face)) 26 27 (part-side javascript) 27 28 (part-side javascript face (rainbow-delimiters-depth-5-face)) 28 29 (part-side javascript)) . 108306) (undo-tree-id249 . -29) (undo-tree-id250 . -29) (undo-tree-id251 . -29) (108272 . 108306) (#("        this.chosen_saveref = val
" 0 8 (part-side javascript) 8 12 (part-side javascript face web-mode-constant-face) 12 13 (part-side javascript) 13 27 (part-side javascript) 27 29 (part-side javascript) 29 34 (part-side javascript)) . 108301) (undo-tree-id252 . -34) (undo-tree-id253 . -33) (108335 . 108364)) (25813 65012 210212 136000) 0 nil])
([nil nil ((nil rear-nonsticky nil 108306 . 108307) (nil part-side javascript 108293 . 108307) (nil part-side javascript 108292 . 108293) (nil part-side javascript 108288 . 108292) (nil face web-mode-constant-face 108288 . 108292) (108288 . 108307)) nil (25813 65345 552169 284000) 0 nil])
([nil nil ((108429 . 108432)) ((#("se " 0 2 (part-side javascript face web-mode-keyword-face) 2 3 (part-side javascript)) . 108429)) (25813 65054 916361 970000) 0 nil])
nil
([nil nil ((#("val" 0 3 (part-side javascript)) . 108344) (undo-tree-id402 . -3) (undo-tree-id403 . -2) (undo-tree-id404 . -3)) nil (25813 65345 552165 719000) 0 nil])
([nil nil ((108436 . 108456)) ((#("this.filter_name == " 0 4 (part-side javascript face web-mode-constant-face) 4 20 (part-side javascript)) . 108436) (undo-tree-id285 . -15) (undo-tree-id286 . -20) (undo-tree-id287 . -13)) (25813 65054 915353 237000) 0 nil])
([nil nil ((nil rear-nonsticky nil 108362 . 108363) (nil part-side javascript 108349 . 108363) (nil part-side javascript 108348 . 108349) (nil part-side javascript 108344 . 108348) (nil face web-mode-constant-face 108344 . 108348) (108344 . 108363)) nil (25813 65345 552147 965000) 0 nil])
nil
([nil nil ((108321 . 108332) (t 25813 65345 589582 575000)) nil (25813 65393 327316 189000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 108345) (108344 . 108345) (108343 . 108345) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-5-face))) . -108343) (108332 . 108344)) nil (25813 65393 327314 523000) 0 nil])
([nil nil ((#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . 108346) (108345 . 108346) (108344 . 108346) (#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . -108344) (108344 . 108345)) nil (25813 65393 327312 136000) 0 nil])
([nil nil ((108345 . 108356)) nil (25813 65393 327310 100000) 0 nil])
([nil nil ((#("E" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -108355) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) 108356) nil (25813 65393 327308 340000) 0 nil])
([nil nil ((108355 . 108364)) nil (25813 65393 327303 746000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -108363) (undo-tree-id413 . -1) 108364) nil (25813 65393 327302 336000) 0 nil])
([nil nil ((108364 . 108365)) nil (25813 65393 327299 736000) 0 nil])
([nil nil ((108363 . 108366)) nil (25813 65393 327298 416000) 0 nil])
([nil nil ((#("          const fil = this.chosen_saveref[0]
" 0 10 (part-side javascript) 10 15 (part-side javascript face web-mode-keyword-face) 15 16 (part-side javascript) 16 19 (part-side javascript face web-mode-variable-name-face) 19 22 (part-side javascript) 22 26 (part-side javascript face web-mode-constant-face) 26 40 (part-side javascript) 40 41 (rear-nonsticky t part-side javascript) 41 42 (part-side javascript face (rainbow-delimiters-depth-5-face)) 42 43 (part-side javascript) 43 44 (part-side javascript face (rainbow-delimiters-depth-5-face)) 44 45 (part-side javascript)) . 108415) (undo-tree-id407 . -22) (undo-tree-id408 . -22) (undo-tree-id409 . -22) (108367 . 108415) (#("          console.log(\"CHANGE FILTER PATH - \",)
" 0 18 (part-side javascript) 18 21 (part-side javascript face web-mode-function-call-face) 21 22 (part-side javascript face (rainbow-delimiters-depth-5-face)) 22 23 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 23 44 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 44 45 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 45 46 (part-side javascript) 46 47 (part-side javascript face (rainbow-delimiters-depth-5-face)) 47 48 (part-side javascript)) . 108322) (undo-tree-id410 . -33) (undo-tree-id411 . -36) (undo-tree-id412 . -46) (108370 . 108415) 108368) nil (25813 65393 327295 412000) 0 nil])
([nil nil ((nil rear-nonsticky nil 108420 . 108421) (nil part-side javascript 108413 . 108421) (108413 . 108421)) nil (25813 65393 327273 284000) 0 nil])
([nil nil ((#("        console.log(val)
        console.log(this.save_root)
        console.log(\"CHOSEN\", this.chosen_saveref)" 0 16 (part-side javascript) 16 19 (part-side javascript face web-mode-function-call-face) 19 20 (part-side javascript face (rainbow-delimiters-depth-4-face)) 20 23 (part-side javascript) 23 24 (part-side javascript face (rainbow-delimiters-depth-4-face)) 24 41 (part-side javascript) 41 44 (part-side javascript face web-mode-function-call-face) 44 45 (part-side javascript face (rainbow-delimiters-depth-4-face)) 45 49 (part-side javascript face web-mode-constant-face) 49 59 (part-side javascript) 59 60 (part-side javascript face (rainbow-delimiters-depth-4-face)) 60 61 (part-side javascript) 61 77 (part-side javascript) 77 80 (part-side javascript face web-mode-function-call-face) 80 81 (part-side javascript face (rainbow-delimiters-depth-4-face)) 81 82 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 82 88 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 88 89 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 89 91 (part-side javascript) 91 95 (part-side javascript face web-mode-constant-face) 95 109 (part-side javascript) 109 110 (rear-nonsticky t part-side javascript) 110 111 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 108130) (undo-tree-id428 . -25) (undo-tree-id429 . -111) (undo-tree-id430 . -111) (t 25813 65393 369692 345000)) nil (25813 65421 296574 161000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . -108129) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) 108130) nil (25813 65421 296569 325000) 0 nil])
([nil nil ((#("        console.log(\"PATH VAL\", val)
        console.log(\"CHOSEN UPDATE\", this.chosen_saveref)" 0 16 (part-side javascript) 16 19 (part-side javascript face web-mode-function-call-face) 19 20 (part-side javascript face (rainbow-delimiters-depth-4-face)) 20 21 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 21 29 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 29 30 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 30 35 (part-side javascript) 35 36 (part-side javascript face (rainbow-delimiters-depth-4-face)) 36 37 (part-side javascript) 37 53 (part-side javascript) 53 56 (part-side javascript face web-mode-function-call-face) 56 57 (part-side javascript face (rainbow-delimiters-depth-4-face)) 57 58 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 58 71 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 71 72 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 72 74 (part-side javascript) 74 78 (part-side javascript face web-mode-constant-face) 78 92 (part-side javascript) 92 93 (rear-nonsticky t part-side javascript) 93 94 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 108539) (undo-tree-id421 . -37) (undo-tree-id422 . -94) (undo-tree-id423 . -93) (undo-tree-id424 . -94)) nil (25813 65421 296563 563000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . -108538) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) 108539) nil (25813 65421 296553 379000) 0 nil])
([nil nil ((108394 . 108403) (t 25813 65421 341864 203000)) nil (25813 65497 359645 577000) 0 nil])
([nil nil ((108403 . 108414)) nil (25813 65497 359644 380000) 0 nil])
([nil nil ((#("        console.log
" 0 19 (part-side javascript) 19 20 (part-side javascript)) . 108415) (undo-tree-id432 . -20) (undo-tree-id433 . -11) (undo-tree-id434 . -19) (undo-tree-id435 . -19) (108405 . 108415) (#("        }
" 0 8 (part-side javascript) 8 9 (part-side javascript face (rainbow-delimiters-depth-4-face)) 9 10 (part-side javascript)) . 108385) (108395 . 108415) 108414) nil (25813 65497 359642 699000) 0 nil])
([nil nil ((108393 . 108395) 108404) nil (25813 65497 359634 367000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 108408) (108407 . 108408) (108406 . 108408) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-5-face))) . -108406) (108406 . 108407)) nil (25813 65497 359632 277000) 0 nil])
([nil nil ((108408 . 108419) (108407 . 108409) (#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . -108407) (108407 . 108408)) nil (25813 65497 359630 5000) 0 nil])
([nil nil ((108348 . 108359)) nil (25813 65497 359628 223000) 0 nil])
([nil nil ((108359 . 108364)) nil (25813 65497 359627 85000) 0 nil])
([nil nil ((nil rear-nonsticky nil 108375 . 108376) (nil part-side javascript 108364 . 108376) (108364 . 108376)) nil (25813 65497 359625 828000) 0 nil])
([nil nil ((108376 . 108388)) nil (25813 65497 359623 682000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -108387) (undo-tree-id431 . -1) 108388) nil (25813 65497 359618 95000) 0 nil])
([nil nil ((108583 . 108590) (t 25813 65497 402311 312000)) nil (25814 5410 323766 336000) 0 nil])
([nil nil ((108590 . 108608)) nil (25814 5410 323764 948000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -108607) (undo-tree-id452 . -1) 108608) nil (25814 5410 323763 772000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 108609) (108608 . 108609) (108607 . 108609) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-3-face))) . -108607) (108607 . 108608)) nil (25814 5410 323760 977000) 0 nil])
([nil nil ((108608 . 108611)) nil (25814 5410 323759 106000) 0 nil])
([nil nil ((108613 . 108615) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-3-face))) . -108613) (108612 . 108614)) nil (25814 5410 323757 996000) 0 nil])
([nil nil ((108614 . 108621)) nil (25814 5410 323756 547000) 0 nil])
([nil nil ((108616 . 108622) (#("        " 0 8 (part-side javascript face whitespace-trailing)) . 108615) (undo-tree-id450 . 8) (108615 . 108623) (#("      " 0 6 (part-side javascript)) . 108615) (undo-tree-id451 . -6) (108621 . 108622)) nil (25814 5410 323755 59000) 0 nil])
([nil nil ((108623 . 108624)) nil (25814 5410 323751 138000) 0 nil])
([nil nil ((nil rear-nonsticky nil 108647 . 108648) (nil part-side javascript 108647 . 108648) (nil face (rainbow-delimiters-depth-4-face) 108647 . 108648) (nil part-side javascript 108646 . 108647) (nil face (rainbow-delimiters-depth-4-face) 108646 . 108647) (nil part-side javascript 108641 . 108646) (nil face web-mode-function-call-face 108641 . 108646) (nil part-side javascript 108640 . 108641) (nil part-side javascript 108639 . 108640) (nil part-side javascript 108638 . 108639) (nil part-side javascript 108637 . 108638) (nil part-side javascript 108636 . 108637) (nil part-side javascript 108635 . 108636) (nil part-side javascript 108634 . 108635) (nil part-side javascript 108633 . 108634) (nil part-side javascript 108632 . 108633) (nil part-side javascript 108631 . 108632) (nil part-side javascript 108630 . 108631) (nil part-side javascript 108629 . 108630) (nil part-side javascript 108628 . 108629) (nil part-side javascript 108627 . 108628) (nil part-side javascript 108626 . 108627) (nil part-side javascript 108625 . 108626) (nil part-side javascript 108624 . 108625) (nil part-side javascript 108623 . 108624) (nil part-side javascript 108622 . 108623) (nil part-side javascript 108621 . 108622) (nil part-side javascript 108620 . 108621) (nil part-side javascript 108619 . 108620) (nil part-side javascript 108618 . 108619) (nil part-side javascript 108617 . 108618) (nil part-side javascript 108616 . 108617) (nil part-side javascript 108615 . 108616) (108615 . 108648)) nil (25814 5410 323748 513000) 0 nil])
([nil nil ((108615 . 108620)) nil (25814 5410 323740 382000) 0 nil])
([nil nil ((108615 . 108623) 108620) nil (25814 5410 323739 323000) 0 nil])
([nil nil ((108614 . 108623)) nil (25814 5410 323738 136000) 0 nil])
([nil nil ((#("$refs.saveFilterTextField.focus()" 0 1 (block-side t tag-attr t tag-name "v-select" tag-type start) 1 2 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 2 3 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 3 4 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 4 5 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 5 6 (block-side t tag-attr t tag-name "v-select" tag-type start) 6 7 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 7 8 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 8 9 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 9 10 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 10 11 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 11 12 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 12 13 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 13 14 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 14 15 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 15 16 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 16 17 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 17 18 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 18 19 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 19 20 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 20 21 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 21 22 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 22 23 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 23 24 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 24 25 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-variable-name-face) 25 26 (block-side t tag-attr t tag-name "v-select" tag-type start) 26 31 (block-side t tag-attr t tag-name "v-select" tag-type start face web-mode-function-call-face) 31 33 (block-side t tag-attr t tag-name "v-select" tag-type start)) . 30322) (undo-tree-id447 . -33) (undo-tree-id448 . -33) (undo-tree-id449 . -33)) nil (25814 5410 323736 496000) 0 nil])
([nil nil ((nil rear-nonsticky nil 30338 . 30339) (nil block-side t 30338 . 30339) (nil tag-attr t 30338 . 30339) (nil tag-name "v-select" 30338 . 30339) (nil tag-type start 30338 . 30339) (nil face web-mode-variable-name-face 30338 . 30339) (nil block-side t 30337 . 30338) (nil tag-attr t 30337 . 30338) (nil tag-name "v-select" 30337 . 30338) (nil tag-type start 30337 . 30338) (nil face web-mode-variable-name-face 30337 . 30338) (nil block-side t 30336 . 30337) (nil tag-attr t 30336 . 30337) (nil tag-name "v-select" 30336 . 30337) (nil tag-type start 30336 . 30337) (nil face web-mode-variable-name-face 30336 . 30337) (nil block-side t 30335 . 30336) (nil tag-attr t 30335 . 30336) (nil tag-name "v-select" 30335 . 30336) (nil tag-type start 30335 . 30336) (nil face web-mode-variable-name-face 30335 . 30336) (nil block-side t 30334 . 30335) (nil tag-attr t 30334 . 30335) (nil tag-name "v-select" 30334 . 30335) (nil tag-type start 30334 . 30335) (nil face web-mode-variable-name-face 30334 . 30335) (nil block-side t 30333 . 30334) (nil tag-attr t 30333 . 30334) (nil tag-name "v-select" 30333 . 30334) (nil tag-type start 30333 . 30334) (nil face web-mode-variable-name-face 30333 . 30334) (nil block-side t 30332 . 30333) (nil tag-attr t 30332 . 30333) (nil tag-name "v-select" 30332 . 30333) (nil tag-type start 30332 . 30333) (nil face web-mode-variable-name-face 30332 . 30333) (nil block-side t 30331 . 30332) (nil tag-attr t 30331 . 30332) (nil tag-name "v-select" 30331 . 30332) (nil tag-type start 30331 . 30332) (nil face web-mode-variable-name-face 30331 . 30332) (nil block-side t 30330 . 30331) (nil tag-attr t 30330 . 30331) (nil tag-name "v-select" 30330 . 30331) (nil tag-type start 30330 . 30331) (nil face web-mode-variable-name-face 30330 . 30331) (nil block-side t 30329 . 30330) (nil tag-attr t 30329 . 30330) (nil tag-name "v-select" 30329 . 30330) (nil tag-type start 30329 . 30330) (nil face web-mode-variable-name-face 30329 . 30330) (nil block-side t 30328 . 30329) (nil tag-attr t 30328 . 30329) (nil tag-name "v-select" 30328 . 30329) (nil tag-type start 30328 . 30329) (nil face web-mode-variable-name-face 30328 . 30329) (nil block-side t 30327 . 30328) (nil tag-attr t 30327 . 30328) (nil tag-name "v-select" 30327 . 30328) (nil tag-type start 30327 . 30328) (nil face web-mode-variable-name-face 30327 . 30328) (nil block-side t 30326 . 30327) (nil tag-attr t 30326 . 30327) (nil tag-name "v-select" 30326 . 30327) (nil tag-type start 30326 . 30327) (nil face web-mode-variable-name-face 30326 . 30327) (nil block-side t 30325 . 30326) (nil tag-attr t 30325 . 30326) (nil tag-name "v-select" 30325 . 30326) (nil tag-type start 30325 . 30326) (nil face web-mode-variable-name-face 30325 . 30326) (nil block-side t 30324 . 30325) (nil tag-attr t 30324 . 30325) (nil tag-name "v-select" 30324 . 30325) (nil tag-type start 30324 . 30325) (nil face web-mode-variable-name-face 30324 . 30325) (nil block-side t 30323 . 30324) (nil tag-attr t 30323 . 30324) (nil tag-name "v-select" 30323 . 30324) (nil tag-type start 30323 . 30324) (nil face web-mode-variable-name-face 30323 . 30324) (nil block-side t 30322 . 30323) (nil tag-attr t 30322 . 30323) (nil tag-name "v-select" 30322 . 30323) (nil tag-type start 30322 . 30323) (nil face web-mode-variable-name-face 30322 . 30323) (30322 . 30339)) nil (25814 5410 323727 824000) 0 nil])
([nil nil ((#("val" 0 3 (part-side javascript)) . 108592) (undo-tree-id445 . -3) (undo-tree-id446 . -3)) nil (25814 5410 323708 123000) 0 nil])
([nil nil ((108592 . 108595)) nil (25814 5410 323704 721000) 0 nil])
([nil nil ((108607 . 108617)) nil (25814 5410 323703 769000) 0 nil])
([nil nil ((#("p" 0 1 (part-side javascript)) . -108608) (undo-tree-id436 . -1) (#("m" 0 1 (part-side javascript)) . -108609) (undo-tree-id437 . -1) (#("s" 0 1 (part-side javascript)) . -108610) (undo-tree-id438 . -1) (#("p" 0 1 (part-side javascript)) . -108611) (undo-tree-id439 . -1) (#("æ" 0 1 (part-side javascript)) . -108612) (undo-tree-id440 . -1) (#("e" 0 1 (part-side javascript)) . -108613) (undo-tree-id441 . -1) (#("-" 0 1 (part-side javascript)) . -108614) (undo-tree-id442 . -1) (#("æ" 0 1 (part-side javascript)) . -108615) (undo-tree-id443 . -1) (#("p" 0 1 (part-side javascript)) . -108616) (undo-tree-id444 . -1) 108617) nil (25814 5410 323700 537000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 108620) (108619 . 108620) (108618 . 108620) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -108618) (108608 . 108619)) nil (25814 5410 323679 585000) 0 nil])
([nil nil ((108619 . 108622)) nil (25814 5410 323670 953000) 0 nil])
([nil nil ((108623 . 108632) (t 25814 5410 364906 340000)) nil (25814 5469 775392 246000) 0 nil])
([nil nil ((#("        this.$refs.saveFilterTextField.focus()
" 0 8 (part-side javascript) 8 12 (part-side javascript face web-mode-constant-face) 12 13 (part-side javascript) 13 39 (part-side javascript) 39 44 (part-side javascript face web-mode-function-call-face) 44 45 (part-side javascript face (rainbow-delimiters-depth-4-face)) 45 46 (rear-nonsticky t part-side javascript face (rainbow-delimiters-depth-4-face)) 46 47 (part-side javascript)) . 108680) (undo-tree-id458 . -47) (undo-tree-id459 . -8) (108671 . 108680) (#("        
" 0 8 (part-side javascript face whitespace-trailing) 8 9 (part-side javascript)) . 108624) (108633 . 108680) 108641) nil (25814 5469 775390 171000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 108684) (108683 . 108684) (108682 . 108684) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -108682) (108679 . 108683)) nil (25814 5469 775384 240000) 0 nil])
([nil nil ((108683 . 108690)) nil (25814 5469 775381 901000) 0 nil])
([nil nil ((nil rear-nonsticky nil 108711 . 108712) (nil part-side javascript 108711 . 108712) (nil face (rainbow-delimiters-depth-5-face) 108711 . 108712) (nil part-side javascript 108710 . 108711) (nil part-side javascript 108709 . 108710) (nil face (rainbow-delimiters-depth-5-face) 108709 . 108710) (nil rear-nonsticky t 108708 . 108709) (nil part-side javascript 108708 . 108709) (nil part-side javascript 108694 . 108708) (nil part-side javascript 108690 . 108694) (nil face web-mode-constant-face 108690 . 108694) (108690 . 108712)) nil (25814 5469 775379 906000) 0 nil])
([nil nil ((108712 . 108717)) nil (25814 5469 775375 770000) 0 nil])
([nil nil ((108718 . 108720) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -108718) (108718 . 108719)) nil (25814 5469 775374 42000) 0 nil])
([nil nil ((108721 . 108729) (#("          " 0 10 (part-side javascript face whitespace-trailing)) . 108720) (undo-tree-id456 . -8) (undo-tree-id457 . 10) (108728 . 108730) (108719 . 108729)) nil (25814 5469 775371 731000) 0 nil])
([nil nil ((108720 . 108730)) nil (25814 5469 775366 232000) 0 nil])
([nil nil ((nil rear-nonsticky nil 108751 . 108752) (nil part-side javascript 108751 . 108752) (nil face (rainbow-delimiters-depth-5-face) 108751 . 108752) (nil part-side javascript 108750 . 108751) (nil part-side javascript 108749 . 108750) (nil face (rainbow-delimiters-depth-5-face) 108749 . 108750) (nil rear-nonsticky t 108748 . 108749) (nil part-side javascript 108748 . 108749) (nil part-side javascript 108734 . 108748) (nil part-side javascript 108730 . 108734) (nil face web-mode-constant-face 108730 . 108734) (108730 . 108752)) nil (25814 5469 775364 88000) 0 nil])
([nil nil ((#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-5-face))) . -108749) (undo-tree-id453 . -1) (#("0" 0 1 (part-side javascript)) . -108750) (undo-tree-id454 . -1) (#("]" 0 1 (rear-nonsticky t part-side javascript face (rainbow-delimiters-depth-5-face))) . -108751) (undo-tree-id455 . -1) 108752) nil (25814 5469 775357 816000) 0 nil])
([nil nil ((108752 . 108754) (#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-5-face))) . -108752) (108749 . 108753)) nil (25814 5469 775339 211000) 0 nil])
([nil nil ((108718 . 108719)) nil (25814 5469 775318 579000) 0 nil])
([nil nil ((108670 . 108679) (t 25814 5469 825041 40000)) nil (25814 5501 284341 273000) 0 nil])
([nil nil ((108683 . 108687) (108682 . 108684) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -108682) (108679 . 108683)) nil (25814 5501 289684 757000) 0 nil])
([nil nil ((#("t" 0 1 (part-side javascript)) . -108683) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (#("h" 0 1 (part-side javascript)) . -108684) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (#("i" 0 1 (part-side javascript)) . -108685) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (#("s" 0 1 (part-side javascript face web-mode-constant-face)) . -108686) (undo-tree-id475 . -1) (undo-tree-id476 . -1) 108687) nil (25814 5515 179491 439000) 0 nil] [nil nil ((nil rear-nonsticky nil 108708 . 108709) (nil part-side javascript 108708 . 108709) (nil face (rainbow-delimiters-depth-5-face) 108708 . 108709) (nil part-side javascript 108707 . 108708) (nil part-side javascript 108706 . 108707) (nil face (rainbow-delimiters-depth-5-face) 108706 . 108707) (nil rear-nonsticky t 108705 . 108706) (nil part-side javascript 108705 . 108706) (nil part-side javascript 108691 . 108705) (nil part-side javascript 108687 . 108691) (108687 . 108709)) ((#("this.chosen_saveref[0]" 0 18 (part-side javascript) 18 19 (rear-nonsticky t part-side javascript) 19 20 (part-side javascript face (rainbow-delimiters-depth-5-face)) 20 21 (part-side javascript) 21 22 (rear-nonsticky nil part-side javascript face (rainbow-delimiters-depth-5-face))) . 108687) (undo-tree-id460 . -22) (nil rear-nonsticky nil 108705 . 108706) (nil face (rainbow-delimiters-depth-5-face) 108706 . 108707) (nil face (rainbow-delimiters-depth-5-face) 108708 . 108709) (nil rear-nonsticky t 108708 . 108709)) (25814 5501 284330 395000) 0 nil])
([nil nil ((nil rear-nonsticky nil 108704 . 108705) (nil part-side javascript 108704 . 108705) (nil face (rainbow-delimiters-depth-5-face) 108704 . 108705) (nil part-side javascript 108703 . 108704) (nil part-side javascript 108702 . 108703) (nil face (rainbow-delimiters-depth-5-face) 108702 . 108703) (nil rear-nonsticky t 108701 . 108702) (nil part-side javascript 108701 . 108702) (nil part-side javascript 108687 . 108701) (nil part-side javascript 108683 . 108687) (nil face web-mode-constant-face 108683 . 108687) (108683 . 108705)) nil (25814 5515 179471 845000) 0 nil])
nil
([nil nil ((#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-5-face))) . -108702) (undo-tree-id466 . -1) (#("0" 0 1 (part-side javascript)) . -108703) (undo-tree-id467 . -1) (#("]" 0 1 (rear-nonsticky t part-side javascript face (rainbow-delimiters-depth-5-face))) . -108704) (undo-tree-id468 . -1) 108705) nil (25814 5515 179458 161000) 0 nil])
([nil nil ((108702 . 108714)) nil (25814 5515 179449 268000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -108713) (undo-tree-id465 . -1) 108714) nil (25814 5515 179446 138000) 0 nil])
([nil nil ((108723 . 108725) 108757) nil (25814 5515 179439 945000) 0 nil])
([nil nil ((108777 . 108779) 108801) nil (25814 5515 179437 772000) 0 nil])
([nil nil ((108715 . 108717) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -108715) (108714 . 108716)) nil (25814 5515 179433 426000) 0 nil])
([nil nil ((108716 . 108725)) nil (25814 5515 179427 757000) 0 nil])
([nil nil ((#("          if (val != this.chosen_saveref[0].root) {
" 0 10 (part-side javascript) 10 12 (part-side javascript face web-mode-keyword-face) 12 13 (part-side javascript) 13 14 (part-side javascript face (rainbow-delimiters-depth-5-face)) 14 21 (part-side javascript) 21 25 (part-side javascript face web-mode-constant-face) 25 40 (part-side javascript) 40 41 (part-side javascript face (rainbow-delimiters-depth-6-face)) 41 42 (part-side javascript) 42 43 (rear-nonsticky t part-side javascript face (rainbow-delimiters-depth-6-face)) 43 48 (part-side javascript) 48 49 (part-side javascript face (rainbow-delimiters-depth-5-face)) 49 50 (part-side javascript) 50 51 (part-side javascript face (rainbow-delimiters-depth-5-face)) 51 52 (part-side javascript)) . 108779) (undo-tree-id463 . -21) (108769 . 108779) (#("        }
" 0 8 (part-side javascript) 8 9 (part-side javascript face (rainbow-delimiters-depth-4-face)) 9 10 (part-side javascript)) . 108717) (undo-tree-id464 . -8) (108727 . 108779) 108725) nil (25814 5515 179422 82000) 0 nil])
([nil nil ((#("            this.chosen_saveref = []
" 0 12 (part-side javascript) 12 16 (part-side javascript face web-mode-constant-face) 16 31 (part-side javascript) 31 33 (part-side javascript) 33 34 (part-side javascript) 34 35 (part-side javascript face (rainbow-delimiters-depth-5-face)) 35 36 (part-side javascript face (rainbow-delimiters-depth-5-face)) 36 37 (part-side javascript)) . 108816) (undo-tree-id461 . -10) (108806 . 108816) (#("        }
" 0 8 (part-side javascript) 8 9 (part-side javascript face (rainbow-delimiters-depth-5-face)) 9 10 (part-side javascript)) . 108769) (undo-tree-id462 . -8) (108779 . 108816) 108777) nil (25814 5515 179414 489000) 0 nil])
([nil nil ((108814 . 108816)) nil (25814 5515 179397 87000) 0 nil])
([nil nil ((#("
        console.log(val)" 0 1 (part-side javascript) 1 17 (part-side javascript) 17 20 (part-side javascript face web-mode-function-call-face) 20 21 (part-side javascript face (rainbow-delimiters-depth-4-face)) 21 24 (part-side javascript) 24 25 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 108598) (undo-tree-id490 . -1) (undo-tree-id491 . -25) (undo-tree-id492 . -24) (undo-tree-id493 . -25) (t 25814 5515 221144 403000)) nil (25814 5546 610649 866000) 0 nil])
([nil nil ((#("
        /* else {
         *   this.filter_name = \"\"
         *   this.save_root = null
         * } */" 0 1 (part-side javascript) 1 9 (part-side javascript) 9 10 (part-side javascript part-token comment syntax-table (11) font-lock-face web-mode-javascript-comment-face) 10 12 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 12 16 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 16 32 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 32 36 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 36 51 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 51 52 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 52 53 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 53 67 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 67 71 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 71 84 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 84 88 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 88 104 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face)) . 108454) (undo-tree-id486 . -1) (undo-tree-id487 . -104) (undo-tree-id488 . -2) (undo-tree-id489 . -104)) nil (25814 5546 610627 173000) 0 nil])
([nil nil ((#("
          console.log(\"FilterName!\")" 0 1 (part-side javascript) 1 19 (part-side javascript) 19 22 (part-side javascript face web-mode-function-call-face) 22 23 (part-side javascript face (rainbow-delimiters-depth-5-face)) 23 24 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 24 35 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 35 36 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 36 37 (part-side javascript face (rainbow-delimiters-depth-5-face))) . 108407) (undo-tree-id483 . -1) (undo-tree-id484 . -37) (undo-tree-id485 . -37)) nil (25814 5546 610607 237000) 0 nil])
([nil nil ((#("
          console.log(\"CHANGE FILTER PATH - \",fil.path)" 0 1 (part-side javascript) 1 19 (part-side javascript) 19 22 (part-side javascript face web-mode-function-call-face) 22 23 (part-side javascript face (rainbow-delimiters-depth-5-face)) 23 24 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 24 45 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 45 46 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 46 47 (part-side javascript) 47 54 (part-side javascript) 54 55 (rear-nonsticky t part-side javascript) 55 56 (part-side javascript face (rainbow-delimiters-depth-5-face))) . 108238) (undo-tree-id480 . -1) (undo-tree-id481 . -56) (undo-tree-id482 . -56)) nil (25814 5546 610587 207000) 0 nil])
([nil nil ((#("
          console.log(\"CHOSEN PATH\", this.chosen_saveref[0].path)
          console.log(\"COMPARE\", val == this.chosen_saveref[0].path)" 0 1 (part-side javascript) 1 19 (part-side javascript) 19 22 (part-side javascript face web-mode-function-call-face) 22 23 (part-side javascript face (rainbow-delimiters-depth-5-face)) 23 24 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 24 35 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 35 36 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 36 38 (part-side javascript) 38 42 (part-side javascript face web-mode-constant-face) 42 56 (part-side javascript) 56 57 (rear-nonsticky t part-side javascript) 57 58 (part-side javascript face (rainbow-delimiters-depth-6-face)) 58 59 (part-side javascript) 59 60 (part-side javascript face (rainbow-delimiters-depth-6-face)) 60 65 (part-side javascript) 65 66 (part-side javascript face (rainbow-delimiters-depth-5-face)) 66 67 (part-side javascript) 67 85 (part-side javascript) 85 88 (part-side javascript face web-mode-function-call-face) 88 89 (part-side javascript face (rainbow-delimiters-depth-5-face)) 89 90 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 90 97 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 97 98 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 98 107 (part-side javascript) 107 111 (part-side javascript face web-mode-constant-face) 111 126 (part-side javascript) 126 127 (part-side javascript face (rainbow-delimiters-depth-6-face)) 127 128 (part-side javascript) 128 129 (part-side javascript face (rainbow-delimiters-depth-6-face)) 129 133 (part-side javascript) 133 134 (rear-nonsticky t part-side javascript) 134 135 (part-side javascript face (rainbow-delimiters-depth-5-face))) . 108691) (undo-tree-id477 . -1) (undo-tree-id478 . -135) (undo-tree-id479 . -135)) nil (25814 5546 610565 931000) 0 nil])
([nil nil ((#("
                        <!-- HTML that describe how select should render items when the select is open -->
                        <!-- <template slot=\"item\" slot-scope=\"data\" justify=\"left\">
                             {{ data.item }}
                             </template> -->
                        <!-- No match by search -->" 25 26 (tag-type comment tag-beg 0 font-lock-face web-mode-comment-face) 26 106 (tag-type comment font-lock-face web-mode-comment-face) 106 107 (tag-type comment tag-end t font-lock-face web-mode-comment-face) 132 133 (tag-type comment tag-beg 0 font-lock-face web-mode-comment-face) 133 222 (tag-type comment font-lock-face web-mode-comment-face) 222 223 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg tag-type comment font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 223 224 (block-side t block-token delimiter-beg tag-type comment font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 224 225 (block-side t tag-type comment) 225 226 (block-side t tag-type comment face web-mode-variable-name-face) 226 227 (block-side t tag-type comment face web-mode-variable-name-face) 227 228 (block-side t tag-type comment face web-mode-variable-name-face) 228 229 (block-side t tag-type comment face web-mode-variable-name-face) 229 230 (block-side t tag-type comment) 230 231 (block-side t tag-type comment face web-mode-variable-name-face) 231 232 (block-side t tag-type comment face web-mode-variable-name-face) 232 233 (block-side t tag-type comment face web-mode-variable-name-face) 233 234 (block-side t tag-type comment face web-mode-variable-name-face) 234 235 (block-side t tag-type comment) 235 236 (block-side t block-token delimiter-end tag-type comment font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 236 237 (block-side t block-end t block-token delimiter-end tag-type comment font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 237 281 (tag-type comment font-lock-face web-mode-comment-face) 281 282 (tag-type comment tag-end t font-lock-face web-mode-comment-face) 307 308 (tag-type comment tag-beg 0 font-lock-face web-mode-comment-face) 308 333 (tag-type comment font-lock-face web-mode-comment-face) 333 334 (tag-type comment tag-end t font-lock-face web-mode-comment-face)) . 31360) (undo-tree-id494 . -1) (undo-tree-id495 . -334) (undo-tree-id496 . -334) (t 25814 5546 657216 219000)) nil (25814 5563 587273 610000) 0 nil])
([nil nil ((81194 . 81205) (t 25814 5563 645255 104000)) nil (25814 7032 275109 467000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 81218) (81217 . 81218) (81216 . 81218) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . -81216) (81205 . 81217)) nil (25814 7032 275106 378000) 0 nil])
([nil nil ((nil rear-nonsticky nil 81232 . 81233) (nil part-side javascript 81221 . 81233) (nil part-side javascript 81217 . 81221) (nil face web-mode-constant-face 81217 . 81221) (81217 . 81233)) nil (25814 7032 275097 650000) 0 nil])
([nil nil ((29022 . 29047) (t 25814 7032 329392 909000)) nil (25814 7241 117011 884000) 0 nil])
([nil nil ((nil rear-nonsticky nil 29169 . 29170) (nil tag-name "v-icon" 29169 . 29170) (nil tag-type end 29169 . 29170) (nil tag-end t 29169 . 29170) (nil font-lock-face web-mode-html-tag-bracket-face 29169 . 29170) (nil tag-name "v-icon" 29163 . 29169) (nil tag-type end 29163 . 29169) (nil font-lock-face web-mode-html-tag-custom-face 29163 . 29169) (nil tag-name "v-icon" 29162 . 29163) (nil tag-type end 29162 . 29163) (nil font-lock-face web-mode-html-tag-bracket-face 29162 . 29163) (nil tag-name "v-icon" 29161 . 29162) (nil tag-type end 29161 . 29162) (nil tag-beg 22 29161 . 29162) (nil font-lock-face web-mode-html-tag-bracket-face 29161 . 29162) (nil tag-name "v-icon" 29108 . 29109) (nil tag-type start 29108 . 29109) (nil tag-end t 29108 . 29109) (nil font-lock-face web-mode-html-tag-bracket-face 29108 . 29109) (nil tag-attr t 29107 . 29108) (nil tag-attr-end 4 29107 . 29108) (nil tag-name "v-icon" 29107 . 29108) (nil tag-type start 29107 . 29108) (nil font-lock-face web-mode-html-attr-value-face 29107 . 29108) (nil tag-attr t 29105 . 29107) (nil tag-name "v-icon" 29105 . 29107) (nil tag-type start 29105 . 29107) (nil font-lock-face web-mode-html-attr-value-face 29105 . 29107) (nil tag-attr t 29104 . 29105) (nil tag-name "v-icon" 29104 . 29105) (nil tag-type start 29104 . 29105) (nil font-lock-face web-mode-html-attr-value-face 29104 . 29105) (nil tag-attr t 29090 . 29104) (nil tag-name "v-icon" 29090 . 29104) (nil tag-type start 29090 . 29104) (nil font-lock-face web-mode-html-attr-value-face 29090 . 29104) (nil tag-attr t 29089 . 29090) (nil tag-name "v-icon" 29089 . 29090) (nil tag-type start 29089 . 29090) (nil font-lock-face web-mode-html-attr-value-face 29089 . 29090) (nil tag-attr t 29079 . 29089) (nil tag-name "v-icon" 29079 . 29089) (nil tag-type start 29079 . 29089) (nil font-lock-face web-mode-html-attr-value-face 29079 . 29089) (nil tag-attr t 29078 . 29079) (nil tag-name "v-icon" 29078 . 29079) (nil tag-type start 29078 . 29079) (nil font-lock-face web-mode-html-attr-value-face 29078 . 29079) (nil tag-attr t 29077 . 29078) (nil tag-name "v-icon" 29077 . 29078) (nil tag-type start 29077 . 29078) (nil font-lock-face web-mode-html-attr-equal-face 29077 . 29078) (nil tag-attr t 29076 . 29077) (nil tag-name "v-icon" 29076 . 29077) (nil tag-type start 29076 . 29077) (nil font-lock-face web-mode-html-attr-engine-face 29076 . 29077) (nil tag-attr t 29075 . 29076) (nil tag-name "v-icon" 29075 . 29076) (nil tag-type start 29075 . 29076) (nil font-lock-face web-mode-html-attr-engine-face 29075 . 29076) (nil tag-attr t 29074 . 29075) (nil tag-name "v-icon" 29074 . 29075) (nil tag-type start 29074 . 29075) (nil font-lock-face web-mode-html-attr-engine-face 29074 . 29075) (nil tag-attr-beg 2 29073 . 29074) (nil tag-attr t 29073 . 29074) (nil tag-name "v-icon" 29073 . 29074) (nil tag-type start 29073 . 29074) (nil font-lock-face web-mode-html-attr-engine-face 29073 . 29074) (nil tag-name "v-icon" 29072 . 29073) (nil tag-type start 29072 . 29073) (nil tag-name "v-icon" 29066 . 29072) (nil tag-type start 29066 . 29072) (nil font-lock-face web-mode-html-tag-custom-face 29066 . 29072) (nil tag-name "v-icon" 29065 . 29066) (nil tag-type start 29065 . 29066) (nil tag-beg 19 29065 . 29066) (nil font-lock-face web-mode-html-tag-bracket-face 29065 . 29066) (29047 . 29170)) nil (25814 7241 117006 318000) 0 nil])
([nil nil (("                  " . -29047) (undo-tree-id497 . -3) 29050) nil (25814 7241 116986 897000) 0 nil])
([nil nil ((29092 . 29118) ("                    " . 29092) 29116) nil (25814 7241 116976 622000) 0 nil])
([nil nil ((29131 . 29155) ("                  " . 29131) 29158) nil (25814 7241 116973 500000) 0 nil])
([nil nil ((29199 . 29204)) nil (25814 7241 116965 71000) 0 nil])
([nil nil ((30201 . 30226) (t 25814 7241 161955 263000)) nil (25814 7360 692991 911000) 0 nil])
([nil nil ((nil rear-nonsticky nil 30243 . 30244) (nil tag-attr t 30243 . 30244) (nil tag-attr-end 0 30243 . 30244) (nil tag-name "v-select" 30243 . 30244) (nil tag-type start 30243 . 30244) (nil font-lock-face web-mode-html-attr-name-face 30243 . 30244) (nil tag-attr t 30228 . 30243) (nil tag-name "v-select" 30228 . 30243) (nil tag-type start 30228 . 30243) (nil font-lock-face web-mode-html-attr-name-face 30228 . 30243) (nil tag-attr-beg 0 30227 . 30228) (nil tag-attr t 30227 . 30228) (nil tag-name "v-select" 30227 . 30228) (nil tag-type start 30227 . 30228) (nil font-lock-face web-mode-html-attr-name-face 30227 . 30228) (nil tag-name "v-select" 30226 . 30227) (nil tag-type start 30226 . 30227) (30226 . 30244)) nil (25814 7360 692989 538000) 0 nil])
([nil nil ((30244 . 30247)) nil (25814 7360 692983 925000) 0 nil])
([nil nil ((#("#" 0 1 (tag-name "v-select" tag-type start)) . -30226) (undo-tree-id498 . -1) 30227) nil (25814 7360 692981 352000) 0 nil])
([nil nil ((nil rear-nonsticky nil 30256 . 30257) (nil tag-attr t 30245 . 30257) (nil tag-name "v-select" 30245 . 30257) (nil tag-type start 30245 . 30257) (nil font-lock-face web-mode-html-attr-value-face 30245 . 30257) (30245 . 30257)) nil (25814 7360 692965 164000) 0 nil])
([nil nil ((#("append-outer-icon" 0 1 (tag-attr-beg 0 tag-attr t tag-name "v-select" tag-type start font-lock-face web-mode-html-attr-name-face) 1 16 (tag-attr t tag-name "v-select" tag-type start font-lock-face web-mode-html-attr-name-face) 16 17 (rear-nonsticky t tag-attr t tag-name "v-select" tag-type start font-lock-face web-mode-html-attr-name-face)) . 30226) (undo-tree-id499 . -17) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -17) (undo-tree-id503 . -17) (t 25814 7360 750273 465000)) nil (25814 7397 927153 560000) 0 nil])
([nil nil ((nil rear-nonsticky nil 30237 . 30238) (nil tag-attr t 30227 . 30238) (nil tag-name "v-select" 30227 . 30238) (nil tag-type start 30227 . 30238) (nil font-lock-face web-mode-html-attr-name-face 30227 . 30238) (nil tag-attr-beg 0 30226 . 30227) (nil tag-attr t 30226 . 30227) (nil tag-name "v-select" 30226 . 30227) (nil tag-type start 30226 . 30227) (nil font-lock-face web-mode-html-attr-name-face 30226 . 30227) (30226 . 30238)) nil (25814 7397 927131 237000) 0 nil])
([nil nil ((30097 . 30098) (t 25814 7397 982372 89000)) nil (25814 7430 96455 947000) 0 nil])
([nil nil ((nil rear-nonsticky nil 30114 . 30115) (nil tag-attr t 30114 . 30115) (nil tag-attr-end 5 30114 . 30115) (nil tag-name "v-row" 30114 . 30115) (nil tag-type start 30114 . 30115) (nil font-lock-face web-mode-html-attr-value-face 30114 . 30115) (nil tag-attr t 30104 . 30114) (nil tag-name "v-row" 30104 . 30114) (nil tag-type start 30104 . 30114) (nil font-lock-face web-mode-html-attr-value-face 30104 . 30114) (nil tag-attr t 30103 . 30104) (nil tag-name "v-row" 30103 . 30104) (nil tag-type start 30103 . 30104) (nil font-lock-face web-mode-html-attr-equal-face 30103 . 30104) (nil tag-attr t 30099 . 30103) (nil tag-name "v-row" 30099 . 30103) (nil tag-type start 30099 . 30103) (nil font-lock-face web-mode-html-attr-name-face 30099 . 30103) (nil tag-attr-beg 0 30098 . 30099) (nil tag-attr t 30098 . 30099) (nil tag-name "v-row" 30098 . 30099) (nil tag-type start 30098 . 30099) (nil font-lock-face web-mode-html-attr-name-face 30098 . 30099) (30098 . 30115)) nil (25814 7537 202149 31000) 0 nil])
([nil nil ((30786 . 30811)) nil (25814 7546 787608 31000) 0 nil] [nil nil ((30714 . 30735)) (("
                    " . 30714) (undo-tree-id714 . -21) (undo-tree-id715 . -1) (undo-tree-id716 . -21) (undo-tree-id717 . -21) (undo-tree-id718 . -21) (undo-tree-id719 . -21) (undo-tree-id720 . -21) (undo-tree-id721 . -21) (undo-tree-id722 . -21) (undo-tree-id723 . -21) (undo-tree-id724 . -21) (undo-tree-id725 . -21) (undo-tree-id726 . -21) (undo-tree-id727 . -21) (undo-tree-id728 . -21) (undo-tree-id729 . -21) (undo-tree-id730 . -21) (undo-tree-id731 . -21) (undo-tree-id732 . -21) (undo-tree-id733 . -21) (undo-tree-id734 . -21) (undo-tree-id735 . -21) (undo-tree-id736 . -21) (undo-tree-id737 . -21) (undo-tree-id738 . -21) (undo-tree-id739 . -21) (undo-tree-id740 . -21) (undo-tree-id741 . -21) (undo-tree-id742 . -21) (undo-tree-id743 . -21) (undo-tree-id744 . -21) (undo-tree-id745 . -21) (undo-tree-id746 . -21) (undo-tree-id747 . -21) (undo-tree-id748 . -21) (undo-tree-id749 . -21) (undo-tree-id750 . -21) (undo-tree-id751 . -21) (undo-tree-id752 . -21) (undo-tree-id753 . -21) (undo-tree-id754 . -21) (undo-tree-id755 . -21) (undo-tree-id756 . -21) (undo-tree-id757 . -21) (undo-tree-id758 . -21) (undo-tree-id759 . -21) (undo-tree-id760 . -21) (undo-tree-id761 . -21) (undo-tree-id762 . -21) (undo-tree-id763 . -21) (undo-tree-id764 . -21) (undo-tree-id765 . -21) (undo-tree-id766 . -21) (undo-tree-id767 . -21) (undo-tree-id768 . -21) (undo-tree-id769 . -21) (undo-tree-id770 . -21) (undo-tree-id771 . -21) (undo-tree-id772 . -21) (undo-tree-id773 . -21) (undo-tree-id774 . -21) (undo-tree-id775 . -21) (undo-tree-id776 . -1) (undo-tree-id777 . -21) (undo-tree-id778 . -21) (undo-tree-id779 . -21) (undo-tree-id780 . -21) (undo-tree-id781 . -21) (undo-tree-id782 . -21) (undo-tree-id783 . -21) (undo-tree-id784 . -21) (undo-tree-id785 . -21) (undo-tree-id786 . -21) (undo-tree-id787 . -21)) (25814 7536 806996 661000) 0 nil] [nil nil ((30970 . 30995) (t 25814 7430 146457 137000)) ((#("
                        " 0 1 (tag-name "v-combobox" tag-type start) 1 25 (tag-name "v-combobox" tag-type start)) . 30970) (undo-tree-id569 . -25) (undo-tree-id570 . -25) (undo-tree-id571 . -1) (undo-tree-id572 . -25) (undo-tree-id573 . -25) (undo-tree-id574 . -25) (undo-tree-id575 . -25) (undo-tree-id576 . -25) (undo-tree-id577 . -25) (undo-tree-id578 . -25) (undo-tree-id579 . -25) (undo-tree-id580 . -25) (undo-tree-id581 . -25) (undo-tree-id582 . -25) (undo-tree-id583 . -25) (undo-tree-id584 . -25) (undo-tree-id585 . -25) (undo-tree-id586 . -25) (undo-tree-id587 . -25) (undo-tree-id588 . -25) (undo-tree-id589 . -25) (undo-tree-id590 . -25) (undo-tree-id591 . -25) (undo-tree-id592 . -25) (undo-tree-id593 . -25) (undo-tree-id594 . -25) (undo-tree-id595 . -25) (undo-tree-id596 . -25) (undo-tree-id597 . -25) (undo-tree-id598 . -25) (undo-tree-id599 . -25) (undo-tree-id600 . -25) (undo-tree-id601 . -25) (undo-tree-id602 . -25) (undo-tree-id603 . -25) (undo-tree-id604 . -25) (undo-tree-id605 . -25) (undo-tree-id606 . -25) (undo-tree-id607 . -25) (undo-tree-id608 . -25) (undo-tree-id609 . -25) (undo-tree-id610 . -25) (undo-tree-id611 . -25) (undo-tree-id612 . -25) (undo-tree-id613 . -25) (undo-tree-id614 . -25) (undo-tree-id615 . -25) (undo-tree-id616 . -25) (undo-tree-id617 . -25) (undo-tree-id618 . -25) (undo-tree-id619 . -25) (undo-tree-id620 . -25) (undo-tree-id621 . -25) (undo-tree-id622 . -25) (undo-tree-id623 . -25) (undo-tree-id624 . -25) (undo-tree-id625 . -25) (undo-tree-id626 . -25) (undo-tree-id627 . -25) (undo-tree-id628 . -25) (undo-tree-id629 . -25) (undo-tree-id630 . -25) (undo-tree-id631 . -25) (undo-tree-id632 . -25) (undo-tree-id633 . -25) (undo-tree-id634 . -25) (undo-tree-id635 . -25) (undo-tree-id636 . -1) (undo-tree-id637 . -25) (undo-tree-id638 . -25) (undo-tree-id639 . -25) (undo-tree-id640 . -25) (undo-tree-id641 . -25) (undo-tree-id642 . -25) (undo-tree-id643 . -25) (undo-tree-id644 . -25) (undo-tree-id645 . -25) (undo-tree-id646 . -25) (undo-tree-id647 . -25) (undo-tree-id648 . -25) (undo-tree-id649 . -25) (undo-tree-id650 . -25) (undo-tree-id651 . -25) (undo-tree-id652 . -25)) (25814 7492 734545 702000) 0 nil])
([nil nil ((30811 . 30826)) nil (25814 7546 787606 185000) 0 nil])
([nil nil ((30735 . 30736)) (("/" . 30735) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (t 25814 7501 602645 630000)) (25814 7501 554567 900000) 0 nil])
([nil nil ((nil rear-nonsticky nil 31021 . 31022) (nil tag-attr t 31021 . 31022) (nil tag-attr-end 12 31021 . 31022) (nil tag-name "v-combobox" 31021 . 31022) (nil tag-type start 31021 . 31022) (nil font-lock-face web-mode-html-attr-value-face 31021 . 31022) (nil rear-nonsticky t 31020 . 31021) (nil tag-attr t 31020 . 31021) (nil tag-name "v-combobox" 31020 . 31021) (nil tag-type start 31020 . 31021) (nil font-lock-face web-mode-html-attr-value-face 31020 . 31021) (nil tag-attr t 31009 . 31020) (nil tag-name "v-combobox" 31009 . 31020) (nil tag-type start 31009 . 31020) (nil font-lock-face web-mode-html-attr-value-face 31009 . 31020) (nil tag-attr t 31008 . 31009) (nil tag-name "v-combobox" 31008 . 31009) (nil tag-type start 31008 . 31009) (nil font-lock-face web-mode-html-attr-value-face 31008 . 31009) (nil tag-attr t 31007 . 31008) (nil tag-name "v-combobox" 31007 . 31008) (nil tag-type start 31007 . 31008) (nil font-lock-face web-mode-html-attr-equal-face 31007 . 31008) (nil rear-nonsticky t 31006 . 31007) (nil tag-attr t 31006 . 31007) (nil tag-name "v-combobox" 31006 . 31007) (nil tag-type start 31006 . 31007) (nil font-lock-face web-mode-html-attr-name-face 31006 . 31007) (nil tag-attr t 30996 . 31006) (nil tag-name "v-combobox" 30996 . 31006) (nil tag-type start 30996 . 31006) (nil font-lock-face web-mode-html-attr-name-face 30996 . 31006) (nil tag-attr-beg 0 30995 . 30996) (nil tag-attr t 30995 . 30996) (nil tag-name "v-combobox" 30995 . 30996) (nil tag-type start 30995 . 30996) (nil font-lock-face web-mode-html-attr-name-face 30995 . 30996) (30995 . 31022)) ((#("prepend-icon=\"mdi-harddisk\"" 0 1 (tag-attr-beg 0 tag-attr t tag-name "v-combobox" tag-type start font-lock-face web-mode-html-attr-name-face) 1 11 (tag-attr t tag-name "v-combobox" tag-type start font-lock-face web-mode-html-attr-name-face) 11 12 (rear-nonsticky t tag-attr t tag-name "v-combobox" tag-type start font-lock-face web-mode-html-attr-name-face) 12 13 (tag-attr t tag-name "v-combobox" tag-type start font-lock-face web-mode-html-attr-equal-face) 13 14 (tag-attr t tag-name "v-combobox" tag-type start font-lock-face web-mode-html-attr-value-face) 14 25 (tag-attr t tag-name "v-combobox" tag-type start font-lock-face web-mode-html-attr-value-face) 25 26 (rear-nonsticky t tag-attr t tag-name "v-combobox" tag-type start font-lock-face web-mode-html-attr-value-face) 26 27 (rear-nonsticky nil tag-attr t tag-attr-end 12 tag-name "v-combobox" tag-type start font-lock-face web-mode-html-attr-value-face)) . 30995) (undo-tree-id504 . -27) (undo-tree-id505 . -27) (undo-tree-id506 . -27) (undo-tree-id507 . -27) (undo-tree-id508 . -27) (undo-tree-id509 . -27) (undo-tree-id510 . -27) (undo-tree-id511 . -27) (undo-tree-id512 . -27) (undo-tree-id513 . -27) (undo-tree-id514 . -27) (undo-tree-id515 . -27) (undo-tree-id516 . -27) (undo-tree-id517 . -27) (undo-tree-id518 . -27) (undo-tree-id519 . -27) (undo-tree-id520 . -27) (undo-tree-id521 . -27) (undo-tree-id522 . -27) (undo-tree-id523 . -27) (undo-tree-id524 . -27) (undo-tree-id525 . -27) (undo-tree-id526 . -27) (undo-tree-id527 . -27) (undo-tree-id528 . -27) (undo-tree-id529 . -27) (undo-tree-id530 . -27) (undo-tree-id531 . -27) (undo-tree-id532 . -27) (undo-tree-id533 . -27) (undo-tree-id534 . -27) (undo-tree-id535 . -27) (undo-tree-id536 . -27) (undo-tree-id537 . -27) (undo-tree-id538 . -27) (undo-tree-id539 . -27) (undo-tree-id540 . -27) (undo-tree-id541 . -27) (undo-tree-id542 . -27) (undo-tree-id543 . -27) (undo-tree-id544 . -27) (undo-tree-id545 . -27) (undo-tree-id546 . -27) (undo-tree-id547 . -27) (undo-tree-id548 . -27) (undo-tree-id549 . -27) (undo-tree-id550 . -27) (undo-tree-id551 . -27) (undo-tree-id552 . -27) (undo-tree-id553 . -27) (undo-tree-id554 . -27) (undo-tree-id555 . -27) (undo-tree-id556 . -27) (undo-tree-id557 . -27) (undo-tree-id558 . -27) (undo-tree-id559 . -27) (undo-tree-id560 . -27) (undo-tree-id561 . -27) (undo-tree-id562 . -27) (undo-tree-id563 . -27) (undo-tree-id564 . -27) (undo-tree-id565 . -27) (undo-tree-id566 . -27) (undo-tree-id567 . -27) (undo-tree-id568 . -27) (nil tag-name "v-combobox" 30995 . 30996) (nil tag-name "v-combobox" 30996 . 31006) (nil tag-name "v-combobox" 31006 . 31007) (nil rear-nonsticky nil 31006 . 31007) (nil tag-name "v-combobox" 31007 . 31008) (nil tag-name "v-combobox" 31008 . 31009) (nil tag-name "v-combobox" 31009 . 31020) (nil tag-name "v-combobox" 31020 . 31021) (nil rear-nonsticky nil 31020 . 31021) (nil tag-name "v-combobox" 31021 . 31022) (nil rear-nonsticky t 31021 . 31022) (t 25814 7465 562550 636000)) (25814 7465 510363 578000) 0 nil])
([nil nil ((nil rear-nonsticky nil 30841 . 30842) (nil tag-attr t 30825 . 30842) (nil tag-name "v-combobox" 30825 . 30842) (nil tag-type start 30825 . 30842) (nil font-lock-face web-mode-html-attr-value-face 30825 . 30842) (30825 . 30842)) nil (25814 7546 787597 610000) 0 nil])
nil
nil
([nil nil ((#("folder" 0 1 (block-side t tag-attr t tag-name "v-select" tag-type start) 1 2 (block-side t tag-attr t tag-name "v-select" tag-type start) 2 3 (block-side t tag-attr t tag-name "v-select" tag-type start) 3 4 (block-side t tag-attr t tag-name "v-select" tag-type start) 4 5 (block-side t tag-attr t tag-name "v-select" tag-type start) 5 6 (block-side t tag-attr t tag-name "v-select" tag-type start)) . 30496) (undo-tree-id788 . -6) (undo-tree-id789 . -6) (undo-tree-id790 . -6) (t 25814 7546 834764 652000)) nil (25814 7680 910817 972000) 0 nil])
([nil nil ((nil rear-nonsticky nil 30500 . 30501) (nil block-side t 30496 . 30501) (nil tag-attr t 30496 . 30501) (nil tag-name "v-select" 30496 . 30501) (nil tag-type start 30496 . 30501) (30496 . 30501)) nil (25814 7810 221586 532000) 0 nil])
([nil nil ((30219 . 30244) (t 25814 7680 987116 509000)) nil (25814 7926 81113 103000) 0 nil] [nil nil ((#("!" 0 1 (part-side javascript)) . -39025) (undo-tree-id793 . -1) 39026 (t 25814 7680 987116 509000)) ((39025 . 39026)) (25814 7809 799159 486000) 0 nil])
([nil nil ((30244 . 30250)) nil (25814 7926 81111 733000) 0 nil])
([nil nil ((#("!" 0 1 (part-side javascript)) . 39025)) ((39025 . 39026)) (25814 7809 451807 212000) 0 nil])
([nil nil ((#(" " 0 1 (tag-name "v-select" tag-type start)) . -30249) (undo-tree-id838 . -1) 30250) nil (25814 7926 81110 67000) 0 nil])
([nil nil ((39026 . 39030)) ((#(" != " 0 3 (part-side javascript) 3 4 (part-side javascript)) . 39026) (undo-tree-id803 . -3) (undo-tree-id804 . -4) (undo-tree-id805 . -3) (undo-tree-id806 . -3) (undo-tree-id807 . -3) (undo-tree-id808 . -3) (undo-tree-id809 . -3) (undo-tree-id810 . -3) (undo-tree-id811 . -3) (undo-tree-id812 . -3) (undo-tree-id813 . -3) (undo-tree-id814 . -3) (undo-tree-id815 . -3) (undo-tree-id816 . -3) (undo-tree-id817 . -3) (undo-tree-id818 . -3) (undo-tree-id819 . -3) (undo-tree-id820 . -3) (undo-tree-id821 . -3) (undo-tree-id822 . -3) (undo-tree-id823 . -4) (undo-tree-id824 . -4) (undo-tree-id825 . -4) (undo-tree-id826 . -4) (undo-tree-id827 . -4) (undo-tree-id828 . -4) (undo-tree-id829 . -4)) (25814 7809 157736 914000) 0 nil])
([nil nil ((31122 . 31147)) nil (25814 7926 81107 110000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -39029) (undo-tree-id792 . -1) 39030) ((39029 . 39030)) (25814 7808 830653 415000) 0 nil])
([nil nil ((31147 . 31153)) nil (25814 7926 81105 244000) 0 nil])
([nil nil ((39029 . 39036)) ((#("= null " 0 2 (part-side javascript) 2 6 (part-side javascript face web-mode-constant-face) 6 7 (part-side javascript)) . 39029) (undo-tree-id794 . -5) (undo-tree-id795 . -7) (undo-tree-id796 . -7) (undo-tree-id797 . -7) (undo-tree-id798 . -7) (undo-tree-id799 . -7) (undo-tree-id800 . -7) (undo-tree-id801 . -7) (undo-tree-id802 . -7)) (25814 7808 651259 305000) 0 nil])
([nil nil ((#(" " 0 1 (tag-name "v-combobox" tag-type start)) . -31152) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) 31153) nil (25814 7926 81098 915000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -39035) (undo-tree-id791 . -1) 39036) ((39035 . 39036)) (25814 7808 648724 352000) 0 nil])
([nil nil ((#("
                </v-container>" 17 18 (tag-name "v-container" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 18 19 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-bracket-face) 19 30 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-custom-face) 30 31 (tag-name "v-container" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 32290) (undo-tree-id842 . -31) (undo-tree-id843 . -1) (undo-tree-id844 . -31) (t 25814 7926 131756 105000)) nil (25814 7968 666364 562000) 0 nil])
nil
([nil nil ((#("
                <v-container>" 17 18 (tag-name "v-container" tag-type start tag-beg 18 font-lock-face web-mode-html-tag-bracket-face) 18 29 (tag-name "v-container" tag-type start font-lock-face web-mode-html-tag-custom-face) 29 30 (tag-name "v-container" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 30042) (undo-tree-id839 . -30) (undo-tree-id840 . -1) (undo-tree-id841 . -30)) nil (25814 7968 666358 907000) 0 nil])
([nil nil (("  " . -30059) 30086) nil (25814 7968 666340 721000) 0 nil])
([nil nil ((nil rear-nonsticky nil 30128 . 30129) (nil rear-nonsticky t 30128 . 30129) (nil tag-attr t 30128 . 30129) (nil tag-attr-end 5 30128 . 30129) (nil tag-name "v-col" 30128 . 30129) (nil tag-type start 30128 . 30129) (nil font-lock-face web-mode-html-attr-value-face 30128 . 30129) (nil tag-attr t 30118 . 30128) (nil tag-name "v-col" 30118 . 30128) (nil tag-type start 30118 . 30128) (nil font-lock-face web-mode-html-attr-value-face 30118 . 30128) (nil tag-attr t 30117 . 30118) (nil tag-name "v-col" 30117 . 30118) (nil tag-type start 30117 . 30118) (nil font-lock-face web-mode-html-attr-equal-face 30117 . 30118) (nil tag-attr t 30113 . 30117) (nil tag-name "v-col" 30113 . 30117) (nil tag-type start 30113 . 30117) (nil font-lock-face web-mode-html-attr-name-face 30113 . 30117) (nil tag-attr-beg 0 30112 . 30113) (nil tag-attr t 30112 . 30113) (nil tag-name "v-col" 30112 . 30113) (nil tag-type start 30112 . 30113) (nil font-lock-face web-mode-html-attr-name-face 30112 . 30113) (30112 . 30129) (t 25814 7968 711866 869000)) nil (25814 7986 679655 774000) 0 nil])
([nil nil ((30129 . 30130)) nil (25814 7986 679649 163000) 0 nil])
([nil nil ((nil rear-nonsticky nil 30773 . 30774) (nil rear-nonsticky t 30773 . 30774) (nil tag-attr t 30773 . 30774) (nil tag-attr-end 5 30773 . 30774) (nil tag-name "v-col" 30773 . 30774) (nil tag-type start 30773 . 30774) (nil font-lock-face web-mode-html-attr-value-face 30773 . 30774) (nil tag-attr t 30763 . 30773) (nil tag-name "v-col" 30763 . 30773) (nil tag-type start 30763 . 30773) (nil font-lock-face web-mode-html-attr-value-face 30763 . 30773) (nil tag-attr t 30762 . 30763) (nil tag-name "v-col" 30762 . 30763) (nil tag-type start 30762 . 30763) (nil font-lock-face web-mode-html-attr-equal-face 30762 . 30763) (nil tag-attr t 30758 . 30762) (nil tag-name "v-col" 30758 . 30762) (nil tag-type start 30758 . 30762) (nil font-lock-face web-mode-html-attr-name-face 30758 . 30762) (nil tag-attr-beg 0 30757 . 30758) (nil tag-attr t 30757 . 30758) (nil tag-name "v-col" 30757 . 30758) (nil tag-type start 30757 . 30758) (nil font-lock-face web-mode-html-attr-name-face 30757 . 30758) (30757 . 30774)) nil (25814 7986 679639 756000) 0 nil])
([nil nil ((30774 . 30775)) nil (25814 8044 835130 777000) 0 nil])
([nil nil ((#("3" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . -27407) (undo-tree-id910 . -1) (undo-tree-id911 . -1) 27408) nil (25814 8053 196031 666000) 0 nil] [nil nil ((#("3" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . -27407) (undo-tree-id857 . -1) (undo-tree-id858 . -1) 27408 (t 25814 7986 735913 729000)) ((27407 . 27408)) (25814 8044 546133 133000) 0 nil])
([nil nil ((27407 . 27408)) nil (25814 8053 196026 466000) 0 nil])
([nil nil ((27407 . 27408)) ((#("5" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . 27407)) (25814 8044 209228 161000) 0 nil])
([nil nil ((#("3" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . -27412) (undo-tree-id909 . -1) 27413) nil (25814 8053 196024 688000) 0 nil])
([nil nil ((#("3" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . -27412) (undo-tree-id845 . -1) (undo-tree-id847 . -1) (undo-tree-id849 . -1) (undo-tree-id851 . -1) (undo-tree-id853 . -1) (undo-tree-id855 . -1) 27413) ((27412 . 27413)) (25814 8043 891487 834000) 0 nil])
([nil nil ((27412 . 27413)) nil (25814 8053 196019 939000) 0 nil])
([nil nil ((27412 . 27413)) ((#("5" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . 27412) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (t 25814 8031 112029 46000)) (25814 8031 65556 549000) 0 nil])
([nil nil ((27433 . 27444)) nil (25814 8053 196017 481000) 0 nil])
nil
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . -27443) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) 27444) nil (25814 8053 196006 955000) 0 nil])
([nil nil ((#("3" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . -27442) (undo-tree-id918 . -1) 27443 (t 25814 8053 240083 262000)) nil (25814 8067 263034 834000) 0 nil])
([nil nil ((27442 . 27443)) nil (25814 8067 263026 976000) 0 nil])
([nil nil ((#("3" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . -27437) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) 27438) nil (25814 8067 263021 83000) 0 nil])
([nil nil ((27437 . 27438)) nil (25814 8067 262985 357000) 0 nil])
([nil nil ((27438 . 27439) (t 25814 8067 316100 224000)) nil (25814 8077 580850 393000) 0 nil])
([nil nil ((#("2" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . -27437) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (#("1" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . -27438) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) 27439) nil (25814 8077 580846 961000) 0 nil])
([nil nil ((27437 . 27438)) nil (25814 8077 580814 726000) 0 nil])
([nil nil ((#("2" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . -27442) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) 27443) nil (25814 8077 580810 977000) 0 nil])
([nil nil ((27442 . 27443)) nil (25814 8077 580782 28000) 0 nil])
([nil nil ((#("1" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . -27442) (undo-tree-id965 . -1) 27443 (t 25814 8077 624112 924000)) nil (25814 8091 569796 814000) 0 nil])
([nil nil ((27442 . 27443)) nil (25814 8091 569789 379000) 0 nil])
([nil nil ((#("1" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . -27437) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) 27438) nil (25814 8091 569784 159000) 0 nil])
([nil nil ((27437 . 27438)) nil (25814 8091 569737 813000) 0 nil])
([nil nil ((#("a" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -30775) (undo-tree-id1006 . -1) (#("-" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -30776) (undo-tree-id1007 . -1) (#("0" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -30777) (undo-tree-id1008 . -1) 30778 (t 25814 8091 624130 569000)) nil (25814 8150 447623 527000) 0 nil])
([nil nil ((30775 . 30793)) nil (25814 8150 447617 798000) 0 nil])
([nil nil ((#("0" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -30791) (undo-tree-id1004 . -1) (#("-" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -30792) (undo-tree-id1005 . -1) 30793) nil (25814 8150 447615 965000) 0 nil])
([nil nil ((30791 . 30794)) nil (25814 8150 447611 936000) 0 nil])
([nil nil ((#("9" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -30792) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (#(" " 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -30793) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) 30794) nil (25814 8150 447608 484000) 0 nil])
([nil nil ((30792 . 30794)) nil (25814 8150 447570 564000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -30793) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) 30794) nil (25814 8150 447564 616000) 0 nil])
([nil nil ((#("2" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -30777) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) 30778 (t 25814 8150 492209 464000)) nil (25814 8161 837273 470000) 0 nil])
([nil nil ((30777 . 30778)) nil (25814 8161 837196 476000) 0 nil])
([nil nil ((#("0" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -30782) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) 30783) nil (25814 8161 837193 277000) 0 nil])
([nil nil ((30782 . 30783)) nil (25814 8161 837164 15000) 0 nil])
([nil nil ((71072 . 71074) (t 25814 8161 880225 553000)) nil (25818 10513 111475 389000) 0 nil])
([nil nil ((nil rear-nonsticky nil 71091 . 71092) (nil part-side javascript 71091 . 71092) (nil face (rainbow-delimiters-depth-4-face) 71091 . 71092) (nil part-side javascript 71085 . 71091) (nil part-side javascript 71084 . 71085) (nil face (rainbow-delimiters-depth-4-face) 71084 . 71085) (nil part-side javascript 71074 . 71084) (nil face web-mode-function-call-face 71074 . 71084) (nil part-side javascript 71072 . 71074) (nil face web-mode-function-call-face 71072 . 71074) (71072 . 71092)) nil (25818 10513 111473 721000) 0 nil])
([nil nil ((71092 . 71093)) nil (25818 10513 111470 284000) 0 nil])
([nil nil ((71852 . 71854)) nil (25818 10513 114321 345000) 0 nil])
([nil nil ((nil rear-nonsticky nil 71871 . 71872) (nil part-side javascript 71871 . 71872) (nil face (rainbow-delimiters-depth-7-face) 71871 . 71872) (nil part-side javascript 71865 . 71871) (nil part-side javascript 71864 . 71865) (nil face (rainbow-delimiters-depth-7-face) 71864 . 71865) (nil part-side javascript 71854 . 71864) (nil face web-mode-function-call-face 71854 . 71864) (nil part-side javascript 71852 . 71854) (nil face web-mode-function-call-face 71852 . 71854) (71852 . 71872)) nil (25818 10638 842830 233000) 0 nil] [nil nil ((nil rear-nonsticky nil 71872 . 71873) (nil part-side javascript 71872 . 71873) (nil part-token string 71872 . 71873) (nil font-lock-face web-mode-javascript-string-face 71872 . 71873) (nil part-side javascript 71866 . 71872) (nil part-token string 71866 . 71872) (nil font-lock-face web-mode-javascript-string-face 71866 . 71872) (nil part-side javascript 71865 . 71866) (nil part-token string 71865 . 71866) (nil font-lock-face web-mode-javascript-string-face 71865 . 71866) (nil part-side javascript 71855 . 71865) (nil part-token string 71855 . 71865) (nil font-lock-face web-mode-javascript-string-face 71855 . 71865) (nil part-side javascript 71853 . 71855) (nil part-token string 71853 . 71855) (nil font-lock-face web-mode-javascript-string-face 71853 . 71855) (71853 . 71873)) ((#("clone_filter(filter)" 0 12 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 12 19 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 19 20 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript rear-nonsticky nil)) . 71853) (undo-tree-id0 . -20) (nil rear-nonsticky t 71872 . 71873)) (25818 10513 111460 663000) 0 nil])
([nil nil ((71872 . 71873)) nil (25818 10638 842826 847000) 0 nil])
nil
([nil nil ((#("filter" 0 6 (part-side javascript)) . 71865) (undo-tree-id1 . -6) (undo-tree-id2 . -6)) nil (25818 10638 842824 609000) 0 nil])
([nil nil ((nil rear-nonsticky nil 71874 . 71875) (nil part-side javascript 71865 . 71875) (71865 . 71875)) nil (25818 10638 842808 335000) 0 nil])
([nil nil ((71072 . 71077) (t 25818 10638 889822 246000)) nil (25818 10675 24917 494000) 0 nil])
([nil nil ((71857 . 71862)) nil (25819 30869 740278 19000) 0 nil])
([nil nil ((#(" //JSON.parse(JSON.stringify(filter))" 0 1 (part-side javascript) 1 2 (font-lock-face web-mode-javascript-comment-face syntax-table (11) part-token comment part-side javascript) 2 8 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 8 13 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 13 19 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 19 28 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 28 37 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . 71097) (undo-tree-id6 . -37) (undo-tree-id7 . -37) (undo-tree-id8 . -37) (t 25819 30876 203680 560000)) nil (25827 6823 153347 592000) 0 nil] [nil nil ((#("grey_light_3" 0 4 (part-side css face web-mode-css-variable-face) 4 12 (part-side css)) . 114123) (undo-tree-id0 . -12) (undo-tree-id1 . -12) (undo-tree-id2 . -12) (undo-tree-id3 . -12) (t 25818 10675 65790 528000)) ((114123 . 114135)) (25819 30869 93996 938000) 0 nil])
([nil nil ((#("//JSON.parse(JSON.stringify(filter_new))" 0 1 (font-lock-face web-mode-javascript-comment-face syntax-table (11) part-token comment part-side javascript) 1 7 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 7 12 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 12 18 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 18 27 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 27 40 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . 71850) (undo-tree-id3 . -40) (undo-tree-id4 . -40) (undo-tree-id5 . -40)) nil (25827 6823 153341 876000) 0 nil])
([nil nil ((nil rear-nonsticky nil 114138 . 114139) (nil part-side css 114123 . 114139) (nil face web-mode-css-variable-face 114123 . 114139) (114123 . 114139)) ((#("orange-lighten-4" 0 15 (part-side css face web-mode-css-variable-face) 15 16 (rear-nonsticky nil part-side css face web-mode-css-variable-face)) . 114123) (undo-tree-id4 . -16) (undo-tree-id5 . -16) (undo-tree-id6 . -16) (undo-tree-id7 . -16) (undo-tree-id8 . -16) (undo-tree-id9 . -16) (undo-tree-id10 . -16) (undo-tree-id11 . -16) (undo-tree-id12 . -16) (undo-tree-id13 . -16) (undo-tree-id14 . -16) (undo-tree-id15 . -16) (undo-tree-id16 . -16) (undo-tree-id17 . -16) (undo-tree-id18 . -16) (undo-tree-id19 . -16) (undo-tree-id20 . -16) (undo-tree-id21 . -16) (undo-tree-id22 . -16) (undo-tree-id23 . -16) (undo-tree-id24 . -16) (undo-tree-id25 . -16) (undo-tree-id26 . -16) (undo-tree-id27 . -16) (undo-tree-id28 . -16) (undo-tree-id29 . -16) (undo-tree-id30 . -16) (undo-tree-id31 . -16) (undo-tree-id32 . -16) (undo-tree-id33 . -16) (undo-tree-id34 . -16) (undo-tree-id35 . -16) (undo-tree-id36 . -16) (undo-tree-id37 . -16) (undo-tree-id38 . -16) (undo-tree-id39 . -16) (undo-tree-id40 . -16) (undo-tree-id41 . -16) (undo-tree-id42 . -16) (undo-tree-id43 . -16) (undo-tree-id44 . -16) (undo-tree-id45 . -16) (undo-tree-id46 . -16) (undo-tree-id47 . -16) (undo-tree-id48 . -16) (undo-tree-id49 . -16) (undo-tree-id50 . -16) (undo-tree-id51 . -16) (undo-tree-id52 . -16) (undo-tree-id53 . -16) (undo-tree-id54 . -16) (undo-tree-id55 . -16) (undo-tree-id56 . -16) (undo-tree-id57 . -16) (undo-tree-id58 . -16) (undo-tree-id59 . -16) (undo-tree-id60 . -16) (undo-tree-id61 . -16) (undo-tree-id62 . -16) (undo-tree-id63 . -16) (undo-tree-id64 . -16) (undo-tree-id65 . -16) (undo-tree-id66 . -16) (undo-tree-id67 . -16) (undo-tree-id68 . -16) (undo-tree-id69 . -16) (undo-tree-id70 . -16) (undo-tree-id71 . -16) (undo-tree-id72 . -16) (undo-tree-id73 . -16) (undo-tree-id74 . -16) (undo-tree-id75 . -16) (undo-tree-id76 . -16) (nil rear-nonsticky t 114138 . 114139) (t 25819 30859 847635 4000)) (25819 30859 791269 688000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -71849) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) 71850) nil (25827 6823 153332 680000) 0 nil])
nil
([nil nil ((39242 . 39251) (t 25827 13805 922021 193000)) nil (25827 21884 323969 790000) 0 nil])
([nil nil ((39251 . 39257)) nil (25827 21884 323968 539000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -39250) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("f" 0 1 (part-side javascript)) . -39251) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#("i" 0 1 (part-side javascript)) . -39252) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("l" 0 1 (part-side javascript)) . -39253) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#("t" 0 1 (part-side javascript)) . -39254) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("e" 0 1 (part-side javascript)) . -39255) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("r" 0 1 (part-side javascript)) . -39256) (undo-tree-id19 . -1) (undo-tree-id20 . -1) 39257) nil (25827 21884 323965 719000) 0 nil])
([nil nil ((39243 . 39251) (#("       " 0 7 (part-side javascript)) . 39243) (undo-tree-id5 . -7) (undo-tree-id6 . -7) 39250) nil (25827 21884 323945 413000) 0 nil])
([nil nil ((39251 . 39260)) nil (25827 21884 323933 302000) 0 nil])
([nil nil ((#("n" 0 1 (part-side javascript)) . -39258) (undo-tree-id3 . -1) (#("a" 0 1 (part-side javascript)) . -39259) (undo-tree-id4 . -1) 39260) nil (25827 21884 323930 167000) 0 nil])
([nil nil ((39258 . 39266)) nil (25827 21884 323924 92000) 0 nil])
([nil nil ((39266 . 39268) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -39266) (39266 . 39267)) nil (25827 21884 323922 6000) 0 nil])
([nil nil ((#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -39266) (undo-tree-id2 . -1) (#("}" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 39267)) nil (25827 21884 323917 368000) 0 nil])
([nil nil ((39266 . 39268) (#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -39266) (39266 . 39267)) nil (25827 21884 323911 721000) 0 nil])
([nil nil ((39269 . 39277) (#("          " 0 10 (part-side javascript face whitespace-trailing)) . 39268) (undo-tree-id0 . -8) (undo-tree-id1 . 10) (39276 . 39278) (39267 . 39277)) nil (25827 21884 323907 423000) 0 nil])
([nil nil ((39268 . 39278)) nil (25827 21884 323882 636000) 0 nil])
([nil nil ((nil rear-nonsticky nil 39325 . 39326) (nil part-side javascript 39325 . 39326) (nil face (rainbow-delimiters-depth-5-face) 39325 . 39326) (nil part-side javascript 39324 . 39325) (nil part-token string 39324 . 39325) (nil syntax-table (15) 39324 . 39325) (nil font-lock-face web-mode-javascript-string-face 39324 . 39325) (nil part-side javascript 39299 . 39324) (nil part-token string 39299 . 39324) (nil font-lock-face web-mode-javascript-string-face 39299 . 39324) (nil part-side javascript 39298 . 39299) (nil part-token string 39298 . 39299) (nil syntax-table (15) 39298 . 39299) (nil font-lock-face web-mode-javascript-string-face 39298 . 39299) (nil part-side javascript 39297 . 39298) (nil face (rainbow-delimiters-depth-5-face) 39297 . 39298) (nil part-side javascript 39294 . 39297) (nil part-side javascript 39290 . 39294) (nil face web-mode-constant-face 39290 . 39294) (nil part-side javascript 39278 . 39290) (39278 . 39326)) nil (25827 21884 323873 711000) 0 nil])
([nil nil ((#("        folder_name_R: [
          v => !!v || this.$t('AnalysisNetwork.fname_req')
        ]" 0 8 (part-side javascript) 8 21 (part-side javascript face web-mode-variable-name-face) 21 22 (part-side javascript) 22 23 (part-side javascript) 23 24 (part-side javascript face (rainbow-delimiters-depth-4-face)) 24 25 (part-side javascript) 25 35 (part-side javascript) 35 47 (part-side javascript) 47 51 (part-side javascript face web-mode-constant-face) 51 54 (part-side javascript) 54 55 (part-side javascript face (rainbow-delimiters-depth-5-face)) 55 56 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 56 81 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 81 82 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 82 83 (rear-nonsticky t part-side javascript face (rainbow-delimiters-depth-5-face)) 83 92 (part-side javascript) 92 93 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 39243) (undo-tree-id113 . -93) (undo-tree-id114 . -11) (undo-tree-id115 . -8) (undo-tree-id116 . -35) (undo-tree-id117 . -93) (undo-tree-id118 . -25) (undo-tree-id119 . -29) (undo-tree-id120 . -26) (undo-tree-id121 . -26) (undo-tree-id122 . -26) (undo-tree-id123 . -26) (undo-tree-id124 . -26) (undo-tree-id125 . -26) (undo-tree-id126 . -26) (undo-tree-id127 . -25) (undo-tree-id128 . -25) (undo-tree-id129 . -25) (undo-tree-id130 . -93) (undo-tree-id131 . -21) (undo-tree-id132 . -93) (t 25827 21884 371235 272000)) nil (25827 21894 226751 143000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . -39242) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) 39243) nil (25827 21894 226720 392000) 0 nil])
([nil nil ((35947 . 35954) (t 25827 21894 275272 231000)) nil (25828 33370 238602 899000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35963 . 35964) (nil tag-attr t 35963 . 35964) (nil tag-attr-end 0 35963 . 35964) (nil tag-name "v-dialog" 35963 . 35964) (nil tag-type start 35963 . 35964) (nil font-lock-face web-mode-html-attr-name-face 35963 . 35964) (nil tag-attr t 35955 . 35963) (nil tag-name "v-dialog" 35955 . 35963) (nil tag-type start 35955 . 35963) (nil font-lock-face web-mode-html-attr-name-face 35955 . 35963) (nil tag-attr-beg 0 35954 . 35955) (nil tag-attr t 35954 . 35955) (nil tag-name "v-dialog" 35954 . 35955) (nil tag-type start 35954 . 35955) (nil font-lock-face web-mode-html-attr-name-face 35954 . 35955) (35954 . 35964)) nil (25828 33370 238594 131000) 0 nil])
([nil nil ((36645 . 36661) (t 25828 33370 280580 941000)) nil (25828 34608 571721 2000) 0 nil])
([nil nil ((#("\"" 0 1 (face (whitespace-line web-mode-html-attr-value-face) font-lock-face web-mode-html-attr-value-face tag-type void tag-name "treeview" tag-attr-end 14 tag-attr t)) . 36661) (36660 . 36662) (#("\"" 0 1 (face (whitespace-line web-mode-html-attr-value-face) font-lock-face web-mode-html-attr-value-face tag-type void tag-name "treeview" tag-attr t)) . -36660) (36660 . 36661)) nil (25828 34608 571719 486000) 0 nil])
([nil nil ((36661 . 36662)) nil (25828 34608 571717 977000) 0 nil])
([nil nil ((36675 . 36682) (36674 . 36676) (#("(" 0 1 (face (whitespace-line web-mode-html-attr-value-face) font-lock-face web-mode-html-attr-value-face tag-type void tag-name "treeview" tag-attr t)) . -36674) (36661 . 36675)) nil (25828 34608 571716 815000) 0 nil])
([nil nil ((#(" " 0 1 (face (whitespace-line web-mode-html-attr-value-face) font-lock-face web-mode-html-attr-value-face tag-type void tag-name "treeview" tag-attr t)) . -36681) (undo-tree-id12 . -1) 36682) nil (25828 34608 571715 5000) 0 nil])
([nil nil ((108885 . 108886)) nil (25828 34608 571712 701000) 0 nil])
([nil nil ((108886 . 108893)) nil (25828 34608 571711 610000) 0 nil])
([nil nil ((nil rear-nonsticky nil 108905 . 108906) (nil part-side javascript 108893 . 108906) (108893 . 108906)) nil (25828 34608 571710 492000) 0 nil])
([nil nil ((108907 . 108910) (108906 . 108908) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) part-side javascript)) . -108906) (108906 . 108907)) nil (25828 34608 571708 861000) 0 nil])
([nil nil ((#("c" 0 1 (part-side javascript)) . -108907) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("a" 0 1 (part-side javascript)) . -108908) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("l" 0 1 (part-side javascript)) . -108909) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 108910) nil (25828 34608 571706 374000) 0 nil])
([nil nil ((108907 . 108910)) nil (25828 34608 571698 257000) 0 nil])
([nil nil ((#("l" 0 1 (part-side javascript)) . -108908) (undo-tree-id4 . -1) (#("a" 0 1 (part-side javascript)) . -108909) (undo-tree-id5 . -1) 108910) nil (25828 34608 571696 878000) 0 nil])
([nil nil ((108908 . 108910)) nil (25828 34608 571692 786000) 0 nil])
([nil nil ((108912 . 108914) (#("{" 0 1 (face (rainbow-delimiters-depth-3-face) part-side javascript)) . -108912) (108911 . 108913)) nil (25828 34608 571691 632000) 0 nil])
([nil nil ((108915 . 108921) (#("        " 0 8 (face whitespace-trailing part-side javascript)) . 108914) (undo-tree-id2 . 8) (108914 . 108922) (#("      " 0 6 (part-side javascript)) . 108914) (undo-tree-id3 . -6) (108913 . 108921)) nil (25828 34608 571689 701000) 0 nil])
([nil nil ((108914 . 108922)) nil (25828 34608 571677 62000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) part-side javascript)) . 108935) (108934 . 108935) (108933 . 108935) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -108933) (108922 . 108934)) nil (25828 34608 571675 602000) 0 nil])
([nil nil ((108935 . 108954) (nil part-token string 108935 . 108936) (nil font-lock-face web-mode-javascript-string-face 108935 . 108936) (nil part-side javascript 108935 . 108936) (108934 . 108936) (#("\"" 0 1 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript)) . -108934) (108934 . 108935)) nil (25828 34608 571673 324000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . -108953) (undo-tree-id1 . -1) 108954) nil (25828 34608 571670 218000) 0 nil])
([nil nil ((108954 . 108960)) nil (25828 34608 571666 432000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -108959) (undo-tree-id0 . -1) 108960) nil (25828 34608 571661 95000) 0 nil])
([nil nil ((#("      restruct_tree(val) {
        console.log(\"Restruct activated\", val)
      }" 0 6 (part-side javascript) 6 18 (face web-mode-function-name-face part-side javascript) 18 19 (face web-mode-function-name-face part-side javascript rear-nonsticky t) 19 20 (face (rainbow-delimiters-depth-3-face) part-side javascript) 20 23 (part-side javascript) 23 24 (face (rainbow-delimiters-depth-3-face) part-side javascript) 24 25 (part-side javascript) 25 26 (face (rainbow-delimiters-depth-3-face) part-side javascript) 26 27 (part-side javascript) 27 43 (part-side javascript) 43 46 (face web-mode-function-call-face part-side javascript) 46 47 (face (rainbow-delimiters-depth-4-face) part-side javascript) 47 48 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 48 66 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 66 67 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 67 72 (part-side javascript) 72 73 (face (rainbow-delimiters-depth-4-face) part-side javascript) 73 74 (part-side javascript) 74 80 (part-side javascript) 80 81 (face (rainbow-delimiters-depth-3-face) part-side javascript)) . 108887) (undo-tree-id29 . -81) (undo-tree-id30 . -65) (undo-tree-id31 . -26) (undo-tree-id32 . -81) (undo-tree-id33 . -27) (undo-tree-id34 . -6) (undo-tree-id35 . -81) (t 25828 34608 616136 295000)) nil (25828 41730 229326 232000) 0 nil])
([nil nil ((#("," 0 1 (part-side javascript)) . -108885) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("
" 0 1 (part-side javascript)) . -108886) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 108887) nil (25828 41730 229296 371000) 0 nil])
([nil nil ((#(" @restruct_tree=\"restruct_tree($event)\"" 0 1 (face (whitespace-line) tag-type void tag-name "treeview") 1 2 (face (whitespace-line web-mode-html-attr-engine-face) font-lock-face web-mode-html-attr-engine-face tag-type void tag-name "treeview" tag-attr t tag-attr-beg 2) 2 15 (face (whitespace-line web-mode-html-attr-engine-face) font-lock-face web-mode-html-attr-engine-face tag-type void tag-name "treeview" tag-attr t) 15 16 (face (whitespace-line web-mode-html-attr-equal-face) font-lock-face web-mode-html-attr-equal-face tag-type void tag-name "treeview" tag-attr t) 16 30 (face (whitespace-line web-mode-html-attr-value-face) font-lock-face web-mode-html-attr-value-face tag-type void tag-name "treeview" tag-attr t) 30 37 (face (whitespace-line web-mode-html-attr-value-face) font-lock-face web-mode-html-attr-value-face tag-type void tag-name "treeview" tag-attr t) 37 38 (face (whitespace-line web-mode-html-attr-value-face) font-lock-face web-mode-html-attr-value-face tag-type void tag-name "treeview" tag-attr t) 38 39 (face (whitespace-line web-mode-html-attr-value-face) font-lock-face web-mode-html-attr-value-face tag-type void tag-name "treeview" tag-attr-end 14 tag-attr t)) . 36644) (undo-tree-id13 . -39) (undo-tree-id14 . -30) (undo-tree-id15 . -39)) nil (25828 49772 247675 274000) 0 nil])
([nil nil ((86196 . 86205) (t 25828 41730 271555 363000)) nil (25828 49838 921579 947000) 0 nil] [nil nil ((#("n" 0 1 (face web-mode-variable-name-face part-side javascript)) . -86211) (undo-tree-id36 . -1) (#("e" 0 1 (face web-mode-variable-name-face part-side javascript)) . -86212) (undo-tree-id37 . -1) (#("w" 0 1 (face web-mode-variable-name-face part-side javascript)) . -86213) (undo-tree-id38 . -1) (#("_" 0 1 (face web-mode-variable-name-face part-side javascript)) . -86214) (undo-tree-id39 . -1) 86215 (t 25828 41730 271555 363000)) ((86211 . 86215)) (25828 49772 62404 255000) 0 nil])
([nil nil ((86205 . 86226)) nil (25828 49838 921578 667000) 0 nil])
([nil nil ((86229 . 86238)) ((#("
        " 0 1 (part-side javascript) 1 9 (part-side javascript)) . 86229) (undo-tree-id40 . -9) (undo-tree-id41 . -1) (undo-tree-id42 . -1)) (25828 49772 60778 579000) 0 nil])
([nil nil ((86226 . 86227)) nil (25828 49838 921577 606000) 0 nil])
nil
([nil nil ((#("o" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -86222) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("n" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -86223) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("l" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -86224) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("y" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -86225) (undo-tree-id50 . -1) (#(" " 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -86226) (undo-tree-id51 . -1) 86227) nil (25828 49838 921573 368000) 0 nil])
([nil nil ((86222 . 86243)) nil (25828 49838 921559 993000) 0 nil])
([nil nil ((86243 . 86247)) nil (25828 49838 921558 715000) 0 nil])
([nil nil ((86247 . 86249)) nil (25828 49838 921557 264000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -86248) (undo-tree-id43 . -1) 86249) nil (25828 49838 921554 995000) 0 nil])
([nil nil ((86292 . 86294) (86291 . 86293) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -86291) (86285 . 86292)) nil (25828 49838 921538 333000) 0 nil])
([nil nil ((86293 . 86294)) nil (25828 49838 921534 708000) 0 nil])
([nil nil ((86300 . 86302) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -86300) (86296 . 86301)) nil (25828 49838 921520 95000) 0 nil])
([nil nil ((86302 . 86311) (t 25828 49838 971151 969000)) nil (25828 49897 552176 697000) 0 nil])
([nil nil ((86311 . 86315)) nil (25828 49897 552174 71000) 0 nil])
([nil nil ((#("p" 0 1 (part-side javascript)) . -86311) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("r" 0 1 (part-side javascript)) . -86312) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("n" 0 1 (part-side javascript)) . -86313) (undo-tree-id60 . -1) (#("t" 0 1 (part-side javascript)) . -86314) (undo-tree-id61 . -1) 86315) nil (25828 49897 552170 213000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) part-side javascript)) . 86324) (86323 . 86324) (86322 . 86324) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -86322) (86311 . 86323)) nil (25828 49897 552154 226000) 0 nil])
([nil nil ((86324 . 86331) (nil part-token string 86324 . 86325) (nil font-lock-face web-mode-javascript-string-face 86324 . 86325) (nil part-side javascript 86324 . 86325) (86323 . 86325) (#("\"" 0 1 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript)) . -86323) (86323 . 86324)) nil (25828 49897 552149 919000) 0 nil])
([nil nil ((#("N" 0 1 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . -86330) (undo-tree-id55 . -1) 86331) nil (25828 49897 552145 226000) 0 nil])
([nil nil ((86330 . 86335)) nil (25828 49897 552141 17000) 0 nil])
([nil nil ((86336 . 86338)) nil (25828 49897 552139 235000) 0 nil])
([nil nil ((#("." 0 1 (part-side javascript)) . -86336) (undo-tree-id53 . -1) (#(" " 0 1 (part-side javascript)) . -86337) (undo-tree-id54 . -1) 86338) nil (25828 49897 552136 190000) 0 nil])
([nil nil ((86336 . 86341)) nil (25828 49897 552128 507000) 0 nil])
([nil nil ((86341 . 86347)) nil (25828 49897 552125 669000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -86346) (undo-tree-id52 . -1) 86347) nil (25828 49897 552118 123000) 0 nil])
([nil nil ((86335 . 86336) (t 25828 49897 619265 627000)) nil (25828 49900 145008 986000) 0 nil])
([nil nil ((#("," 0 1 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . -86293) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) 86294 (t 25828 49900 203271 260000)) nil (25828 49929 204144 840000) 0 nil])
([nil nil ((86293 . 86294)) nil (25828 49929 204103 781000) 0 nil])
([nil nil ((#("
        console.log(\"CHIP RENAME \", new_name)" 0 1 (part-side javascript) 1 17 (part-side javascript) 17 20 (face web-mode-function-call-face part-side javascript) 20 21 (face (rainbow-delimiters-depth-4-face) part-side javascript) 21 22 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 22 34 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 34 35 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 35 37 (part-side javascript) 37 45 (part-side javascript) 45 46 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . 86302) (undo-tree-id84 . -46) (undo-tree-id85 . -42) (undo-tree-id86 . -45) (undo-tree-id87 . -1) (undo-tree-id88 . -46) (t 25828 49929 251334 342000)) nil (25828 49959 384141 361000) 0 nil])
([nil nil ((#("          console.log(this.filter_tree)" 0 18 (part-side javascript) 18 21 (face web-mode-function-call-face part-side javascript) 21 22 (face (rainbow-delimiters-depth-6-face) part-side javascript) 22 26 (face web-mode-constant-face part-side javascript) 26 38 (part-side javascript) 38 39 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . 81525) (undo-tree-id115 . -39) (undo-tree-id116 . -39) (t 25828 49959 431399 438000)) nil (25828 50600 809551 992000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . -81524) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) 81525) nil (25828 50600 809547 768000) 0 nil])
([nil nil ((#("          /*
          // TESTPRINT SKAL SLETTES EFTER
          console.log(stringFilters)
          */" 0 10 (part-side javascript) 10 11 (font-lock-face web-mode-javascript-comment-face syntax-table (11) part-token comment part-side javascript) 11 73 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 73 76 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 76 104 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . 79345) (undo-tree-id109 . -104) (undo-tree-id110 . -13) (undo-tree-id111 . -104)) nil (25828 50600 809542 102000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . -79344) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) 79345) nil (25828 50600 809532 374000) 0 nil])
([nil nil ((28408 . 28411) (t 25828 50600 856712 227000)) nil (25829 61357 841173 7000) 0 nil])
([nil nil ((#(" " 0 1 (tag-name "v-container" tag-type start)) . -28408) (undo-tree-id0 . -1) (#("m" 0 1 (tag-attr-beg 0 tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -28409) (undo-tree-id1 . -1) (#("b" 0 1 (tag-attr t tag-attr-end 0 tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-name-face)) . -28410) (undo-tree-id2 . -1) 28411) nil (25829 61357 841169 783000) 0 nil])
([nil nil ((29964 . 29969)) nil (25829 61357 841146 47000) 0 nil])
([nil nil ((#("5" 0 1 (tag-attr t tag-name "v-row" tag-type start font-lock-face web-mode-html-attr-value-face)) . -29968) (undo-tree-id3 . -1) 29969 (t 25829 61357 885881 223000)) nil (25829 61380 581972 603000) 0 nil])
([nil nil ((29968 . 29969)) nil (25829 61380 581956 633000) 0 nil])
([nil nil ((74099 . 74108) (t 25832 25236 445165 663000)) nil (25832 38018 446090 322000) 0 nil])
([nil nil ((74108 . 74124)) nil (25832 38018 446088 795000) 0 nil])
([nil nil ((74113 . 74127) (#("filter_comp" 0 11 (part-side javascript)) . -74113) (undo-tree-id43 . -11) (undo-tree-id44 . -11) (undo-tree-id45 . -8) 74124) nil (25832 38018 446087 261000) 0 nil])
([nil nil ((74127 . 74129) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -74127) (74127 . 74128)) nil (25832 38018 446081 743000) 0 nil])
([nil nil ((74099 . 74108)) nil (25832 38018 446080 147000) 0 nil])
([nil nil ((74108 . 74115)) nil (25832 38018 446078 900000) 0 nil])
([nil nil ((#("f" 0 1 (part-side javascript)) . -74113) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("o" 0 1 (part-side javascript)) . -74114) (undo-tree-id41 . -1) (undo-tree-id42 . -1) 74115) nil (25832 38018 446077 194000) 0 nil])
([nil nil ((73965 . 73973) (#("        " 0 8 (part-side javascript)) . 73964) (undo-tree-id38 . -8) (73963 . 73973)) nil (25832 38018 446071 93000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) part-side javascript)) . 73986) (73985 . 73986) (73984 . 73986) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -73984) (73973 . 73985)) nil (25832 38018 446067 987000) 0 nil])
([nil nil ((73986 . 73993) (nil part-token string 73986 . 73987) (nil font-lock-face web-mode-javascript-string-face 73986 . 73987) (nil part-side javascript 73986 . 73987) (73985 . 73987) (#("\"" 0 1 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript)) . -73985) (73985 . 73986)) nil (25832 38018 446065 367000) 0 nil])
([nil nil ((73994 . 73996)) nil (25832 38018 446062 675000) 0 nil])
([nil nil ((nil rear-nonsticky nil 74007 . 74008) (nil part-side javascript 74000 . 74008) (nil part-side javascript 73996 . 74000) (nil face web-mode-constant-face 73996 . 74000) (73996 . 74008)) nil (25832 38018 446061 284000) 0 nil])
([nil nil ((nil rear-nonsticky nil 74199 . 74200) (nil part-side javascript 74192 . 74200) (nil part-side javascript 74188 . 74192) (nil face web-mode-constant-face 74188 . 74192) (74188 . 74200)) nil (25832 38018 446058 889000) 0 nil])
([nil nil ((74201 . 74202) (74200 . 74202) (#("[" 0 1 (face (rainbow-delimiters-depth-5-face) part-side javascript)) . -74200) (74200 . 74201)) nil (25832 38018 446056 554000) 0 nil])
([nil nil ((74203 . 74205)) nil (25832 38018 446054 560000) 0 nil])
([nil nil ((82405 . 82417) (#("            " 0 12 (part-side javascript)) . 82404) (undo-tree-id37 . -12) (82403 . 82417)) nil (25832 38018 446052 844000) 0 nil])
([nil nil ((82417 . 82438)) nil (25832 38018 446049 527000) 0 nil])
([nil nil ((82438 . 82448)) nil (25832 38018 446048 478000) 0 nil])
([nil nil ((#("l" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -82439) (undo-tree-id28 . -1) (#("s" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -82440) (undo-tree-id29 . -1) (#("i" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -82441) (undo-tree-id30 . -1) (#("t" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -82442) (undo-tree-id31 . -1) (#(" " 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -82443) (undo-tree-id32 . -1) (#("f" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -82444) (undo-tree-id33 . -1) (#("o" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -82445) (undo-tree-id34 . -1) (#("r" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -82446) (undo-tree-id35 . -1) (#(" " 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -82447) (undo-tree-id36 . -1) 82448) nil (25832 38018 446045 738000) 0 nil])
([nil nil ((82439 . 82455)) nil (25832 38018 446031 534000) 0 nil])
([nil nil ((#("q" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -82453) (undo-tree-id26 . -1) (#("r" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -82454) (undo-tree-id27 . -1) 82455) nil (25832 38018 446030 61000) 0 nil])
([nil nil ((82453 . 82457)) nil (25832 38018 446025 757000) 0 nil])
([nil nil ((#("i" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -82454) (undo-tree-id23 . -1) (#("o" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -82455) (undo-tree-id24 . -1) (#("n" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -82456) (undo-tree-id25 . -1) 82457) nil (25832 38018 446023 923000) 0 nil])
([nil nil ((82454 . 82459)) nil (25832 38018 446017 189000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -82458) (undo-tree-id22 . -1) 82459) nil (25832 38018 446015 863000) 0 nil])
([nil nil ((82458 . 82471)) nil (25832 38018 446013 104000) 0 nil])
([nil nil ((82471 . 82475)) nil (25832 38018 446011 970000) 0 nil])
([nil nil ((82475 . 82494)) nil (25832 38018 446010 870000) 0 nil])
([nil nil ((nil rear-nonsticky nil 82519 . 82520) (nil part-side javascript 82519 . 82520) (nil face (rainbow-delimiters-depth-7-face) 82519 . 82520) (nil part-side javascript 82518 . 82519) (nil part-token string 82518 . 82519) (nil syntax-table (15) 82518 . 82519) (nil font-lock-face web-mode-javascript-string-face 82518 . 82519) (nil part-side javascript 82507 . 82518) (nil part-token string 82507 . 82518) (nil font-lock-face web-mode-javascript-string-face 82507 . 82518) (nil part-side javascript 82506 . 82507) (nil part-token string 82506 . 82507) (nil syntax-table (15) 82506 . 82507) (nil font-lock-face web-mode-javascript-string-face 82506 . 82507) (nil part-side javascript 82505 . 82506) (nil face (rainbow-delimiters-depth-7-face) 82505 . 82506) (nil part-side javascript 82494 . 82505) (82494 . 82520)) nil (25832 38018 446008 917000) 0 nil])
([nil nil ((#("            // Add raw filters to list for comparison
            this.raw_filter_list = result.data['chosen_list']" 0 12 (part-side javascript) 12 13 (font-lock-face web-mode-javascript-comment-face syntax-table (11) part-token comment part-side javascript) 13 14 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 14 18 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 18 22 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 22 30 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 30 33 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 33 38 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 38 39 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 39 42 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 42 53 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript) 53 54 (syntax-table (12) part-side javascript) 54 66 (part-side javascript) 66 70 (face web-mode-constant-face part-side javascript) 70 86 (part-side javascript) 86 88 (part-side javascript) 88 89 (part-side javascript) 89 100 (part-side javascript) 100 101 (face (rainbow-delimiters-depth-7-face) part-side javascript) 101 102 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 102 113 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 113 114 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 114 115 (face (rainbow-delimiters-depth-7-face) part-side javascript rear-nonsticky t)) . 82405) (undo-tree-id16 . -115) (undo-tree-id17 . -46) (undo-tree-id18 . -80) (undo-tree-id19 . -54) (undo-tree-id20 . -89) (undo-tree-id21 . -115)) nil (25832 38018 446003 166000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . -82403) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("
" 0 1 (part-side javascript)) . -82404) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 82405) nil (25832 38018 445994 208000) 0 nil])
([nil nil ((81600 . 81611)) nil (25832 38018 445978 894000) 0 nil])
([nil nil ((nil rear-nonsticky nil 81725 . 81726) (nil rear-nonsticky t 81725 . 81726) (nil part-side javascript 81725 . 81726) (nil face (rainbow-delimiters-depth-6-face) 81725 . 81726) (nil part-side javascript 81724 . 81725) (nil part-token string 81724 . 81725) (nil syntax-table (15) 81724 . 81725) (nil font-lock-face web-mode-javascript-string-face 81724 . 81725) (nil part-side javascript 81713 . 81724) (nil part-token string 81713 . 81724) (nil font-lock-face web-mode-javascript-string-face 81713 . 81724) (nil part-side javascript 81712 . 81713) (nil part-token string 81712 . 81713) (nil syntax-table (15) 81712 . 81713) (nil font-lock-face web-mode-javascript-string-face 81712 . 81713) (nil part-side javascript 81711 . 81712) (nil face (rainbow-delimiters-depth-6-face) 81711 . 81712) (nil part-side javascript 81700 . 81711) (nil part-side javascript 81699 . 81700) (nil part-side javascript 81697 . 81699) (nil part-side javascript 81681 . 81697) (nil part-side javascript 81677 . 81681) (nil face web-mode-constant-face 81677 . 81681) (nil part-side javascript 81665 . 81677) (nil part-side javascript 81664 . 81665) (nil syntax-table (12) 81664 . 81665) (nil part-side javascript 81653 . 81664) (nil part-token comment 81653 . 81664) (nil font-lock-face web-mode-javascript-comment-face 81653 . 81664) (nil part-side javascript 81650 . 81653) (nil part-token comment 81650 . 81653) (nil font-lock-face web-mode-javascript-comment-face 81650 . 81653) (nil part-side javascript 81649 . 81650) (nil part-token comment 81649 . 81650) (nil font-lock-face web-mode-javascript-comment-face 81649 . 81650) (nil part-side javascript 81644 . 81649) (nil part-token comment 81644 . 81649) (nil font-lock-face web-mode-javascript-comment-face 81644 . 81649) (nil part-side javascript 81641 . 81644) (nil part-token comment 81641 . 81644) (nil font-lock-face web-mode-javascript-comment-face 81641 . 81644) (nil part-side javascript 81633 . 81641) (nil part-token comment 81633 . 81641) (nil font-lock-face web-mode-javascript-comment-face 81633 . 81641) (nil part-side javascript 81629 . 81633) (nil part-token comment 81629 . 81633) (nil font-lock-face web-mode-javascript-comment-face 81629 . 81633) (nil part-side javascript 81625 . 81629) (nil part-token comment 81625 . 81629) (nil font-lock-face web-mode-javascript-comment-face 81625 . 81629) (nil part-side javascript 81624 . 81625) (nil part-token comment 81624 . 81625) (nil font-lock-face web-mode-javascript-comment-face 81624 . 81625) (nil part-side javascript 81623 . 81624) (nil part-token comment 81623 . 81624) (nil syntax-table (11) 81623 . 81624) (nil font-lock-face web-mode-javascript-comment-face 81623 . 81624) (nil part-side javascript 81611 . 81623) (81611 . 81726)) nil (25832 38018 445974 843000) 0 nil])
([nil nil ((#("            " 0 12 (part-side javascript)) . -81611) 81662) nil (25832 38018 445959 621000) 0 nil])
([nil nil ((#("  " 0 2 (part-side javascript)) . -81663) 81702) nil (25832 38018 445957 608000) 0 nil])
([nil nil ((#("chosen_list" 0 11 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . 81699) (undo-tree-id0 . -11) (undo-tree-id1 . -7) (undo-tree-id2 . -11) (undo-tree-id3 . -11)) nil (25832 38020 47909 291000) 0 nil])
([nil nil ((nil rear-nonsticky nil 81713 . 81714) (nil fontified t 81711 . 81714) (nil part-side javascript 81711 . 81714) (nil part-token string 81711 . 81714) (nil font-lock-face web-mode-javascript-string-face 81711 . 81714) (nil fontified t 81699 . 81711) (nil part-side javascript 81699 . 81711) (nil part-token string 81699 . 81711) (nil font-lock-face web-mode-javascript-string-face 81699 . 81711) (81699 . 81714)) nil (25832 38027 184772 26000) 0 nil] [nil nil ((81699 . 81700)) ((#("v" 0 1 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . 81699) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1)) (25832 38018 779337 458000) 0 nil])
([nil nil ((44403 . 44404) (t 25832 38027 235437 66000)) nil (25832 38204 724664 368000) 0 nil])
([nil nil ((nil rear-nonsticky nil 81814 . 81815) (nil rear-nonsticky t 81814 . 81815) (nil part-side javascript 81814 . 81815) (nil part-token string 81814 . 81815) (nil font-lock-face web-mode-javascript-string-face 81814 . 81815) (nil part-side javascript 81813 . 81814) (nil part-token string 81813 . 81814) (nil syntax-table (15) 81813 . 81814) (nil font-lock-face web-mode-javascript-string-face 81813 . 81814) (nil part-side javascript 81802 . 81813) (nil part-side javascript 81801 . 81802) (nil part-token string 81801 . 81802) (nil syntax-table (15) 81801 . 81802) (nil font-lock-face web-mode-javascript-string-face 81801 . 81802) (nil part-side javascript 81800 . 81801) (nil part-token string 81800 . 81801) (nil font-lock-face web-mode-javascript-string-face 81800 . 81801) (nil part-side javascript 81789 . 81800) (nil part-token string 81789 . 81800) (nil font-lock-face web-mode-javascript-string-face 81789 . 81800) (nil part-side javascript 81788 . 81789) (nil part-token string 81788 . 81789) (nil font-lock-face web-mode-javascript-string-face 81788 . 81789) (nil part-side javascript 81786 . 81788) (nil part-token string 81786 . 81788) (nil font-lock-face web-mode-javascript-string-face 81786 . 81788) (nil part-side javascript 81770 . 81786) (nil part-token string 81770 . 81786) (nil font-lock-face web-mode-javascript-string-face 81770 . 81786) (nil part-side javascript 81766 . 81770) (nil part-token string 81766 . 81770) (nil font-lock-face web-mode-javascript-string-face 81766 . 81770) (nil part-side javascript 81754 . 81766) (nil part-token string 81754 . 81766) (nil font-lock-face web-mode-javascript-string-face 81754 . 81766) (nil part-side javascript 81753 . 81754) (nil part-token string 81753 . 81754) (nil font-lock-face web-mode-javascript-string-face 81753 . 81754) (nil part-side javascript 81742 . 81753) (nil part-token string 81742 . 81753) (nil font-lock-face web-mode-javascript-string-face 81742 . 81753) (nil part-side javascript 81739 . 81742) (nil part-token string 81739 . 81742) (nil font-lock-face web-mode-javascript-string-face 81739 . 81742) (nil part-side javascript 81738 . 81739) (nil part-token string 81738 . 81739) (nil font-lock-face web-mode-javascript-string-face 81738 . 81739) (nil part-side javascript 81733 . 81738) (nil part-token string 81733 . 81738) (nil font-lock-face web-mode-javascript-string-face 81733 . 81738) (nil part-side javascript 81730 . 81733) (nil part-token string 81730 . 81733) (nil font-lock-face web-mode-javascript-string-face 81730 . 81733) (nil part-side javascript 81722 . 81730) (nil part-token string 81722 . 81730) (nil font-lock-face web-mode-javascript-string-face 81722 . 81730) (nil part-side javascript 81718 . 81722) (nil part-token string 81718 . 81722) (nil font-lock-face web-mode-javascript-string-face 81718 . 81722) (nil part-side javascript 81714 . 81718) (nil part-token string 81714 . 81718) (nil font-lock-face web-mode-javascript-string-face 81714 . 81718) (nil part-side javascript 81713 . 81714) (nil part-token string 81713 . 81714) (nil font-lock-face web-mode-javascript-string-face 81713 . 81714) (nil part-side javascript 81712 . 81713) (nil part-token string 81712 . 81713) (nil font-lock-face web-mode-javascript-string-face 81712 . 81713) (nil part-side javascript 81700 . 81712) (nil part-token string 81700 . 81712) (nil font-lock-face web-mode-javascript-string-face 81700 . 81712) (81700 . 81815)) ((#("            // Add raw filters to list for comparison
            this.raw_filter_list = result.data['chosen_list']" 0 39 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 39 42 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 42 66 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 66 70 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 70 101 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 101 102 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 102 113 (part-side javascript) 113 114 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 114 115 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript rear-nonsticky t)) . 81700) (undo-tree-id48 . -115) (undo-tree-id49 . -115) (undo-tree-id50 . -54) (undo-tree-id51 . -115) (undo-tree-id52 . -115) (undo-tree-id53 . -115) (undo-tree-id54 . -115) (undo-tree-id55 . -115) (undo-tree-id56 . -115) (undo-tree-id57 . -115) (undo-tree-id58 . -115) (nil syntax-table (15) 81801 . 81802) (nil syntax-table (15) 81813 . 81814) (nil rear-nonsticky nil 81814 . 81815) (nil rear-nonsticky t 81814 . 81815)) (25832 38018 456473 351000) 0 nil])
([nil nil ((44404 . 44413)) nil (25832 38204 724662 683000) 0 nil])
([nil nil ((nil rear-nonsticky nil 81929 . 81930) (nil rear-nonsticky t 81929 . 81930) (nil part-side javascript 81929 . 81930) (nil part-token string 81929 . 81930) (nil font-lock-face web-mode-javascript-string-face 81929 . 81930) (nil part-side javascript 81928 . 81929) (nil part-token string 81928 . 81929) (nil syntax-table (15) 81928 . 81929) (nil font-lock-face web-mode-javascript-string-face 81928 . 81929) (nil part-side javascript 81917 . 81928) (nil part-side javascript 81916 . 81917) (nil part-token string 81916 . 81917) (nil syntax-table (15) 81916 . 81917) (nil font-lock-face web-mode-javascript-string-face 81916 . 81917) (nil part-side javascript 81915 . 81916) (nil part-token string 81915 . 81916) (nil font-lock-face web-mode-javascript-string-face 81915 . 81916) (nil part-side javascript 81904 . 81915) (nil part-token string 81904 . 81915) (nil font-lock-face web-mode-javascript-string-face 81904 . 81915) (nil part-side javascript 81903 . 81904) (nil part-token string 81903 . 81904) (nil font-lock-face web-mode-javascript-string-face 81903 . 81904) (nil part-side javascript 81901 . 81903) (nil part-token string 81901 . 81903) (nil font-lock-face web-mode-javascript-string-face 81901 . 81903) (nil part-side javascript 81885 . 81901) (nil part-token string 81885 . 81901) (nil font-lock-face web-mode-javascript-string-face 81885 . 81901) (nil part-side javascript 81881 . 81885) (nil part-token string 81881 . 81885) (nil font-lock-face web-mode-javascript-string-face 81881 . 81885) (nil part-side javascript 81869 . 81881) (nil part-token string 81869 . 81881) (nil font-lock-face web-mode-javascript-string-face 81869 . 81881) (nil part-side javascript 81868 . 81869) (nil part-token string 81868 . 81869) (nil font-lock-face web-mode-javascript-string-face 81868 . 81869) (nil part-side javascript 81857 . 81868) (nil part-token string 81857 . 81868) (nil font-lock-face web-mode-javascript-string-face 81857 . 81868) (nil part-side javascript 81854 . 81857) (nil part-token string 81854 . 81857) (nil font-lock-face web-mode-javascript-string-face 81854 . 81857) (nil part-side javascript 81853 . 81854) (nil part-token string 81853 . 81854) (nil font-lock-face web-mode-javascript-string-face 81853 . 81854) (nil part-side javascript 81848 . 81853) (nil part-token string 81848 . 81853) (nil font-lock-face web-mode-javascript-string-face 81848 . 81853) (nil part-side javascript 81845 . 81848) (nil part-token string 81845 . 81848) (nil font-lock-face web-mode-javascript-string-face 81845 . 81848) (nil part-side javascript 81837 . 81845) (nil part-token string 81837 . 81845) (nil font-lock-face web-mode-javascript-string-face 81837 . 81845) (nil part-side javascript 81833 . 81837) (nil part-token string 81833 . 81837) (nil font-lock-face web-mode-javascript-string-face 81833 . 81837) (nil part-side javascript 81829 . 81833) (nil part-token string 81829 . 81833) (nil font-lock-face web-mode-javascript-string-face 81829 . 81833) (nil part-side javascript 81828 . 81829) (nil part-token string 81828 . 81829) (nil font-lock-face web-mode-javascript-string-face 81828 . 81829) (nil part-side javascript 81827 . 81828) (nil part-token string 81827 . 81828) (nil font-lock-face web-mode-javascript-string-face 81827 . 81828) (nil part-side javascript 81815 . 81827) (nil part-token string 81815 . 81827) (nil font-lock-face web-mode-javascript-string-face 81815 . 81827) (81815 . 81930)) ((#("            // Add raw filters to list for comparison
            this.raw_filter_list = result.data['chosen_list']" 0 39 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 39 42 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 42 66 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 66 70 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 70 101 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 101 102 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 102 113 (part-side javascript) 113 114 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 114 115 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript rear-nonsticky t)) . 81815) (undo-tree-id46 . -115) (undo-tree-id47 . -54) (nil syntax-table (15) 81916 . 81917) (nil syntax-table (15) 81928 . 81929) (nil rear-nonsticky nil 81929 . 81930) (nil rear-nonsticky t 81929 . 81930)) (25832 38018 445903 302000) 0 nil])
([nil nil ((nil rear-nonsticky nil 44427 . 44428) (nil part-side javascript 44413 . 44428) (44413 . 44428)) nil (25832 38204 724661 17000) 0 nil])
nil
([nil nil ((44406 . 44414) (#("        " 0 8 (part-side javascript)) . 44405) (undo-tree-id136 . -8) (44404 . 44414)) nil (25832 38204 724659 241000) 0 nil])
([nil nil ((44414 . 44435)) nil (25832 38204 724656 562000) 0 nil])
([nil nil ((44435 . 44436)) nil (25832 38204 724655 242000) 0 nil])
([nil nil ((#("h" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -44434) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("o" 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -44435) (undo-tree-id134 . -1) (undo-tree-id135 . -1) 44436) nil (25832 38204 724653 479000) 0 nil])
([nil nil ((44434 . 44439)) nil (25832 38204 724647 584000) 0 nil])
([nil nil ((44439 . 44450)) nil (25832 38204 724646 402000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript)) . -44449) (undo-tree-id131 . -1) 44450) nil (25832 38204 724645 134000) 0 nil])
([nil nil ((44475 . 44477) (#("[" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -44475) (44473 . 44476)) nil (25832 38204 724642 521000) 0 nil])
([nil nil ((44477 . 44479)) nil (25832 38204 724640 666000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -44478) (undo-tree-id130 . -1) 44479) nil (25832 38204 724639 90000) 0 nil])
([nil nil ((74234 . 74238)) nil (25832 38204 724636 589000) 0 nil])
([nil nil ((74234 . 74249) (#("raw_" 0 4 (part-side javascript)) . -74234) (undo-tree-id128 . -4) (undo-tree-id129 . -4) 74238) nil (25832 38204 724635 35000) 0 nil])
([nil nil ((74249 . 74250)) nil (25832 38204 724631 464000) 0 nil])
([nil nil ((nil rear-nonsticky nil 74270 . 74271) (nil part-side javascript 74270 . 74271) (nil face (rainbow-delimiters-depth-5-face) 74270 . 74271) (nil part-side javascript 74266 . 74270) (nil part-side javascript 74259 . 74266) (nil face web-mode-function-name-face 74259 . 74266) (nil part-side javascript 74258 . 74259) (nil face (rainbow-delimiters-depth-4-face) 74258 . 74259) (nil part-side javascript 74251 . 74258) (nil face web-mode-function-call-face 74251 . 74258) (nil part-side javascript 74250 . 74251) (74250 . 74271)) nil (25832 38204 724629 784000) 0 nil])
([nil nil ((74250 . 74280)) nil (25832 38204 724626 32000) 0 nil])
([nil nil ((#("." 0 1 (part-side javascript)) . -74249) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) 74250) nil (25832 38204 724624 510000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#("
" 0 1 (part-side javascript)) . 74249) (undo-tree-id124 . -1)) nil (25832 38204 724616 557000) 0 nil])
([nil nil ((#("." 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249) (#(" " 0 1 (part-side javascript)) . 74249)) nil (25832 38204 724607 100000) 0 nil])
([nil nil ((74249 . 74250)) nil (25832 38204 724603 772000) 0 nil])
([nil nil ((74270 . 74272)) nil (25832 38204 724602 681000) 0 nil])
([nil nil ((74272 . 74280) (#("          " 0 10 (face whitespace-trailing part-side javascript)) . 74271) (undo-tree-id122 . -8) (undo-tree-id123 . 10) (74279 . 74281) (74270 . 74280)) nil (25832 38204 724600 999000) 0 nil])
([nil nil ((74271 . 74281)) nil (25832 38204 724595 713000) 0 nil])
([nil nil ((#("        this.filter_compare(this.filters[0], )
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 13 (part-side javascript) 13 27 (face web-mode-function-call-face part-side javascript) 27 28 (face (rainbow-delimiters-depth-4-face) part-side javascript) 28 32 (face web-mode-constant-face part-side javascript) 32 39 (part-side javascript) 39 40 (part-side javascript rear-nonsticky t) 40 41 (face (rainbow-delimiters-depth-5-face) part-side javascript) 41 42 (part-side javascript) 42 43 (face (rainbow-delimiters-depth-5-face) part-side javascript) 43 45 (part-side javascript) 45 46 (face (rainbow-delimiters-depth-4-face) part-side javascript) 46 47 (part-side javascript)) . 74340) (undo-tree-id120 . -10) (undo-tree-id121 . -47) (74329 . 74340) (#("        })
" 0 8 (part-side javascript) 8 9 (face (rainbow-delimiters-depth-5-face) part-side javascript) 9 10 (face (rainbow-delimiters-depth-4-face) part-side javascript) 10 11 (part-side javascript)) . 74282) (74293 . 74340) 74303) nil (25832 38204 724593 748000) 0 nil])
([nil nil ((#("        this.filter_compare(this.filters[0], )
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 13 (part-side javascript) 13 27 (face web-mode-function-call-face part-side javascript) 27 28 (face (rainbow-delimiters-depth-6-face) part-side javascript) 28 32 (face web-mode-constant-face part-side javascript) 32 39 (part-side javascript) 39 40 (part-side javascript rear-nonsticky t) 40 41 (face (rainbow-delimiters-depth-7-face) part-side javascript) 41 42 (part-side javascript) 42 43 (face (rainbow-delimiters-depth-7-face) part-side javascript) 43 45 (part-side javascript) 45 46 (face (rainbow-delimiters-depth-6-face) part-side javascript) 46 47 (part-side javascript)) . 74329) (undo-tree-id118 . -10) (undo-tree-id119 . -47) (74318 . 74329) (#("          
" 0 10 (face whitespace-trailing part-side javascript) 10 11 (part-side javascript)) . 74271) (74282 . 74329) 74292) nil (25832 38204 724589 206000) 0 nil])
([nil nil ((74279 . 74281) 74281) nil (25832 38204 724584 721000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . 74330) (undo-tree-id116 . -1) (undo-tree-id117 . 1)) nil (25832 38204 724582 701000) 0 nil])
([nil nil ((#("          " 0 2 (part-side javascript) 2 10 (part-side javascript)) . -74328) (undo-tree-id115 . -2) 74330) nil (25832 38204 724579 263000) 0 nil])
([nil nil ((74318 . 74328)) nil (25832 38204 724576 795000) 0 nil])
([nil nil ((#("e" 0 1 (part-side javascript)) . -74326) (undo-tree-id113 . -1) (#("f" 0 1 (part-side javascript)) . -74327) (undo-tree-id114 . -1) 74328) nil (25832 38204 724575 187000) 0 nil])
([nil nil ((74326 . 74333)) nil (25832 38204 724571 240000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -74332) (undo-tree-id112 . -1) 74333) nil (25832 38204 724569 720000) 0 nil])
([nil nil ((74270 . 74281)) nil (25832 38204 724566 908000) 0 nil])
([nil nil ((#("\"" 0 1 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript)) . 74295) (74294 . 74295) (nil part-token string 74294 . 74295) (nil font-lock-face web-mode-javascript-string-face 74294 . 74295) (nil part-side javascript 74294 . 74295) (74293 . 74295) (#("\"" 0 1 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript)) . -74293) (74293 . 74294) (74292 . 74294) (#("(" 0 1 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . -74292) (74281 . 74293)) nil (25832 38204 724564 883000) 0 nil])
([nil nil ((74294 . 74297)) nil (25832 38204 724561 440000) 0 nil])
([nil nil ((#("o" 0 1 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . -74295) (undo-tree-id110 . -1) (#("i" 0 1 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . -74296) (undo-tree-id111 . -1) 74297) nil (25832 38204 724559 926000) 0 nil])
([nil nil ((74295 . 74306)) nil (25832 38204 724555 942000) 0 nil])
([nil nil ((74306 . 74308)) nil (25832 38204 724554 619000) 0 nil])
([nil nil ((#("s" 0 1 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . -74305) (undo-tree-id107 . -1) (#("i" 0 1 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . -74306) (undo-tree-id108 . -1) (#("n" 0 1 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . -74307) (undo-tree-id109 . -1) 74308) nil (25832 38204 724552 657000) 0 nil])
([nil nil ((74305 . 74310)) nil (25832 38204 724546 901000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . -74309) (undo-tree-id106 . -1) 74310) nil (25832 38204 724545 145000) 0 nil])
([nil nil ((74310 . 74325)) nil (25832 38204 724541 208000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -74324) (undo-tree-id105 . -1) 74325) nil (25832 38204 724536 298000) 0 nil])
([nil nil ((74347 . 74349) (#("(" 0 1 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . -74347) (74336 . 74348) (t 25832 38204 766372 138000)) nil (25832 38328 709026 970000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . 74348)) nil (25832 38328 709024 658000) 0 nil])
([nil nil ((74400 . 74401)) nil (25832 38328 709023 238000) 0 nil])
([nil nil ((74348 . 74350)) nil (25832 38328 709021 942000) 0 nil])
([nil nil ((74349 . 74363)) nil (25832 38328 709020 197000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . -74362) (undo-tree-id137 . -1) 74363) nil (25832 38328 709017 612000) 0 nil])
([nil nil ((74363 . 74365)) nil (25832 40189 644868 481000) 0 nil])
([nil nil ((74336 . 74342) (t 25832 40190 439576 479000)) nil (25832 40550 813250 426000) 0 nil] [nil nil ((74336 . 74342) (t 25832 38328 752759 941000)) ((#("await " 0 5 (face web-mode-keyword-face part-side javascript) 5 6 (part-side javascript)) . 74336) (undo-tree-id138 . -6) (undo-tree-id139 . -6) (undo-tree-id140 . -6) (undo-tree-id141 . -6) (undo-tree-id142 . -6) (undo-tree-id143 . -6) (undo-tree-id144 . -6) (undo-tree-id145 . -6) (undo-tree-id146 . -6) (undo-tree-id147 . -6) (undo-tree-id148 . -6) (undo-tree-id149 . -6) (undo-tree-id150 . -6) (undo-tree-id151 . -6) (undo-tree-id152 . -6) (undo-tree-id153 . -6) (undo-tree-id154 . -6) (undo-tree-id155 . -6) (undo-tree-id156 . -6) (undo-tree-id157 . -6) (undo-tree-id158 . -6) (t 25832 40181 811633 413000)) (25832 40180 753795 989000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . 74342) (#("e" 0 1 (part-side javascript)) . 74342) (#("r" 0 1 (part-side javascript)) . 74342) (#("a" 0 1 (part-side javascript)) . 74342) (#("p" 0 1 (part-side javascript)) . 74342) (#("m" 0 1 (part-side javascript)) . 74342) (#("o" 0 1 (part-side javascript)) . 74342) (#("c" 0 1 (part-side javascript)) . 74342) (#("'" 0 1 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript)) . 74342) (#("(" 0 1 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . 74342) (#("g" 0 1 (face web-mode-function-call-face part-side javascript)) . 74342) (#("o" 0 1 (face web-mode-function-call-face part-side javascript)) . 74342) (#("l" 0 1 (face web-mode-function-call-face part-side javascript)) . 74342) (#("." 0 1 (part-side javascript)) . 74342) (#("e" 0 1 (part-side javascript)) . 74342) (#("l" 0 1 (part-side javascript)) . 74342) (#("o" 0 1 (part-side javascript)) . 74342) (#("s" 0 1 (part-side javascript)) . 74342) (#("n" 0 1 (part-side javascript)) . 74342) (#("o" 0 1 (part-side javascript)) . 74342) (#("c" 0 1 (part-side javascript)) . 74342)) nil (25832 40550 813246 433000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . 74342) (#("e" 0 1 (part-side javascript)) . 74342) (#("r" 0 1 (part-side javascript)) . 74342) (#("a" 0 1 (part-side javascript)) . 74342) (#("p" 0 1 (part-side javascript)) . 74342) (#("m" 0 1 (part-side javascript)) . 74342) (#("o" 0 1 (part-side javascript)) . 74342) (#("c" 0 1 (part-side javascript)) . 74342) (#("'" 0 1 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript)) . 74342) (#("(" 0 1 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . 74342) (#("g" 0 1 (face web-mode-function-call-face part-side javascript)) . 74342) (#("o" 0 1 (face web-mode-function-call-face part-side javascript)) . 74342) (#("l" 0 1 (face web-mode-function-call-face part-side javascript)) . 74342) (#("." 0 1 (part-side javascript)) . 74342) (#("e" 0 1 (part-side javascript)) . 74342) (#("l" 0 1 (part-side javascript)) . 74342) (#("o" 0 1 (part-side javascript)) . 74342) (#("s" 0 1 (part-side javascript)) . 74342) (#("n" 0 1 (part-side javascript)) . 74342) (#("o" 0 1 (part-side javascript)) . 74342) (#("c" 0 1 (part-side javascript)) . 74342)) ((74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343)) (25832 40180 234886 765000) 0 nil])
([nil nil ((#("," 0 1 (part-side javascript)) . 74342) (#("'" 0 1 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript)) . 74342) (#("e" 0 1 (part-side javascript)) . 74342) (#("r" 0 1 (part-side javascript)) . 74342) (#("o" 0 1 (part-side javascript)) . 74342) (#("c" 0 1 (part-side javascript)) . 74342) (#("s" 0 1 (part-side javascript)) . 74342)) nil (25832 40550 813239 759000) 0 nil])
([nil nil ((#("e" 0 1 (part-side javascript)) . 74342) (#("r" 0 1 (part-side javascript)) . 74342) (#("o" 0 1 (part-side javascript)) . 74342) (#("c" 0 1 (part-side javascript)) . 74342) (#("s" 0 1 (part-side javascript)) . 74342)) ((74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343) (74342 . 74343)) (25832 40179 836264 710000) 0 nil])
([nil nil ((74342 . 74355)) nil (25832 40550 813237 41000) 0 nil])
([nil nil ((#("'" 0 1 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript)) . 74342)) ((74342 . 74343)) (25832 40179 834635 808000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) part-side javascript)) . -74408) (undo-tree-id162 . -1) (undo-tree-id163 . -1) 74409) nil (25832 40550 813235 681000) 0 nil])
nil
([nil nil ((74408 . 74419)) nil (25832 40550 813231 832000) 0 nil])
([nil nil ((#("\"" 0 1 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript)) . 74433) (74432 . 74433) (nil part-token string 74432 . 74433) (nil font-lock-face web-mode-javascript-string-face 74432 . 74433) (nil part-side javascript 74432 . 74433) (74431 . 74433) (#("\"" 0 1 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript)) . -74431) (74431 . 74432) (74430 . 74432) (#("(" 0 1 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . -74430) (74419 . 74431)) nil (25832 40550 813229 675000) 0 nil])
([nil nil ((74432 . 74435)) nil (25832 40550 813226 249000) 0 nil])
([nil nil ((#("r" 0 1 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . -74434) (undo-tree-id160 . -1) (undo-tree-id161 . -1) 74435) nil (25832 40550 813224 437000) 0 nil])
([nil nil ((74434 . 74438)) nil (25832 40550 813220 377000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . -74437) (undo-tree-id159 . -1) 74438) nil (25832 40550 813218 693000) 0 nil])
([nil nil ((74438 . 74450)) nil (25832 40550 813208 877000) 0 nil])
([nil nil ((74437 . 74438)) nil (25832 40550 813206 961000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . 74355)) nil (25832 40550 813198 957000) 0 nil])
([nil nil ((#("a" 0 1 (part-side javascript)) . -74336) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("w" 0 1 (part-side javascript)) . -74337) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("a" 0 1 (part-side javascript)) . -74338) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("i" 0 1 (part-side javascript)) . -74339) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("t" 0 1 (face web-mode-keyword-face part-side javascript)) . -74340) (undo-tree-id172 . -1) (undo-tree-id173 . -1) 74341 (t 25832 40550 862777 877000)) nil (25832 40572 978941 315000) 0 nil])
([nil nil ((74336 . 74341)) nil (25832 40572 978919 268000) 0 nil])
([nil nil ((74355 . 74361)) nil (25832 40572 978912 85000) 0 nil])
([nil nil ((#("await " 0 5 (face web-mode-keyword-face part-side javascript) 5 6 (part-side javascript)) . 74355) (undo-tree-id174 . -6) (undo-tree-id175 . -5) (undo-tree-id176 . -6) (t 25832 40573 26806 930000)) nil (25832 40754 509424 769000) 0 nil])
([nil nil ((74355 . 74360) (t 25832 40754 563278 268000)) nil (25832 41140 573909 618000) 0 nil])
([nil nil ((74360 . 74361)) nil (25832 41140 573901 871000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -74354) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (#("a" 0 1 (part-side javascript)) . -74355) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#("w" 0 1 (part-side javascript)) . -74356) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (#("a" 0 1 (part-side javascript)) . -74357) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("i" 0 1 (part-side javascript)) . -74358) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (#("t" 0 1 (face web-mode-keyword-face part-side javascript)) . -74359) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) 74360 (t 25832 41140 621243 265000)) nil (25832 41151 727510 543000) 0 nil])
([nil nil ((74355 . 74361) (t 25832 41151 773313 251000)) nil (25832 41279 701956 746000) 0 nil])
([nil nil ((#("." 0 1 (part-side javascript)) . 74361) (#("s" 0 1 (part-side javascript)) . 74361) (#("i" 0 1 (part-side javascript)) . 74361) (#("h" 0 1 (part-side javascript)) . 74361) (#("t" 0 1 (face web-mode-constant-face part-side javascript)) . 74361) (undo-tree-id198 . -1) (t 25832 41279 750059 744000)) nil (25832 41355 904200 35000) 0 nil])
([nil nil ((#("onst comp_score = await " 0 4 (part-side javascript face web-mode-keyword-face) 4 5 (part-side javascript) 5 15 (part-side javascript face web-mode-variable-name-face) 15 18 (part-side javascript) 18 23 (part-side javascript face web-mode-keyword-face) 23 24 (part-side javascript)) . 74337) (undo-tree-id54 . -24) (undo-tree-id55 . -24) (undo-tree-id56 . -24) (t 25832 41355 956837 513000)) nil (25836 31450 683423 10000) 0 nil])
([nil nil ((#("c" 0 1 (part-side javascript face web-mode-function-call-face)) . -74336) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) 74337) nil (25836 31450 683418 319000) 0 nil])
([nil nil ((74388 . 74390) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . -74388) (74383 . 74389)) nil (25836 31450 683413 233000) 0 nil])
([nil nil ((74389 . 74395)) nil (25836 31450 683411 877000) 0 nil])
([nil nil ((#("d" 0 1 (part-side javascript)) . -74390) (undo-tree-id46 . -1) (#("a" 0 1 (part-side javascript)) . -74391) (undo-tree-id47 . -1) (#("t" 0 1 (part-side javascript)) . -74392) (undo-tree-id48 . -1) (#("a" 0 1 (part-side javascript)) . -74393) (undo-tree-id49 . -1) (#(" " 0 1 (part-side javascript)) . -74394) (undo-tree-id50 . -1) 74395) nil (25836 31450 683409 936000) 0 nil])
([nil nil ((74390 . 74395)) nil (25836 31450 683402 314000) 0 nil])
([nil nil ((74395 . 74396)) nil (25836 31450 683401 399000) 0 nil])
([nil nil ((#(">" 0 1 (part-side javascript)) . -74395) (undo-tree-id45 . -1) 74396) nil (25836 31450 683400 294000) 0 nil])
([nil nil ((74395 . 74398)) nil (25836 31450 683398 37000) 0 nil])
([nil nil ((74383 . 74401)) nil (25836 31450 683397 130000) 0 nil])
([nil nil ((74408 . 74427) (#(" " 0 1 (part-side javascript)) . 74407) (undo-tree-id44 . -1) (74408 . 74409)) nil (25836 31450 683395 846000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . 74407) (#(" " 0 1 (part-side javascript)) . 74407) (#(" " 0 1 (part-side javascript)) . 74407) (#(" " 0 1 (part-side javascript)) . 74407) (#(" " 0 1 (part-side javascript)) . 74407) (#(" " 0 1 (part-side javascript)) . 74407) (#(" " 0 1 (part-side javascript)) . 74407) (#(" " 0 1 (part-side javascript)) . 74407) (#(" " 0 1 (part-side javascript)) . 74407) (#(" " 0 1 (part-side javascript)) . 74407) (#(" " 0 1 (part-side javascript)) . 74407) (#(" " 0 1 (part-side javascript)) . 74407) (#(" " 0 1 (part-side javascript)) . 74407) (#(" " 0 1 (part-side javascript)) . 74407) (#(" " 0 1 (part-side javascript)) . 74407) (#(" " 0 1 (part-side javascript)) . 74407) (#(" " 0 1 (part-side javascript)) . 74407) (#(" " 0 1 (part-side javascript)) . 74407) (#("
" 0 1 (part-side javascript)) . 74407) (undo-tree-id43 . -1)) nil (25836 31450 683390 678000) 0 nil])
([nil nil ((74418 . 74435) (#("                   " 0 19 (part-side javascript face whitespace-trailing)) . 74417) (undo-tree-id38 . -17) (undo-tree-id39 . 19) (74434 . 74436) (74417 . 74435) (#("                   " 0 19 (part-side javascript face whitespace-trailing)) . 74416) (undo-tree-id40 . -17) (undo-tree-id41 . 19) (74433 . 74435) (74416 . 74434) (#(" " 0 1 (part-side javascript)) . 74415) (undo-tree-id42 . -1) (74416 . 74417)) nil (25836 31450 683384 125000) 0 nil])
([nil nil ((#("          console.log(\"Score \", comp_score)
" 0 18 (part-side javascript) 18 21 (part-side javascript face web-mode-function-call-face) 21 22 (part-side javascript face (rainbow-delimiters-depth-6-face)) 22 23 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 23 29 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 29 30 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 30 42 (part-side javascript) 42 43 (part-side javascript face (rainbow-delimiters-depth-6-face)) 43 44 (part-side javascript)) . 74481) (undo-tree-id36 . -17) (undo-tree-id37 . -44) (74462 . 74481) (#("                 )
" 0 17 (part-side javascript) 17 18 (part-side javascript face (rainbow-delimiters-depth-6-face)) 18 19 (part-side javascript)) . 74418) (74437 . 74481) 74454) nil (25836 31450 683375 348000) 0 nil])
([nil nil ((#("          console.log(\"Score \", comp_score)
" 0 18 (part-side javascript) 18 21 (part-side javascript face web-mode-function-call-face) 21 22 (part-side javascript face (rainbow-delimiters-depth-7-face)) 22 23 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 23 29 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 29 30 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 30 42 (part-side javascript) 42 43 (part-side javascript face (rainbow-delimiters-depth-7-face)) 43 44 (part-side javascript)) . 74462) (undo-tree-id34 . -17) (undo-tree-id35 . -44) (74461 . 74462) (#("
" 0 1 (part-side javascript)) . 74417) (74418 . 74462) 74435) nil (25836 31450 683370 589000) 0 nil])
([nil nil ((#("          console.log(\"Score \", comp_score)
" 0 18 (part-side javascript) 18 21 (part-side javascript face web-mode-function-call-face) 21 22 (part-side javascript face (rainbow-delimiters-depth-7-face)) 22 23 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 23 29 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 29 30 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 30 42 (part-side javascript) 42 43 (part-side javascript face (rainbow-delimiters-depth-7-face)) 43 44 (part-side javascript)) . 74461) (undo-tree-id32 . -17) (undo-tree-id33 . -44) (74460 . 74461) (#("
" 0 1 (part-side javascript)) . 74416) (74417 . 74461) 74434) nil (25836 31450 683365 739000) 0 nil])
([nil nil ((74416 . 74435) (#("          " 0 10 (part-side javascript)) . 74416) 74433) nil (25836 31450 683360 79000) 0 nil])
([nil nil ((#("d" 0 1 (part-side javascript face web-mode-function-name-face)) . -74408) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("a" 0 1 (part-side javascript face web-mode-function-name-face)) . -74409) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("t" 0 1 (part-side javascript face web-mode-function-name-face)) . -74410) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("a" 0 1 (part-side javascript face web-mode-function-name-face)) . -74411) (undo-tree-id31 . -1) 74412) nil (25836 31450 683357 776000) 0 nil])
([nil nil ((74408 . 74411)) nil (25836 31450 683348 624000) 0 nil])
([nil nil ((#("c" 0 1 (part-side javascript)) . -74456) (undo-tree-id15 . -1) (#("o" 0 1 (part-side javascript)) . -74457) (undo-tree-id16 . -1) (#("m" 0 1 (part-side javascript)) . -74458) (undo-tree-id17 . -1) (#("p" 0 1 (part-side javascript)) . -74459) (undo-tree-id18 . -1) (#("_" 0 1 (part-side javascript)) . -74460) (undo-tree-id19 . -1) (#("s" 0 1 (part-side javascript)) . -74461) (undo-tree-id20 . -1) (#("c" 0 1 (part-side javascript)) . -74462) (undo-tree-id21 . -1) (#("o" 0 1 (part-side javascript)) . -74463) (undo-tree-id22 . -1) (#("r" 0 1 (part-side javascript)) . -74464) (undo-tree-id23 . -1) (#("e" 0 1 (part-side javascript)) . -74465) (undo-tree-id24 . -1) 74466) nil (25836 31450 683345 461000) 0 nil])
([nil nil ((74456 . 74459)) nil (25836 31450 683332 29000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . 74460) (undo-tree-id13 . -1) (#("
" 0 1 (part-side javascript)) . 74460) (undo-tree-id14 . -1)) nil (25836 31450 683330 512000) 0 nil])
([nil nil ((74479 . 74490)) nil (25836 31450 683327 231000) 0 nil])
([nil nil ((74497 . 74504) (74496 . 74498) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . -74496) (74490 . 74497)) nil (25836 31450 683326 27000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -74497) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("e" 0 1 (part-side javascript)) . -74498) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("r" 0 1 (part-side javascript)) . -74499) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("r" 0 1 (part-side javascript)) . -74500) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("p" 0 1 (part-side javascript)) . -74501) (undo-tree-id10 . -1) (#("r" 0 1 (part-side javascript)) . -74502) (undo-tree-id11 . -1) (#(" " 0 1 (part-side javascript)) . -74503) (undo-tree-id12 . -1) 74504) nil (25836 31450 683322 419000) 0 nil])
([nil nil ((74497 . 74510)) nil (25836 31450 683307 803000) 0 nil])
([nil nil ((74519 . 74524) (nil part-token string 74519 . 74520) (nil font-lock-face web-mode-javascript-string-face 74519 . 74520) (nil part-side javascript 74519 . 74520) (74518 . 74520) (#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . -74518) (74518 . 74519) (74517 . 74519) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-7-face))) . -74517) (74510 . 74518)) nil (25836 31450 683305 893000) 0 nil])
([nil nil ((74525 . 74533)) nil (25836 31450 683301 686000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -74532) (undo-tree-id1 . -1) 74533) nil (25836 31450 683297 961000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -74407) (undo-tree-id0 . -1) 74408) nil (25836 31450 683280 710000) 0 nil])
([nil nil ((74336 . 74341) (t 25836 31450 734644 181000)) nil (25836 31570 865969 519000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . 74388) (#(" " 0 1 (part-side javascript)) . 74388) (#(" " 0 1 (part-side javascript)) . 74388) (#(" " 0 1 (part-side javascript)) . 74388) (#(" " 0 1 (part-side javascript)) . 74388) (#(" " 0 1 (part-side javascript)) . 74388) (#(" " 0 1 (part-side javascript)) . 74388) (#(" " 0 1 (part-side javascript)) . 74388) (#(" " 0 1 (part-side javascript)) . 74388) (#(" " 0 1 (part-side javascript)) . 74388) (#(" " 0 1 (part-side javascript)) . 74388) (#(" " 0 1 (part-side javascript)) . 74388) (#(" " 0 1 (part-side javascript)) . 74388) (#(" " 0 1 (part-side javascript)) . 74388) (#(" " 0 1 (part-side javascript)) . 74388) (#(" " 0 1 (part-side javascript)) . 74388) (#(" " 0 1 (part-side javascript)) . 74388) (#("
" 0 1 (part-side javascript)) . 74388) (undo-tree-id82 . -1)) nil (25836 31570 865965 566000) 0 nil])
([nil nil ((74401 . 74403) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-7-face))) . -74401) (74400 . 74402)) nil (25836 31570 865959 738000) 0 nil])
([nil nil ((74405 . 74415) (#("            " 0 12 (part-side javascript face whitespace-trailing)) . 74404) (undo-tree-id78 . -10) (undo-tree-id79 . 12) (74414 . 74416) (74404 . 74415) (#("            " 0 12 (part-side javascript face whitespace-trailing)) . 74403) (undo-tree-id80 . -10) (undo-tree-id81 . 12) (74413 . 74415) (74402 . 74414)) nil (25836 31570 865957 598000) 0 nil])
([nil nil ((#("                   console.log(\"Score \", res)
" 0 19 (part-side javascript) 19 27 (part-side javascript) 27 30 (part-side javascript face web-mode-function-call-face) 30 31 (part-side javascript face (rainbow-delimiters-depth-7-face)) 31 32 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 32 38 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 38 39 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 39 44 (part-side javascript) 44 45 (part-side javascript face (rainbow-delimiters-depth-7-face)) 45 46 (part-side javascript)) . 74463) (undo-tree-id76 . -11) (undo-tree-id77 . -46) (74451 . 74463) (#("          }
" 0 10 (part-side javascript) 10 11 (part-side javascript face (rainbow-delimiters-depth-7-face)) 11 12 (part-side javascript)) . 74405) (74417 . 74463) 74428) nil (25836 31570 865950 887000) 0 nil])
([nil nil ((#("                   console.log(\"Score \", res)
" 0 19 (part-side javascript) 19 27 (part-side javascript) 27 30 (part-side javascript face web-mode-function-call-face) 30 31 (part-side javascript face (rainbow-delimiters-depth-8-face)) 31 32 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 32 38 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 38 39 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 39 44 (part-side javascript) 44 45 (part-side javascript face (rainbow-delimiters-depth-8-face)) 45 46 (part-side javascript)) . 74451) (undo-tree-id74 . -11) (undo-tree-id75 . -46) (74450 . 74451) (#("
" 0 1 (part-side javascript)) . 74404) (74405 . 74451) 74416) nil (25836 31570 865946 472000) 0 nil])
([nil nil ((#("                   console.log(\"Score \", res)
" 0 19 (part-side javascript) 19 27 (part-side javascript) 27 30 (part-side javascript face web-mode-function-call-face) 30 31 (part-side javascript face (rainbow-delimiters-depth-8-face)) 31 32 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 32 38 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 38 39 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 39 44 (part-side javascript) 44 45 (part-side javascript face (rainbow-delimiters-depth-8-face)) 45 46 (part-side javascript)) . 74450) (undo-tree-id72 . -11) (undo-tree-id73 . -46) (74449 . 74450) (#("
" 0 1 (part-side javascript)) . 74403) (74404 . 74450) 74415) nil (25836 31570 865941 94000) 0 nil])
([nil nil ((#("       " 0 7 (part-side javascript)) . -74415) 74414) nil (25836 31570 865937 17000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . 74442) (undo-tree-id70 . -1) (#("
" 0 1 (part-side javascript)) . 74442) (undo-tree-id71 . -1)) nil (25836 31570 865935 379000) 0 nil])
([nil nil ((#("       " 0 7 (part-side javascript)) . -74464) 74454) nil (25836 31570 865932 24000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . 74453) (#(" " 0 1 (part-side javascript)) . 74453) (#(" " 0 1 (part-side javascript)) . 74453) (#(" " 0 1 (part-side javascript)) . 74453) (#(" " 0 1 (part-side javascript)) . 74453) (#(" " 0 1 (part-side javascript)) . 74453) (#(" " 0 1 (part-side javascript)) . 74453) (#(" " 0 1 (part-side javascript)) . 74453) (#(" " 0 1 (part-side javascript)) . 74453) (#(" " 0 1 (part-side javascript)) . 74453) (#("
" 0 1 (part-side javascript)) . 74453) (undo-tree-id69 . -1)) nil (25836 31570 865928 816000) 0 nil])
([nil nil ((74481 . 74483) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-7-face))) . -74481) (74481 . 74482)) nil (25836 31570 865924 554000) 0 nil])
([nil nil ((74491 . 74508) (#("                   " 0 19 (part-side javascript face whitespace-trailing)) . 74490) (undo-tree-id67 . -17) (undo-tree-id68 . 19) (74507 . 74509) (74490 . 74508) (74455 . 74472) (#("          " 0 10 (part-side javascript)) . 74455) (74482 . 74483)) nil (25836 31570 865922 275000) 0 nil])
([nil nil ((74509 . 74529)) nil (25836 31570 865917 683000) 0 nil])
([nil nil ((#("                   console.log(\"error\", error))
" 0 19 (part-side javascript) 19 27 (part-side javascript) 27 30 (part-side javascript face web-mode-function-call-face) 30 31 (part-side javascript face (rainbow-delimiters-depth-6-face)) 31 32 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 32 37 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 37 38 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 38 45 (part-side javascript) 45 46 (part-side javascript face (rainbow-delimiters-depth-6-face)) 46 47 (part-side javascript face (rainbow-delimiters-mismatched-face)) 47 48 (part-side javascript)) . 74558) (undo-tree-id64 . -19) (undo-tree-id65 . -48) (undo-tree-id66 . -34) (74539 . 74558) (#("                 }
" 0 17 (part-side javascript) 17 18 (part-side javascript face (rainbow-delimiters-depth-7-face)) 18 19 (part-side javascript)) . 74491) (74510 . 74558) 74529) nil (25836 31570 865916 110000) 0 nil])
([nil nil ((#("                   console.log(\"error\", error))
" 0 19 (part-side javascript) 19 27 (part-side javascript) 27 30 (part-side javascript face web-mode-function-call-face) 30 31 (part-side javascript face (rainbow-delimiters-depth-7-face)) 31 32 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 32 37 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 37 38 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 38 45 (part-side javascript) 45 46 (part-side javascript face (rainbow-delimiters-depth-7-face)) 46 47 (part-side javascript face (rainbow-delimiters-depth-6-face)) 47 48 (part-side javascript)) . 74539) (undo-tree-id62 . -19) (undo-tree-id63 . -48) (74538 . 74539) (#("
" 0 1 (part-side javascript)) . 74490) (74491 . 74539) 74510) nil (25836 31570 865907 990000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . 74454) (#(" " 0 1 (part-side javascript)) . 74454) (#(" " 0 1 (part-side javascript)) . 74454) (#(" " 0 1 (part-side javascript)) . 74454) (#(" " 0 1 (part-side javascript)) . 74454) (#(" " 0 1 (part-side javascript)) . 74454) (#(" " 0 1 (part-side javascript)) . 74454) (#(" " 0 1 (part-side javascript)) . 74454) (#(" " 0 1 (part-side javascript)) . 74454) (#(" " 0 1 (part-side javascript)) . 74454) (#(" " 0 1 (part-side javascript)) . 74454) (#(" " 0 1 (part-side javascript)) . 74454) (#(" " 0 1 (part-side javascript)) . 74454) (#("
" 0 1 (part-side javascript)) . 74454) (undo-tree-id61 . -1)) nil (25836 31570 865901 833000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . 74454) (#(" " 0 1 (part-side javascript)) . 74454) (#(" " 0 1 (part-side javascript)) . 74454) (#(" " 0 1 (part-side javascript)) . 74454)) nil (25836 31570 865896 334000) 0 nil])
([nil nil ((#("       " 0 7 (part-side javascript)) . -74484)) nil (25836 31570 865894 514000) 0 nil])
([nil nil ((74513 . 74525)) nil (25836 31570 865893 363000) 0 nil])
([nil nil ((#("       " 0 7 (part-side javascript)) . -74536) (undo-tree-id60 . -2) 74538) nil (25836 31570 865891 642000) 0 nil])
([nil nil ((74537 . 74538)) nil (25836 31570 865888 561000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . -74511) (undo-tree-id58 . -1) (undo-tree-id59 . -1) 74512) nil (25836 31570 865886 371000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . 74511) (undo-tree-id57 . -1)) nil (25836 31570 865880 384000) 0 nil])
([nil nil ((#("            " 0 12 (part-side javascript face whitespace-trailing)) . -74511) 74501) nil (25836 31570 865838 993000) 0 nil])
([nil nil ((44478 . 44487) (t 25836 31570 918980 203000)) nil (25836 41754 972372 60000) 0 nil])
([nil nil ((44487 . 44500)) nil (25836 41754 972370 741000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -44499) (undo-tree-id95 . -1) 44500) nil (25836 41754 972369 358000) 0 nil])
([nil nil ((44501 . 44503) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -44501) (44499 . 44502)) nil (25836 41754 972366 630000) 0 nil])
([nil nil ((44503 . 44505)) nil (25836 41754 972365 156000) 0 nil])
([nil nil ((#("," 0 1 (part-side javascript)) . -44503) (undo-tree-id93 . -1) (#(" " 0 1 (part-side javascript)) . -44504) (undo-tree-id94 . -1) 44505) nil (25836 41754 972363 745000) 0 nil])
([nil nil ((74427 . 74440)) nil (25836 41754 972359 954000) 0 nil])
([nil nil ((nil rear-nonsticky nil 74451 . 74452) (nil part-side javascript 74440 . 74452) (74440 . 74452)) nil (25836 41754 972358 704000) 0 nil])
([nil nil ((74440 . 74445)) nil (25836 41754 972357 89000) 0 nil])
([nil nil ((74458 . 74467) (74457 . 74459) (#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-8-face))) . -74457) (74457 . 74458)) nil (25836 41754 972355 531000) 0 nil])
([nil nil ((74467 . 74469)) nil (25836 41754 972353 705000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -74468) (undo-tree-id92 . -1) 74469) nil (25836 41754 972352 326000) 0 nil])
([nil nil ((74469 . 74476)) nil (25836 41754 972349 832000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -74475) (undo-tree-id91 . -1) 74476) nil (25836 42453 161299 468000) 0 nil])
([nil nil ((74440 . 74442) (t 25836 42455 709250 101000)) nil (25836 42530 949239 944000) 0 nil] [nil nil ((29606 . 29611) (t 25836 41773 199003 138000)) ((#("v-if " 0 1 (tag-attr-beg 2 tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 1 3 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 3 4 (tag-attr t tag-attr-end 0 tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 4 5 (tag-name "v-col" tag-type start)) . 29606) (undo-tree-id593 . -4) (undo-tree-id594 . -5) (undo-tree-id595 . -4) (undo-tree-id596 . -4) (undo-tree-id597 . -4) (undo-tree-id598 . -4) (undo-tree-id599 . -4) (undo-tree-id600 . -4) (undo-tree-id601 . -4) (undo-tree-id602 . -4) (undo-tree-id603 . -4) (undo-tree-id604 . -4) (undo-tree-id605 . -4) (undo-tree-id606 . -4) (undo-tree-id607 . -4) (undo-tree-id608 . -5) (undo-tree-id609 . -5) (undo-tree-id610 . -5) (undo-tree-id611 . -5) (undo-tree-id612 . -5) (undo-tree-id613 . -5) (undo-tree-id614 . -5) (undo-tree-id615 . -5) (undo-tree-id616 . -5) (undo-tree-id617 . -5) (undo-tree-id618 . -5) (undo-tree-id619 . -5)) (25836 42452 765253 671000) 0 nil] [nil nil ((74475 . 74482)) ((#(" * 100 " 0 2 (part-side javascript) 2 6 (part-side javascript) 6 7 (part-side javascript)) . 74475) (undo-tree-id96 . -6) (undo-tree-id97 . -7) (undo-tree-id98 . -7) (undo-tree-id99 . -7) (undo-tree-id100 . -7) (undo-tree-id101 . -7) (undo-tree-id102 . -7) (undo-tree-id103 . -7) (undo-tree-id104 . -7) (undo-tree-id105 . -6) (undo-tree-id106 . -7) (undo-tree-id107 . -7) (undo-tree-id108 . -7) (undo-tree-id109 . -7) (undo-tree-id110 . -7) (undo-tree-id111 . -7) (undo-tree-id112 . -7) (undo-tree-id113 . -7)) (25836 41754 973931 756000) 0 nil])
([nil nil ((#("/" 0 1 (part-side javascript)) . -74440) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (#("/" 0 1 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face)) . -74441) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) 74442 (t 25836 42531 13499 875000)) nil (25836 42607 22110 278000) 0 nil])
([nil nil ((#(" " 0 1 (tag-name "v-col" tag-type start)) . -29610) (undo-tree-id120 . -1) 29611) ((29610 . 29611)) (25836 42452 444549 647000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -74481) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) 74482) ((74481 . 74482)) (25836 41754 972339 90000) 0 nil])
([nil nil ((74475 . 74482) (t 25836 42607 81752 390000)) nil (25836 42613 245896 412000) 0 nil])
([nil nil ((29610 . 29611)) ((#(")" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face face (rainbow-delimiters-unmatched-face web-mode-html-attr-engine-face))) . 29610) (undo-tree-id591 . -1) (undo-tree-id592 . -1)) (25836 42452 177722 767000) 0 nil])
nil
([nil nil ((#(" " 0 1 (part-side javascript)) . -74481) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) 74482) nil (25836 42613 245883 297000) 0 nil])
([nil nil ((#(")" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face face (rainbow-delimiters-unmatched-face web-mode-html-attr-engine-face))) . -29610) (undo-tree-id119 . -1) 29611) ((29610 . 29611)) (25836 42451 945435 451000) 0 nil])
([nil nil ((29612 . 29616) (29606 . 29614) (t 25836 42613 321773 113000)) nil (25836 42754 433109 597000) 0 nil])
([nil nil ((29612 . 29625) (29610 . 29614)) ((#("=\"\" " 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-equal-face) 1 2 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face) 2 3 (tag-attr t tag-attr-end 4 tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face) 3 4 (tag-name "v-col" tag-type start)) . 29610) (undo-tree-id564 . -4) (undo-tree-id565 . -2) (undo-tree-id566 . -2) (undo-tree-id567 . -2) (undo-tree-id568 . -2) (undo-tree-id569 . -2) (undo-tree-id570 . -2) (undo-tree-id571 . -2) (undo-tree-id572 . -2) (undo-tree-id573 . -2) (undo-tree-id574 . -2) (undo-tree-id575 . -2) (undo-tree-id576 . -2) (undo-tree-id577 . -2) (#("!item.filter " 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face) 1 12 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face) 12 13 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . 29612) (undo-tree-id578 . -13) (undo-tree-id579 . -13) (undo-tree-id580 . -13) (undo-tree-id581 . -13) (undo-tree-id582 . -13) (undo-tree-id583 . -13) (undo-tree-id584 . -13) (undo-tree-id585 . -13) (undo-tree-id586 . -13) (undo-tree-id587 . -13) (undo-tree-id588 . -13) (undo-tree-id589 . -13) (undo-tree-id590 . -13)) (25836 42451 649823 512000) 0 nil])
([nil nil ((#("e" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -29612) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (#("l" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -29613) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("e" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -29614) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (#("m" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -29615) (undo-tree-id656 . -1) (undo-tree-id657 . -1) 29616) nil (25836 42754 433107 138000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -29624) (undo-tree-id118 . -1) 29625) ((29624 . 29625)) (25836 42451 355663 115000) 0 nil])
([nil nil ((29612 . 29623)) nil (25836 42754 433096 728000) 0 nil])
([nil nil ((29727 . 29754)) (("
                          " . 29727) (undo-tree-id542 . -27) (undo-tree-id543 . -27) (undo-tree-id544 . -27) (undo-tree-id545 . -27) (undo-tree-id546 . -27) (undo-tree-id547 . -1) (undo-tree-id548 . -27) (undo-tree-id549 . -27) (undo-tree-id550 . -27) (undo-tree-id551 . -1) (undo-tree-id552 . -27) (undo-tree-id553 . -27) (undo-tree-id554 . -27) (undo-tree-id555 . -27) (undo-tree-id556 . -27) (undo-tree-id557 . -27) (undo-tree-id558 . -27) (undo-tree-id559 . -27) (undo-tree-id560 . -27) (undo-tree-id561 . -27) (undo-tree-id562 . -27) (undo-tree-id563 . -27)) (25836 42451 15307 435000) 0 nil])
([nil nil ((nil rear-nonsticky nil 29634 . 29635) (nil rear-nonsticky t 29634 . 29635) (nil tag-attr t 29634 . 29635) (nil tag-name "v-col" 29634 . 29635) (nil tag-type start 29634 . 29635) (nil font-lock-face web-mode-html-attr-value-face 29634 . 29635) (nil tag-attr t 29623 . 29634) (nil tag-name "v-col" 29623 . 29634) (nil tag-type start 29623 . 29634) (nil font-lock-face web-mode-html-attr-value-face 29623 . 29634) (29623 . 29635)) nil (25836 42754 433095 130000) 0 nil])
([nil nil ((29754 . 29769)) ((#("<v-col></v-col>" 0 1 (tag-name "v-col" tag-type start tag-beg 18 font-lock-face web-mode-html-tag-bracket-face) 1 6 (tag-name "v-col" tag-type start font-lock-face web-mode-html-tag-custom-face) 6 7 (tag-name "v-col" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 7 8 (tag-name "v-col" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 8 9 (tag-name "v-col" tag-type end font-lock-face web-mode-html-tag-bracket-face) 9 14 (tag-name "v-col" tag-type end font-lock-face web-mode-html-tag-custom-face) 14 15 (tag-name "v-col" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 29754) (undo-tree-id534 . -7) (undo-tree-id535 . -4) (undo-tree-id536 . -7) (undo-tree-id537 . -7) (undo-tree-id538 . -7) (undo-tree-id539 . -7) (undo-tree-id540 . -7) (undo-tree-id541 . -7)) (25836 42450 713292 31000) 0 nil])
([nil nil ((29701 . 29702)) nil (25836 42754 433092 239000) 0 nil])
([nil nil ((29762 . 29790) (29763 . 29789) (#("                            " 0 28 (face whitespace-trailing)) . 29762) (29762 . 29790) (29762 . 29763) ("                          " . 29762) (29761 . 29788)) (("
                          " . 29761) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (29762 . 29788) ("
" . 29762) (#("                            " 0 28 (face whitespace-trailing)) . 29762) (29762 . 29790) ("                          " . 29763) ("                            " . 29762) (undo-tree-id529 . -28) (undo-tree-id530 . -28) (undo-tree-id531 . -28) (undo-tree-id532 . -28) (undo-tree-id533 . -28)) (25836 42450 464724 553000) 0 nil])
([nil nil ((#(" " 0 1 (block-side t)) . -29701) (undo-tree-id649 . -1) 29702) nil (25836 42754 433091 81000) 0 nil])
([nil nil ((29760 . 29768)) ((#(" ve-lse " 0 1 (tag-name "v-col" tag-type start) 1 2 (tag-attr-beg 0 tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face) 2 3 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face) 3 4 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face) 4 5 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face) 5 6 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face) 6 7 (tag-attr t tag-attr-end 0 tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face) 7 8 (tag-name "v-col" tag-type start)) . 29760) (undo-tree-id497 . -8) (undo-tree-id498 . -2) (undo-tree-id499 . -2) (undo-tree-id500 . -2) (undo-tree-id501 . -2) (undo-tree-id502 . -2) (undo-tree-id503 . -2) (undo-tree-id504 . -2) (undo-tree-id505 . -2) (undo-tree-id506 . -2) (undo-tree-id507 . -4) (undo-tree-id508 . -4) (undo-tree-id509 . -4) (undo-tree-id510 . -4) (undo-tree-id511 . -4) (undo-tree-id512 . -4) (undo-tree-id513 . -4) (undo-tree-id514 . -4) (undo-tree-id515 . -8) (undo-tree-id516 . -8) (undo-tree-id517 . -8) (undo-tree-id518 . -8) (undo-tree-id519 . -8) (undo-tree-id520 . -8) (undo-tree-id521 . -8) (undo-tree-id522 . -8)) (25836 42450 200629 950000) 0 nil])
([nil nil ((29705 . 29707) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face))) . -29705) (29705 . 29706) (29704 . 29706) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face))) . -29704) (29703 . 29705)) nil (25836 42754 433088 292000) 0 nil])
([nil nil ((#(" " 0 1 (tag-name "v-col" tag-type start)) . -29767) (undo-tree-id117 . -1) 29768) ((29767 . 29768)) (25836 42449 987196 92000) 0 nil])
([nil nil ((29706 . 29727)) nil (25836 42754 433085 488000) 0 nil])
([nil nil ((#("!" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . 29612)) ((29612 . 29613)) (25836 42449 762503 926000) 0 nil])
([nil nil ((29745 . 29748) (29744 . 29746) (#("[" 0 1 (block-side t face (rainbow-delimiters-depth-3-face))) . -29744) (29727 . 29745)) nil (25836 42754 433083 923000) 0 nil])
([nil nil ((#("e" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face)) . -29761) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("-" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face)) . -29762) (undo-tree-id116 . -1) 29763) ((29761 . 29763)) (25836 42449 384551 562000) 0 nil])
([nil nil ((29748 . 29752)) nil (25836 42754 433082 170000) 0 nil])
([nil nil ((29761 . 29763)) ((#("-e" 0 2 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face)) . 29761)) (25836 42449 202160 350000) 0 nil])
([nil nil ((#("d" 0 1 (block-side t)) . -29750) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (#("i" 0 1 (block-side t)) . -29751) (undo-tree-id647 . -1) (undo-tree-id648 . -1) 29752) nil (25836 42754 433080 489000) 0 nil])
([nil nil ((nil rear-nonsticky t 29812 . 29813) (29796 . 29813)) ((#("this.filter_score" 16 17 (rear-nonsticky t)) . 29796) (undo-tree-id470 . -17) (undo-tree-id471 . -17) (undo-tree-id472 . -17) (undo-tree-id473 . -17) (undo-tree-id474 . -17) (undo-tree-id475 . -17) (undo-tree-id476 . -17) (undo-tree-id477 . -17) (undo-tree-id478 . -17) (undo-tree-id479 . -17) (undo-tree-id480 . -17) (undo-tree-id481 . -17) (undo-tree-id482 . -17) (undo-tree-id483 . -17) (undo-tree-id484 . -17) (undo-tree-id485 . -17) (undo-tree-id486 . -17) (undo-tree-id487 . -17) (undo-tree-id488 . -17) (undo-tree-id489 . -17) (undo-tree-id490 . -17) (undo-tree-id491 . -17) (undo-tree-id492 . -17) (undo-tree-id493 . -17) (undo-tree-id494 . -17) (undo-tree-id495 . -17) (undo-tree-id496 . -17) (nil rear-nonsticky nil 29812 . 29813)) (25836 42449 42807 659000) 0 nil])
([nil nil ((29750 . 29752)) nil (25836 42754 433074 550000) 0 nil])
([nil nil ((29815 . 29816) (29797 . 29798) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face))) . -29797) (29797 . 29798) (29814 . 29815) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face))) . 29797) (29796 . 29797) (29796 . 29797)) ((#("{" 0 1 (face (rainbow-delimiters-depth-1-face))) . 29796) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face))) . 29796) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (29797 . 29798) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face))) . 29814) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face))) . 29797) (29797 . 29798) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face))) . 29797) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (#("}" 0 1 (block-side t block-token delimiter-end face (rainbow-delimiters-depth-2-face))) . 29815)) (25836 42448 878222 121000) 0 nil] [nil nil ((29797 . 29799) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face))) . -29797) (29797 . 29798) (29796 . 29798) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face))) . -29796) (29796 . 29797)) ((#("{" 0 1 (face (rainbow-delimiters-depth-1-face))) . 29796) (29796 . 29797) (#("{}" 0 1 (face (rainbow-delimiters-depth-1-face)) 1 2 (face (rainbow-delimiters-depth-1-face))) . 29796) (undo-tree-id121 . -1) (undo-tree-id122 . -2) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face))) . 29797) (29797 . 29798) (#("{}" 0 1 (block-side t block-token delimiter-beg face (rainbow-delimiters-depth-2-face)) 1 2 (block-side t block-token delimiter-end face (rainbow-delimiters-depth-2-face))) . 29797) (undo-tree-id125 . -1) (undo-tree-id126 . -2)) (25836 42148 558482 181000) 0 nil])
([nil nil ((29753 . 29758)) nil (25836 42754 433073 358000) 0 nil])
([nil nil ((29816 . 29823) (29815 . 29817) (#("[" 0 1 (block-side t face (rainbow-delimiters-depth-3-face))) . -29815) (29815 . 29816)) ((#("[" 0 1 (block-side t face (rainbow-delimiters-depth-3-face))) . 29815) (29815 . 29816) (#("[]" 0 1 (block-side t face (rainbow-delimiters-depth-3-face)) 1 2 (block-side t face (rainbow-delimiters-depth-3-face))) . 29815) (undo-tree-id445 . -2) (undo-tree-id446 . -2) (undo-tree-id447 . -2) (undo-tree-id448 . -2) (undo-tree-id449 . -2) (undo-tree-id450 . -2) (undo-tree-id451 . -2) (undo-tree-id452 . -2) (undo-tree-id453 . -2) (undo-tree-id454 . -2) (undo-tree-id455 . -2) (undo-tree-id456 . -2) (undo-tree-id457 . -2) (undo-tree-id458 . -2) (undo-tree-id459 . -2) (#("item.id" 0 7 (block-side t)) . 29816)) (25836 42448 743361 223000) 0 nil])
nil
([nil nil ((#("v-if=\"item.id in filter_score\"" 0 1 (tag-attr-beg 2 tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 1 4 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 4 5 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-equal-face) 5 17 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face) 17 28 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face) 28 29 (rear-nonsticky t tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face) 29 30 (tag-attr t tag-attr-end 4 tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . 29606) (undo-tree-id642 . -30) (undo-tree-id643 . -17) (undo-tree-id644 . -30)) nil (25836 42754 433071 239000) 0 nil])
([nil nil ((29798 . 29810)) ((#("item.name + " 0 12 (block-side t)) . 29798)) (25836 42448 549236 241000) 0 nil])
([nil nil ((#(" " 0 1 (tag-name "v-col" tag-type start)) . -29605) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) 29606) nil (25836 42754 433061 988000) 0 nil])
([nil nil ((29836 . 29839)) ((#(" ''" 0 2 (block-side t) 2 3 (block-side t)) . 29836) (undo-tree-id437 . -2) (undo-tree-id438 . -2) (undo-tree-id439 . -2) (undo-tree-id440 . -2) (undo-tree-id441 . -2) (undo-tree-id442 . -2) (undo-tree-id443 . -2) (undo-tree-id444 . -2)) (25836 42448 352293 468000) 0 nil])
([nil nil ((29722 . 29727) (t 25836 42754 502242 238000)) nil (25836 42779 316094 500000) 0 nil])
([nil nil ((29838 . 29839)) ((#("0" 0 1 (block-side t)) . 29838) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1)) (25836 42448 168763 57000) 0 nil])
([nil nil ((29726 . 29727)) nil (25836 42779 316084 572000) 0 nil])
([nil nil ((#("0" 0 1 (block-side t)) . -29838) (undo-tree-id127 . -1) 29839) ((29838 . 29839)) (25836 42447 983184 775000) 0 nil])
([nil nil ((29572 . 29599) (t 25836 42779 374324 935000)) nil (25837 53937 197836 725000) 0 nil])
([nil nil ((29838 . 29839)) ((#("%" 0 1 (block-side t)) . 29838)) (25836 42447 779946 512000) 0 nil])
([nil nil ((nil rear-nonsticky nil 29677 . 29678) (nil tag-name "v-tooltip" 29677 . 29678) (nil tag-type start 29677 . 29678) (nil tag-end t 29677 . 29678) (nil font-lock-face web-mode-html-tag-bracket-face 29677 . 29678) (nil tag-name "v-tooltip" 29656 . 29677) (nil tag-type start 29656 . 29677) (nil tag-attr t 29655 . 29656) (nil tag-attr-end 0 29655 . 29656) (nil tag-name "v-tooltip" 29655 . 29656) (nil tag-type start 29655 . 29656) (nil font-lock-face web-mode-html-attr-name-face 29655 . 29656) (nil tag-attr t 29651 . 29655) (nil tag-name "v-tooltip" 29651 . 29655) (nil tag-type start 29651 . 29655) (nil font-lock-face web-mode-html-attr-name-face 29651 . 29655) (nil tag-attr-beg 0 29650 . 29651) (nil tag-attr t 29650 . 29651) (nil tag-name "v-tooltip" 29650 . 29651) (nil tag-type start 29650 . 29651) (nil font-lock-face web-mode-html-attr-name-face 29650 . 29651) (nil tag-name "v-tooltip" 29627 . 29650) (nil tag-type start 29627 . 29650) (nil tag-name "v-tooltip" 29618 . 29627) (nil tag-type start 29618 . 29627) (nil font-lock-face web-mode-html-tag-custom-face 29618 . 29627) (nil tag-name "v-tooltip" 29617 . 29618) (nil tag-type start 29617 . 29618) (nil tag-beg 19 29617 . 29618) (nil font-lock-face web-mode-html-tag-bracket-face 29617 . 29618) (29599 . 29678)) nil (25837 53937 197834 47000) 0 nil])
([nil nil ((29837 . 29839)) ((#("+ " 0 2 (block-side t)) . 29837)) (25836 42447 586778 475000) 0 nil])
([nil nil ((29645 . 29671) (#("                    " 0 20 (tag-type start tag-name "v-tooltip")) . 29645) (29610 . 29638) (#("                      " 0 22 (tag-type start tag-name "v-tooltip")) . 29610) ("                  " . -29599) 29573) nil (25837 53937 197824 998000) 0 nil])
([nil nil ((#("t" 0 1 (block-side t)) . -29810) (undo-tree-id128 . -1) (undo-tree-id130 . -1) (undo-tree-id132 . -1) (undo-tree-id134 . -1) (undo-tree-id136 . -1) (undo-tree-id138 . -1) (#("h" 0 1 (block-side t)) . -29811) (undo-tree-id140 . -1) (undo-tree-id142 . -1) (undo-tree-id144 . -1) (#("i" 0 1 (block-side t)) . -29812) (undo-tree-id145 . -1) (#("s" 0 1 (block-side t)) . -29813) (undo-tree-id147 . -1) (#("." 0 1 (block-side t)) . -29814) (undo-tree-id148 . -1) 29815 (t 25836 42180 180338 509000)) ((29810 . 29815)) (25836 42447 351567 140000) 0 nil])
([nil nil ((29672 . 29701)) nil (25837 53937 197822 921000) 0 nil])
([nil nil ((#("v-if=\"item.filter\"" 0 1 (tag-attr-beg 2 tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 1 3 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 3 4 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 4 5 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-equal-face) 5 17 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face) 17 18 (tag-attr t tag-attr-end 4 tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . 29606) (undo-tree-id151 . -18) (undo-tree-id152 . -18) (t 25836 42264 376616 619000)) ((29606 . 29624)) (25836 42446 948470 70000) 0 nil])
([nil nil ((nil rear-nonsticky nil 29743 . 29744) (nil tag-name "template" 29743 . 29744) (nil tag-type start 29743 . 29744) (nil tag-end t 29743 . 29744) (nil font-lock-face web-mode-html-tag-bracket-face 29743 . 29744) (nil block-side t 29742 . 29743) (nil block-end t 29742 . 29743) (nil block-token delimiter-end 29742 . 29743) (nil tag-attr t 29742 . 29743) (nil tag-attr-end 16 29742 . 29743) (nil tag-name "template" 29742 . 29743) (nil tag-type start 29742 . 29743) (nil font-lock-face web-mode-block-delimiter-face 29742 . 29743) (nil block-side t 29740 . 29742) (nil tag-attr t 29740 . 29742) (nil tag-name "template" 29740 . 29742) (nil tag-type start 29740 . 29742) (nil block-side t 29739 . 29740) (nil tag-attr t 29739 . 29740) (nil tag-name "template" 29739 . 29740) (nil tag-type start 29739 . 29740) (nil face web-mode-variable-name-face 29739 . 29740) (nil block-side t 29738 . 29739) (nil tag-attr t 29738 . 29739) (nil tag-name "template" 29738 . 29739) (nil tag-type start 29738 . 29739) (nil face web-mode-variable-name-face 29738 . 29739) (nil block-side t 29737 . 29738) (nil tag-attr t 29737 . 29738) (nil tag-name "template" 29737 . 29738) (nil tag-type start 29737 . 29738) (nil face web-mode-variable-name-face 29737 . 29738) (nil block-side t 29736 . 29737) (nil tag-attr t 29736 . 29737) (nil tag-name "template" 29736 . 29737) (nil tag-type start 29736 . 29737) (nil face web-mode-variable-name-face 29736 . 29737) (nil block-side t 29735 . 29736) (nil tag-attr t 29735 . 29736) (nil tag-name "template" 29735 . 29736) (nil tag-type start 29735 . 29736) (nil face web-mode-variable-name-face 29735 . 29736) (nil block-side t 29733 . 29735) (nil tag-attr t 29733 . 29735) (nil tag-name "template" 29733 . 29735) (nil tag-type start 29733 . 29735) (nil block-side t 29732 . 29733) (nil tag-attr t 29732 . 29733) (nil tag-name "template" 29732 . 29733) (nil tag-type start 29732 . 29733) (nil face web-mode-variable-name-face 29732 . 29733) (nil block-side t 29731 . 29732) (nil tag-attr t 29731 . 29732) (nil tag-name "template" 29731 . 29732) (nil tag-type start 29731 . 29732) (nil face web-mode-variable-name-face 29731 . 29732) (nil block-side t 29729 . 29731) (nil tag-attr t 29729 . 29731) (nil tag-name "template" 29729 . 29731) (nil tag-type start 29729 . 29731) (nil block-side t 29728 . 29729) (nil block-token delimiter-beg 29728 . 29729) (nil tag-attr t 29728 . 29729) (nil tag-name "template" 29728 . 29729) (nil tag-type start 29728 . 29729) (nil font-lock-face web-mode-block-delimiter-face 29728 . 29729) (nil block-side t 29727 . 29728) (nil block-token delimiter-beg 29727 . 29728) (nil tag-attr t 29727 . 29728) (nil tag-name "template" 29727 . 29728) (nil tag-type start 29727 . 29728) (nil font-lock-face web-mode-block-delimiter-face 29727 . 29728) (nil block-side t 29726 . 29727) (nil block-token delimiter-beg 29726 . 29727) (nil tag-attr t 29726 . 29727) (nil tag-name "template" 29726 . 29727) (nil tag-type start 29726 . 29727) (nil font-lock-face web-mode-block-delimiter-face 29726 . 29727) (nil block-side t 29725 . 29726) (nil block-token delimiter-beg 29725 . 29726) (nil tag-attr t 29725 . 29726) (nil tag-name "template" 29725 . 29726) (nil tag-type start 29725 . 29726) (nil font-lock-face web-mode-block-delimiter-face 29725 . 29726) (nil block-side t 29724 . 29725) (nil block-token delimiter-beg 29724 . 29725) (nil tag-attr t 29724 . 29725) (nil tag-name "template" 29724 . 29725) (nil tag-type start 29724 . 29725) (nil font-lock-face web-mode-block-delimiter-face 29724 . 29725) (nil block-side t 29723 . 29724) (nil block-token delimiter-beg 29723 . 29724) (nil tag-attr t 29723 . 29724) (nil tag-name "template" 29723 . 29724) (nil tag-type start 29723 . 29724) (nil font-lock-face web-mode-block-delimiter-face 29723 . 29724) (nil block-side t 29722 . 29723) (nil block-token delimiter-beg 29722 . 29723) (nil tag-attr t 29722 . 29723) (nil tag-name "template" 29722 . 29723) (nil tag-type start 29722 . 29723) (nil font-lock-face web-mode-block-delimiter-face 29722 . 29723) (nil block-side t 29721 . 29722) (nil block-token delimiter-beg 29721 . 29722) (nil tag-attr t 29721 . 29722) (nil tag-name "template" 29721 . 29722) (nil tag-type start 29721 . 29722) (nil font-lock-face web-mode-block-delimiter-face 29721 . 29722) (nil block-side t 29720 . 29721) (nil block-token delimiter-beg 29720 . 29721) (nil tag-attr t 29720 . 29721) (nil tag-name "template" 29720 . 29721) (nil tag-type start 29720 . 29721) (nil font-lock-face web-mode-block-delimiter-face 29720 . 29721) (nil block-side t 29719 . 29720) (nil block-token delimiter-beg 29719 . 29720) (nil tag-attr t 29719 . 29720) (nil tag-name "template" 29719 . 29720) (nil tag-type start 29719 . 29720) (nil font-lock-face web-mode-block-delimiter-face 29719 . 29720) (nil block-side t 29718 . 29719) (nil block-token delimiter-beg 29718 . 29719) (nil tag-attr t 29718 . 29719) (nil tag-name "template" 29718 . 29719) (nil tag-type start 29718 . 29719) (nil font-lock-face web-mode-block-delimiter-face 29718 . 29719) (nil block-beg 0 29717 . 29718) (nil block-controls 0 29717 . 29718) (nil block-side t 29717 . 29718) (nil block-token delimiter-beg 29717 . 29718) (nil tag-attr t 29717 . 29718) (nil tag-name "template" 29717 . 29718) (nil tag-type start 29717 . 29718) (nil font-lock-face web-mode-block-delimiter-face 29717 . 29718) (nil tag-attr t 29712 . 29717) (nil tag-name "template" 29712 . 29717) (nil tag-type start 29712 . 29717) (nil font-lock-face web-mode-html-attr-engine-face 29712 . 29717) (nil tag-attr-beg 2 29711 . 29712) (nil tag-attr t 29711 . 29712) (nil tag-name "template" 29711 . 29712) (nil tag-type start 29711 . 29712) (nil font-lock-face web-mode-html-attr-engine-face 29711 . 29712) (nil tag-name "template" 29710 . 29711) (nil tag-type start 29710 . 29711) (nil tag-name "template" 29702 . 29710) (nil tag-type start 29702 . 29710) (nil font-lock-face web-mode-html-tag-face 29702 . 29710) (nil tag-name "template" 29701 . 29702) (nil tag-type start 29701 . 29702) (nil tag-beg 17 29701 . 29702) (nil font-lock-face web-mode-html-tag-bracket-face 29701 . 29702) (29701 . 29744)) nil (25837 53937 197814 188000) 0 nil])
([nil nil ((#(" " 0 1 (tag-name "v-col" tag-type start)) . -29605) (undo-tree-id149 . -1) (undo-tree-id150 . -1) 29606) ((29605 . 29606)) (25836 42446 553865 268000) 0 nil])
([nil nil ((29942 . 29969)) nil (25837 53937 197779 992000) 0 nil])
([nil nil ((28465 . 28486)) (("
                    " . 28465) (undo-tree-id396 . -21) (undo-tree-id397 . -1) (undo-tree-id398 . -21) (undo-tree-id399 . -1) (undo-tree-id400 . -21) (undo-tree-id401 . -21) (undo-tree-id402 . -21) (undo-tree-id403 . -21) (undo-tree-id404 . -21) (undo-tree-id405 . -21) (undo-tree-id406 . -21) (undo-tree-id407 . -21) (undo-tree-id408 . -21) (undo-tree-id409 . -21) (undo-tree-id410 . -21) (undo-tree-id411 . -21) (undo-tree-id412 . -21) (undo-tree-id413 . -21) (undo-tree-id414 . -21) (undo-tree-id415 . -21) (undo-tree-id416 . -21) (undo-tree-id417 . -21) (undo-tree-id418 . -21) (undo-tree-id419 . -21) (undo-tree-id420 . -21) (undo-tree-id421 . -21) (undo-tree-id422 . -21) (undo-tree-id423 . -21) (undo-tree-id424 . -21) (undo-tree-id425 . -21) (undo-tree-id426 . -21) (undo-tree-id427 . -21)) (25836 42445 529015 235000) 0 nil])
([nil nil ((29969 . 29971) (29969 . 29980)) nil (25837 53937 197778 870000) 0 nil])
([nil nil ((28487 . 28489) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face))) . -28487) (28487 . 28488) (28486 . 28488) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face))) . -28486) (28486 . 28487)) ((#("{" 0 1 (face (rainbow-delimiters-depth-1-face))) . 28486) (28486 . 28487) (#("{}" 0 1 (face (rainbow-delimiters-depth-1-face)) 1 2 (face (rainbow-delimiters-depth-1-face))) . 28486) (undo-tree-id394 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face))) . 28487) (28487 . 28488) (#("{}" 0 1 (block-side t block-token delimiter-beg face (rainbow-delimiters-depth-2-face)) 1 2 (block-side t block-token delimiter-end face (rainbow-delimiters-depth-2-face))) . 28487) (undo-tree-id395 . -1)) (25836 42445 85121 365000) 0 nil])
([nil nil ((29982 . 30011)) nil (25837 53937 197777 317000) 0 nil])
([nil nil ((29631 . 29639)) ((#("v-elkse " 0 1 (tag-attr-beg 2 tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 1 2 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 2 3 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 3 4 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 4 5 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 5 6 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 6 7 (tag-attr t tag-attr-end 0 tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 7 8 (tag-name "v-col" tag-type start)) . 29631) (undo-tree-id357 . -2) (undo-tree-id358 . -8) (undo-tree-id359 . -2) (undo-tree-id360 . -2) (undo-tree-id361 . -2) (undo-tree-id362 . -2) (undo-tree-id363 . -2) (undo-tree-id364 . -2) (undo-tree-id365 . -2) (undo-tree-id366 . -2) (undo-tree-id367 . -2) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id370 . -2) (undo-tree-id371 . -2) (undo-tree-id372 . -2) (undo-tree-id373 . -2) (undo-tree-id374 . -2) (undo-tree-id375 . -2) (undo-tree-id376 . -2) (undo-tree-id377 . -2) (undo-tree-id378 . -2) (undo-tree-id379 . -2) (undo-tree-id380 . -2) (undo-tree-id381 . -2) (undo-tree-id382 . -2) (undo-tree-id383 . -2) (undo-tree-id384 . -2) (undo-tree-id385 . -2) (undo-tree-id386 . -8) (undo-tree-id387 . -8) (undo-tree-id388 . -8) (undo-tree-id389 . -8) (undo-tree-id390 . -8) (undo-tree-id391 . -8) (undo-tree-id392 . -8) (undo-tree-id393 . -8)) (25836 42444 789572 597000) 0 nil] [nil nil ((nil rear-nonsticky nil 28499 . 28500) (nil block-side t 28488 . 28500) (28488 . 28500)) ((#("filter_score" 0 11 (block-side t) 11 12 (rear-nonsticky nil block-side t)) . 28488) (nil rear-nonsticky t 28499 . 28500)) (25836 42364 615170 283000) 0 nil])
([nil nil ((nil rear-nonsticky nil 30570 . 30571) (nil tag-name "v-tooltip" 30570 . 30571) (nil tag-type end 30570 . 30571) (nil tag-end t 30570 . 30571) (nil font-lock-face web-mode-html-tag-bracket-face 30570 . 30571) (nil tag-name "v-tooltip" 30561 . 30570) (nil tag-type end 30561 . 30570) (nil font-lock-face web-mode-html-tag-custom-face 30561 . 30570) (nil tag-name "v-tooltip" 30560 . 30561) (nil tag-type end 30560 . 30561) (nil font-lock-face web-mode-html-tag-bracket-face 30560 . 30561) (nil tag-name "v-tooltip" 30559 . 30560) (nil tag-type end 30559 . 30560) (nil tag-beg 22 30559 . 30560) (nil font-lock-face web-mode-html-tag-bracket-face 30559 . 30560) (nil tag-name "span" 30537 . 30538) (nil tag-type end 30537 . 30538) (nil tag-end t 30537 . 30538) (nil font-lock-face web-mode-html-tag-bracket-face 30537 . 30538) (nil tag-name "span" 30533 . 30537) (nil tag-type end 30533 . 30537) (nil font-lock-face web-mode-html-tag-face 30533 . 30537) (nil tag-name "span" 30532 . 30533) (nil tag-type end 30532 . 30533) (nil font-lock-face web-mode-html-tag-bracket-face 30532 . 30533) (nil tag-name "span" 30531 . 30532) (nil tag-type end 30531 . 30532) (nil tag-beg 20 30531 . 30532) (nil font-lock-face web-mode-html-tag-bracket-face 30531 . 30532) (nil tag-name "v-row" 30507 . 30508) (nil tag-type end 30507 . 30508) (nil tag-end t 30507 . 30508) (nil font-lock-face web-mode-html-tag-bracket-face 30507 . 30508) (nil tag-name "v-row" 30502 . 30507) (nil tag-type end 30502 . 30507) (nil font-lock-face web-mode-html-tag-custom-face 30502 . 30507) (nil tag-name "v-row" 30501 . 30502) (nil tag-type end 30501 . 30502) (nil font-lock-face web-mode-html-tag-bracket-face 30501 . 30502) (nil tag-name "v-row" 30500 . 30501) (nil tag-type end 30500 . 30501) (nil tag-beg 22 30500 . 30501) (nil font-lock-face web-mode-html-tag-bracket-face 30500 . 30501) (nil tag-name "v-col" 30474 . 30475) (nil tag-type end 30474 . 30475) (nil tag-end t 30474 . 30475) (nil font-lock-face web-mode-html-tag-bracket-face 30474 . 30475) (nil tag-name "v-col" 30469 . 30474) (nil tag-type end 30469 . 30474) (nil font-lock-face web-mode-html-tag-custom-face 30469 . 30474) (nil tag-name "v-col" 30468 . 30469) (nil tag-type end 30468 . 30469) (nil font-lock-face web-mode-html-tag-bracket-face 30468 . 30469) (nil tag-name "v-col" 30467 . 30468) (nil tag-type end 30467 . 30468) (nil tag-beg 22 30467 . 30468) (nil font-lock-face web-mode-html-tag-bracket-face 30467 . 30468) (nil block-side t 30439 . 30440) (nil block-end t 30439 . 30440) (nil block-token delimiter-end 30439 . 30440) (nil font-lock-face web-mode-block-delimiter-face 30439 . 30440) (nil face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) 30439 . 30440) (nil block-side t 30438 . 30439) (nil block-token delimiter-end 30438 . 30439) (nil font-lock-face web-mode-block-delimiter-face 30438 . 30439) (nil face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) 30438 . 30439) (nil block-side t 30437 . 30438) (nil block-side t 30436 . 30437) (nil face (rainbow-delimiters-depth-3-face) 30436 . 30437) (nil block-side t 30435 . 30436) (nil face web-mode-variable-name-face 30435 . 30436) (nil block-side t 30434 . 30435) (nil face web-mode-variable-name-face 30434 . 30435) (nil block-side t 30433 . 30434) (nil face web-mode-variable-name-face 30433 . 30434) (nil block-side t 30432 . 30433) (nil face web-mode-variable-name-face 30432 . 30433) (nil block-side t 30431 . 30432) (nil face web-mode-variable-name-face 30431 . 30432) (nil block-side t 30430 . 30431) (nil face web-mode-variable-name-face 30430 . 30431) (nil block-side t 30429 . 30430) (nil block-side t 30428 . 30429) (nil face web-mode-variable-name-face 30428 . 30429) (nil block-side t 30427 . 30428) (nil face web-mode-variable-name-face 30427 . 30428) (nil block-side t 30426 . 30427) (nil face web-mode-variable-name-face 30426 . 30427) (nil block-side t 30425 . 30426) (nil face web-mode-variable-name-face 30425 . 30426) (nil block-side t 30424 . 30425) (nil face (rainbow-delimiters-depth-3-face) 30424 . 30425) (nil block-side t 30410 . 30424) (nil face web-mode-function-call-face 30410 . 30424) (nil block-side t 30409 . 30410) (nil block-side t 30408 . 30409) (nil block-token delimiter-beg 30408 . 30409) (nil font-lock-face web-mode-block-delimiter-face 30408 . 30409) (nil face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) 30408 . 30409) (nil block-beg 0 30407 . 30408) (nil block-controls 0 30407 . 30408) (nil block-side t 30407 . 30408) (nil block-token delimiter-beg 30407 . 30408) (nil font-lock-face web-mode-block-delimiter-face 30407 . 30408) (nil face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) 30407 . 30408) (nil tag-name "v-col" 30377 . 30378) (nil tag-type start 30377 . 30378) (nil tag-end t 30377 . 30378) (nil font-lock-face web-mode-html-tag-bracket-face 30377 . 30378) (nil tag-attr t 30376 . 30377) (nil tag-attr-end 5 30376 . 30377) (nil tag-name "v-col" 30376 . 30377) (nil tag-type start 30376 . 30377) (nil font-lock-face web-mode-html-attr-value-face 30376 . 30377) (nil tag-attr t 30361 . 30376) (nil tag-name "v-col" 30361 . 30376) (nil tag-type start 30361 . 30376) (nil font-lock-face web-mode-html-attr-value-face 30361 . 30376) (nil tag-attr t 30360 . 30361) (nil tag-name "v-col" 30360 . 30361) (nil tag-type start 30360 . 30361) (nil font-lock-face web-mode-html-attr-equal-face 30360 . 30361) (nil tag-attr t 30356 . 30360) (nil tag-name "v-col" 30356 . 30360) (nil tag-type start 30356 . 30360) (nil font-lock-face web-mode-html-attr-name-face 30356 . 30360) (nil tag-attr-beg 0 30355 . 30356) (nil tag-attr t 30355 . 30356) (nil tag-name "v-col" 30355 . 30356) (nil tag-type start 30355 . 30356) (nil font-lock-face web-mode-html-attr-name-face 30355 . 30356) (nil tag-name "v-col" 30354 . 30355) (nil tag-type start 30354 . 30355) (nil tag-name "v-col" 30349 . 30354) (nil tag-type start 30349 . 30354) (nil font-lock-face web-mode-html-tag-custom-face 30349 . 30354) (nil tag-name "v-col" 30348 . 30349) (nil tag-type start 30348 . 30349) (nil tag-beg 19 30348 . 30349) (nil font-lock-face web-mode-html-tag-bracket-face 30348 . 30349) (nil tag-name "v-row" 30320 . 30321) (nil tag-type start 30320 . 30321) (nil tag-end t 30320 . 30321) (nil font-lock-face web-mode-html-tag-bracket-face 30320 . 30321) (nil tag-attr t 30319 . 30320) (nil tag-attr-end 5 30319 . 30320) (nil tag-name "v-row" 30319 . 30320) (nil tag-type start 30319 . 30320) (nil font-lock-face web-mode-html-attr-value-face 30319 . 30320) (nil tag-attr t 30309 . 30319) (nil tag-name "v-row" 30309 . 30319) (nil tag-type start 30309 . 30319) (nil font-lock-face web-mode-html-attr-value-face 30309 . 30319) (nil tag-attr t 30308 . 30309) (nil tag-name "v-row" 30308 . 30309) (nil tag-type start 30308 . 30309) (nil font-lock-face web-mode-html-attr-equal-face 30308 . 30309) (nil tag-attr t 30304 . 30308) (nil tag-name "v-row" 30304 . 30308) (nil tag-type start 30304 . 30308) (nil font-lock-face web-mode-html-attr-name-face 30304 . 30308) (nil tag-attr-beg 0 30303 . 30304) (nil tag-attr t 30303 . 30304) (nil tag-name "v-row" 30303 . 30304) (nil tag-type start 30303 . 30304) (nil font-lock-face web-mode-html-attr-name-face 30303 . 30304) (nil tag-name "v-row" 30302 . 30303) (nil tag-type start 30302 . 30303) (nil tag-name "v-row" 30297 . 30302) (nil tag-type start 30297 . 30302) (nil font-lock-face web-mode-html-tag-custom-face 30297 . 30302) (nil tag-name "v-row" 30296 . 30297) (nil tag-type start 30296 . 30297) (nil tag-beg 19 30296 . 30297) (nil font-lock-face web-mode-html-tag-bracket-face 30296 . 30297) (nil tag-name "v-row" 30270 . 30271) (nil tag-type end 30270 . 30271) (nil tag-end t 30270 . 30271) (nil font-lock-face web-mode-html-tag-bracket-face 30270 . 30271) (nil tag-name "v-row" 30265 . 30270) (nil tag-type end 30265 . 30270) (nil font-lock-face web-mode-html-tag-custom-face 30265 . 30270) (nil tag-name "v-row" 30264 . 30265) (nil tag-type end 30264 . 30265) (nil font-lock-face web-mode-html-tag-bracket-face 30264 . 30265) (nil tag-name "v-row" 30263 . 30264) (nil tag-type end 30263 . 30264) (nil tag-beg 22 30263 . 30264) (nil font-lock-face web-mode-html-tag-bracket-face 30263 . 30264) (nil tag-name "v-col" 30237 . 30238) (nil tag-type end 30237 . 30238) (nil tag-end t 30237 . 30238) (nil font-lock-face web-mode-html-tag-bracket-face 30237 . 30238) (nil tag-name "v-col" 30232 . 30237) (nil tag-type end 30232 . 30237) (nil font-lock-face web-mode-html-tag-custom-face 30232 . 30237) (nil tag-name "v-col" 30231 . 30232) (nil tag-type end 30231 . 30232) (nil font-lock-face web-mode-html-tag-bracket-face 30231 . 30232) (nil tag-name "v-col" 30230 . 30231) (nil tag-type end 30230 . 30231) (nil tag-beg 22 30230 . 30231) (nil font-lock-face web-mode-html-tag-bracket-face 30230 . 30231) (nil face (rainbow-delimiters-depth-1-face) 30202 . 30203) (nil block-side t 30201 . 30202) (nil block-end t 30201 . 30202) (nil block-token delimiter-end 30201 . 30202) (nil font-lock-face web-mode-block-delimiter-face 30201 . 30202) (nil face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) 30201 . 30202) (nil block-side t 30200 . 30201) (nil block-token delimiter-end 30200 . 30201) (nil font-lock-face web-mode-block-delimiter-face 30200 . 30201) (nil face (rainbow-delimiters-depth-3-face web-mode-block-delimiter-face) 30200 . 30201) (nil block-side t 30199 . 30200) (nil face web-mode-variable-name-face 30199 . 30200) (nil block-side t 30198 . 30199) (nil face web-mode-variable-name-face 30198 . 30199) (nil block-side t 30197 . 30198) (nil face web-mode-variable-name-face 30197 . 30198) (nil block-side t 30196 . 30197) (nil block-side t 30195 . 30196) (nil face web-mode-variable-name-face 30195 . 30196) (nil block-side t 30194 . 30195) (nil face web-mode-variable-name-face 30194 . 30195) (nil block-side t 30193 . 30194) (nil face web-mode-variable-name-face 30193 . 30194) (nil block-side t 30192 . 30193) (nil face web-mode-variable-name-face 30192 . 30193) (nil block-side t 30191 . 30192) (nil block-token delimiter-beg 30191 . 30192) (nil font-lock-face web-mode-block-delimiter-face 30191 . 30192) (nil face (rainbow-delimiters-depth-3-face web-mode-block-delimiter-face) 30191 . 30192) (nil block-beg 0 30190 . 30191) (nil block-controls 0 30190 . 30191) (nil block-side t 30190 . 30191) (nil block-token delimiter-beg 30190 . 30191) (nil font-lock-face web-mode-block-delimiter-face 30190 . 30191) (nil face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) 30190 . 30191) (nil block-side t 30186 . 30187) (nil block-end t 30186 . 30187) (nil block-token delimiter-end 30186 . 30187) (nil font-lock-face web-mode-block-delimiter-face 30186 . 30187) (nil face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) 30186 . 30187) (nil block-side t 30185 . 30186) (nil block-token delimiter-end 30185 . 30186) (nil font-lock-face web-mode-block-delimiter-face 30185 . 30186) (nil face (rainbow-delimiters-depth-3-face web-mode-block-delimiter-face) 30185 . 30186) (nil block-side t 30184 . 30185) (nil face web-mode-variable-name-face 30184 . 30185) (nil block-side t 30183 . 30184) (nil face web-mode-variable-name-face 30183 . 30184) (nil block-side t 30182 . 30183) (nil face web-mode-variable-name-face 30182 . 30183) (nil block-side t 30181 . 30182) (nil face web-mode-variable-name-face 30181 . 30182) (nil block-side t 30180 . 30181) (nil face web-mode-variable-name-face 30180 . 30181) (nil block-side t 30179 . 30180) (nil face web-mode-variable-name-face 30179 . 30180) (nil block-side t 30178 . 30179) (nil face web-mode-variable-name-face 30178 . 30179) (nil block-side t 30177 . 30178) (nil block-side t 30176 . 30177) (nil face web-mode-variable-name-face 30176 . 30177) (nil block-side t 30175 . 30176) (nil face web-mode-variable-name-face 30175 . 30176) (nil block-side t 30174 . 30175) (nil face web-mode-variable-name-face 30174 . 30175) (nil block-side t 30173 . 30174) (nil face web-mode-variable-name-face 30173 . 30174) (nil block-side t 30172 . 30173) (nil block-token delimiter-beg 30172 . 30173) (nil font-lock-face web-mode-block-delimiter-face 30172 . 30173) (nil face (rainbow-delimiters-depth-3-face web-mode-block-delimiter-face) 30172 . 30173) (nil block-beg 0 30171 . 30172) (nil block-controls 0 30171 . 30172) (nil block-side t 30171 . 30172) (nil block-token delimiter-beg 30171 . 30172) (nil font-lock-face web-mode-block-delimiter-face 30171 . 30172) (nil face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) 30171 . 30172) (nil face (rainbow-delimiters-depth-1-face) 30170 . 30171) (nil tag-name "v-col" 30140 . 30141) (nil tag-type start 30140 . 30141) (nil tag-end t 30140 . 30141) (nil font-lock-face web-mode-html-tag-bracket-face 30140 . 30141) (nil tag-attr t 30139 . 30140) (nil tag-attr-end 5 30139 . 30140) (nil tag-name "v-col" 30139 . 30140) (nil tag-type start 30139 . 30140) (nil font-lock-face web-mode-html-attr-value-face 30139 . 30140) (nil tag-attr t 30129 . 30139) (nil tag-name "v-col" 30129 . 30139) (nil tag-type start 30129 . 30139) (nil font-lock-face web-mode-html-attr-value-face 30129 . 30139) (nil tag-attr t 30128 . 30129) (nil tag-name "v-col" 30128 . 30129) (nil tag-type start 30128 . 30129) (nil font-lock-face web-mode-html-attr-equal-face 30128 . 30129) (nil tag-attr t 30124 . 30128) (nil tag-name "v-col" 30124 . 30128) (nil tag-type start 30124 . 30128) (nil font-lock-face web-mode-html-attr-name-face 30124 . 30128) (nil tag-attr-beg 0 30123 . 30124) (nil tag-attr t 30123 . 30124) (nil tag-name "v-col" 30123 . 30124) (nil tag-type start 30123 . 30124) (nil font-lock-face web-mode-html-attr-name-face 30123 . 30124) (nil tag-name "v-col" 30122 . 30123) (nil tag-type start 30122 . 30123) (nil tag-name "v-col" 30117 . 30122) (nil tag-type start 30117 . 30122) (nil font-lock-face web-mode-html-tag-custom-face 30117 . 30122) (nil tag-name "v-col" 30116 . 30117) (nil tag-type start 30116 . 30117) (nil tag-beg 19 30116 . 30117) (nil font-lock-face web-mode-html-tag-bracket-face 30116 . 30117) (nil tag-name "v-row" 30088 . 30089) (nil tag-type start 30088 . 30089) (nil tag-end t 30088 . 30089) (nil font-lock-face web-mode-html-tag-bracket-face 30088 . 30089) (nil tag-attr t 30087 . 30088) (nil tag-attr-end 5 30087 . 30088) (nil tag-name "v-row" 30087 . 30088) (nil tag-type start 30087 . 30088) (nil font-lock-face web-mode-html-attr-value-face 30087 . 30088) (nil tag-attr t 30077 . 30087) (nil tag-name "v-row" 30077 . 30087) (nil tag-type start 30077 . 30087) (nil font-lock-face web-mode-html-attr-value-face 30077 . 30087) (nil tag-attr t 30076 . 30077) (nil tag-name "v-row" 30076 . 30077) (nil tag-type start 30076 . 30077) (nil font-lock-face web-mode-html-attr-equal-face 30076 . 30077) (nil tag-attr t 30072 . 30076) (nil tag-name "v-row" 30072 . 30076) (nil tag-type start 30072 . 30076) (nil font-lock-face web-mode-html-attr-name-face 30072 . 30076) (nil tag-attr-beg 0 30071 . 30072) (nil tag-attr t 30071 . 30072) (nil tag-name "v-row" 30071 . 30072) (nil tag-type start 30071 . 30072) (nil font-lock-face web-mode-html-attr-name-face 30071 . 30072) (nil tag-name "v-row" 30070 . 30071) (nil tag-type start 30070 . 30071) (nil tag-name "v-row" 30065 . 30070) (nil tag-type start 30065 . 30070) (nil font-lock-face web-mode-html-tag-custom-face 30065 . 30070) (nil tag-name "v-row" 30064 . 30065) (nil tag-type start 30064 . 30065) (nil tag-beg 19 30064 . 30065) (nil font-lock-face web-mode-html-tag-bracket-face 30064 . 30065) (nil tag-name "span" 30038 . 30039) (nil tag-type start 30038 . 30039) (nil tag-end t 30038 . 30039) (nil font-lock-face web-mode-html-tag-bracket-face 30038 . 30039) (nil tag-name "span" 30034 . 30038) (nil tag-type start 30034 . 30038) (nil font-lock-face web-mode-html-tag-face 30034 . 30038) (nil tag-name "span" 30033 . 30034) (nil tag-type start 30033 . 30034) (nil tag-beg 16 30033 . 30034) (nil font-lock-face web-mode-html-tag-bracket-face 30033 . 30034) (30011 . 30571)) nil (25837 53937 197755 239000) 0 nil])
([nil nil ((#("e" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face)) . -29633) (undo-tree-id172 . -1) (#("l" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face)) . -29634) (undo-tree-id173 . -1) (#("k" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face)) . -29635) (undo-tree-id174 . -1) (#("s" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face)) . -29636) (undo-tree-id175 . -1) (#("e" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face)) . -29637) (undo-tree-id176 . -1) (#(" " 0 1 (tag-name "v-col" tag-type start)) . -29638) (undo-tree-id177 . -1) 29639) ((29633 . 29639)) (25836 42444 443963 607000) 0 nil])
nil
([nil nil ((30595 . 30621) ("                    " . 30595) (30559 . 30587) ("                      " . 30559) (30544 . 30550) (30479 . 30511) ("                          " . 30479) (30411 . 30445) ("                            " . 30411) (30348 . 30380) ("                          " . 30348) (30316 . 30322) (30277 . 30283) (30212 . 30244) ("                          " . 30212) (30144 . 30178) ("                            " . 30144) (30086 . 30118) ("                          " . 30086) (30054 . 30060) ("                      " . -30023) (29942 . 29946) (29807 . 29839) ("                            " . 29807) (29771 . 29775) 29484) nil (25837 53937 197598 657000) 0 nil])
([nil nil ((29633 . 29636)) ((#("if " 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 1 2 (tag-attr t tag-attr-end 0 tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 2 3 (tag-name "v-col" tag-type start)) . 29633) (undo-tree-id340 . -2) (undo-tree-id341 . -3) (undo-tree-id342 . -2) (undo-tree-id343 . -2) (undo-tree-id344 . -2) (undo-tree-id345 . -2) (undo-tree-id346 . -2) (undo-tree-id347 . -2) (undo-tree-id348 . -2) (undo-tree-id349 . -3) (undo-tree-id350 . -3) (undo-tree-id351 . -3) (undo-tree-id352 . -3) (undo-tree-id353 . -3) (undo-tree-id354 . -3) (undo-tree-id355 . -3) (undo-tree-id356 . -3)) (25836 42444 151823 775000) 0 nil])
([nil nil ((74991 . 74999) (#("        " 0 8 (part-side javascript)) . 74990) (undo-tree-id7 . -8) (74989 . 74999) (t 25837 53937 263555 236000)) nil (25837 54458 5338 866000) 0 nil])
([nil nil ((#(" " 0 1 (tag-name "v-col" tag-type start)) . -29635) (undo-tree-id171 . -1) 29636) ((29635 . 29636)) (25836 42443 147405 648000) 0 nil])
([nil nil ((75002 . 75004) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -75002) (74999 . 75003)) nil (25837 54458 5335 723000) 0 nil])
([nil nil ((29635 . 29639)) ((#("=\"\" " 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-equal-face) 1 2 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face) 2 3 (tag-attr t tag-attr-end 4 tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face) 3 4 (tag-name "v-col" tag-type start)) . 29635) (undo-tree-id327 . -2) (undo-tree-id328 . -2) (undo-tree-id329 . -2) (undo-tree-id330 . -2) (undo-tree-id331 . -2) (undo-tree-id332 . -2) (undo-tree-id333 . -2) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -2) (undo-tree-id339 . -2)) (25836 42442 886940 298000) 0 nil])
([nil nil ((75004 . 75006) (#("{" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -75004) (75004 . 75005)) nil (25837 54458 5334 67000) 0 nil])
([nil nil ((#("
                    {{}}" 21 22 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg face (rainbow-delimiters-depth-1-face)) 22 23 (block-side t block-token delimiter-beg face (rainbow-delimiters-depth-2-face)) 23 24 (block-side t block-token delimiter-end face (rainbow-delimiters-depth-2-face)) 24 25 (block-side t block-end t block-token delimiter-end face (rainbow-delimiters-depth-1-face))) . 28465) (undo-tree-id167 . -25) (undo-tree-id168 . -1) (undo-tree-id169 . -23) (undo-tree-id170 . -25)) ((28465 . 28490)) (25836 42442 680403 528000) 0 nil])
([nil nil ((75008 . 75016) (#("          " 0 10 (face whitespace-trailing part-side javascript)) . 75007) (undo-tree-id3 . -8) (undo-tree-id4 . 10) (75015 . 75017) (75007 . 75016) (#("          " 0 10 (face whitespace-trailing part-side javascript)) . 75006) (undo-tree-id5 . -8) (undo-tree-id6 . 10) (75014 . 75016) (75005 . 75015)) nil (25837 54458 5331 693000) 0 nil])
([nil nil ((29612 . 29624)) ((#("item.filter " 0 11 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face) 11 12 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . 29612) (undo-tree-id321 . -11) (undo-tree-id322 . -12) (undo-tree-id323 . -12) (undo-tree-id324 . -12) (undo-tree-id325 . -12) (undo-tree-id326 . -12)) (25836 42442 613158 53000) 0 nil])
([nil nil ((nil rear-nonsticky nil 75213 . 75214) (nil part-side javascript 75208 . 75214) (nil face web-mode-keyword-face 75208 . 75214) (nil part-side javascript 75197 . 75208) (nil part-side javascript 75196 . 75197) (nil face (rainbow-delimiters-depth-5-face) 75196 . 75197) (nil part-side javascript 75195 . 75196) (nil face (rainbow-delimiters-depth-6-face) 75195 . 75196) (nil part-side javascript 75178 . 75195) (nil part-side javascript 75171 . 75178) (nil face web-mode-variable-name-face 75171 . 75178) (nil part-side javascript 75157 . 75171) (nil part-side javascript 75156 . 75157) (nil part-token string 75156 . 75157) (nil syntax-table (15) 75156 . 75157) (nil font-lock-face web-mode-javascript-string-face 75156 . 75157) (nil part-side javascript 75149 . 75156) (nil part-token string 75149 . 75156) (nil font-lock-face web-mode-javascript-string-face 75149 . 75156) (nil part-side javascript 75148 . 75149) (nil part-token string 75148 . 75149) (nil syntax-table (15) 75148 . 75149) (nil font-lock-face web-mode-javascript-string-face 75148 . 75149) (nil part-side javascript 75146 . 75148) (nil part-side javascript 75141 . 75146) (nil face web-mode-variable-name-face 75141 . 75146) (nil part-side javascript 75127 . 75141) (nil part-side javascript 75126 . 75127) (nil face (rainbow-delimiters-depth-7-face) 75126 . 75127) (nil part-side javascript 75125 . 75126) (nil part-token string 75125 . 75126) (nil syntax-table (15) 75125 . 75126) (nil font-lock-face web-mode-javascript-string-face 75125 . 75126) (nil part-side javascript 75108 . 75125) (nil part-token string 75108 . 75125) (nil font-lock-face web-mode-javascript-string-face 75108 . 75125) (nil part-side javascript 75107 . 75108) (nil part-token string 75107 . 75108) (nil syntax-table (15) 75107 . 75108) (nil font-lock-face web-mode-javascript-string-face 75107 . 75108) (nil part-side javascript 75105 . 75107) (nil part-side javascript 75104 . 75105) (nil face (rainbow-delimiters-depth-8-face) 75104 . 75105) (nil part-side javascript 75103 . 75104) (nil part-token string 75103 . 75104) (nil syntax-table (15) 75103 . 75104) (nil font-lock-face web-mode-javascript-string-face 75103 . 75104) (nil part-side javascript 75071 . 75103) (nil part-token string 75071 . 75103) (nil font-lock-face web-mode-javascript-string-face 75071 . 75103) (nil part-side javascript 75070 . 75071) (nil part-token string 75070 . 75071) (nil syntax-table (15) 75070 . 75071) (nil font-lock-face web-mode-javascript-string-face 75070 . 75071) (nil part-side javascript 75069 . 75070) (nil face (rainbow-delimiters-depth-8-face) 75069 . 75070) (nil part-side javascript 75066 . 75069) (nil part-side javascript 75062 . 75066) (nil face web-mode-constant-face 75062 . 75066) (nil part-side javascript 75061 . 75062) (nil face (rainbow-delimiters-depth-7-face) 75061 . 75062) (nil part-side javascript 75059 . 75061) (nil part-side javascript 75052 . 75059) (nil face web-mode-variable-name-face 75052 . 75059) (nil part-side javascript 75040 . 75052) (nil part-side javascript 75039 . 75040) (nil part-side javascript 75038 . 75039) (nil face (rainbow-delimiters-depth-6-face) 75038 . 75039) (nil part-side javascript 75037 . 75038) (nil face (rainbow-delimiters-depth-5-face) 75037 . 75038) (nil part-side javascript 75033 . 75037) (nil face web-mode-function-call-face 75033 . 75037) (nil part-side javascript 75020 . 75033) (nil part-side javascript 75016 . 75020) (nil face web-mode-constant-face 75016 . 75020) (nil part-side javascript 75006 . 75016) (75006 . 75214)) nil (25837 54458 5320 270000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -29623) (undo-tree-id166 . -1) 29624) ((29623 . 29624)) (25836 42442 346694 166000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . 75214) (undo-tree-id2 . -1)) nil (25837 54458 5301 956000) 0 nil])
([nil nil ((29691 . 29720)) (("
                            " . 29691) (undo-tree-id286 . -29) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -29) (undo-tree-id314 . -29) (undo-tree-id315 . -29) (undo-tree-id316 . -29) (undo-tree-id317 . -29) (undo-tree-id318 . -29) (undo-tree-id319 . -29) (undo-tree-id320 . -29)) (25836 42442 165777 34000) 0 nil])
([nil nil ((nil rear-nonsticky nil 75017 . 75018) (nil part-side javascript 75017 . 75018) (nil face (rainbow-delimiters-depth-5-face) 75017 . 75018) (nil part-side javascript 75016 . 75017) (nil part-side javascript 75015 . 75016) (nil face (rainbow-delimiters-depth-5-face) 75015 . 75016) (nil part-side javascript 75007 . 75015) (nil part-side javascript 75003 . 75007) (nil face web-mode-constant-face 75003 . 75007) (75003 . 75018)) nil (25837 54458 5298 606000) 0 nil])
([nil nil ((nil rear-nonsticky nil 29762 . 29763) (nil block-side t 29762 . 29763) (nil block-end t 29762 . 29763) (nil block-token delimiter-end 29762 . 29763) (nil face (rainbow-delimiters-depth-1-face) 29762 . 29763) (nil block-side t 29761 . 29762) (nil block-token delimiter-end 29761 . 29762) (nil face (rainbow-delimiters-depth-2-face) 29761 . 29762) (nil block-side t 29755 . 29761) (nil block-side t 29754 . 29755) (nil face (rainbow-delimiters-depth-3-face) 29754 . 29755) (nil block-side t 29747 . 29754) (nil block-side t 29746 . 29747) (nil face (rainbow-delimiters-depth-3-face) 29746 . 29747) (nil block-side t 29734 . 29746) (nil block-side t 29722 . 29734) (nil block-side t 29721 . 29722) (nil block-token delimiter-beg 29721 . 29722) (nil face (rainbow-delimiters-depth-2-face) 29721 . 29722) (nil block-beg 0 29720 . 29721) (nil block-controls 0 29720 . 29721) (nil block-side t 29720 . 29721) (nil block-token delimiter-beg 29720 . 29721) (nil face (rainbow-delimiters-depth-1-face) 29720 . 29721) (29720 . 29763)) ((#("{{item.name + filter_score[item.id] + '%'}}" 0 1 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg face (rainbow-delimiters-depth-1-face)) 1 2 (block-side t block-token delimiter-beg face (rainbow-delimiters-depth-2-face)) 2 26 (block-side t) 26 27 (block-side t face (rainbow-delimiters-depth-3-face)) 27 34 (block-side t) 34 35 (block-side t face (rainbow-delimiters-depth-3-face)) 35 41 (block-side t) 41 42 (block-side t block-token delimiter-end face (rainbow-delimiters-depth-2-face)) 42 43 (rear-nonsticky nil block-side t block-end t block-token delimiter-end face (rainbow-delimiters-depth-1-face))) . 29720) (nil face (rainbow-delimiters-depth-1-face) 29720 . 29721) (nil face (rainbow-delimiters-depth-2-face) 29721 . 29722) (nil face (rainbow-delimiters-depth-3-face) 29746 . 29747) (nil face (rainbow-delimiters-depth-3-face) 29754 . 29755) (nil face (rainbow-delimiters-depth-2-face) 29761 . 29762) (nil face (rainbow-delimiters-depth-1-face) 29762 . 29763) (nil rear-nonsticky t 29762 . 29763)) (25836 42441 999036 489000) 0 nil])
([nil nil ((75018 . 75027)) nil (25837 54458 5294 630000) 0 nil])
([nil nil ((#("                            {{item.name + filter_score[item.id] + '%'}}
" 28 29 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg face (rainbow-delimiters-depth-1-face)) 29 30 (block-side t block-token delimiter-beg face (rainbow-delimiters-depth-2-face)) 30 54 (block-side t) 54 55 (block-side t face (rainbow-delimiters-depth-3-face)) 55 62 (block-side t) 62 63 (block-side t face (rainbow-delimiters-depth-3-face)) 63 69 (block-side t) 69 70 (block-side t block-token delimiter-end face (rainbow-delimiters-depth-2-face)) 70 71 (rear-nonsticky t block-side t block-end t block-token delimiter-end face (rainbow-delimiters-depth-1-face))) . 29764) (undo-tree-id164 . -28) (29722 . 29764) (#("                            {{item.name}}
" 28 29 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg face (rainbow-delimiters-depth-1-face)) 29 30 (block-side t block-token delimiter-beg face (rainbow-delimiters-depth-2-face)) 30 31 (block-side t) 31 32 (block-side t) 32 33 (block-side t) 33 34 (block-side t) 34 35 (block-side t) 35 36 (block-side t) 36 37 (block-side t) 37 38 (block-side t) 38 39 (block-side t) 39 40 (block-side t block-token delimiter-end face (rainbow-delimiters-depth-2-face)) 40 41 (block-side t block-end t block-token delimiter-end face (rainbow-delimiters-depth-1-face))) . 29650) (undo-tree-id165 . -41) (29692 . 29764) 29691) ((#("                            {{item.name + filter_score[item.id] + '%'}}
" 28 29 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg face (rainbow-delimiters-depth-1-face)) 29 30 (block-side t block-token delimiter-beg face (rainbow-delimiters-depth-2-face)) 30 54 (block-side t) 54 55 (block-side t face (rainbow-delimiters-depth-3-face)) 55 62 (block-side t) 62 63 (block-side t face (rainbow-delimiters-depth-3-face)) 63 69 (block-side t) 69 70 (block-side t block-token delimiter-end face (rainbow-delimiters-depth-2-face)) 70 71 (rear-nonsticky t block-side t block-end t block-token delimiter-end face (rainbow-delimiters-depth-1-face))) . 29692) (undo-tree-id233 . -72) (undo-tree-id234 . -72) (undo-tree-id235 . -72) (undo-tree-id236 . -72) (undo-tree-id237 . -72) (undo-tree-id238 . -72) (undo-tree-id239 . -72) (undo-tree-id240 . -72) (undo-tree-id241 . -72) (undo-tree-id242 . -72) (undo-tree-id243 . -72) (undo-tree-id244 . -72) (undo-tree-id245 . -72) (undo-tree-id246 . -72) (undo-tree-id247 . -72) (undo-tree-id248 . -72) (undo-tree-id249 . -72) (undo-tree-id250 . -72) (undo-tree-id251 . -72) (undo-tree-id252 . -72) (undo-tree-id253 . -72) (undo-tree-id254 . -72) (undo-tree-id255 . -72) (undo-tree-id256 . -72) (undo-tree-id257 . -72) (undo-tree-id258 . -72) (undo-tree-id259 . -72) (29650 . 29692) (#("                            {{item.name}}
" 28 29 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg face (rainbow-delimiters-depth-1-face)) 29 30 (block-side t block-token delimiter-beg face (rainbow-delimiters-depth-2-face)) 30 31 (block-side t) 31 32 (block-side t) 32 33 (block-side t) 33 34 (block-side t) 34 35 (block-side t) 35 36 (block-side t) 36 37 (block-side t) 37 38 (block-side t) 38 39 (block-side t) 39 40 (block-side t block-token delimiter-end face (rainbow-delimiters-depth-2-face)) 40 41 (block-side t block-end t block-token delimiter-end face (rainbow-delimiters-depth-1-face))) . 29722) (undo-tree-id260 . -41) (undo-tree-id261 . -42) (undo-tree-id262 . -42) (undo-tree-id263 . -42) (undo-tree-id264 . -42) (undo-tree-id265 . -42) (undo-tree-id266 . -42) (undo-tree-id267 . -42) (undo-tree-id268 . -42) (undo-tree-id269 . -42) (undo-tree-id270 . -42) (undo-tree-id271 . -42) (undo-tree-id272 . -42) (undo-tree-id273 . -42) (undo-tree-id274 . -42) (undo-tree-id275 . -42) (undo-tree-id276 . -42) (undo-tree-id277 . -42) (undo-tree-id278 . -41) (undo-tree-id279 . -41) (undo-tree-id280 . -41) (undo-tree-id281 . -41) (undo-tree-id282 . -41) (undo-tree-id283 . -41) (undo-tree-id284 . -41) (undo-tree-id285 . -41) (29764 . 29836)) (25836 42441 821219 800000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -75026) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 75027) nil (25837 54458 5289 124000) 0 nil])
([nil nil ((#("                          </v-col>
" 26 27 (tag-name "v-col" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 27 28 (tag-name "v-col" tag-type end font-lock-face web-mode-html-tag-bracket-face) 28 33 (tag-name "v-col" tag-type end font-lock-face web-mode-html-tag-custom-face) 33 34 (tag-name "v-col" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 29799) (29757 . 29799) (#("                            {{item.name}}
" 28 29 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg face (rainbow-delimiters-depth-1-face)) 29 30 (block-side t block-token delimiter-beg face (rainbow-delimiters-depth-2-face)) 30 31 (block-side t) 31 32 (block-side t) 32 33 (block-side t) 33 34 (block-side t) 34 35 (block-side t) 35 36 (block-side t) 36 37 (block-side t) 37 38 (block-side t) 38 39 (block-side t) 39 40 (block-side t block-token delimiter-end face (rainbow-delimiters-depth-2-face)) 40 41 (block-side t block-end t block-token delimiter-end face (rainbow-delimiters-depth-1-face))) . 29722) (undo-tree-id163 . -41) (29764 . 29799) 29763) ((#("                          </v-col>
" 26 27 (tag-name "v-col" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 27 28 (tag-name "v-col" tag-type end font-lock-face web-mode-html-tag-bracket-face) 28 33 (tag-name "v-col" tag-type end font-lock-face web-mode-html-tag-custom-face) 33 34 (tag-name "v-col" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 29764) (undo-tree-id197 . -35) (undo-tree-id198 . -35) (undo-tree-id199 . -35) (undo-tree-id200 . -35) (undo-tree-id201 . -35) (undo-tree-id202 . -35) (undo-tree-id203 . -35) (undo-tree-id204 . -35) (undo-tree-id205 . -35) (undo-tree-id206 . -35) (undo-tree-id207 . -35) (undo-tree-id208 . -35) (undo-tree-id209 . -35) (undo-tree-id210 . -35) (undo-tree-id211 . -35) (undo-tree-id212 . -35) (undo-tree-id213 . -35) (undo-tree-id214 . -35) (undo-tree-id215 . -35) (29722 . 29764) (#("                            {{item.name}}
" 28 29 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg face (rainbow-delimiters-depth-1-face)) 29 30 (block-side t block-token delimiter-beg face (rainbow-delimiters-depth-2-face)) 30 31 (block-side t) 31 32 (block-side t) 32 33 (block-side t) 33 34 (block-side t) 34 35 (block-side t) 35 36 (block-side t) 36 37 (block-side t) 37 38 (block-side t) 38 39 (block-side t) 39 40 (block-side t block-token delimiter-end face (rainbow-delimiters-depth-2-face)) 40 41 (block-side t block-end t block-token delimiter-end face (rainbow-delimiters-depth-1-face))) . 29757) (undo-tree-id216 . -41) (undo-tree-id217 . -42) (undo-tree-id218 . -42) (undo-tree-id219 . -42) (undo-tree-id220 . -42) (undo-tree-id221 . -42) (undo-tree-id222 . -42) (undo-tree-id223 . -42) (undo-tree-id224 . -42) (undo-tree-id225 . -41) (undo-tree-id226 . -41) (undo-tree-id227 . -41) (undo-tree-id228 . -41) (undo-tree-id229 . -41) (undo-tree-id230 . -41) (undo-tree-id231 . -41) (undo-tree-id232 . -41) (29799 . 29834)) (25836 42441 616600 161000) 0 nil])
([nil nil ((nil rear-nonsticky nil 75009 . 75010) (nil part-side javascript 75003 . 75010) (75003 . 75010) (t 25837 54458 63023 550000)) nil (25837 54582 179423 329000) 0 nil])
([nil nil ((#("                          <v-col v-else>
" 26 27 (tag-name "v-col" tag-type start tag-beg 19 font-lock-face web-mode-html-tag-bracket-face) 27 32 (tag-name "v-col" tag-type start font-lock-face web-mode-html-tag-custom-face) 32 33 (tag-name "v-col" tag-type start) 33 34 (tag-attr-beg 2 tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 34 36 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 36 37 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 37 38 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 38 39 (tag-attr t tag-attr-end 0 tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 39 40 (tag-name "v-col" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 29840) (undo-tree-id161 . -30) (29798 . 29840) (#("                            {{item.name}}
" 28 29 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg face (rainbow-delimiters-depth-1-face)) 29 30 (block-side t block-token delimiter-beg face (rainbow-delimiters-depth-2-face)) 30 31 (block-side t) 31 32 (block-side t) 32 33 (block-side t) 33 34 (block-side t) 34 35 (block-side t) 35 36 (block-side t) 36 37 (block-side t) 37 38 (block-side t) 38 39 (block-side t) 39 40 (block-side t block-token delimiter-end face (rainbow-delimiters-depth-2-face)) 40 41 (block-side t block-end t block-token delimiter-end face (rainbow-delimiters-depth-1-face))) . 29757) (undo-tree-id162 . -41) (29799 . 29840) 29798) ((#("                          <v-col v-else>
" 26 27 (tag-name "v-col" tag-type start tag-beg 19 font-lock-face web-mode-html-tag-bracket-face) 27 32 (tag-name "v-col" tag-type start font-lock-face web-mode-html-tag-custom-face) 32 33 (tag-name "v-col" tag-type start) 33 34 (tag-attr-beg 2 tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 34 36 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 36 37 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 37 38 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 38 39 (tag-attr t tag-attr-end 0 tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-engine-face) 39 40 (tag-name "v-col" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 29799) (undo-tree-id178 . -41) (undo-tree-id179 . -41) (undo-tree-id180 . -41) (undo-tree-id181 . -41) (undo-tree-id182 . -41) (undo-tree-id183 . -41) (undo-tree-id184 . -41) (undo-tree-id185 . -41) (undo-tree-id186 . -41) (undo-tree-id187 . -41) (29757 . 29799) (#("                            {{item.name}}
" 28 29 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg face (rainbow-delimiters-depth-1-face)) 29 30 (block-side t block-token delimiter-beg face (rainbow-delimiters-depth-2-face)) 30 31 (block-side t) 31 32 (block-side t) 32 33 (block-side t) 33 34 (block-side t) 34 35 (block-side t) 35 36 (block-side t) 36 37 (block-side t) 37 38 (block-side t) 38 39 (block-side t) 39 40 (block-side t block-token delimiter-end face (rainbow-delimiters-depth-2-face)) 40 41 (block-side t block-end t block-token delimiter-end face (rainbow-delimiters-depth-1-face))) . 29798) (undo-tree-id188 . -41) (undo-tree-id189 . -42) (undo-tree-id190 . -41) (undo-tree-id191 . -41) (undo-tree-id192 . -41) (undo-tree-id193 . -41) (undo-tree-id194 . -41) (undo-tree-id195 . -41) (undo-tree-id196 . -41) (29840 . 29881)) (25836 42441 359625 499000) 0 nil])
([nil nil ((75010 . 75012) (#("(" 0 1 (face (rainbow-delimiters-depth-5-face) part-side javascript)) . -75010) (75010 . 75011)) nil (25837 54582 179421 344000) 0 nil])
([nil nil ((#("
                            {{item.name + filter_score[item.id] + '%'}}" 29 30 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg face (rainbow-delimiters-depth-1-face)) 30 31 (block-side t block-token delimiter-beg face (rainbow-delimiters-depth-2-face)) 31 43 (block-side t) 43 55 (block-side t) 55 56 (block-side t face (rainbow-delimiters-depth-3-face)) 56 63 (block-side t) 63 64 (block-side t face (rainbow-delimiters-depth-3-face)) 64 70 (block-side t) 70 71 (block-side t block-token delimiter-end face (rainbow-delimiters-depth-2-face)) 71 72 (block-side t block-end t block-token delimiter-end face (rainbow-delimiters-depth-1-face))) . 29839) (undo-tree-id153 . -72) (undo-tree-id154 . -1) (undo-tree-id155 . -29) (undo-tree-id156 . -55) (undo-tree-id157 . -1) (undo-tree-id158 . -55) (undo-tree-id159 . -72) (undo-tree-id160 . -72)) ((29839 . 29911) (t 25836 42396 897055 190000)) (25836 42396 837498 445000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-5-face) part-side javascript)) . 75011)) nil (25837 54582 179419 672000) 0 nil])
nil
([nil nil ((#("l" 0 1 (part-side javascript)) . 75026) (#("l" 0 1 (part-side javascript)) . 75026) (#("u" 0 1 (part-side javascript)) . 75026) (#("n" 0 1 (face web-mode-constant-face part-side javascript)) . 75026) (#(" " 0 1 (part-side javascript)) . 75026) (#("=" 0 1 (part-side javascript)) . 75026) (#("=" 0 1 (part-side javascript)) . 75026) (#(" " 0 1 (part-side javascript)) . 75026)) nil (25837 54582 179417 224000) 0 nil])
([nil nil ((75027 . 75028) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . 75027) (75026 . 75027) (#(" " 0 1 (part-side javascript)) . -75026) (75026 . 75027) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) part-side javascript)) . -75026) (75026 . 75027)) nil (25837 54582 179412 655000) 0 nil])
([nil nil ((75003 . 75008)) nil (25837 54582 179403 174000) 0 nil])
([nil nil ((#("aggregation_save" 0 16 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . 75116) (undo-tree-id8 . -16) (undo-tree-id9 . -16) (undo-tree-id10 . -16) (t 25837 54582 232863 204000)) nil (25837 54728 682235 495000) 0 nil])
([nil nil ((nil rear-nonsticky nil 75131 . 75132) (nil part-side javascript 75116 . 75132) (nil part-token string 75116 . 75132) (nil font-lock-face web-mode-javascript-string-face 75116 . 75132) (75116 . 75132)) nil (25837 54728 682215 413000) 0 nil])
([nil nil ((nil rear-nonsticky nil 29836 . 29837) (nil tag-attr t 29836 . 29837) (nil tag-attr-end 4 29836 . 29837) (nil tag-name "v-col" 29836 . 29837) (nil tag-type start 29836 . 29837) (nil font-lock-face web-mode-html-attr-value-face 29836 . 29837) (nil tag-attr t 29833 . 29836) (nil tag-name "v-col" 29833 . 29836) (nil tag-type start 29833 . 29836) (nil font-lock-face web-mode-html-attr-value-face 29833 . 29836) (nil tag-attr t 29832 . 29833) (nil tag-name "v-col" 29832 . 29833) (nil tag-type start 29832 . 29833) (nil font-lock-face web-mode-html-attr-equal-face 29832 . 29833) (nil tag-attr t 29829 . 29832) (nil tag-name "v-col" 29829 . 29832) (nil tag-type start 29829 . 29832) (nil font-lock-face web-mode-html-attr-engine-face 29829 . 29832) (nil tag-attr-beg 2 29828 . 29829) (nil tag-attr t 29828 . 29829) (nil tag-name "v-col" 29828 . 29829) (nil tag-type start 29828 . 29829) (nil font-lock-face web-mode-html-attr-engine-face 29828 . 29829) (nil tag-name "v-col" 29796 . 29828) (nil tag-type start 29796 . 29828) (nil tag-attr t 29795 . 29796) (nil tag-attr-end 6 29795 . 29796) (nil tag-name "v-col" 29795 . 29796) (nil tag-type start 29795 . 29796) (nil font-lock-face web-mode-html-attr-value-face 29795 . 29796) (nil tag-attr t 29789 . 29795) (nil tag-name "v-col" 29789 . 29795) (nil tag-type start 29789 . 29795) (nil font-lock-face web-mode-html-attr-value-face 29789 . 29795) (nil tag-attr t 29788 . 29789) (nil tag-name "v-col" 29788 . 29789) (nil tag-type start 29788 . 29789) (nil font-lock-face web-mode-html-attr-equal-face 29788 . 29789) (nil tag-attr t 29783 . 29788) (nil tag-name "v-col" 29783 . 29788) (nil tag-type start 29783 . 29788) (nil font-lock-face web-mode-html-attr-engine-face 29783 . 29788) (nil tag-attr-beg 2 29782 . 29783) (nil tag-attr t 29782 . 29783) (nil tag-name "v-col" 29782 . 29783) (nil tag-type start 29782 . 29783) (nil font-lock-face web-mode-html-attr-engine-face 29782 . 29783) (29782 . 29837) (t 25837 54728 751056 14000)) nil (25837 54928 296030 201000) 0 nil])
([nil nil ((29837 . 29838)) nil (25837 54928 296017 860000) 0 nil])
([nil nil ((29844 . 29881) (#(" " 0 1 (face whitespace-trailing tag-type start tag-name "v-col")) . 29843) (undo-tree-id11 . -1) (29797 . 29834) (#("                               " 0 31 (tag-type start tag-name "v-col")) . 29797) (29838 . 29839)) nil (25837 55155 628233 897000) 0 nil])
([nil nil ((29571 . 29572)) nil (25837 55237 718237 216000) 0 nil] [nil nil ((#("
                              <v-row class=\"pa-0 ma-0\">
                                <v-col class=\"pa-0 ma-0 pt-1\">
                                  {{ filtertostring(item.filter) }}
                                </v-col>
                              </v-row>" 31 32 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-row") 32 37 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-row") 37 38 (tag-type start tag-name "v-row") 38 39 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t tag-attr-beg 0) 39 43 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t) 43 44 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-row" tag-attr t) 44 54 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t) 54 55 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr-end 5 tag-attr t) 55 56 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-row") 89 90 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-col") 90 95 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-col") 95 96 (tag-type start tag-name "v-col") 96 97 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t tag-attr-beg 0) 97 101 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t) 101 102 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-col" tag-attr t) 102 117 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t) 117 118 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr-end 5 tag-attr t) 118 119 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-col") 154 155 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 155 156 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 156 157 (block-side t) 157 171 (face web-mode-function-call-face block-side t) 171 172 (face (rainbow-delimiters-depth-3-face) block-side t) 172 173 (face web-mode-variable-name-face block-side t) 173 174 (face web-mode-variable-name-face block-side t) 174 175 (face web-mode-variable-name-face block-side t) 175 176 (face web-mode-variable-name-face block-side t) 176 177 (block-side t) 177 178 (face web-mode-variable-name-face block-side t) 178 179 (face web-mode-variable-name-face block-side t) 179 180 (face web-mode-variable-name-face block-side t) 180 181 (face web-mode-variable-name-face block-side t) 181 182 (face web-mode-variable-name-face block-side t) 182 183 (face web-mode-variable-name-face block-side t) 183 184 (face (rainbow-delimiters-depth-3-face) block-side t) 184 185 (block-side t) 185 186 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-side t) 186 187 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t) 220 221 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 221 222 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 222 227 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 227 228 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col") 259 260 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 260 261 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 261 266 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 266 267 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 30390) (undo-tree-id12 . -267) (undo-tree-id13 . -164) (undo-tree-id14 . -1) (undo-tree-id15 . -267) (t 25837 54928 346071 476000)) ((30390 . 30657)) (25837 55155 175091 716000) 0 nil])
([nil nil ((nil rear-nonsticky nil 29589 . 29590) (nil tag-attr t 29589 . 29590) (nil tag-attr-end 4 29589 . 29590) (nil tag-name "v-row" 29589 . 29590) (nil tag-type start 29589 . 29590) (nil font-lock-face web-mode-html-attr-value-face 29589 . 29590) (nil tag-attr t 29577 . 29589) (nil tag-name "v-row" 29577 . 29589) (nil tag-type start 29577 . 29589) (nil font-lock-face web-mode-html-attr-value-face 29577 . 29589) (nil tag-attr t 29576 . 29577) (nil tag-name "v-row" 29576 . 29577) (nil tag-type start 29576 . 29577) (nil font-lock-face web-mode-html-attr-equal-face 29576 . 29577) (nil tag-attr t 29573 . 29576) (nil tag-name "v-row" 29573 . 29576) (nil tag-type start 29573 . 29576) (nil font-lock-face web-mode-html-attr-engine-face 29573 . 29576) (nil tag-attr-beg 2 29572 . 29573) (nil tag-attr t 29572 . 29573) (nil tag-name "v-row" 29572 . 29573) (nil tag-type start 29572 . 29573) (nil font-lock-face web-mode-html-attr-engine-face 29572 . 29573) (29572 . 29590)) nil (25837 55237 718234 814000) 0 nil])
([nil nil ((30390 . 30421)) (("
                              " . 30390) (undo-tree-id182 . -31) (undo-tree-id183 . -31) (undo-tree-id184 . -1) (undo-tree-id185 . -31) (undo-tree-id186 . -31) (undo-tree-id187 . -31) (undo-tree-id188 . -31) (undo-tree-id189 . -31) (undo-tree-id190 . -31) (undo-tree-id191 . -31) (undo-tree-id192 . -31) (undo-tree-id193 . -31) (undo-tree-id194 . -31) (undo-tree-id195 . -31) (undo-tree-id196 . -31) (undo-tree-id197 . -31) (undo-tree-id198 . -31) (undo-tree-id199 . -31) (undo-tree-id200 . -31) (undo-tree-id201 . -31) (undo-tree-id202 . -31) (undo-tree-id203 . -31) (undo-tree-id204 . -31) (undo-tree-id205 . -31) (undo-tree-id206 . -31) (undo-tree-id207 . -31) (undo-tree-id208 . -31) (undo-tree-id209 . -31) (undo-tree-id210 . -31) (undo-tree-id211 . -31) (undo-tree-id212 . -31) (undo-tree-id213 . -31) (undo-tree-id214 . -31) (undo-tree-id215 . -31) (undo-tree-id216 . -31) (undo-tree-id217 . -31) (undo-tree-id218 . -31) (undo-tree-id219 . -31) (undo-tree-id220 . -31) (undo-tree-id221 . -31) (undo-tree-id222 . -31) (undo-tree-id223 . -31) (undo-tree-id224 . -31) (undo-tree-id225 . -31) (undo-tree-id226 . -31) (undo-tree-id227 . -31) (undo-tree-id228 . -31) (undo-tree-id229 . -31) (undo-tree-id230 . -31) (undo-tree-id231 . -31) (undo-tree-id232 . -31) (undo-tree-id233 . -31) (undo-tree-id234 . -31) (undo-tree-id235 . -31) (undo-tree-id236 . -31) (undo-tree-id237 . -1) (undo-tree-id238 . -31) (undo-tree-id239 . -31) (undo-tree-id240 . -31) (undo-tree-id241 . -31) (undo-tree-id242 . -31) (undo-tree-id243 . -31) (undo-tree-id244 . -31)) (25837 55154 885876 957000) 0 nil])
([nil nil ((30784 . 30809)) nil (25837 55237 718228 683000) 0 nil])
([nil nil ((30423 . 30434) (30422 . 30424) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face))) . -30422) (30422 . 30423) (30421 . 30423) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face))) . -30421) (30421 . 30422)) ((#("{" 0 1 (face (rainbow-delimiters-depth-1-face))) . 30421) (30421 . 30422) (#("{}" 0 1 (face (rainbow-delimiters-depth-1-face)) 1 2 (face (rainbow-delimiters-depth-1-face))) . 30421) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -2) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face))) . 30422) (30422 . 30423) (#("{}" 0 1 (face (rainbow-delimiters-depth-2-face) block-token delimiter-beg block-side t) 1 2 (face (rainbow-delimiters-depth-2-face) block-token delimiter-end block-side t)) . 30422) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -2) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("item.filter" 0 11 (block-side t)) . 30423) (undo-tree-id128 . -11) (undo-tree-id129 . -11) (undo-tree-id130 . -11) (undo-tree-id131 . -11) (undo-tree-id132 . -11) (undo-tree-id133 . -11) (undo-tree-id134 . -11) (undo-tree-id135 . -11) (undo-tree-id136 . -11) (undo-tree-id137 . -11) (undo-tree-id138 . -11) (undo-tree-id139 . -11) (undo-tree-id140 . -11) (undo-tree-id141 . -11) (undo-tree-id142 . -11) (undo-tree-id143 . -11) (undo-tree-id144 . -11) (undo-tree-id145 . -11) (undo-tree-id146 . -11) (undo-tree-id147 . -11) (undo-tree-id148 . -11) (undo-tree-id149 . -11) (undo-tree-id150 . -11) (undo-tree-id151 . -11) (undo-tree-id152 . -11) (undo-tree-id153 . -11) (undo-tree-id154 . -11) (undo-tree-id155 . -11) (undo-tree-id156 . -11) (undo-tree-id157 . -11) (undo-tree-id158 . -11) (undo-tree-id159 . -11) (undo-tree-id160 . -11) (undo-tree-id161 . -11) (undo-tree-id162 . -11) (undo-tree-id163 . -11) (undo-tree-id164 . -11) (undo-tree-id165 . -11) (undo-tree-id166 . -11) (undo-tree-id167 . -11) (undo-tree-id168 . -11) (undo-tree-id169 . -11) (undo-tree-id170 . -11) (undo-tree-id171 . -11) (undo-tree-id172 . -11) (undo-tree-id173 . -11) (undo-tree-id174 . -11) (undo-tree-id175 . -11) (undo-tree-id176 . -11) (undo-tree-id177 . -11) (undo-tree-id178 . -11) (undo-tree-id179 . -11) (undo-tree-id180 . -11) (undo-tree-id181 . -11) (t 25837 55123 633044 160000)) (25837 55123 582973 439000) 0 nil])
([nil nil ((30809 . 30811)) nil (25837 55237 718227 692000) 0 nil])
nil
([nil nil (("v" . -30809) (undo-tree-id273 . -1) (undo-tree-id274 . -1) ("-" . -30810) (undo-tree-id275 . -1) (undo-tree-id276 . -1) 30811) nil (25837 55237 718226 95000) 0 nil])
([nil nil ((30809 . 30814)) nil (25837 55237 718220 249000) 0 nil])
([nil nil (("z" . -30809) (undo-tree-id268 . -1) ("v" . -30810) (undo-tree-id269 . -1) ("-" . -30811) (undo-tree-id270 . -1) ("e" . -30812) (undo-tree-id271 . -1) ("c" . -30813) (undo-tree-id272 . -1) 30814) nil (25837 55237 718218 309000) 0 nil])
([nil nil ((30809 . 30810)) nil (25837 55237 718210 677000) 0 nil])
([nil nil (("z" . -30809) (undo-tree-id267 . -1) 30810) nil (25837 55237 718209 538000) 0 nil])
([nil nil ((30809 . 30810)) nil (25837 55237 718207 238000) 0 nil])
([nil nil ((">" . -30809) (undo-tree-id266 . -1) 30810) nil (25837 55237 718205 968000) 0 nil])
([nil nil ((30809 . 30811)) nil (25837 55237 718203 367000) 0 nil])
([nil nil ((30811 . 30817)) nil (25837 55237 718202 376000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-else")) . -30816) (undo-tree-id265 . -1) 30817) nil (25837 55237 718201 171000) 0 nil])
([nil nil ((30816 . 30826)) nil (25837 55237 718198 520000) 0 nil])
([nil nil ((30819 . 30845) (#("                          " 0 26 (face whitespace-trailing)) . 30818) (undo-tree-id264 . -26) (30818 . 30845) (30819 . 30843) (#("                          " 0 26 (face whitespace-trailing)) . 30818) (30818 . 30844) (30818 . 30819) ("                        " . 30818) (30817 . 30842)) nil (25837 55237 718196 345000) 0 nil])
([nil nil ((30818 . 30844)) nil (25837 55237 718192 340000) 0 nil])
([nil nil ((nil rear-nonsticky nil 30973 . 30974) (nil tag-name "v-col" 30973 . 30974) (nil tag-type start 30973 . 30974) (nil tag-end t 30973 . 30974) (nil font-lock-face web-mode-html-tag-bracket-face 30973 . 30974) (nil tag-attr t 30972 . 30973) (nil tag-attr-end 5 30972 . 30973) (nil tag-name "v-col" 30972 . 30973) (nil tag-type start 30972 . 30973) (nil font-lock-face web-mode-html-attr-value-face 30972 . 30973) (nil tag-attr t 30968 . 30972) (nil tag-name "v-col" 30968 . 30972) (nil tag-type start 30968 . 30972) (nil font-lock-face web-mode-html-attr-value-face 30968 . 30972) (nil tag-attr t 30967 . 30968) (nil tag-name "v-col" 30967 . 30968) (nil tag-type start 30967 . 30968) (nil font-lock-face web-mode-html-attr-value-face 30967 . 30968) (nil tag-attr t 30966 . 30967) (nil tag-name "v-col" 30966 . 30967) (nil tag-type start 30966 . 30967) (nil font-lock-face web-mode-html-attr-value-face 30966 . 30967) (nil tag-attr t 30965 . 30966) (nil tag-name "v-col" 30965 . 30966) (nil tag-type start 30965 . 30966) (nil font-lock-face web-mode-html-attr-value-face 30965 . 30966) (nil tag-attr t 30959 . 30965) (nil tag-name "v-col" 30959 . 30965) (nil tag-type start 30959 . 30965) (nil font-lock-face web-mode-html-attr-value-face 30959 . 30965) (nil tag-attr t 30958 . 30959) (nil tag-name "v-col" 30958 . 30959) (nil tag-type start 30958 . 30959) (nil font-lock-face web-mode-html-attr-value-face 30958 . 30959) (nil tag-attr t 30956 . 30958) (nil tag-name "v-col" 30956 . 30958) (nil tag-type start 30956 . 30958) (nil font-lock-face web-mode-html-attr-value-face 30956 . 30958) (nil tag-attr t 30955 . 30956) (nil tag-name "v-col" 30955 . 30956) (nil tag-type start 30955 . 30956) (nil font-lock-face web-mode-html-attr-equal-face 30955 . 30956) (nil tag-attr t 30951 . 30955) (nil tag-name "v-col" 30951 . 30955) (nil tag-type start 30951 . 30955) (nil font-lock-face web-mode-html-attr-name-face 30951 . 30955) (nil tag-attr-beg 0 30950 . 30951) (nil tag-attr t 30950 . 30951) (nil tag-name "v-col" 30950 . 30951) (nil tag-type start 30950 . 30951) (nil font-lock-face web-mode-html-attr-name-face 30950 . 30951) (nil tag-name "v-col" 30912 . 30950) (nil tag-type start 30912 . 30950) (nil rear-nonsticky t 30911 . 30912) (nil tag-attr t 30911 . 30912) (nil tag-attr-end 4 30911 . 30912) (nil tag-name "v-col" 30911 . 30912) (nil tag-type start 30911 . 30912) (nil font-lock-face web-mode-html-attr-value-face 30911 . 30912) (nil tag-attr t 30908 . 30911) (nil tag-name "v-col" 30908 . 30911) (nil tag-type start 30908 . 30911) (nil font-lock-face web-mode-html-attr-value-face 30908 . 30911) (nil tag-attr t 30907 . 30908) (nil tag-name "v-col" 30907 . 30908) (nil tag-type start 30907 . 30908) (nil font-lock-face web-mode-html-attr-equal-face 30907 . 30908) (nil tag-attr t 30904 . 30907) (nil tag-name "v-col" 30904 . 30907) (nil tag-type start 30904 . 30907) (nil font-lock-face web-mode-html-attr-engine-face 30904 . 30907) (nil tag-attr-beg 2 30903 . 30904) (nil tag-attr t 30903 . 30904) (nil tag-name "v-col" 30903 . 30904) (nil tag-type start 30903 . 30904) (nil font-lock-face web-mode-html-attr-engine-face 30903 . 30904) (nil tag-name "v-col" 30865 . 30903) (nil tag-type start 30865 . 30903) (nil tag-attr t 30864 . 30865) (nil tag-attr-end 6 30864 . 30865) (nil tag-name "v-col" 30864 . 30865) (nil tag-type start 30864 . 30865) (nil font-lock-face web-mode-html-attr-value-face 30864 . 30865) (nil tag-attr t 30858 . 30864) (nil tag-name "v-col" 30858 . 30864) (nil tag-type start 30858 . 30864) (nil font-lock-face web-mode-html-attr-value-face 30858 . 30864) (nil tag-attr t 30857 . 30858) (nil tag-name "v-col" 30857 . 30858) (nil tag-type start 30857 . 30858) (nil font-lock-face web-mode-html-attr-equal-face 30857 . 30858) (nil tag-attr t 30852 . 30857) (nil tag-name "v-col" 30852 . 30857) (nil tag-type start 30852 . 30857) (nil font-lock-face web-mode-html-attr-engine-face 30852 . 30857) (nil tag-attr-beg 2 30851 . 30852) (nil tag-attr t 30851 . 30852) (nil tag-name "v-col" 30851 . 30852) (nil tag-type start 30851 . 30852) (nil font-lock-face web-mode-html-attr-engine-face 30851 . 30852) (nil tag-name "v-col" 30850 . 30851) (nil tag-type start 30850 . 30851) (nil tag-name "v-col" 30845 . 30850) (nil tag-type start 30845 . 30850) (nil font-lock-face web-mode-html-tag-custom-face 30845 . 30850) (nil tag-name "v-col" 30844 . 30845) (nil tag-type start 30844 . 30845) (nil tag-beg 19 30844 . 30845) (nil font-lock-face web-mode-html-tag-bracket-face 30844 . 30845) (30844 . 30974)) nil (25837 55237 718185 745000) 0 nil])
([nil nil ((#("v-bind=\"attrs\"
                                     v-on=\"on\"" 0 1 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-col" tag-attr t tag-attr-beg 2) 1 6 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-col" tag-attr t) 6 7 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-col" tag-attr t) 7 13 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t) 13 14 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr-end 6 tag-attr t) 14 52 (tag-type start tag-name "v-col") 52 53 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-col" tag-attr t tag-attr-beg 2) 53 56 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-col" tag-attr t) 56 57 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-col" tag-attr t) 57 60 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t) 60 61 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr-end 4 tag-attr t)) . 30851) (undo-tree-id261 . -61) (undo-tree-id262 . -15) (undo-tree-id263 . -61)) nil (25837 55237 718160 720000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-col")) . -30850) (undo-tree-id259 . -1) (undo-tree-id260 . -1) 30851) nil (25837 55237 718156 104000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#("
" 0 1 (tag-type start tag-name "v-col")) . 30850) (undo-tree-id258 . -1)) nil (25837 55237 718149 131000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850) (#(" " 0 1 (tag-type start tag-name "v-col")) . 30850)) nil (25837 55237 718139 832000) 0 nil])
([nil nil ((30875 . 30904)) nil (25837 55237 718135 402000) 0 nil])
([nil nil (("  " . -30902) (30904 . 30912)) nil (25837 55237 718134 77000) 0 nil])
([nil nil (("
" . 30910) (undo-tree-id257 . -1)) nil (25837 55237 718132 684000) 0 nil])
([nil nil ((30875 . 30904)) nil (25837 55237 718130 106000) 0 nil])
([nil nil ((nil rear-nonsticky nil 30916 . 30917) (nil block-side t 30916 . 30917) (nil block-end t 30916 . 30917) (nil block-token delimiter-end 30916 . 30917) (nil face (rainbow-delimiters-depth-1-face) 30916 . 30917) (nil block-side t 30915 . 30916) (nil block-token delimiter-end 30915 . 30916) (nil face (rainbow-delimiters-depth-2-face) 30915 . 30916) (nil block-side t 30914 . 30915) (nil block-side t 30913 . 30914) (nil block-side t 30912 . 30913) (nil block-side t 30911 . 30912) (nil block-side t 30910 . 30911) (nil block-side t 30909 . 30910) (nil block-side t 30908 . 30909) (nil block-side t 30907 . 30908) (nil block-side t 30906 . 30907) (nil block-side t 30905 . 30906) (nil block-token delimiter-beg 30905 . 30906) (nil face (rainbow-delimiters-depth-2-face) 30905 . 30906) (nil block-beg 0 30904 . 30905) (nil block-controls 0 30904 . 30905) (nil block-side t 30904 . 30905) (nil block-token delimiter-beg 30904 . 30905) (nil face (rainbow-delimiters-depth-1-face) 30904 . 30905) (30904 . 30917)) nil (25837 55237 718127 169000) 0 nil])
([nil nil ((#("                          " 0 26 (face whitespace-trailing)) . -30952) (undo-tree-id245 . -7) (undo-tree-id246 . -7) (undo-tree-id247 . -7) (undo-tree-id248 . -7) (undo-tree-id249 . -7) (undo-tree-id250 . -7) (undo-tree-id251 . -7) (undo-tree-id252 . -7) (undo-tree-id253 . -7) (undo-tree-id254 . -7) (undo-tree-id255 . -7) (undo-tree-id256 . -7) 30959) nil (25837 55237 718115 853000) 0 nil])
([nil nil ((29971 . 29973) (t 25837 55237 770788 873000)) nil (25837 55252 7933 19000) 0 nil])
([nil nil ((#("else" 0 4 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-else")) . 30814) (undo-tree-id279 . -4) (undo-tree-id280 . -1) (undo-tree-id281 . -4) (t 25837 55252 67007 706000)) nil (25837 55290 145657 397000) 0 nil])
([nil nil ((30814 . 30818)) nil (25837 55290 145652 422000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-row")) . -30817) (undo-tree-id278 . -1) 30818) nil (25837 55290 145651 9000) 0 nil])
([nil nil ((#("e" 0 1 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-e")) . 30982) (#("s" 0 1 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-se")) . 30982) (#("l" 0 1 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-lse")) . 30982) (#("e" 0 1 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-else")) . 30982)) nil (25837 55290 145646 645000) 0 nil])
([nil nil ((30982 . 30985)) nil (25837 55290 145643 455000) 0 nil])
([nil nil ((30817 . 30825)) nil (25837 55290 145639 422000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-row")) . -30824) (undo-tree-id277 . -1) 30825) nil (25837 55290 145631 304000) 0 nil])
([nil nil ((29973 . 29975) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face))) . -29973) (29973 . 29974) (t 25837 55290 199591 719000)) nil (25837 55450 873156 137000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face))) . 29974)) nil (25837 55450 873152 803000) 0 nil])
([nil nil ((30036 . 30037)) nil (25837 55450 873151 642000) 0 nil])
([nil nil ((29973 . 29980)) nil (25837 55450 873149 782000) 0 nil])
([nil nil ((">" . 29976) ("p" . 29976) ("/" . 29976) (#("<" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "p")) . 29976)) nil (25837 55450 873146 191000) 0 nil])
([nil nil ((30040 . 30044)) nil (25837 55450 873143 564000) 0 nil])
([nil nil ((29983 . 29988) (29975 . 29984)) nil (25837 55450 873142 83000) 0 nil])
([nil nil ((#("t" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "p" tag-attr t)) . -29983) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (#("e" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "p" tag-attr t)) . -29984) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("x" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "p" tag-attr t)) . -29985) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (#("t" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "p" tag-attr t)) . -29986) (undo-tree-id291 . -1) (undo-tree-id292 . -1) 29987) nil (25837 55450 873135 389000) 0 nil])
([nil nil ((29983 . 29990)) nil (25837 55450 873075 536000) 0 nil])
([nil nil ((29991 . 29996)) nil (25837 55450 873063 285000) 0 nil])
([nil nil ((29998 . 29999) (t 25837 55450 930057 451000)) nil (25837 55485 902525 878000) 0 nil])
([nil nil ((#("s" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "p" tag-attr t tag-attr-beg 0)) . -29976) (undo-tree-id300 . -1) (#("t" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "p" tag-attr t)) . -29977) (undo-tree-id301 . -1) (#("y" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "p" tag-attr t)) . -29978) (undo-tree-id302 . -1) (#("l" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "p" tag-attr t)) . -29979) (undo-tree-id303 . -1) (#("e" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "p" tag-attr t)) . -29980) (undo-tree-id304 . -1) 29981 (t 25837 55480 330509 105000)) nil (25837 55490 489987 885000) 0 nil] [nil nil ((#("primary" 0 7 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "p" tag-attr t)) . 29983) (undo-tree-id293 . -7) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -7) (undo-tree-id299 . -7) (t 25837 55480 330509 105000)) ((29983 . 29990)) (25837 55485 901207 916000) 0 nil])
([nil nil ((29976 . 29979)) nil (25837 55490 489950 802000) 0 nil])
nil
([nil nil ((29979 . 29981)) nil (25837 55490 489942 906000) 0 nil])
([nil nil ((" " . 29971) ("-" . 29971) (t 25837 55490 542666 26000)) nil (25837 55525 387892 803000) 0 nil])
([nil nil ((29971 . 29973) (t 25837 55525 447202 519000)) nil (25837 55572 912009 963000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face))) . 29999)) nil (25837 55572 912007 238000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-unmatched-face))) . 30061)) nil (25837 55572 911998 382000) 0 nil])
([nil nil ((29983 . 29987) (t 25837 55572 963933 209000)) nil (25837 55594 225823 508000) 0 nil])
([nil nil ((#("2" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "p" tag-attr t)) . -29986) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) 29987) nil (25837 55594 225819 377000) 0 nil])
([nil nil ((29986 . 29988)) nil (25837 55594 225779 634000) 0 nil])
([nil nil ((#("r" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "p" tag-attr t)) . -29984) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) 29985 (t 25837 55594 276261 63000)) nil (25837 55597 804639 559000) 0 nil])
([nil nil ((29984 . 29985)) nil (25837 55597 804559 588000) 0 nil])
([nil nil ((#("p" 0 1 (font-lock-face web-mode-html-tag-face tag-type start tag-name "p")) . -29974) (undo-tree-id350 . -1) 29975 (t 25837 55597 868316 327000)) nil (25837 55740 907155 65000) 0 nil])
([nil nil ((29974 . 29977)) nil (25837 55740 907151 62000) 0 nil])
([nil nil ((#("d" 0 1 (font-lock-face web-mode-html-tag-face tag-type start tag-name "d")) . -29974) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (#("i" 0 1 (font-lock-face web-mode-html-tag-face tag-type start tag-name "di")) . -29975) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#("v" 0 1 (font-lock-face web-mode-html-tag-face tag-type start tag-name "div")) . -29976) (undo-tree-id348 . -1) (undo-tree-id349 . -1) 29977) nil (25837 55740 907148 89000) 0 nil])
([nil nil ((29974 . 29978)) nil (25837 55740 907135 802000) 0 nil])
([nil nil ((#("p" 0 1 (font-lock-face web-mode-html-tag-face tag-type end tag-name "p")) . -30071) (undo-tree-id343 . -1) 30072) nil (25837 55740 907132 626000) 0 nil])
([nil nil ((30071 . 30075)) nil (25837 55740 907099 842000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -76033) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (#("*" 0 1 (part-side javascript)) . -76034) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#(" " 0 1 (part-side javascript)) . -76035) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (#("1" 0 1 (part-side javascript)) . -76036) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (#("0" 0 1 (part-side javascript)) . -76037) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (#("0" 0 1 (part-side javascript)) . -76038) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) 76039 (t 25837 55740 970519 480000)) nil (25837 56106 474144 943000) 0 nil])
([nil nil ((#("
            console.log(\"Score \", res)" 0 21 (part-side javascript) 21 24 (face web-mode-function-call-face part-side javascript) 24 25 (face (rainbow-delimiters-depth-8-face) part-side javascript) 25 26 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 26 32 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 32 33 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 33 38 (part-side javascript) 38 39 (face (rainbow-delimiters-depth-8-face) part-side javascript)) . 76033) (undo-tree-id586 . -39) (undo-tree-id587 . -1) (undo-tree-id588 . -39) (t 25837 56106 524361 700000)) nil (25837 56195 663732 658000) 0 nil])
([nil nil ((#("
          console.log(\"Compare against\", element.name)" 0 19 (part-side javascript) 19 22 (face web-mode-function-call-face part-side javascript) 22 23 (face (rainbow-delimiters-depth-6-face) part-side javascript) 23 24 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 24 39 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 39 40 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 40 54 (part-side javascript) 54 55 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . 75853) (undo-tree-id583 . -55) (undo-tree-id584 . -1) (undo-tree-id585 . -55)) nil (25837 56195 663726 789000) 0 nil])
([nil nil ((#("

        console.log(\"Filters\", this.filters)" 0 1 (part-side javascript) 1 18 (part-side javascript) 18 21 (face web-mode-function-call-face part-side javascript) 21 22 (face (rainbow-delimiters-depth-4-face) part-side javascript) 22 23 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 23 30 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 30 31 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 31 33 (part-side javascript) 33 37 (face web-mode-constant-face part-side javascript) 37 45 (part-side javascript) 45 46 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . 75621) (undo-tree-id580 . -46) (undo-tree-id581 . -1) (undo-tree-id582 . -46)) nil (25837 56195 663717 496000) 0 nil])
([nil nil ((28497 . 28520) (t 25837 56195 713922 572000)) nil (25837 56809 404099 233000) 0 nil])
([nil nil ((nil rear-nonsticky nil 28529 . 28530) (nil tag-attr t 28529 . 28530) (nil tag-attr-end 3 28529 . 28530) (nil tag-name "v-treeview" 28529 . 28530) (nil tag-type start 28529 . 28530) (nil font-lock-face web-mode-html-attr-value-face 28529 . 28530) (nil tag-attr t 28524 . 28529) (nil tag-name "v-treeview" 28524 . 28529) (nil tag-type start 28524 . 28529) (nil font-lock-face web-mode-html-attr-value-face 28524 . 28529) (nil tag-attr t 28523 . 28524) (nil tag-name "v-treeview" 28523 . 28524) (nil tag-type start 28523 . 28524) (nil font-lock-face web-mode-html-attr-equal-face 28523 . 28524) (nil tag-attr t 28521 . 28523) (nil tag-name "v-treeview" 28521 . 28523) (nil tag-type start 28521 . 28523) (nil font-lock-face web-mode-html-attr-name-face 28521 . 28523) (nil tag-attr-beg 0 28520 . 28521) (nil tag-attr t 28520 . 28521) (nil tag-name "v-treeview" 28520 . 28521) (nil tag-type start 28520 . 28521) (nil font-lock-face web-mode-html-attr-name-face 28520 . 28521) (28520 . 28530)) nil (25837 56809 404096 457000) 0 nil])
([nil nil ((#("t" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-treeview" tag-attr t)) . -28525) (undo-tree-id605 . -1) (#("r" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-treeview" tag-attr t)) . -28526) (undo-tree-id606 . -1) (#("e" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-treeview" tag-attr t)) . -28527) (undo-tree-id607 . -1) (#("e" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-treeview" tag-attr t)) . -28528) (undo-tree-id608 . -1) 28529) nil (25837 56809 404089 687000) 0 nil])
([nil nil ((28525 . 28530)) nil (25837 56809 404083 619000) 0 nil])
([nil nil ((#("-" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-treeview" tag-attr t)) . -28529) (undo-tree-id604 . -1) 28530) nil (25837 56809 404082 398000) 0 nil])
([nil nil ((28529 . 28536)) nil (25837 56809 404080 40000) 0 nil])
([nil nil ((#("_" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-treeview" tag-attr t)) . -28535) (undo-tree-id603 . -1) 28536) nil (25837 56809 404078 792000) 0 nil])
([nil nil ((28535 . 28542)) nil (25837 56809 404076 418000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-treeview" tag-attr t)) . -28541) (undo-tree-id602 . -1) 28542) nil (25837 56812 874485 220000) 0 nil])
([nil nil ((76071 . 76080)) nil (25837 56849 394266 371000) 0 nil] [nil nil ((#("        this.filter_name = this.lastInsertedFilter
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 27 (part-side javascript) 27 31 (face web-mode-constant-face part-side javascript) 31 51 (part-side javascript)) . 75758) (75719 . 75758) (#("        this.save_filter_dialog = true
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 34 (part-side javascript) 34 38 (face web-mode-constant-face part-side javascript) 38 39 (part-side javascript)) . 75668) (undo-tree-id600 . -38) (undo-tree-id601 . -38) (75707 . 75758) 75706) ((#("        this.filter_name = this.lastInsertedFilter
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 27 (part-side javascript) 27 31 (face web-mode-constant-face part-side javascript) 31 51 (part-side javascript)) . 75707) (undo-tree-id1241 . -51) (undo-tree-id1242 . -51) (undo-tree-id1243 . -51) (undo-tree-id1244 . -51) (undo-tree-id1245 . -51) (undo-tree-id1246 . -51) (undo-tree-id1247 . -51) (undo-tree-id1248 . -51) (undo-tree-id1249 . -51) (undo-tree-id1250 . -51) (undo-tree-id1251 . -51) (undo-tree-id1252 . -51) (undo-tree-id1253 . -51) (undo-tree-id1254 . -51) (undo-tree-id1255 . -51) (undo-tree-id1256 . -51) (undo-tree-id1257 . -51) (undo-tree-id1258 . -51) (undo-tree-id1259 . -51) (undo-tree-id1260 . -51) (undo-tree-id1261 . -51) (undo-tree-id1262 . -51) (undo-tree-id1263 . -51) (undo-tree-id1264 . -51) (undo-tree-id1265 . -51) (undo-tree-id1266 . -51) (undo-tree-id1267 . -51) (undo-tree-id1268 . -51) (undo-tree-id1269 . -51) (undo-tree-id1270 . -51) (undo-tree-id1271 . -51) (undo-tree-id1272 . -51) (undo-tree-id1273 . -51) (undo-tree-id1274 . -51) (undo-tree-id1275 . -51) (undo-tree-id1276 . -51) (undo-tree-id1277 . -51) (undo-tree-id1278 . -51) (undo-tree-id1279 . -51) (undo-tree-id1280 . -51) (undo-tree-id1281 . -51) (undo-tree-id1282 . -51) (undo-tree-id1283 . -51) (undo-tree-id1284 . -51) (undo-tree-id1285 . -51) (undo-tree-id1286 . -51) (undo-tree-id1287 . -51) (undo-tree-id1288 . -51) (undo-tree-id1289 . -51) (undo-tree-id1290 . -51) (undo-tree-id1291 . -51) (undo-tree-id1292 . -51) (undo-tree-id1293 . -51) (undo-tree-id1294 . -51) (undo-tree-id1295 . -51) (undo-tree-id1296 . -51) (undo-tree-id1297 . -51) (undo-tree-id1298 . -51) (75668 . 75707) (#("        this.save_filter_dialog = true
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 34 (part-side javascript) 34 38 (face web-mode-constant-face part-side javascript) 38 39 (part-side javascript)) . 75719) (undo-tree-id1299 . -38) (undo-tree-id1300 . -39) (undo-tree-id1301 . -39) (undo-tree-id1302 . -39) (undo-tree-id1303 . -39) (undo-tree-id1304 . -39) (undo-tree-id1305 . -39) (undo-tree-id1306 . -39) (undo-tree-id1307 . -39) (undo-tree-id1308 . -39) (undo-tree-id1309 . -39) (undo-tree-id1310 . -39) (undo-tree-id1311 . -39) (undo-tree-id1312 . -39) (undo-tree-id1313 . -39) (undo-tree-id1314 . -39) (undo-tree-id1315 . -39) (undo-tree-id1316 . -39) (undo-tree-id1317 . -39) (undo-tree-id1318 . -39) (undo-tree-id1319 . -39) (undo-tree-id1320 . -39) (undo-tree-id1321 . -39) (undo-tree-id1322 . -39) (undo-tree-id1323 . -39) (undo-tree-id1324 . -39) (undo-tree-id1325 . -39) (undo-tree-id1326 . -39) (undo-tree-id1327 . -39) (undo-tree-id1328 . -39) (undo-tree-id1329 . -39) (undo-tree-id1330 . -39) (undo-tree-id1331 . -39) (undo-tree-id1332 . -39) (undo-tree-id1333 . -39) (undo-tree-id1334 . -39) (undo-tree-id1335 . -39) (undo-tree-id1336 . -39) (undo-tree-id1337 . -39) (undo-tree-id1338 . -39) (undo-tree-id1339 . -39) (undo-tree-id1340 . -39) (undo-tree-id1341 . -39) (undo-tree-id1342 . -39) (undo-tree-id1343 . -39) (undo-tree-id1344 . -39) (undo-tree-id1345 . -39) (undo-tree-id1346 . -39) (undo-tree-id1347 . -39) (undo-tree-id1348 . -38) (undo-tree-id1349 . -38) (undo-tree-id1350 . -38) (undo-tree-id1351 . -38) (undo-tree-id1352 . -38) (undo-tree-id1353 . -38) (undo-tree-id1354 . -38) (undo-tree-id1355 . -38) (75758 . 75809)) (25837 56812 674397 897000) 0 nil])
([nil nil ((76080 . 76085)) nil (25837 56849 394265 280000) 0 nil])
([nil nil ((#("        this.save_root = this.prev_save_root
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 25 (part-side javascript) 25 29 (face web-mode-constant-face part-side javascript) 29 45 (part-side javascript)) . 75803) (75764 . 75803) (#("        this.save_filter_dialog = true
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 34 (part-side javascript) 34 38 (face web-mode-constant-face part-side javascript) 38 39 (part-side javascript)) . 75719) (undo-tree-id599 . -38) (75758 . 75803) 75757) ((#("        this.save_root = this.prev_save_root
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 25 (part-side javascript) 25 29 (face web-mode-constant-face part-side javascript) 29 45 (part-side javascript)) . 75758) (undo-tree-id1142 . -45) (undo-tree-id1143 . -45) (undo-tree-id1144 . -45) (undo-tree-id1145 . -45) (undo-tree-id1146 . -45) (undo-tree-id1147 . -45) (undo-tree-id1148 . -45) (undo-tree-id1149 . -45) (undo-tree-id1150 . -45) (undo-tree-id1151 . -45) (undo-tree-id1152 . -45) (undo-tree-id1153 . -45) (undo-tree-id1154 . -45) (undo-tree-id1155 . -45) (undo-tree-id1156 . -45) (undo-tree-id1157 . -45) (undo-tree-id1158 . -45) (undo-tree-id1159 . -45) (undo-tree-id1160 . -45) (undo-tree-id1161 . -45) (undo-tree-id1162 . -45) (undo-tree-id1163 . -45) (undo-tree-id1164 . -45) (undo-tree-id1165 . -45) (undo-tree-id1166 . -45) (undo-tree-id1167 . -45) (undo-tree-id1168 . -45) (undo-tree-id1169 . -45) (undo-tree-id1170 . -45) (undo-tree-id1171 . -45) (undo-tree-id1172 . -45) (undo-tree-id1173 . -45) (undo-tree-id1174 . -45) (undo-tree-id1175 . -45) (undo-tree-id1176 . -45) (undo-tree-id1177 . -45) (undo-tree-id1178 . -45) (undo-tree-id1179 . -45) (undo-tree-id1180 . -45) (undo-tree-id1181 . -45) (undo-tree-id1182 . -45) (undo-tree-id1183 . -45) (undo-tree-id1184 . -45) (undo-tree-id1185 . -45) (undo-tree-id1186 . -45) (undo-tree-id1187 . -45) (undo-tree-id1188 . -45) (undo-tree-id1189 . -45) (undo-tree-id1190 . -45) (undo-tree-id1191 . -45) (75719 . 75758) (#("        this.save_filter_dialog = true
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 34 (part-side javascript) 34 38 (face web-mode-constant-face part-side javascript) 38 39 (part-side javascript)) . 75764) (undo-tree-id1192 . -38) (undo-tree-id1193 . -39) (undo-tree-id1194 . -39) (undo-tree-id1195 . -39) (undo-tree-id1196 . -39) (undo-tree-id1197 . -39) (undo-tree-id1198 . -39) (undo-tree-id1199 . -39) (undo-tree-id1200 . -39) (undo-tree-id1201 . -39) (undo-tree-id1202 . -39) (undo-tree-id1203 . -39) (undo-tree-id1204 . -39) (undo-tree-id1205 . -39) (undo-tree-id1206 . -39) (undo-tree-id1207 . -39) (undo-tree-id1208 . -39) (undo-tree-id1209 . -39) (undo-tree-id1210 . -39) (undo-tree-id1211 . -39) (undo-tree-id1212 . -39) (undo-tree-id1213 . -39) (undo-tree-id1214 . -39) (undo-tree-id1215 . -39) (undo-tree-id1216 . -39) (undo-tree-id1217 . -39) (undo-tree-id1218 . -39) (undo-tree-id1219 . -39) (undo-tree-id1220 . -39) (undo-tree-id1221 . -39) (undo-tree-id1222 . -39) (undo-tree-id1223 . -39) (undo-tree-id1224 . -39) (undo-tree-id1225 . -39) (undo-tree-id1226 . -39) (undo-tree-id1227 . -39) (undo-tree-id1228 . -39) (undo-tree-id1229 . -39) (undo-tree-id1230 . -39) (undo-tree-id1231 . -39) (undo-tree-id1232 . -39) (undo-tree-id1233 . -38) (undo-tree-id1234 . -38) (undo-tree-id1235 . -38) (undo-tree-id1236 . -38) (undo-tree-id1237 . -38) (undo-tree-id1238 . -38) (undo-tree-id1239 . -38) (undo-tree-id1240 . -38) (75803 . 75848)) (25837 56812 502203 38000) 0 nil])
([nil nil ((76085 . 76095)) nil (25837 56849 394264 203000) 0 nil])
([nil nil ((#("        this.raw_filter_list.forEach(element => {
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 29 (part-side javascript) 29 36 (face web-mode-function-call-face part-side javascript) 36 37 (face (rainbow-delimiters-depth-6-face) part-side javascript) 37 44 (face web-mode-function-name-face part-side javascript) 44 48 (part-side javascript) 48 49 (face (rainbow-delimiters-depth-7-face) part-side javascript) 49 50 (part-side javascript)) . 75853) (undo-tree-id597 . -49) (undo-tree-id598 . -40) (75814 . 75853) (#("        this.save_filter_dialog = true
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 34 (part-side javascript) 34 38 (face web-mode-constant-face part-side javascript) 38 39 (part-side javascript)) . 75764) (75803 . 75853) 75802) ((#("        this.raw_filter_list.forEach(element => {
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 29 (part-side javascript) 29 36 (face web-mode-function-call-face part-side javascript) 36 37 (face (rainbow-delimiters-depth-4-face) part-side javascript) 37 44 (face web-mode-function-name-face part-side javascript) 44 48 (part-side javascript) 48 49 (face (rainbow-delimiters-depth-5-face) part-side javascript) 49 50 (part-side javascript)) . 75803) (undo-tree-id1059 . -50) (undo-tree-id1060 . -50) (undo-tree-id1061 . -50) (undo-tree-id1062 . -50) (undo-tree-id1063 . -50) (undo-tree-id1064 . -50) (undo-tree-id1065 . -50) (undo-tree-id1066 . -50) (undo-tree-id1067 . -50) (undo-tree-id1068 . -50) (undo-tree-id1069 . -50) (undo-tree-id1070 . -50) (undo-tree-id1071 . -50) (undo-tree-id1072 . -50) (undo-tree-id1073 . -50) (undo-tree-id1074 . -50) (undo-tree-id1075 . -50) (undo-tree-id1076 . -50) (undo-tree-id1077 . -50) (undo-tree-id1078 . -50) (undo-tree-id1079 . -50) (undo-tree-id1080 . -50) (undo-tree-id1081 . -50) (undo-tree-id1082 . -50) (undo-tree-id1083 . -50) (undo-tree-id1084 . -50) (undo-tree-id1085 . -50) (undo-tree-id1086 . -50) (undo-tree-id1087 . -50) (undo-tree-id1088 . -50) (undo-tree-id1089 . -50) (undo-tree-id1090 . -50) (undo-tree-id1091 . -50) (undo-tree-id1092 . -50) (undo-tree-id1093 . -50) (undo-tree-id1094 . -50) (undo-tree-id1095 . -50) (undo-tree-id1096 . -50) (undo-tree-id1097 . -50) (undo-tree-id1098 . -50) (undo-tree-id1099 . -50) (undo-tree-id1100 . -50) (75764 . 75803) (#("        this.save_filter_dialog = true
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 34 (part-side javascript) 34 38 (face web-mode-constant-face part-side javascript) 38 39 (part-side javascript)) . 75814) (undo-tree-id1101 . -38) (undo-tree-id1102 . -39) (undo-tree-id1103 . -39) (undo-tree-id1104 . -39) (undo-tree-id1105 . -39) (undo-tree-id1106 . -39) (undo-tree-id1107 . -39) (undo-tree-id1108 . -39) (undo-tree-id1109 . -39) (undo-tree-id1110 . -39) (undo-tree-id1111 . -39) (undo-tree-id1112 . -39) (undo-tree-id1113 . -39) (undo-tree-id1114 . -39) (undo-tree-id1115 . -39) (undo-tree-id1116 . -39) (undo-tree-id1117 . -39) (undo-tree-id1118 . -39) (undo-tree-id1119 . -39) (undo-tree-id1120 . -39) (undo-tree-id1121 . -39) (undo-tree-id1122 . -39) (undo-tree-id1123 . -39) (undo-tree-id1124 . -39) (undo-tree-id1125 . -39) (undo-tree-id1126 . -39) (undo-tree-id1127 . -39) (undo-tree-id1128 . -39) (undo-tree-id1129 . -39) (undo-tree-id1130 . -39) (undo-tree-id1131 . -39) (undo-tree-id1132 . -39) (undo-tree-id1133 . -39) (undo-tree-id1134 . -38) (undo-tree-id1135 . -38) (undo-tree-id1136 . -38) (undo-tree-id1137 . -38) (undo-tree-id1138 . -38) (undo-tree-id1139 . -38) (undo-tree-id1140 . -38) (undo-tree-id1141 . -38) (75853 . 75903)) (25837 56812 301280 180000) 0 nil])
([nil nil ((#("t" 0 1 (part-side javascript)) . -76091) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (#("r" 0 1 (part-side javascript)) . -76092) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (#("e" 0 1 (part-side javascript)) . -76093) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (#("e" 0 1 (part-side javascript)) . -76094) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) 76095) nil (25837 56849 394262 19000) 0 nil])
([nil nil ((#("          this.filter_compare(this.filters[0], element.filter).then(res => {
" 0 10 (part-side javascript) 10 14 (face web-mode-constant-face part-side javascript) 14 15 (part-side javascript) 15 29 (face web-mode-function-call-face part-side javascript) 29 30 (face (rainbow-delimiters-depth-8-face) part-side javascript) 30 34 (face web-mode-constant-face part-side javascript) 34 42 (part-side javascript) 42 43 (face (rainbow-delimiters-depth-9-face) part-side javascript) 43 44 (part-side javascript) 44 45 (face (rainbow-delimiters-depth-9-face) part-side javascript) 45 61 (part-side javascript) 61 62 (face (rainbow-delimiters-depth-8-face) part-side javascript) 62 63 (part-side javascript) 63 67 (face web-mode-function-call-face part-side javascript) 67 68 (face (rainbow-delimiters-depth-8-face) part-side javascript) 68 71 (face web-mode-function-name-face part-side javascript) 71 75 (part-side javascript) 75 76 (face (rainbow-delimiters-depth-9-face) part-side javascript) 76 77 (part-side javascript)) . 75930) (75891 . 75930) (#("        this.save_filter_dialog = true
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 34 (part-side javascript) 34 38 (face web-mode-constant-face part-side javascript) 38 39 (part-side javascript)) . 75814) (undo-tree-id596 . -38) (75853 . 75930) 75852) ((#("          this.filter_compare(this.filters[0], element.filter).then(res => {
" 0 10 (part-side javascript) 10 14 (face web-mode-constant-face part-side javascript) 14 15 (part-side javascript) 15 29 (face web-mode-function-call-face part-side javascript) 29 30 (face (rainbow-delimiters-depth-6-face) part-side javascript) 30 34 (face web-mode-constant-face part-side javascript) 34 42 (part-side javascript) 42 43 (face (rainbow-delimiters-depth-7-face) part-side javascript) 43 44 (part-side javascript) 44 45 (face (rainbow-delimiters-depth-7-face) part-side javascript) 45 61 (part-side javascript) 61 62 (face (rainbow-delimiters-depth-6-face) part-side javascript) 62 63 (part-side javascript) 63 67 (face web-mode-function-call-face part-side javascript) 67 68 (face (rainbow-delimiters-depth-6-face) part-side javascript) 68 71 (face web-mode-function-name-face part-side javascript) 71 75 (part-side javascript) 75 76 (face (rainbow-delimiters-depth-7-face) part-side javascript) 76 77 (part-side javascript)) . 75853) (undo-tree-id990 . -77) (undo-tree-id991 . -77) (undo-tree-id992 . -77) (undo-tree-id993 . -77) (undo-tree-id994 . -77) (undo-tree-id995 . -77) (undo-tree-id996 . -77) (undo-tree-id997 . -77) (undo-tree-id998 . -77) (undo-tree-id999 . -77) (undo-tree-id1000 . -77) (undo-tree-id1001 . -77) (undo-tree-id1002 . -77) (undo-tree-id1003 . -77) (undo-tree-id1004 . -77) (undo-tree-id1005 . -77) (undo-tree-id1006 . -77) (undo-tree-id1007 . -77) (undo-tree-id1008 . -77) (undo-tree-id1009 . -77) (undo-tree-id1010 . -77) (undo-tree-id1011 . -77) (undo-tree-id1012 . -77) (undo-tree-id1013 . -77) (undo-tree-id1014 . -77) (undo-tree-id1015 . -77) (undo-tree-id1016 . -77) (undo-tree-id1017 . -77) (undo-tree-id1018 . -77) (undo-tree-id1019 . -77) (undo-tree-id1020 . -77) (undo-tree-id1021 . -77) (undo-tree-id1022 . -77) (undo-tree-id1023 . -77) (undo-tree-id1024 . -77) (undo-tree-id1025 . -77) (75814 . 75853) (#("        this.save_filter_dialog = true
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 34 (part-side javascript) 34 38 (face web-mode-constant-face part-side javascript) 38 39 (part-side javascript)) . 75891) (undo-tree-id1026 . -38) (undo-tree-id1027 . -39) (undo-tree-id1028 . -39) (undo-tree-id1029 . -39) (undo-tree-id1030 . -39) (undo-tree-id1031 . -39) (undo-tree-id1032 . -39) (undo-tree-id1033 . -39) (undo-tree-id1034 . -39) (undo-tree-id1035 . -39) (undo-tree-id1036 . -39) (undo-tree-id1037 . -39) (undo-tree-id1038 . -39) (undo-tree-id1039 . -39) (undo-tree-id1040 . -39) (undo-tree-id1041 . -39) (undo-tree-id1042 . -39) (undo-tree-id1043 . -39) (undo-tree-id1044 . -39) (undo-tree-id1045 . -39) (undo-tree-id1046 . -39) (undo-tree-id1047 . -39) (undo-tree-id1048 . -39) (undo-tree-id1049 . -39) (undo-tree-id1050 . -39) (undo-tree-id1051 . -38) (undo-tree-id1052 . -38) (undo-tree-id1053 . -38) (undo-tree-id1054 . -38) (undo-tree-id1055 . -38) (undo-tree-id1056 . -38) (undo-tree-id1057 . -38) (undo-tree-id1058 . -38) (75930 . 76007)) (25837 56812 103479 978000) 0 nil])
([nil nil ((76091 . 76106)) nil (25837 56849 394250 809000) 0 nil])
([nil nil ((#("            this.filter_score[element.id] = res
" 0 12 (part-side javascript) 12 16 (face web-mode-constant-face part-side javascript) 16 29 (part-side javascript) 29 30 (face (rainbow-delimiters-depth-8-face) part-side javascript) 30 40 (part-side javascript) 40 41 (face (rainbow-delimiters-depth-8-face) part-side javascript) 41 47 (part-side javascript) 47 48 (part-side javascript)) . 75978) (undo-tree-id595 . -47) (75939 . 75978) (#("        this.save_filter_dialog = true
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 34 (part-side javascript) 34 38 (face web-mode-constant-face part-side javascript) 38 39 (part-side javascript)) . 75891) (75930 . 75978) 75929) ((#("            this.filter_score[element.id] = res
" 0 12 (part-side javascript) 12 16 (face web-mode-constant-face part-side javascript) 16 29 (part-side javascript) 29 30 (face (rainbow-delimiters-depth-8-face) part-side javascript) 30 40 (part-side javascript) 40 41 (face (rainbow-delimiters-depth-8-face) part-side javascript) 41 47 (part-side javascript) 47 48 (part-side javascript)) . 75930) (undo-tree-id939 . -48) (undo-tree-id940 . -48) (undo-tree-id941 . -48) (undo-tree-id942 . -48) (undo-tree-id943 . -48) (undo-tree-id944 . -48) (undo-tree-id945 . -48) (undo-tree-id946 . -48) (undo-tree-id947 . -48) (undo-tree-id948 . -48) (undo-tree-id949 . -48) (undo-tree-id950 . -48) (undo-tree-id951 . -48) (undo-tree-id952 . -48) (undo-tree-id953 . -48) (undo-tree-id954 . -48) (undo-tree-id955 . -48) (undo-tree-id956 . -48) (undo-tree-id957 . -48) (undo-tree-id958 . -48) (undo-tree-id959 . -48) (undo-tree-id960 . -48) (undo-tree-id961 . -48) (undo-tree-id962 . -48) (undo-tree-id963 . -48) (undo-tree-id964 . -48) (75891 . 75930) (#("        this.save_filter_dialog = true
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 34 (part-side javascript) 34 38 (face web-mode-constant-face part-side javascript) 38 39 (part-side javascript)) . 75939) (undo-tree-id965 . -38) (undo-tree-id966 . -39) (undo-tree-id967 . -39) (undo-tree-id968 . -39) (undo-tree-id969 . -39) (undo-tree-id970 . -39) (undo-tree-id971 . -39) (undo-tree-id972 . -39) (undo-tree-id973 . -39) (undo-tree-id974 . -39) (undo-tree-id975 . -39) (undo-tree-id976 . -39) (undo-tree-id977 . -39) (undo-tree-id978 . -39) (undo-tree-id979 . -39) (undo-tree-id980 . -39) (undo-tree-id981 . -39) (undo-tree-id982 . -38) (undo-tree-id983 . -38) (undo-tree-id984 . -38) (undo-tree-id985 . -38) (undo-tree-id986 . -38) (undo-tree-id987 . -38) (undo-tree-id988 . -38) (undo-tree-id989 . -38) (75978 . 76026)) (25837 56811 928134 558000) 0 nil])
([nil nil ((76107 . 76109) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -76107) (76106 . 76108)) nil (25837 56849 394249 437000) 0 nil])
([nil nil ((#("          }).catch(error => {
" 0 10 (part-side javascript) 10 11 (face (rainbow-delimiters-depth-7-face) part-side javascript) 11 12 (face (rainbow-delimiters-depth-6-face) part-side javascript) 12 13 (part-side javascript) 13 18 (face web-mode-function-call-face part-side javascript) 18 19 (face (rainbow-delimiters-depth-6-face) part-side javascript) 19 24 (face web-mode-function-name-face part-side javascript) 24 28 (part-side javascript) 28 29 (face (rainbow-delimiters-depth-7-face) part-side javascript) 29 30 (part-side javascript)) . 76008) (75969 . 76008) (#("        this.save_filter_dialog = true
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 34 (part-side javascript) 34 38 (face web-mode-constant-face part-side javascript) 38 39 (part-side javascript)) . 75939) (undo-tree-id594 . -38) (75978 . 76008) 75977) ((#("          }).catch(error => {
" 0 10 (part-side javascript) 10 11 (face (rainbow-delimiters-depth-7-face) part-side javascript) 11 12 (face (rainbow-delimiters-depth-6-face) part-side javascript) 12 13 (part-side javascript) 13 18 (face web-mode-function-call-face part-side javascript) 18 19 (face (rainbow-delimiters-depth-6-face) part-side javascript) 19 24 (face web-mode-function-name-face part-side javascript) 24 28 (part-side javascript) 28 29 (face (rainbow-delimiters-depth-7-face) part-side javascript) 29 30 (part-side javascript)) . 75978) (undo-tree-id903 . -30) (undo-tree-id904 . -30) (undo-tree-id905 . -30) (undo-tree-id906 . -30) (undo-tree-id907 . -30) (undo-tree-id908 . -30) (undo-tree-id909 . -30) (undo-tree-id910 . -30) (undo-tree-id911 . -30) (undo-tree-id912 . -30) (undo-tree-id913 . -30) (undo-tree-id914 . -30) (undo-tree-id915 . -30) (undo-tree-id916 . -30) (undo-tree-id917 . -30) (undo-tree-id918 . -30) (undo-tree-id919 . -30) (undo-tree-id920 . -30) (undo-tree-id921 . -30) (75939 . 75978) (#("        this.save_filter_dialog = true
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 34 (part-side javascript) 34 38 (face web-mode-constant-face part-side javascript) 38 39 (part-side javascript)) . 75969) (undo-tree-id922 . -38) (undo-tree-id923 . -39) (undo-tree-id924 . -39) (undo-tree-id925 . -39) (undo-tree-id926 . -39) (undo-tree-id927 . -39) (undo-tree-id928 . -39) (undo-tree-id929 . -39) (undo-tree-id930 . -39) (undo-tree-id931 . -38) (undo-tree-id932 . -38) (undo-tree-id933 . -38) (undo-tree-id934 . -38) (undo-tree-id935 . -38) (undo-tree-id936 . -38) (undo-tree-id937 . -38) (undo-tree-id938 . -38) (76008 . 76038)) (25837 56811 753437 334000) 0 nil])
([nil nil ((76107 . 76117)) nil (25837 56849 394247 719000) 0 nil])
([nil nil ((#("            console.log(\"error\", error)
" 0 20 (part-side javascript) 20 23 (face web-mode-function-call-face part-side javascript) 23 24 (face (rainbow-delimiters-depth-8-face) part-side javascript) 24 25 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 25 30 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 30 31 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 31 38 (part-side javascript) 38 39 (face (rainbow-delimiters-depth-8-face) part-side javascript) 39 40 (part-side javascript)) . 76048) (undo-tree-id592 . -39) (76009 . 76048) (#("        this.save_filter_dialog = true
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 34 (part-side javascript) 34 38 (face web-mode-constant-face part-side javascript) 38 39 (part-side javascript)) . 75969) (undo-tree-id593 . -38) (76008 . 76048) 76007) ((#("            console.log(\"error\", error)
" 0 20 (part-side javascript) 20 23 (face web-mode-function-call-face part-side javascript) 23 24 (face (rainbow-delimiters-depth-8-face) part-side javascript) 24 25 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 25 30 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 30 31 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 31 38 (part-side javascript) 38 39 (face (rainbow-delimiters-depth-8-face) part-side javascript) 39 40 (part-side javascript)) . 76008) (undo-tree-id884 . -40) (undo-tree-id885 . -40) (undo-tree-id886 . -40) (undo-tree-id887 . -40) (undo-tree-id888 . -40) (undo-tree-id889 . -40) (undo-tree-id890 . -40) (undo-tree-id891 . -40) (undo-tree-id892 . -40) (undo-tree-id893 . -40) (75969 . 76008) (#("        this.save_filter_dialog = true
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 34 (part-side javascript) 34 38 (face web-mode-constant-face part-side javascript) 38 39 (part-side javascript)) . 76009) (undo-tree-id894 . -38) (undo-tree-id895 . -39) (undo-tree-id896 . -38) (undo-tree-id897 . -38) (undo-tree-id898 . -38) (undo-tree-id899 . -38) (undo-tree-id900 . -38) (undo-tree-id901 . -38) (undo-tree-id902 . -38) (76048 . 76088)) (25837 56811 502444 470000) 0 nil])
([nil nil ((76118 . 76121)) nil (25837 56849 394246 743000) 0 nil])
([nil nil ((#("          })
" 0 10 (part-side javascript) 10 11 (face (rainbow-delimiters-depth-5-face) part-side javascript) 11 12 (face (rainbow-delimiters-depth-4-face) part-side javascript) 12 13 (part-side javascript)) . 76061) (76022 . 76061) (#("        this.save_filter_dialog = true
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 34 (part-side javascript) 34 38 (face web-mode-constant-face part-side javascript) 38 39 (part-side javascript)) . 76009) (undo-tree-id591 . -38) (76048 . 76061) 76047) ((#("          })
" 0 10 (part-side javascript) 10 11 (face (rainbow-delimiters-depth-7-face) part-side javascript) 11 12 (face (rainbow-delimiters-depth-6-face) part-side javascript) 12 13 (part-side javascript)) . 76048) (undo-tree-id750 . -13) (undo-tree-id751 . -13) (undo-tree-id752 . -13) (undo-tree-id753 . -13) (undo-tree-id754 . -13) (undo-tree-id755 . -13) (undo-tree-id756 . -13) (undo-tree-id757 . -13) (undo-tree-id758 . -13) (undo-tree-id759 . -13) (undo-tree-id760 . -13) (undo-tree-id761 . -13) (undo-tree-id762 . -13) (undo-tree-id763 . -13) (undo-tree-id764 . -13) (undo-tree-id765 . -13) (undo-tree-id766 . -13) (undo-tree-id767 . -13) (undo-tree-id768 . -13) (undo-tree-id769 . -13) (undo-tree-id770 . -13) (undo-tree-id771 . -13) (undo-tree-id772 . -13) (undo-tree-id773 . -13) (undo-tree-id774 . -13) (undo-tree-id775 . -13) (undo-tree-id776 . -13) (undo-tree-id777 . -13) (undo-tree-id778 . -13) (undo-tree-id779 . -13) (undo-tree-id780 . -13) (undo-tree-id781 . -13) (undo-tree-id782 . -13) (undo-tree-id783 . -13) (undo-tree-id784 . -13) (undo-tree-id785 . -13) (undo-tree-id786 . -13) (undo-tree-id787 . -13) (undo-tree-id788 . -13) (undo-tree-id789 . -13) (undo-tree-id790 . -13) (undo-tree-id791 . -13) (undo-tree-id792 . -13) (undo-tree-id793 . -13) (undo-tree-id794 . -13) (undo-tree-id795 . -13) (undo-tree-id796 . -13) (undo-tree-id797 . -13) (undo-tree-id798 . -13) (undo-tree-id799 . -13) (undo-tree-id800 . -13) (undo-tree-id801 . -13) (undo-tree-id802 . -13) (undo-tree-id803 . -13) (undo-tree-id804 . -13) (undo-tree-id805 . -13) (undo-tree-id806 . -13) (undo-tree-id807 . -13) (undo-tree-id808 . -13) (undo-tree-id809 . -13) (undo-tree-id810 . -13) (undo-tree-id811 . -13) (undo-tree-id812 . -13) (undo-tree-id813 . -13) (undo-tree-id814 . -13) (undo-tree-id815 . -13) (undo-tree-id816 . -13) (undo-tree-id817 . -13) (76009 . 76048) (#("        this.save_filter_dialog = true
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 34 (part-side javascript) 34 38 (face web-mode-constant-face part-side javascript) 38 39 (part-side javascript)) . 76022) (undo-tree-id818 . -38) (undo-tree-id819 . -39) (undo-tree-id820 . -39) (undo-tree-id821 . -39) (undo-tree-id822 . -39) (undo-tree-id823 . -39) (undo-tree-id824 . -39) (undo-tree-id825 . -39) (undo-tree-id826 . -39) (undo-tree-id827 . -39) (undo-tree-id828 . -39) (undo-tree-id829 . -39) (undo-tree-id830 . -39) (undo-tree-id831 . -39) (undo-tree-id832 . -39) (undo-tree-id833 . -39) (undo-tree-id834 . -39) (undo-tree-id835 . -39) (undo-tree-id836 . -39) (undo-tree-id837 . -39) (undo-tree-id838 . -39) (undo-tree-id839 . -39) (undo-tree-id840 . -39) (undo-tree-id841 . -39) (undo-tree-id842 . -39) (undo-tree-id843 . -39) (undo-tree-id844 . -39) (undo-tree-id845 . -39) (undo-tree-id846 . -39) (undo-tree-id847 . -39) (undo-tree-id848 . -39) (undo-tree-id849 . -39) (undo-tree-id850 . -39) (undo-tree-id851 . -39) (undo-tree-id852 . -39) (undo-tree-id853 . -39) (undo-tree-id854 . -39) (undo-tree-id855 . -39) (undo-tree-id856 . -39) (undo-tree-id857 . -39) (undo-tree-id858 . -39) (undo-tree-id859 . -39) (undo-tree-id860 . -39) (undo-tree-id861 . -39) (undo-tree-id862 . -39) (undo-tree-id863 . -39) (undo-tree-id864 . -39) (undo-tree-id865 . -39) (undo-tree-id866 . -39) (undo-tree-id867 . -39) (undo-tree-id868 . -38) (undo-tree-id869 . -38) (undo-tree-id870 . -38) (undo-tree-id871 . -38) (undo-tree-id872 . -38) (undo-tree-id873 . -38) (undo-tree-id874 . -38) (undo-tree-id875 . -38) (undo-tree-id876 . -38) (undo-tree-id877 . -38) (undo-tree-id878 . -38) (undo-tree-id879 . -38) (undo-tree-id880 . -38) (undo-tree-id881 . -38) (undo-tree-id882 . -38) (undo-tree-id883 . -38) (76061 . 76074)) (25837 56810 996286 537000) 0 nil])
([nil nil ((#("i" 0 1 (part-side javascript)) . -76120) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) 76121) nil (25837 56849 394245 373000) 0 nil])
([nil nil ((#("        })
" 0 8 (part-side javascript) 8 9 (face (rainbow-delimiters-depth-3-face) part-side javascript) 9 10 (face (rainbow-delimiters-mismatched-face) part-side javascript) 10 11 (part-side javascript)) . 76072) (76033 . 76072) (#("        this.save_filter_dialog = true
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 34 (part-side javascript) 34 38 (face web-mode-constant-face part-side javascript) 38 39 (part-side javascript)) . 76022) (undo-tree-id590 . -38) (76061 . 76072) 76060) ((#("        })
" 0 8 (part-side javascript) 8 9 (face (rainbow-delimiters-depth-5-face) part-side javascript) 9 10 (face (rainbow-delimiters-depth-4-face) part-side javascript) 10 11 (part-side javascript)) . 76061) (undo-tree-id649 . -11) (undo-tree-id650 . -11) (undo-tree-id651 . -11) (undo-tree-id652 . -11) (undo-tree-id653 . -11) (undo-tree-id654 . -11) (undo-tree-id655 . -11) (undo-tree-id656 . -11) (undo-tree-id657 . -11) (undo-tree-id658 . -11) (undo-tree-id659 . -11) (undo-tree-id660 . -11) (undo-tree-id661 . -11) (undo-tree-id662 . -11) (undo-tree-id663 . -11) (undo-tree-id664 . -11) (undo-tree-id665 . -11) (undo-tree-id666 . -11) (undo-tree-id667 . -11) (undo-tree-id668 . -11) (undo-tree-id669 . -11) (undo-tree-id670 . -11) (undo-tree-id671 . -11) (undo-tree-id672 . -11) (undo-tree-id673 . -11) (undo-tree-id674 . -11) (undo-tree-id675 . -11) (undo-tree-id676 . -11) (undo-tree-id677 . -11) (undo-tree-id678 . -11) (undo-tree-id679 . -11) (undo-tree-id680 . -11) (undo-tree-id681 . -11) (undo-tree-id682 . -11) (undo-tree-id683 . -11) (undo-tree-id684 . -11) (undo-tree-id685 . -11) (undo-tree-id686 . -11) (undo-tree-id687 . -11) (undo-tree-id688 . -11) (undo-tree-id689 . -11) (undo-tree-id690 . -11) (undo-tree-id691 . -11) (undo-tree-id692 . -11) (undo-tree-id693 . -11) (undo-tree-id694 . -11) (undo-tree-id695 . -11) (undo-tree-id696 . -11) (undo-tree-id697 . -11) (undo-tree-id698 . -11) (undo-tree-id699 . -11) (76022 . 76061) (#("        this.save_filter_dialog = true
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 34 (part-side javascript) 34 38 (face web-mode-constant-face part-side javascript) 38 39 (part-side javascript)) . 76033) (undo-tree-id700 . -38) (undo-tree-id701 . -39) (undo-tree-id702 . -38) (undo-tree-id703 . -38) (undo-tree-id704 . -38) (undo-tree-id705 . -38) (undo-tree-id706 . -38) (undo-tree-id707 . -38) (undo-tree-id708 . -38) (undo-tree-id709 . -38) (undo-tree-id710 . -38) (undo-tree-id711 . -38) (undo-tree-id712 . -38) (undo-tree-id713 . -38) (undo-tree-id714 . -38) (undo-tree-id715 . -38) (undo-tree-id716 . -38) (undo-tree-id717 . -38) (undo-tree-id718 . -38) (undo-tree-id719 . -38) (undo-tree-id720 . -38) (undo-tree-id721 . -38) (undo-tree-id722 . -38) (undo-tree-id723 . -38) (undo-tree-id724 . -38) (undo-tree-id725 . -38) (undo-tree-id726 . -38) (undo-tree-id727 . -38) (undo-tree-id728 . -38) (undo-tree-id729 . -38) (undo-tree-id730 . -38) (undo-tree-id731 . -38) (undo-tree-id732 . -38) (undo-tree-id733 . -38) (undo-tree-id734 . -38) (undo-tree-id735 . -38) (undo-tree-id736 . -38) (undo-tree-id737 . -38) (undo-tree-id738 . -38) (undo-tree-id739 . -38) (undo-tree-id740 . -38) (undo-tree-id741 . -38) (undo-tree-id742 . -38) (undo-tree-id743 . -38) (undo-tree-id744 . -38) (undo-tree-id745 . -38) (undo-tree-id746 . -38) (undo-tree-id747 . -38) (undo-tree-id748 . -38) (undo-tree-id749 . -38) (76072 . 76083)) (25837 56810 190553 894000) 0 nil])
([nil nil ((76120 . 76123)) nil (25837 56849 394241 380000) 0 nil])
([nil nil ((76071 . 76080)) ((#("
        " 0 1 (part-side javascript) 1 9 (part-side javascript)) . 76071) (undo-tree-id623 . -9) (undo-tree-id624 . -1) (undo-tree-id625 . -9) (undo-tree-id626 . -9) (undo-tree-id627 . -9) (undo-tree-id628 . -9) (undo-tree-id629 . -9) (undo-tree-id630 . -9) (undo-tree-id631 . -9) (undo-tree-id632 . -9) (undo-tree-id633 . -9) (undo-tree-id634 . -9) (undo-tree-id635 . -9) (undo-tree-id636 . -9) (undo-tree-id637 . -9) (undo-tree-id638 . -9) (undo-tree-id639 . -9) (undo-tree-id640 . -9) (undo-tree-id641 . -9) (undo-tree-id642 . -9) (undo-tree-id643 . -9) (undo-tree-id644 . -9) (undo-tree-id645 . -9) (undo-tree-id646 . -9) (undo-tree-id647 . -9) (undo-tree-id648 . -9)) (25837 56809 691789 744000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -76122) (undo-tree-id1359 . -1) 76123) nil (25837 56849 394239 488000) 0 nil])
([nil nil ((76080 . 76086)) ((#("this. " 0 4 (face web-mode-constant-face part-side javascript) 4 5 (part-side javascript) 5 6 (part-side javascript)) . 76080) (undo-tree-id609 . -6) (undo-tree-id610 . -5) (undo-tree-id611 . -6) (undo-tree-id612 . -6) (undo-tree-id613 . -6) (undo-tree-id614 . -6) (undo-tree-id615 . -6) (undo-tree-id616 . -6) (undo-tree-id617 . -6) (undo-tree-id618 . -6) (undo-tree-id619 . -6) (undo-tree-id620 . -6) (undo-tree-id621 . -6) (undo-tree-id622 . -6)) (25837 56809 405975 860000) 0 nil])
([nil nil ((#("T" 0 1 (part-side javascript)) . 76118) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1)) nil (25837 56849 394235 159000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -76085) (undo-tree-id589 . -1) 76086) ((76085 . 76086)) (25837 56809 404015 489000) 0 nil])
([nil nil ((76118 . 76119)) nil (25837 56849 394216 263000) 0 nil])
nil
([nil nil ((#("save_filter_tree" 0 16 (part-side javascript)) . 76091) (undo-tree-id1370 . -16) (undo-tree-id1371 . -5) (undo-tree-id1372 . -2) (undo-tree-id1373 . -16) (undo-tree-id1374 . -16) (t 25837 56849 444808 962000)) nil (25837 56911 481802 258000) 0 nil])
([nil nil ((nil rear-nonsticky nil 76106 . 76107) (nil part-side javascript 76091 . 76107) (76091 . 76107)) nil (25837 56919 634522 351000) 0 nil] [nil nil ((nil rear-nonsticky nil 76100 . 76101) (nil part-side javascript 76100 . 76101) (nil part-token string 76100 . 76101) (nil syntax-table (15) 76100 . 76101) (nil font-lock-face web-mode-javascript-string-face 76100 . 76101) (nil part-side javascript 76096 . 76100) (nil part-token string 76096 . 76100) (nil font-lock-face web-mode-javascript-string-face 76096 . 76100) (nil part-side javascript 76095 . 76096) (nil part-token string 76095 . 76096) (nil syntax-table (15) 76095 . 76096) (nil font-lock-face web-mode-javascript-string-face 76095 . 76096) (nil part-side javascript 76091 . 76095) (76091 . 76101)) ((#("ref=\"tree\"" 0 4 (part-side javascript) 4 5 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 5 9 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 9 10 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript rear-nonsticky nil)) . 76091) (undo-tree-id1375 . -10) (nil syntax-table (15) 76095 . 76096) (nil syntax-table (15) 76100 . 76101) (nil rear-nonsticky t 76100 . 76101)) (25837 56911 477103 72000) 0 nil])
([nil nil ((#("this.$refs.save_filter_tree.updateAll(true)" 0 4 (face web-mode-constant-face part-side javascript) 4 11 (part-side javascript) 11 26 (part-side javascript) 26 27 (part-side javascript rear-nonsticky t) 27 28 (part-side javascript) 28 37 (face web-mode-function-call-face part-side javascript) 37 38 (face (rainbow-delimiters-depth-4-face) part-side javascript) 38 39 (face web-mode-constant-face part-side javascript) 39 42 (face web-mode-constant-face part-side javascript) 42 43 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . 76080) (undo-tree-id1440 . -43) (undo-tree-id1441 . -11) (undo-tree-id1442 . -11) (undo-tree-id1443 . -11) (undo-tree-id1444 . -11) (undo-tree-id1445 . -11) (undo-tree-id1446 . -43) (t 25837 56919 685944 359000)) nil (25837 56971 711671 928000) 0 nil])
nil
([nil nil ((#("
" 0 1 (part-side javascript)) . -76071) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (#(" " 0 1 (part-side javascript)) . -76072) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (#(" " 0 1 (part-side javascript)) . -76073) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (#(" " 0 1 (part-side javascript)) . -76074) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (#(" " 0 1 (part-side javascript)) . -76075) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (#(" " 0 1 (part-side javascript)) . -76076) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (#(" " 0 1 (part-side javascript)) . -76077) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (#(" " 0 1 (part-side javascript)) . -76078) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (#(" " 0 1 (part-side javascript)) . -76079) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) 76080) nil (25837 56971 717315 751000) 0 nil])
([nil nil ((75706 . 75715)) nil (25837 56998 544836 731000) 0 nil] [nil nil ((75668 . 75676) (#("        " 0 8 (face whitespace-trailing part-side javascript)) . 75667) (75667 . 75675) (75667 . 75668)) ((#("
" 0 1 (part-side javascript)) . 75667) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . 1) (#("        " 0 8 (face whitespace-trailing part-side javascript)) . 75667) (undo-tree-id1450 . 8) (75667 . 75675) (#("        " 0 8 (part-side javascript)) . 75668) (undo-tree-id1451 . -8)) (25837 56971 711569 469000) 0 nil])
([nil nil ((nil rear-nonsticky nil 75757 . 75758) (nil part-side javascript 75757 . 75758) (nil face (rainbow-delimiters-depth-4-face) 75757 . 75758) (nil part-side javascript 75754 . 75757) (nil face web-mode-constant-face 75754 . 75757) (nil part-side javascript 75753 . 75754) (nil face web-mode-constant-face 75753 . 75754) (nil part-side javascript 75752 . 75753) (nil face (rainbow-delimiters-depth-4-face) 75752 . 75753) (nil part-side javascript 75743 . 75752) (nil face web-mode-function-call-face 75743 . 75752) (nil part-side javascript 75742 . 75743) (nil rear-nonsticky t 75741 . 75742) (nil part-side javascript 75741 . 75742) (nil part-side javascript 75726 . 75741) (nil part-side javascript 75719 . 75726) (nil part-side javascript 75715 . 75719) (nil face web-mode-constant-face 75715 . 75719) (75715 . 75758)) nil (25837 56998 544834 771000) 0 nil])
nil
([nil nil ((#("t" 0 1 (part-side javascript)) . -75753) (undo-tree-id1463 . -1) (#("r" 0 1 (part-side javascript)) . -75754) (undo-tree-id1464 . -1) (#("u" 0 1 (part-side javascript)) . -75755) (undo-tree-id1465 . -1) (#("e" 0 1 (face web-mode-constant-face part-side javascript)) . -75756) (undo-tree-id1466 . -1) 75757) nil (25837 56998 544829 381000) 0 nil])
([nil nil ((75753 . 75759)) nil (25837 56998 544821 430000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -75758) (undo-tree-id1462 . -1) 75759) nil (25837 56998 544820 348000) 0 nil])
([nil nil ((75706 . 75715)) nil (25837 56998 544818 104000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) part-side javascript)) . 75720) (75719 . 75720) (75718 . 75720) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -75718) (75715 . 75719)) nil (25837 56998 544816 686000) 0 nil])
([nil nil ((75719 . 75721)) nil (25837 56998 544814 886000) 0 nil])
([nil nil ((75720 . 75736)) nil (25837 56998 544813 773000) 0 nil])
([nil nil ((75736 . 75737)) nil (25837 56998 544812 818000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . -75736) (undo-tree-id1461 . -1) 75737) nil (25837 56998 544811 421000) 0 nil])
([nil nil ((75737 . 75741)) nil (25837 56998 544809 90000) 0 nil])
([nil nil ((nil rear-nonsticky nil 75750 . 75751) (nil part-side javascript 75745 . 75751) (nil part-side javascript 75741 . 75745) (nil face web-mode-constant-face 75741 . 75745) (75741 . 75751)) nil (25837 56998 544807 850000) 0 nil])
([nil nil ((75753 . 75755) (#("{" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -75753) (75752 . 75754)) nil (25837 56998 544805 877000) 0 nil])
([nil nil ((75756 . 75764) (#("          " 0 10 (face whitespace-trailing part-side javascript)) . 75755) (undo-tree-id1459 . -8) (undo-tree-id1460 . 10) (75763 . 75765) (75754 . 75764)) nil (25837 56998 544804 84000) 0 nil])
([nil nil ((#("        this.$refs.save_filter_tree.updateAll(false)
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 36 (part-side javascript) 36 45 (face web-mode-function-call-face part-side javascript) 45 46 (face (rainbow-delimiters-depth-4-face) part-side javascript) 46 51 (face web-mode-constant-face part-side javascript) 51 52 (face (rainbow-delimiters-depth-4-face) part-side javascript rear-nonsticky t) 52 53 (part-side javascript)) . 75819) (undo-tree-id1455 . -8) (undo-tree-id1456 . -53) (undo-tree-id1457 . -8) (undo-tree-id1458 . -18) (75809 . 75819) (#("        }
" 0 8 (part-side javascript) 8 9 (face (rainbow-delimiters-depth-4-face) part-side javascript) 9 10 (part-side javascript)) . 75756) (75766 . 75819) 75774) nil (25837 56998 544798 925000) 0 nil])
([nil nil ((#("        this.$refs.save_filter_tree.updateAll(false)
" 0 8 (part-side javascript) 8 12 (face web-mode-constant-face part-side javascript) 12 36 (part-side javascript) 36 45 (face web-mode-function-call-face part-side javascript) 45 46 (face (rainbow-delimiters-depth-5-face) part-side javascript) 46 51 (face web-mode-constant-face part-side javascript) 51 52 (face (rainbow-delimiters-depth-5-face) part-side javascript rear-nonsticky t) 52 53 (part-side javascript)) . 75809) (undo-tree-id1453 . -8) (undo-tree-id1454 . -53) (75808 . 75809) (#("
" 0 1 (part-side javascript)) . 75755) (75756 . 75809) 75764) nil (25837 56998 544790 815000) 0 nil])
([nil nil ((75763 . 75765)) nil (25837 56998 544784 932000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . 75810) (undo-tree-id1452 . -1)) nil (25837 56998 544779 189000) 0 nil])
([nil nil ((#("
          console.log('Error in filter')" 0 19 (part-side javascript) 19 22 (face web-mode-function-call-face part-side javascript) 22 23 (face (rainbow-delimiters-depth-6-face) part-side javascript) 23 24 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 24 30 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 30 32 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 32 39 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 39 40 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 40 41 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . 71367) (undo-tree-id1469 . -41) (undo-tree-id1470 . -1) (undo-tree-id1471 . -41) (t 25837 56998 599215 457000)) nil (25837 58385 106327 517000) 0 nil])
([nil nil ((#("\"error\", " 0 1 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 1 6 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript) 6 7 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript) 7 9 (part-side javascript)) . 76104) (undo-tree-id1467 . -9) (undo-tree-id1468 . -9)) nil (25837 58385 106317 593000) 0 nil])
([nil nil ((75406 . 75407) (t 25837 58385 157015 33000)) nil (25837 58484 436279 398000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -75406) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) 75407) nil (25837 58484 436275 211000) 0 nil])
([nil nil ((75405 . 75406)) nil (25837 58484 436237 227000) 0 nil])
([nil nil ((38468 . 38484) (t 25837 64763 947260 404000)) nil (25838 292 730019 314000) 0 nil])
([nil nil ((38482 . 38490)) nil (25838 292 730017 750000) 0 nil])
([nil nil ((38490 . 38499)) nil (25838 292 730016 573000) 0 nil])
([nil nil ((38499 . 38506)) nil (25838 292 730014 677000) 0 nil])
([nil nil ((#("F" 0 1 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face)) . -38500) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (#("a" 0 1 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face)) . -38501) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (#("l" 0 1 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face)) . -38502) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#("s" 0 1 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face)) . -38503) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("e" 0 1 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face)) . -38504) (undo-tree-id9 . -1) (#(" " 0 1 (block-side t tag-attr t tag-name "osintpopup" tag-type start)) . -38505) (undo-tree-id10 . -1) 38506) nil (25838 292 730004 457000) 0 nil])
([nil nil ((38500 . 38506)) nil (25838 292 729962 716000) 0 nil])
([nil nil ((#(" " 0 1 (block-side t tag-attr t tag-name "osintpopup" tag-type start)) . -38505) (undo-tree-id0 . -1) 38506) nil (25838 292 729955 213000) 0 nil])
([nil nil ((#("displayOsintpopup=false" 0 1 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 1 2 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 2 3 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 3 4 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 4 5 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 5 6 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 6 7 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 7 8 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 8 9 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 9 10 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 10 11 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 11 12 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 12 13 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 13 14 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 14 15 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 15 16 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 16 17 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 17 18 (block-side t tag-attr t tag-name "osintpopup" tag-type start) 18 19 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 19 20 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 20 21 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 21 22 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face) 22 23 (block-side t tag-attr t tag-name "osintpopup" tag-type start face web-mode-variable-name-face)) . 38482) (undo-tree-id12 . -23) (undo-tree-id13 . -23) (t 25838 292 787548 947000)) nil (25838 424 416387 747000) 0 nil])
([nil nil ((38482 . 38493)) nil (25838 424 416384 10000) 0 nil])
([nil nil ((#(" " 0 1 (block-side t tag-attr t tag-name "osintpopup" tag-type start)) . -38492) (undo-tree-id11 . -1) 38493) nil (25838 424 416382 604000) 0 nil])
([nil nil ((38492 . 38494) (#("(" 0 1 (block-side t tag-attr t tag-name "osintpopup" tag-type start)) . -38492) (38492 . 38493)) nil (25838 424 416371 770000) 0 nil])
([nil nil ((51748 . 51755)) nil (25838 424 419493 281000) 0 nil])
([nil nil ((51755 . 51776)) nil (25838 464 189240 92000) 0 nil] [nil nil ((nil rear-nonsticky nil 51777 . 51778) (nil part-side javascript 51777 . 51778) (nil face web-mode-constant-face 51777 . 51778) (nil part-side javascript 51776 . 51777) (nil face web-mode-constant-face 51776 . 51777) (nil part-side javascript 51775 . 51776) (nil face web-mode-constant-face 51775 . 51776) (nil part-side javascript 51774 . 51775) (nil face web-mode-constant-face 51774 . 51775) (nil part-side javascript 51773 . 51774) (nil face web-mode-constant-face 51773 . 51774) (nil part-side javascript 51772 . 51773) (nil part-side javascript 51771 . 51772) (nil part-side javascript 51770 . 51771) (nil part-side javascript 51769 . 51770) (nil part-side javascript 51768 . 51769) (nil part-side javascript 51767 . 51768) (nil part-side javascript 51766 . 51767) (nil part-side javascript 51765 . 51766) (nil part-side javascript 51764 . 51765) (nil part-side javascript 51763 . 51764) (nil part-side javascript 51762 . 51763) (nil part-side javascript 51761 . 51762) (nil part-side javascript 51760 . 51761) (nil part-side javascript 51759 . 51760) (nil part-side javascript 51758 . 51759) (nil part-side javascript 51757 . 51758) (nil part-side javascript 51756 . 51757) (nil part-side javascript 51755 . 51756) (51755 . 51778)) ((#("displayOsintpopup=false" 0 18 (part-side javascript) 18 22 (part-side javascript face web-mode-constant-face) 22 23 (rear-nonsticky nil part-side javascript face web-mode-constant-face)) . 51755) (undo-tree-id14 . -23) (nil rear-nonsticky t 51777 . 51778)) (25838 424 416361 590000) 0 nil])
([nil nil ((51776 . 51781)) nil (25838 464 189239 131000) 0 nil])
nil
([nil nil ((#(" " 0 1 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face)) . -51780) (undo-tree-id33 . -1) 51781) nil (25838 464 189237 986000) 0 nil])
([nil nil ((51782 . 51788) (#("      " 0 6 (part-side javascript)) . 51781) (undo-tree-id32 . -6) (51780 . 51788)) nil (25838 464 189235 587000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . 51781) (undo-tree-id31 . -1)) nil (25838 464 189233 86000) 0 nil])
([nil nil ((51787 . 51793)) nil (25838 464 189231 99000) 0 nil])
([nil nil ((#("_" 0 1 (part-side javascript)) . -51792) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 51793) nil (25838 464 189229 749000) 0 nil])
([nil nil ((51797 . 51799) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-3-face))) . -51797) (51792 . 51798)) nil (25838 464 189226 367000) 0 nil])
([nil nil ((51800 . 51802) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-3-face))) . -51800) (51799 . 51801)) nil (25838 464 189224 754000) 0 nil])
([nil nil ((51803 . 51809) (#("        " 0 8 (part-side javascript face whitespace-trailing)) . 51802) (undo-tree-id27 . 8) (51802 . 51810) (#("      " 0 6 (part-side javascript)) . 51802) (undo-tree-id28 . -6) (51801 . 51809)) nil (25838 464 189222 781000) 0 nil])
([nil nil ((51802 . 51810)) nil (25838 464 189218 813000) 0 nil])
([nil nil ((51823 . 51827) (51822 . 51824) (#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . -51822) (51822 . 51823) (51821 . 51823) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -51821) (51810 . 51822)) nil (25838 464 189217 347000) 0 nil])
([nil nil ((51829 . 51838)) nil (25838 464 189215 143000) 0 nil])
([nil nil ((51838 . 51840)) nil (25838 464 189214 241000) 0 nil])
([nil nil ((51840 . 51849)) nil (25838 464 189213 253000) 0 nil])
([nil nil ((51843 . 51860) (#("displa" 0 6 (part-side javascript)) . -51843) (undo-tree-id24 . -3) (undo-tree-id25 . -6) (undo-tree-id26 . -6) 51849) nil (25838 464 189211 671000) 0 nil])
([nil nil ((51860 . 51869)) nil (25838 464 189206 355000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -51868) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 51869) nil (25838 464 189201 81000) 0 nil])
([nil nil ((51876 . 51877) (t 25838 464 250189 286000)) nil (25838 472 798828 28000) 0 nil])
([nil nil ((#("
        console.log(\"HEYO\")" 0 1 (part-side javascript) 1 17 (part-side javascript) 17 20 (part-side javascript face web-mode-function-call-face) 20 21 (part-side javascript face (rainbow-delimiters-depth-4-face)) 21 22 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 22 26 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 26 27 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 27 28 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 51801) (undo-tree-id34 . -28) (undo-tree-id35 . -1) (undo-tree-id36 . -28) (t 25838 472 854321 828000)) nil (25845 57356 445406 972000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t)) . 6177) (t 25845 57358 680455 362000)) nil (25845 57361 695292 215000) 0 nil] [nil nil ((#("
          center-active" 0 11 (tag-type start tag-name "v-tabs") 11 12 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t tag-attr-beg 0) 12 23 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 23 24 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr-end 0 tag-attr t)) . 6227) (undo-tree-id4 . -1) (undo-tree-id5 . -24) (undo-tree-id7 . -24) (undo-tree-id8 . -24)) ((6227 . 6251)) (25845 57356 25512 813000) 0 nil] [nil nil ((#("
          center-active" 0 11 (tag-type start tag-name "v-tabs") 11 12 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t tag-attr-beg 0) 12 23 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 23 24 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr-end 0 tag-attr t)) . 6227) (undo-tree-id0 . -1) (undo-tree-id1 . -24) (undo-tree-id2 . -24) (undo-tree-id3 . -24) (t 25838 494 414653 972000)) ((6227 . 6251) (t 25845 51981 504832 837000)) (25845 51981 410027 249000) 0 nil])
([nil nil ((#("
          dense" 0 11 (tag-name "v-tabs" tag-type start) 11 12 (tag-attr-beg 0 tag-attr t tag-name "v-tabs" tag-type start font-lock-face web-mode-html-attr-name-face) 12 15 (tag-attr t tag-name "v-tabs" tag-type start font-lock-face web-mode-html-attr-name-face) 15 16 (tag-attr t tag-attr-end 0 tag-name "v-tabs" tag-type start font-lock-face web-mode-html-attr-name-face)) . 6250) (undo-tree-id0 . -1) (undo-tree-id1 . -16) (undo-tree-id2 . -16) (undo-tree-id3 . -16) (t 25845 57361 744456 705000)) nil (25846 56163 605993 983000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t)) . 6177) (t 25845 52219 585265 881000)) ((6177 . 6178)) (25845 57355 316875 9000) 0 nil])
nil
([nil nil ((#(" - <span class=\"pl-1 primary--text\"> {{item.id in filter_score ? filter_score[item.id] + '%' : ''}}</span>" 3 4 (font-lock-face web-mode-html-tag-bracket-face tag-beg 17 tag-type start tag-name "span") 4 8 (font-lock-face web-mode-html-tag-face tag-type start tag-name "span") 8 9 (tag-type start tag-name "span") 9 10 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "span" tag-attr t tag-attr-beg 0) 10 14 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "span" tag-attr t) 14 15 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "span" tag-attr t) 15 34 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "span" tag-attr t) 34 35 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "span" tag-attr-end 5 tag-attr t) 35 36 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "span") 37 38 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 38 39 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (face web-mode-variable-name-face block-side t) 43 44 (block-side t) 44 45 (face web-mode-variable-name-face block-side t) 45 46 (face web-mode-variable-name-face block-side t) 46 47 (block-side t) 47 48 (face web-mode-variable-name-face block-side t) 48 49 (face web-mode-variable-name-face block-side t) 49 50 (block-side t) 50 51 (face web-mode-variable-name-face block-side t) 51 52 (face web-mode-variable-name-face block-side t) 52 53 (face web-mode-variable-name-face block-side t) 53 54 (face web-mode-variable-name-face block-side t) 54 55 (face web-mode-variable-name-face block-side t) 55 56 (face web-mode-variable-name-face block-side t) 56 57 (face web-mode-variable-name-face block-side t) 57 58 (face web-mode-variable-name-face block-side t) 58 59 (face web-mode-variable-name-face block-side t) 59 60 (face web-mode-variable-name-face block-side t) 60 61 (face web-mode-variable-name-face block-side t) 61 62 (face web-mode-variable-name-face block-side t) 62 65 (block-side t) 65 66 (face web-mode-variable-name-face block-side t) 66 67 (face web-mode-variable-name-face block-side t) 67 68 (face web-mode-variable-name-face block-side t) 68 69 (face web-mode-variable-name-face block-side t) 69 70 (face web-mode-variable-name-face block-side t) 70 71 (face web-mode-variable-name-face block-side t) 71 72 (face web-mode-variable-name-face block-side t) 72 73 (face web-mode-variable-name-face block-side t) 73 74 (face web-mode-variable-name-face block-side t) 74 75 (face web-mode-variable-name-face block-side t) 75 76 (face web-mode-variable-name-face block-side t) 76 77 (face web-mode-variable-name-face block-side t) 77 78 (face (rainbow-delimiters-depth-3-face) block-side t) 78 79 (face web-mode-variable-name-face block-side t) 79 80 (face web-mode-variable-name-face block-side t) 80 81 (face web-mode-variable-name-face block-side t) 81 82 (face web-mode-variable-name-face block-side t) 82 83 (block-side t) 83 84 (face web-mode-variable-name-face block-side t) 84 85 (face web-mode-variable-name-face block-side t) 85 86 (face (rainbow-delimiters-depth-3-face) block-side t) 86 97 (block-side t) 97 98 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-side t) 98 99 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t) 99 100 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "span") 100 101 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "span") 101 105 (font-lock-face web-mode-html-tag-face tag-type end tag-name "span") 105 106 (face (whitespace-line web-mode-html-tag-bracket-face) font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "span")) . 29998) (undo-tree-id140 . -106) (undo-tree-id141 . -106) (t 25846 56163 703867 563000)) nil (25860 33509 896968 388000) 0 nil])
([nil nil ((6136 . 6137)) ((#(" " 0 1 (tag-type start tag-name "v-row")) . 6136) (t 25845 57313 948436 953000)) (25845 57312 542348 925000) 0 nil])
([nil nil ((#("this.filter_compare" 0 4 (face web-mode-constant-face part-side javascript) 4 5 (part-side javascript) 5 19 (face web-mode-function-call-face part-side javascript)) . 75942) (undo-tree-id138 . -19) (undo-tree-id139 . -19)) nil (25860 33509 896964 554000) 0 nil])
([nil nil ((6243 . 6254)) ((#("
          " 0 1 (tag-type start tag-name "v-tabs") 1 11 (tag-type start tag-name "v-tabs")) . 6243) (undo-tree-id1472 . -11) (undo-tree-id1473 . -1) (undo-tree-id1474 . -11) (undo-tree-id1475 . -11) (undo-tree-id1476 . -11) (undo-tree-id1477 . -11) (undo-tree-id1478 . -11) (undo-tree-id1479 . -11) (undo-tree-id1480 . -11) (undo-tree-id1481 . -11) (undo-tree-id1482 . -11) (undo-tree-id1483 . -11) (undo-tree-id1484 . -11) (undo-tree-id1485 . -11) (undo-tree-id1486 . -11) (undo-tree-id1487 . -11) (undo-tree-id1488 . -11) (undo-tree-id1489 . -11) (undo-tree-id1490 . -11) (undo-tree-id1491 . -11) (undo-tree-id1492 . -11) (undo-tree-id1493 . -11) (undo-tree-id1494 . -11) (undo-tree-id1495 . -1) (undo-tree-id1496 . -11) (undo-tree-id1497 . -11) (undo-tree-id1498 . -11) (undo-tree-id1499 . -11) (undo-tree-id1500 . -11) (undo-tree-id1501 . -11) (undo-tree-id1502 . -11) (undo-tree-id1503 . -11) (undo-tree-id1504 . -11) (undo-tree-id1505 . -11) (undo-tree-id1506 . -11)) (25845 57312 190328 855000) 0 nil] [nil nil ((6196 . 6207)) ((#("
          " 0 1 (tag-type start tag-name "v-tabs") 1 11 (tag-type start tag-name "v-tabs")) . 6196) (undo-tree-id11 . -11) (undo-tree-id12 . -11) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -11) (undo-tree-id16 . -11) (undo-tree-id17 . -11) (undo-tree-id18 . -11) (undo-tree-id19 . -11) (undo-tree-id20 . -11) (undo-tree-id21 . -11) (undo-tree-id22 . -11) (undo-tree-id23 . -11) (undo-tree-id24 . -11) (undo-tree-id25 . -11) (undo-tree-id26 . -11)) (25845 52292 526600 262000) 0 nil])
([nil nil ((nil rear-nonsticky nil 75962 . 75963) (nil part-side javascript 75942 . 75963) (nil face web-mode-function-call-face 75942 . 75963) (75942 . 75963)) nil (25860 33509 896960 934000) 0 nil])
([nil nil ((6254 . 6259)) ((#("right" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t tag-attr-beg 0) 1 2 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 2 3 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 3 4 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 4 5 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr-end 0 tag-attr t)) . 6254) (undo-tree-id1450 . -5) (undo-tree-id1451 . -5) (undo-tree-id1452 . -5) (undo-tree-id1453 . -5) (undo-tree-id1454 . -5) (undo-tree-id1455 . -5) (undo-tree-id1456 . -5) (undo-tree-id1457 . -5) (undo-tree-id1458 . -5) (undo-tree-id1459 . -5) (undo-tree-id1460 . -5) (undo-tree-id1461 . -5) (undo-tree-id1462 . -5) (undo-tree-id1463 . -5) (undo-tree-id1464 . -5) (undo-tree-id1465 . -5) (undo-tree-id1466 . -5) (undo-tree-id1467 . -5) (undo-tree-id1468 . -5) (undo-tree-id1469 . -5) (undo-tree-id1470 . -5) (undo-tree-id1471 . -5)) (25845 57311 60404 633000) 0 nil])
([nil nil ((6207 . 6209)) ((#("ba" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t tag-attr-beg 0) 1 2 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr-end 0 tag-attr t)) . 6207) (undo-tree-id9 . -2) (undo-tree-id10 . -2)) (25845 52292 524494 539000) 0 nil])
([nil nil ((nil rear-nonsticky nil 75970 . 75971) (nil part-side javascript 75970 . 75971) (nil face (rainbow-delimiters-depth-6-face) 75970 . 75971) (nil part-side javascript 75960 . 75970) (nil part-side javascript 75959 . 75960) (nil face (rainbow-delimiters-depth-6-face) 75959 . 75960) (nil part-side javascript 75946 . 75959) (nil part-side javascript 75942 . 75946) (nil face web-mode-constant-face 75942 . 75946) (75942 . 75971)) nil (25860 33509 896958 541000) 0 nil])
([nil nil ((#("r" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr-end 0 tag-attr t tag-attr-beg 0)) . -6254) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("i" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr-end 0 tag-attr t)) . -6255) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("g" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr-end 0 tag-attr t)) . -6256) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("h" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr-end 0 tag-attr t)) . -6257) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("t" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr-end 0 tag-attr t)) . -6258) (undo-tree-id35 . -1) (undo-tree-id36 . -1) 6259 (t 25845 52316 21864 885000)) ((6254 . 6259)) (25845 57310 726004 888000) 0 nil])
nil
([nil nil ((75971 . 75974)) nil (25860 33509 896955 245000) 0 nil])
([nil nil ((6254 . 6258)) ((#("left" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t tag-attr-beg 0) 1 2 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 2 3 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 3 4 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr-end 0 tag-attr t)) . 6254) (undo-tree-id1427 . -4) (undo-tree-id1428 . -4) (undo-tree-id1429 . -4) (undo-tree-id1430 . -4) (undo-tree-id1431 . -4) (undo-tree-id1432 . -4) (undo-tree-id1433 . -4) (undo-tree-id1434 . -4) (undo-tree-id1435 . -4) (undo-tree-id1436 . -4) (undo-tree-id1437 . -4) (undo-tree-id1438 . -4) (undo-tree-id1439 . -4) (undo-tree-id1440 . -4) (undo-tree-id1441 . -4) (undo-tree-id1442 . -4) (undo-tree-id1443 . -4) (undo-tree-id1444 . -4) (undo-tree-id1445 . -4) (undo-tree-id1446 . -4) (undo-tree-id1447 . -4) (undo-tree-id1448 . -4) (undo-tree-id1449 . -4)) (25845 57310 409427 977000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) part-side javascript)) . -75972) (#(" " 0 1 (part-side javascript)) . -75973) 75974) nil (25860 33509 896953 581000) 0 nil])
([nil nil ((6258 . 6269) (t 25845 52325 957937 597000)) ((#("
          " 0 1 (tag-type start tag-name "v-tabs") 1 11 (tag-type start tag-name "v-tabs")) . 6258) (undo-tree-id1413 . -11) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -11) (undo-tree-id1417 . -11) (undo-tree-id1418 . -11) (undo-tree-id1419 . -11) (undo-tree-id1420 . -11) (undo-tree-id1421 . -11) (undo-tree-id1422 . -11) (undo-tree-id1423 . -11) (undo-tree-id1424 . -11) (undo-tree-id1425 . -11) (undo-tree-id1426 . -11)) (25845 57310 24945 148000) 0 nil])
([nil nil ((75972 . 75974)) nil (25860 33509 896951 898000) 0 nil])
([nil nil ((6279 . 6284) (6269 . 6280)) ((#("centered=\"\"" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t tag-attr-beg 0) 1 2 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 2 3 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 3 4 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 4 5 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 5 6 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 6 7 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 7 8 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 8 9 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-tabs" tag-attr t) 9 10 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 10 11 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr-end 8 tag-attr t)) . 6269) (#("false" 0 5 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t)) . 6279)) (25845 57308 390588 799000) 0 nil])
([nil nil ((#("
            this.filter_score[element.id] = res
          }).catch(error => {
            console.log(error)
          })" 0 1 (part-side javascript) 1 13 (part-side javascript) 13 17 (face web-mode-constant-face part-side javascript) 17 30 (part-side javascript) 30 31 (face (rainbow-delimiters-depth-8-face) part-side javascript) 31 41 (part-side javascript) 41 42 (face (rainbow-delimiters-depth-8-face) part-side javascript) 42 59 (part-side javascript) 59 60 (face (rainbow-delimiters-depth-7-face) part-side javascript) 60 61 (face (rainbow-delimiters-depth-6-face) part-side javascript) 61 62 (part-side javascript) 62 67 (face web-mode-function-call-face part-side javascript) 67 68 (face (rainbow-delimiters-depth-6-face) part-side javascript) 68 73 (face web-mode-function-name-face part-side javascript) 73 77 (part-side javascript) 77 78 (face (rainbow-delimiters-depth-7-face) part-side javascript) 78 79 (part-side javascript) 79 99 (part-side javascript) 99 102 (face web-mode-function-call-face part-side javascript) 102 103 (face (rainbow-delimiters-depth-8-face) part-side javascript) 103 108 (part-side javascript) 108 109 (face (rainbow-delimiters-depth-8-face) part-side javascript) 109 120 (part-side javascript) 120 121 (face (rainbow-delimiters-depth-7-face) part-side javascript) 121 122 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . 76042) (undo-tree-id135 . -122) (undo-tree-id136 . -48) (undo-tree-id137 . -1)) nil (25860 33509 896950 553000) 0 nil])
([nil nil ((#("
          left
          centered=\"false\"" 0 1 (tag-type start tag-name "v-tabs") 1 11 (tag-type start tag-name "v-tabs") 11 12 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t tag-attr-beg 0) 12 13 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 13 14 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 14 15 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr-end 0 tag-attr t) 15 16 (tag-type start tag-name "v-tabs") 16 26 (tag-type start tag-name "v-tabs") 26 27 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t tag-attr-beg 0) 27 28 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 28 29 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 29 30 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 30 31 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 31 32 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 32 33 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 33 34 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 34 35 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-tabs" tag-attr t) 35 41 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 41 42 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr-end 8 tag-attr t)) . 6243) (undo-tree-id38 . -31) (undo-tree-id39 . -1) (undo-tree-id40 . -42) (undo-tree-id41 . -42) (t 25845 52361 86209 672000)) ((6243 . 6285)) (25845 57307 916861 780000) 0 nil])
([nil nil ((#("." 0 1 (part-side javascript)) . -76028) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#("t" 0 1 (part-side javascript)) . -76029) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("h" 0 1 (part-side javascript)) . -76030) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (#("e" 0 1 (part-side javascript)) . -76031) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("n" 0 1 (part-side javascript)) . -76032) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . -76033) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . 76034) (#("r" 0 1 (part-side javascript)) . -76034) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("e" 0 1 (part-side javascript)) . -76035) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#("s" 0 1 (part-side javascript)) . -76036) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (#(" " 0 1 (part-side javascript)) . -76037) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("=" 0 1 (part-side javascript)) . -76038) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (#(">" 0 1 (part-side javascript)) . -76039) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#(" " 0 1 (part-side javascript)) . -76040) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-7-face) part-side javascript)) . -76041) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("
        }" 0 9 (part-side javascript) 9 10 (face (rainbow-delimiters-depth-7-face) part-side javascript)) . 76042) (undo-tree-id134 . -1)) nil (25860 33509 896941 471000) 0 nil])
([nil nil ((6243 . 6254)) ((#("
          " 0 1 (tag-type start tag-name "v-tabs") 1 11 (tag-type start tag-name "v-tabs")) . 6243) (undo-tree-id1366 . -11) (undo-tree-id1367 . -1) (undo-tree-id1368 . -11) (undo-tree-id1369 . -11) (undo-tree-id1370 . -11) (undo-tree-id1371 . -11) (undo-tree-id1372 . -11) (undo-tree-id1373 . -11) (undo-tree-id1374 . -11) (undo-tree-id1375 . -11) (undo-tree-id1376 . -11) (undo-tree-id1377 . -11) (undo-tree-id1378 . -11) (undo-tree-id1379 . -11) (undo-tree-id1380 . -11) (undo-tree-id1381 . -11) (undo-tree-id1382 . -11) (undo-tree-id1383 . -11) (undo-tree-id1384 . -11) (undo-tree-id1385 . -11) (undo-tree-id1386 . -11) (undo-tree-id1387 . -11) (undo-tree-id1388 . -11) (undo-tree-id1389 . -11) (undo-tree-id1390 . -11) (undo-tree-id1391 . -11) (undo-tree-id1392 . -11) (undo-tree-id1393 . -11) (undo-tree-id1394 . -11) (undo-tree-id1395 . -11) (undo-tree-id1396 . -11) (undo-tree-id1397 . -11) (undo-tree-id1398 . -11) (undo-tree-id1399 . -11) (undo-tree-id1400 . -11) (undo-tree-id1401 . -11) (undo-tree-id1402 . -11) (undo-tree-id1403 . -11) (undo-tree-id1404 . -11) (undo-tree-id1405 . -11) (undo-tree-id1406 . -11) (undo-tree-id1407 . -11) (undo-tree-id1408 . -11) (undo-tree-id1409 . -11) (undo-tree-id1410 . -11) (undo-tree-id1411 . -11) (undo-tree-id1412 . -11)) (25845 57307 58605 853000) 0 nil])
([nil nil ((76028 . 76039)) nil (25860 33509 896902 584000) 0 nil])
([nil nil ((6254 . 6259)) ((#("grow " 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t tag-attr-beg 0) 1 2 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 2 3 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 3 4 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr-end 0 tag-attr t) 4 5 (tag-type start tag-name "v-tabs")) . 6254) (undo-tree-id1346 . -5) (undo-tree-id1347 . -4) (undo-tree-id1348 . -5) (undo-tree-id1349 . -5) (undo-tree-id1350 . -5) (undo-tree-id1351 . -5) (undo-tree-id1352 . -5) (undo-tree-id1353 . -5) (undo-tree-id1354 . -5) (undo-tree-id1355 . -5) (undo-tree-id1356 . -5) (undo-tree-id1357 . -5) (undo-tree-id1358 . -5) (undo-tree-id1359 . -5) (undo-tree-id1360 . -5) (undo-tree-id1361 . -5) (undo-tree-id1362 . -5) (undo-tree-id1363 . -5) (undo-tree-id1364 . -5) (undo-tree-id1365 . -5)) (25845 57306 467491 440000) 0 nil])
([nil nil ((#("  " 0 2 (part-side javascript)) . -76037) (76039 . 76040)) nil (25860 33509 896901 441000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-tabs")) . -6258) (undo-tree-id37 . -1) 6259) ((6258 . 6259)) (25845 57305 190853 741000) 0 nil])
([nil nil ((45747 . 45748)) nil (25860 33509 896900 147000) 0 nil])
([nil nil ((#("
          grow" 0 1 (tag-type start tag-name "v-tabs") 1 11 (tag-type start tag-name "v-tabs") 11 12 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t tag-attr-beg 0) 12 13 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 13 14 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 14 15 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr-end 0 tag-attr t)) . 6243) (undo-tree-id42 . -14) (undo-tree-id43 . -1) (undo-tree-id44 . -15) (undo-tree-id45 . -15) (t 25845 52420 366718 388000)) ((6243 . 6258)) (25845 57304 801639 381000) 0 nil])
([nil nil ((45748 . 45757)) nil (25860 33509 896899 41000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-row")) . -6136) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id66 . -1) (undo-tree-id68 . -1) (undo-tree-id70 . -1) (undo-tree-id72 . -1) (undo-tree-id74 . -1) (undo-tree-id76 . -1) (undo-tree-id78 . -1) (undo-tree-id80 . -1) (undo-tree-id82 . -1) (undo-tree-id84 . -1) (undo-tree-id86 . -1) (undo-tree-id88 . -1) (undo-tree-id90 . -1) (undo-tree-id92 . -1) (undo-tree-id94 . -1) (undo-tree-id96 . -1) (undo-tree-id98 . -1) (undo-tree-id100 . -1) (undo-tree-id102 . -1) (undo-tree-id104 . -1) (undo-tree-id106 . -1) (undo-tree-id108 . -1) (undo-tree-id110 . -1) 6137) ((6136 . 6137)) (25845 57304 167705 800000) 0 nil] [nil nil ((nil rear-nonsticky nil 6146 . 6147) (nil tag-attr t 6146 . 6147) (nil tag-attr-end 0 6146 . 6147) (nil tag-name "v-row" 6146 . 6147) (nil tag-type start 6146 . 6147) (nil font-lock-face web-mode-html-attr-name-face 6146 . 6147) (nil tag-attr t 6138 . 6146) (nil tag-name "v-row" 6138 . 6146) (nil tag-type start 6138 . 6146) (nil font-lock-face web-mode-html-attr-name-face 6138 . 6146) (nil tag-attr-beg 0 6137 . 6138) (nil tag-attr t 6137 . 6138) (nil tag-name "v-row" 6137 . 6138) (nil tag-type start 6137 . 6138) (nil font-lock-face web-mode-html-attr-name-face 6137 . 6138) (6137 . 6147) (t 25845 52436 794869 615000)) ((#("no-gutters" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t tag-attr-beg 0) 1 9 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t) 9 10 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr-end 0 tag-attr t rear-nonsticky nil)) . 6137) (undo-tree-id46 . -10) (undo-tree-id47 . -10) (undo-tree-id48 . -10) (undo-tree-id49 . -10) (undo-tree-id50 . -10) (undo-tree-id51 . -10) (undo-tree-id52 . -10) (undo-tree-id53 . -10) (undo-tree-id54 . -10) (undo-tree-id55 . -10) (undo-tree-id56 . -10) (undo-tree-id57 . -10) (undo-tree-id58 . -10) (undo-tree-id59 . -10) (undo-tree-id60 . -10) (undo-tree-id61 . -10) (undo-tree-id62 . -10) (nil tag-name "v-row" 6137 . 6138) (nil tag-name "v-row" 6138 . 6146) (nil tag-name "v-row" 6146 . 6147) (nil rear-nonsticky t 6146 . 6147) (t 25845 52569 808237 258000)) (25845 52569 693633 384000) 0 nil])
([nil nil ((45757 . 45767)) nil (25860 33509 896898 23000) 0 nil])
([nil nil ((6137 . 6144) (t 25845 52579 48340 805000)) (("
      " . 6137) (undo-tree-id1266 . -7) (undo-tree-id1267 . -7) (undo-tree-id1268 . -7) (undo-tree-id1269 . -7) (undo-tree-id1270 . -7) (undo-tree-id1271 . -1) (undo-tree-id1272 . -7) (undo-tree-id1273 . -7) (undo-tree-id1274 . -7) (undo-tree-id1275 . -7) (undo-tree-id1276 . -7) (undo-tree-id1277 . -7) (undo-tree-id1278 . -7) (undo-tree-id1279 . -7) (undo-tree-id1280 . -7) (undo-tree-id1281 . -7) (undo-tree-id1282 . -7) (undo-tree-id1283 . -7) (undo-tree-id1284 . -7) (undo-tree-id1285 . -7) (undo-tree-id1286 . -7) (undo-tree-id1287 . -7) (undo-tree-id1288 . -7) (undo-tree-id1289 . -7) (undo-tree-id1290 . -7) (undo-tree-id1291 . -7) (undo-tree-id1292 . -7) (undo-tree-id1293 . -7) (undo-tree-id1294 . -7) (undo-tree-id1295 . -7) (undo-tree-id1296 . -7) (undo-tree-id1297 . -7) (undo-tree-id1298 . -7) (undo-tree-id1299 . -7) (undo-tree-id1300 . -7) (undo-tree-id1301 . -7) (undo-tree-id1302 . -7) (undo-tree-id1303 . -7) (undo-tree-id1304 . -7) (undo-tree-id1305 . -7) (undo-tree-id1306 . -7) (undo-tree-id1307 . -7) (undo-tree-id1308 . -7) (undo-tree-id1309 . -7) (undo-tree-id1310 . -7) (undo-tree-id1311 . -7) (undo-tree-id1312 . -7) (undo-tree-id1313 . -7) (undo-tree-id1314 . -7) (undo-tree-id1315 . -7) (undo-tree-id1316 . -7) (undo-tree-id1317 . -7) (undo-tree-id1318 . -7) (undo-tree-id1319 . -7) (undo-tree-id1320 . -7) (undo-tree-id1321 . -7) (undo-tree-id1322 . -7) (undo-tree-id1323 . -7) (undo-tree-id1324 . -7) (undo-tree-id1325 . -7) (undo-tree-id1326 . -7) (undo-tree-id1327 . -7) (undo-tree-id1328 . -7) (undo-tree-id1329 . -7) (undo-tree-id1330 . -7) (undo-tree-id1331 . -7) (undo-tree-id1332 . -7) (undo-tree-id1333 . -7) (undo-tree-id1334 . -7) (undo-tree-id1335 . -7) (undo-tree-id1336 . -7) (undo-tree-id1337 . -7) (undo-tree-id1338 . -1) (undo-tree-id1339 . -7) (undo-tree-id1340 . -7) (undo-tree-id1341 . -7) (undo-tree-id1342 . -7) (undo-tree-id1343 . -7) (undo-tree-id1344 . -7) (undo-tree-id1345 . -7)) (25845 57303 916168 265000) 0 nil])
nil
([nil nil ((#("_" 0 1 (part-side javascript)) . -45763) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("v" 0 1 (part-side javascript)) . -45764) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#("a" 0 1 (part-side javascript)) . -45765) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (#("l" 0 1 (part-side javascript)) . -45766) (undo-tree-id103 . -1) (undo-tree-id104 . -1) 45767) nil (25860 33509 896895 612000) 0 nil])
([nil nil ((6144 . 6159)) ((#("<v-col></v-col>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-col") 1 6 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-col") 6 7 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-col") 7 8 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 8 9 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 9 14 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 14 15 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 6144) (undo-tree-id1195 . -15) (undo-tree-id1196 . -15) (undo-tree-id1197 . -15) (undo-tree-id1198 . -15) (undo-tree-id1199 . -7) (undo-tree-id1200 . -7) (undo-tree-id1201 . -7) (undo-tree-id1202 . -7) (undo-tree-id1203 . -7) (undo-tree-id1204 . -7) (undo-tree-id1205 . -7) (undo-tree-id1206 . -7) (undo-tree-id1207 . -7) (undo-tree-id1208 . -7) (undo-tree-id1209 . -7) (undo-tree-id1210 . -7) (undo-tree-id1211 . -7) (undo-tree-id1212 . -7) (undo-tree-id1213 . -7) (undo-tree-id1214 . -7) (undo-tree-id1215 . -7) (undo-tree-id1216 . -7) (undo-tree-id1217 . -7) (undo-tree-id1218 . -7) (undo-tree-id1219 . -7) (undo-tree-id1220 . -7) (undo-tree-id1221 . -7) (undo-tree-id1222 . -7) (undo-tree-id1223 . -7) (undo-tree-id1224 . -7) (undo-tree-id1225 . -7) (undo-tree-id1226 . -7) (undo-tree-id1227 . -7) (undo-tree-id1228 . -7) (undo-tree-id1229 . -7) (undo-tree-id1230 . -7) (undo-tree-id1231 . -7) (undo-tree-id1232 . -7) (undo-tree-id1233 . -7) (undo-tree-id1234 . -7) (undo-tree-id1235 . -7) (undo-tree-id1236 . -7) (undo-tree-id1237 . -7) (undo-tree-id1238 . -7) (undo-tree-id1239 . -7) (undo-tree-id1240 . -7) (undo-tree-id1241 . -7) (undo-tree-id1242 . -7) (undo-tree-id1243 . -7) (undo-tree-id1244 . -7) (undo-tree-id1245 . -7) (undo-tree-id1246 . -7) (undo-tree-id1247 . -7) (undo-tree-id1248 . -7) (undo-tree-id1249 . -7) (undo-tree-id1250 . -7) (undo-tree-id1251 . -7) (undo-tree-id1252 . -7) (undo-tree-id1253 . -7) (undo-tree-id1254 . -7) (undo-tree-id1255 . -7) (undo-tree-id1256 . -7) (undo-tree-id1257 . -7) (undo-tree-id1258 . -7) (undo-tree-id1259 . -7) (undo-tree-id1260 . -7) (undo-tree-id1261 . -7) (undo-tree-id1262 . -7) (undo-tree-id1263 . -7) (undo-tree-id1264 . -7) (undo-tree-id1265 . -7)) (25845 57303 568730 953000) 0 nil])
([nil nil ((45763 . 45767)) nil (25860 33509 896754 490000) 0 nil])
([nil nil ((6152 . 6160) (6153 . 6159) (#("        " 0 8 (face whitespace-trailing)) . 6152) (6152 . 6160) (6152 . 6153) ("      " . 6152) (6151 . 6158)) (("
      " . 6151) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (6152 . 6158) ("
" . 6152) (undo-tree-id1138 . -1) ("        " . 6152) (6152 . 6160) ("      " . 6153) ("        " . 6152) (undo-tree-id1139 . -8) (undo-tree-id1140 . -8) (undo-tree-id1141 . -8) (undo-tree-id1142 . -8) (undo-tree-id1143 . -8) (undo-tree-id1144 . -8) (undo-tree-id1145 . -8) (undo-tree-id1146 . -8) (undo-tree-id1147 . -8) (undo-tree-id1148 . -8) (undo-tree-id1149 . -8) (undo-tree-id1150 . -8) (undo-tree-id1151 . -8) (undo-tree-id1152 . -8) (undo-tree-id1153 . -8) (undo-tree-id1154 . -8) (undo-tree-id1155 . -8) (undo-tree-id1156 . -8) (undo-tree-id1157 . -8) (undo-tree-id1158 . -8) (undo-tree-id1159 . -8) (undo-tree-id1160 . -8) (undo-tree-id1161 . -8) (undo-tree-id1162 . -8) (undo-tree-id1163 . -8) (undo-tree-id1164 . -8) (undo-tree-id1165 . -8) (undo-tree-id1166 . -8) (undo-tree-id1167 . -8) (undo-tree-id1168 . -8) (undo-tree-id1169 . -8) (undo-tree-id1170 . -8) (undo-tree-id1171 . -8) (undo-tree-id1172 . -8) (undo-tree-id1173 . -8) (undo-tree-id1174 . -8) (undo-tree-id1175 . -8) (undo-tree-id1176 . -8) (undo-tree-id1177 . -8) (undo-tree-id1178 . -8) (undo-tree-id1179 . -8) (undo-tree-id1180 . -8) (undo-tree-id1181 . -8) (undo-tree-id1182 . -8) (undo-tree-id1183 . -8) (undo-tree-id1184 . -8) (undo-tree-id1185 . -8) (undo-tree-id1186 . -8) (undo-tree-id1187 . -8) (undo-tree-id1188 . -8) (undo-tree-id1189 . -8) (undo-tree-id1190 . -8) (undo-tree-id1191 . -8) (undo-tree-id1192 . -8) (undo-tree-id1193 . -8) (undo-tree-id1194 . -8)) (25845 57303 328088 837000) 0 nil])
([nil nil ((45767 . 45770)) nil (25860 33509 896753 444000) 0 nil])
([nil nil ((6160 . 6162)) (("c-" . 6160) (undo-tree-id1068 . -2) (undo-tree-id1069 . -2) (undo-tree-id1070 . -2) (undo-tree-id1071 . -2) (undo-tree-id1072 . -2) (undo-tree-id1073 . -2) (undo-tree-id1074 . -2) (undo-tree-id1075 . -2) (undo-tree-id1076 . -2) (undo-tree-id1077 . -2) (undo-tree-id1078 . -2) (undo-tree-id1079 . -2)) (25845 57303 30162 413000) 0 nil])
([nil nil ((#("filter_values" 0 13 (part-side javascript)) . 45757) (undo-tree-id91 . -13) (undo-tree-id92 . -11) (undo-tree-id93 . -8) (undo-tree-id94 . -13)) nil (25860 33509 896751 933000) 0 nil])
([nil nil (("c" . -6160) (undo-tree-id121 . -1) ("-" . -6161) (undo-tree-id122 . -1) 6162) ((6160 . 6162)) (25845 57302 729613 845000) 0 nil])
([nil nil ((45773 . 45775) (#("{" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -45773) (45757 . 45774)) nil (25860 33509 896745 152000) 0 nil])
([nil nil ((6160 . 6177)) ((#("<v-tabs></v-tabs>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-tabs") 1 7 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-tabs") 7 8 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-tabs") 8 9 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-tabs") 9 10 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-tabs") 10 16 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-tabs") 16 17 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-tabs")) . 6160) (undo-tree-id1037 . -8) (undo-tree-id1038 . -8) (undo-tree-id1039 . -8) (undo-tree-id1040 . -8) (undo-tree-id1041 . -8) (undo-tree-id1042 . -8) (undo-tree-id1043 . -8) (undo-tree-id1044 . -8) (undo-tree-id1045 . -8) (undo-tree-id1046 . -8) (undo-tree-id1047 . -8) (undo-tree-id1048 . -8) (undo-tree-id1049 . -8) (undo-tree-id1050 . -8) (undo-tree-id1051 . -8) (undo-tree-id1052 . -8) (undo-tree-id1053 . -8) (undo-tree-id1054 . -8) (undo-tree-id1055 . -8) (undo-tree-id1056 . -8) (undo-tree-id1057 . -8) (undo-tree-id1058 . -8) (undo-tree-id1059 . -8) (undo-tree-id1060 . -8) (undo-tree-id1061 . -8) (undo-tree-id1062 . -8) (undo-tree-id1063 . -8) (undo-tree-id1064 . -8) (undo-tree-id1065 . -8) (undo-tree-id1066 . -8) (undo-tree-id1067 . -8)) (25845 57302 442059 710000) 0 nil])
([nil nil ((45775 . 45777)) nil (25860 33509 896743 582000) 0 nil])
([nil nil ((6169 . 6179) (6170 . 6178) (#("          " 0 10 (face whitespace-trailing)) . 6169) (6169 . 6179) (6169 . 6170) ("        " . 6169) (6168 . 6177)) (("
        " . 6168) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (6169 . 6177) ("
" . 6169) (undo-tree-id1015 . -1) (undo-tree-id1016 . 1) ("          " . 6169) (6169 . 6179) ("        " . 6170) ("          " . 6169) (undo-tree-id1017 . -10) (undo-tree-id1018 . -10) (undo-tree-id1019 . -10) (undo-tree-id1020 . -10) (undo-tree-id1021 . -10) (undo-tree-id1022 . -10) (undo-tree-id1023 . -10) (undo-tree-id1024 . -10) (undo-tree-id1025 . -10) (undo-tree-id1026 . -10) (undo-tree-id1027 . -10) (undo-tree-id1028 . -10) (undo-tree-id1029 . -10) (undo-tree-id1030 . -10) (undo-tree-id1031 . -10) (undo-tree-id1032 . -10) (undo-tree-id1033 . -10) (undo-tree-id1034 . -10) (undo-tree-id1035 . -10) (undo-tree-id1036 . -10)) (25845 57302 129411 39000) 0 nil])
([nil nil ((#("," 0 1 (part-side javascript)) . -45775) (undo-tree-id89 . -1) (#(" " 0 1 (part-side javascript)) . -45776) (undo-tree-id90 . -1) 45777) nil (25860 33509 896741 851000) 0 nil])
([nil nil (("
" . 6179) (undo-tree-id120 . -1)) ((6179 . 6180)) (25845 57301 820429 762000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . 45775) (undo-tree-id88 . -1)) nil (25860 33509 896737 939000) 0 nil])
([nil nil (("          " . 6169) (undo-tree-id119 . -10) (6179 . 6180)) (("
" . 6179) (undo-tree-id992 . -1) (6169 . 6179)) (25845 57301 552548 150000) 0 nil])
([nil nil ((75908 . 75917)) nil (25860 33509 896735 431000) 0 nil])
([nil nil ((6169 . 6179)) (("          " . 6169) (undo-tree-id940 . -10) (undo-tree-id941 . -10) (undo-tree-id942 . -10) (undo-tree-id943 . -10) (undo-tree-id944 . -10) (undo-tree-id945 . -10) (undo-tree-id946 . -10) (undo-tree-id947 . -10) (undo-tree-id948 . -10) (undo-tree-id949 . -10) (undo-tree-id950 . -10) (undo-tree-id951 . -10) (undo-tree-id952 . -10) (undo-tree-id953 . -10) (undo-tree-id954 . -10) (undo-tree-id955 . -10) (undo-tree-id956 . -10) (undo-tree-id957 . -10) (undo-tree-id958 . -10) (undo-tree-id959 . -10) (undo-tree-id960 . -10) (undo-tree-id961 . -10) (undo-tree-id962 . -10) (undo-tree-id963 . -10) (undo-tree-id964 . -10) (undo-tree-id965 . -10) (undo-tree-id966 . -10) (undo-tree-id967 . -10) (undo-tree-id968 . -10) (undo-tree-id969 . -10) (undo-tree-id970 . -10) (undo-tree-id971 . -10) (undo-tree-id972 . -10) (undo-tree-id973 . -10) (undo-tree-id974 . -10) (undo-tree-id975 . -10) (undo-tree-id976 . -10) (undo-tree-id977 . -10) (undo-tree-id978 . -10) (undo-tree-id979 . -10) (undo-tree-id980 . -10) (undo-tree-id981 . -10) (undo-tree-id982 . -10) (undo-tree-id983 . -10) (undo-tree-id984 . -10) (undo-tree-id985 . -10) (undo-tree-id986 . -10) (undo-tree-id987 . -10) (undo-tree-id988 . -10) (undo-tree-id989 . -10) (undo-tree-id990 . -10) (undo-tree-id991 . -10)) (25845 57301 306287 389000) 0 nil])
([nil nil ((75917 . 75938)) nil (25860 33509 896733 433000) 0 nil])
([nil nil ((6179 . 6184)) (("<-vta" . 6179) (undo-tree-id895 . -5) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -5) (undo-tree-id933 . -5) (undo-tree-id934 . -5) (undo-tree-id935 . -5) (undo-tree-id936 . -5) (undo-tree-id937 . -5) (undo-tree-id938 . -5) (undo-tree-id939 . -5)) (25845 57301 78297 392000) 0 nil])
([nil nil ((75938 . 75939)) nil (25860 33509 896732 330000) 0 nil])
([nil nil (("-" . -6180) (undo-tree-id115 . -1) ("v" . -6181) (undo-tree-id116 . -1) ("t" . -6182) (undo-tree-id117 . -1) ("a" . -6183) (undo-tree-id118 . -1) 6184) ((6180 . 6184)) (25845 57300 823391 77000) 0 nil])
([nil nil ((75939 . 75944)) nil (25860 33509 896731 154000) 0 nil])
([nil nil ((6180 . 6185)) ((#("v-atb" 0 2 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-atb") 2 3 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-atb") 3 4 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-atb") 4 5 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-atb")) . 6180) (undo-tree-id865 . -5) (undo-tree-id866 . -2) (undo-tree-id867 . -2) (undo-tree-id868 . -2) (undo-tree-id869 . -2) (undo-tree-id870 . -2) (undo-tree-id871 . -2) (undo-tree-id872 . -2) (undo-tree-id873 . -2) (undo-tree-id874 . -2) (undo-tree-id875 . -2) (undo-tree-id876 . -2) (undo-tree-id877 . -2) (undo-tree-id878 . -2) (undo-tree-id879 . -2) (undo-tree-id880 . -2) (undo-tree-id881 . -2) (undo-tree-id882 . -2) (undo-tree-id883 . -2) (undo-tree-id884 . -2) (undo-tree-id885 . -2) (undo-tree-id886 . -2) (undo-tree-id887 . -2) (undo-tree-id888 . -5) (undo-tree-id889 . -5) (undo-tree-id890 . -5) (undo-tree-id891 . -5) (undo-tree-id892 . -5) (undo-tree-id893 . -5) (undo-tree-id894 . -5)) (25845 57300 555305 454000) 0 nil])
([nil nil ((nil rear-nonsticky nil 75968 . 75969) (nil part-side javascript 75968 . 75969) (nil face (rainbow-delimiters-depth-4-face) 75968 . 75969) (nil part-side javascript 75962 . 75968) (nil part-side javascript 75961 . 75962) (nil face (rainbow-delimiters-depth-4-face) 75961 . 75962) (nil part-side javascript 75944 . 75961) (nil face web-mode-function-call-face 75944 . 75961) (75944 . 75969)) nil (25860 33509 896729 570000) 0 nil])
([nil nil ((#("a" 0 1 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-a")) . -6182) (undo-tree-id112 . -1) (#("t" 0 1 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-at")) . -6183) (undo-tree-id113 . -1) (#("b" 0 1 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-atb")) . -6184) (undo-tree-id114 . -1) 6185) ((6182 . 6185)) (25845 57300 259608 91000) 0 nil])
([nil nil ((#("filter" 0 6 (part-side javascript)) . 75962) (undo-tree-id86 . -6) (undo-tree-id87 . -6)) nil (25860 33509 896726 5000) 0 nil])
([nil nil ((6182 . 6194)) ((#("tab></v-tab>" 0 3 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-tab") 3 4 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-tab") 4 5 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-tab") 5 6 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-tab") 6 11 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-tab") 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-tab")) . 6182) (undo-tree-id853 . -4) (undo-tree-id854 . -4) (undo-tree-id855 . -4) (undo-tree-id856 . -4) (undo-tree-id857 . -4) (undo-tree-id858 . -4) (undo-tree-id859 . -4) (undo-tree-id860 . -4) (undo-tree-id861 . -4) (undo-tree-id862 . -4) (undo-tree-id863 . -4) (undo-tree-id864 . -4)) (25845 57300 71287 739000) 0 nil])
([nil nil ((nil rear-nonsticky nil 75976 . 75977) (nil part-side javascript 75976 . 75977) (nil face (rainbow-delimiters-depth-5-face) 75976 . 75977) (nil part-side javascript 75975 . 75976) (nil part-side javascript 75974 . 75975) (nil face (rainbow-delimiters-depth-5-face) 75974 . 75975) (nil part-side javascript 75966 . 75974) (nil part-side javascript 75962 . 75966) (nil face web-mode-constant-face 75962 . 75966) (75962 . 75977)) nil (25860 33509 896722 423000) 0 nil])
([nil nil ((6187 . 6199) (6188 . 6198) (#("            " 0 12 (face whitespace-trailing)) . 6187) (6187 . 6199) (6187 . 6188) ("          " . 6187) (6186 . 6197)) (("
          " . 6186) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (6187 . 6197) ("
" . 6187) (undo-tree-id847 . -1) ("            " . 6187) (6187 . 6199) ("          " . 6188) ("            " . 6187) (undo-tree-id848 . -12) (undo-tree-id849 . -12) (undo-tree-id850 . -12) (undo-tree-id851 . -12) (undo-tree-id852 . -12)) (25845 57299 875205 750000) 0 nil])
([nil nil ((#("this.filters[0]" 0 4 (face web-mode-constant-face part-side javascript) 4 12 (part-side javascript) 12 13 (face (rainbow-delimiters-depth-7-face) part-side javascript) 13 14 (part-side javascript) 14 15 (face (rainbow-delimiters-depth-7-face) part-side javascript)) . 76093) (undo-tree-id83 . -15) (undo-tree-id84 . -15) (undo-tree-id85 . -15)) nil (25860 33509 896718 935000) 0 nil])
([nil nil ((6199 . 6202)) (("bob" . 6199)) (25845 57299 713884 122000) 0 nil])
([nil nil ((nil rear-nonsticky nil 76111 . 76112) (nil part-side javascript 76097 . 76112) (nil part-side javascript 76093 . 76097) (nil face web-mode-constant-face 76093 . 76097) (76093 . 76112)) nil (25860 33509 896714 232000) 0 nil])
([nil nil ((6254 . 6261) (t 25845 55737 353421 530000)) (("
      " . 6254) (undo-tree-id812 . -7) (undo-tree-id813 . -7) (undo-tree-id814 . -7) (undo-tree-id815 . -7) (undo-tree-id816 . -7) (undo-tree-id817 . -1) (undo-tree-id818 . -7) (undo-tree-id819 . -7) (undo-tree-id820 . -7) (undo-tree-id821 . -7) (undo-tree-id822 . -7) (undo-tree-id823 . -7) (undo-tree-id824 . -7) (undo-tree-id825 . -7) (undo-tree-id826 . -7) (undo-tree-id827 . -7) (undo-tree-id828 . -7) (undo-tree-id829 . -7) (undo-tree-id830 . -7) (undo-tree-id831 . -7) (undo-tree-id832 . -1) (undo-tree-id833 . -7) (undo-tree-id834 . -7) (undo-tree-id835 . -7) (undo-tree-id836 . -7) (undo-tree-id837 . -7) (undo-tree-id838 . -7) (undo-tree-id839 . -7)) (25845 57299 513875 847000) 0 nil])
([nil nil ((76028 . 76039)) nil (25860 33509 896711 980000) 0 nil])
([nil nil (("  " . -6259) (6261 . 6269)) ((#("</v-row>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 1 2 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 2 7 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 7 8 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 6261) (undo-tree-id793 . -8) (undo-tree-id794 . -8) (undo-tree-id795 . -8) (undo-tree-id796 . -8) (undo-tree-id797 . -8) (undo-tree-id798 . -8) (undo-tree-id799 . -8) (undo-tree-id800 . -8) (undo-tree-id801 . -8) (undo-tree-id802 . -8) (undo-tree-id803 . -8) (undo-tree-id804 . -8) (undo-tree-id805 . -8) (undo-tree-id806 . -8) (undo-tree-id807 . -8) (undo-tree-id808 . -8) (undo-tree-id809 . -8) (undo-tree-id810 . -8) (undo-tree-id811 . -8) (6259 . 6261)) (25845 57299 335061 953000) 0 nil])
([nil nil ((76039 . 76048)) nil (25860 33509 896710 692000) 0 nil])
([nil nil ((6267 . 6272)) (("
    " . 6267) (undo-tree-id780 . -5) (undo-tree-id781 . -5) (undo-tree-id782 . -5) (undo-tree-id783 . -5) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -5) (undo-tree-id787 . -5) (undo-tree-id788 . -5) (undo-tree-id789 . -5) (undo-tree-id790 . -5) (undo-tree-id791 . -5) (undo-tree-id792 . -5)) (25845 57299 161206 23000) 0 nil])
([nil nil ((#("f" 0 1 (face web-mode-variable-name-face part-side javascript)) . -76045) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("i" 0 1 (face web-mode-variable-name-face part-side javascript)) . -76046) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#("l" 0 1 (face web-mode-variable-name-face part-side javascript)) . -76047) (undo-tree-id81 . -1) (undo-tree-id82 . -1) 76048) nil (25860 33509 896708 760000) 0 nil])
([nil nil ((6272 . 6287)) ((#("<v-row></v-row>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-row") 1 6 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-row") 6 7 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-row") 7 8 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 8 9 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 9 14 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 14 15 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 6272) (undo-tree-id759 . -7) (undo-tree-id760 . -6) (undo-tree-id761 . -6) (undo-tree-id762 . -8) (undo-tree-id763 . -8) (undo-tree-id764 . -8) (undo-tree-id765 . -8) (undo-tree-id766 . -8) (undo-tree-id767 . -8) (undo-tree-id768 . -8) (undo-tree-id769 . -8) (undo-tree-id770 . -8) (undo-tree-id771 . -8) (undo-tree-id772 . -8) (undo-tree-id773 . -8) (undo-tree-id774 . -8) (undo-tree-id775 . -8) (undo-tree-id776 . -8) (undo-tree-id777 . -8) (undo-tree-id778 . -8) (undo-tree-id779 . -8)) (25845 57298 951233 585000) 0 nil])
([nil nil ((76045 . 76060)) nil (25860 33509 896700 780000) 0 nil])
([nil nil ((#("/v-row>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 1 6 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 6 7 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 6280) (undo-tree-id142 . -7) (undo-tree-id143 . -7) (t 25845 55750 225263 443000)) ((6280 . 6287)) (25845 57298 585686 939000) 0 nil])
([nil nil ((nil rear-nonsticky nil 76098 . 76099) (nil rear-nonsticky t 76098 . 76099) (nil part-side javascript 76098 . 76099) (nil face (rainbow-delimiters-depth-6-face) 76098 . 76099) (nil rear-nonsticky t 76097 . 76098) (nil part-side javascript 76097 . 76098) (nil face (rainbow-delimiters-depth-7-face) 76097 . 76098) (nil part-side javascript 76096 . 76097) (nil part-side javascript 76095 . 76096) (nil face (rainbow-delimiters-depth-7-face) 76095 . 76096) (nil part-side javascript 76087 . 76095) (nil part-side javascript 76083 . 76087) (nil face web-mode-constant-face 76083 . 76087) (nil part-side javascript 76082 . 76083) (nil face (rainbow-delimiters-depth-6-face) 76082 . 76083) (nil part-side javascript 76065 . 76082) (nil face web-mode-function-call-face 76065 . 76082) (nil part-side javascript 76064 . 76065) (nil part-side javascript 76060 . 76064) (nil face web-mode-constant-face 76060 . 76064) (76060 . 76099)) nil (25860 33509 896698 563000) 0 nil])
([nil nil (("<" . -6279) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id126 . -1) (undo-tree-id128 . -1) (undo-tree-id130 . -1) (undo-tree-id132 . -1) (undo-tree-id134 . -1) (undo-tree-id136 . -1) (undo-tree-id138 . -1) (undo-tree-id140 . -1) 6280) ((6279 . 6280)) (25845 57298 32459 173000) 0 nil])
([nil nil ((#("this.filters[0]" 0 4 (face web-mode-constant-face part-side javascript) 4 12 (part-side javascript) 12 13 (face (rainbow-delimiters-depth-7-face) part-side javascript) 13 14 (part-side javascript) 14 15 (face (rainbow-delimiters-depth-7-face) part-side javascript)) . 76083) (undo-tree-id75 . -15) (undo-tree-id76 . -15)) nil (25860 33509 896691 752000) 0 nil])
([nil nil ((#("    <v-row>
      <v-col>
        <v-tabs>
          <v-tab>
            bob
          </v-tab>
        </v-tabs>
      </v-col>
    </v-row>" 4 5 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-row") 5 10 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-row") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-row") 18 19 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-col") 19 24 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-col") 24 25 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-col") 34 35 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-tabs") 35 41 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-tabs") 41 42 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-tabs") 53 54 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-tab") 54 59 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-tab") 59 60 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-tab") 87 88 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-tab") 88 89 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-tab") 89 94 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-tab") 94 95 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-tab") 104 105 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-tabs") 105 106 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-tabs") 106 112 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-tabs") 112 113 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-tabs") 120 121 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 121 122 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 122 127 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 127 128 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col") 133 134 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 134 135 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 135 140 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 140 141 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 6126) (undo-tree-id198 . -141) (undo-tree-id200 . -113) (undo-tree-id202 . -113) (undo-tree-id203 . -12) (undo-tree-id204 . -141) (undo-tree-id206 . -12) (undo-tree-id208 . -141) (undo-tree-id209 . -141) (t 25845 55808 384600 664000)) ((6126 . 6267)) (25845 57296 946678 397000) 0 nil])
([nil nil ((nil rear-nonsticky nil 76096 . 76097) (nil part-side javascript 76083 . 76097) (76083 . 76097)) nil (25860 33509 896688 298000) 0 nil])
([nil nil (("
" . -6125) (undo-tree-id144 . -1) (undo-tree-id146 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id153 . -1) (undo-tree-id155 . -1) (undo-tree-id157 . -1) (undo-tree-id159 . -1) (undo-tree-id161 . -1) (undo-tree-id163 . -1) (undo-tree-id165 . -1) (undo-tree-id167 . -1) (undo-tree-id169 . -1) (undo-tree-id171 . -1) (undo-tree-id173 . -1) (undo-tree-id175 . -1) (undo-tree-id177 . -1) (undo-tree-id179 . -1) (undo-tree-id181 . -1) (undo-tree-id183 . -1) (undo-tree-id185 . -1) (undo-tree-id187 . -1) (undo-tree-id189 . -1) (undo-tree-id191 . -1) (undo-tree-id193 . -1) (undo-tree-id195 . -1) (undo-tree-id197 . -1) 6126) ((6125 . 6126)) (25845 57296 515925 182000) 0 nil])
([nil nil ((#("element.filter" 0 14 (part-side javascript)) . 76184) (undo-tree-id72 . -14) (undo-tree-id73 . -14) (undo-tree-id74 . -14)) nil (25860 33509 896686 257000) 0 nil])
([nil nil ((6416 . 6427) (t 25845 55933 351427 956000)) ((#("
          " 0 1 (tag-type start tag-name "v-tabs") 1 11 (tag-type start tag-name "v-tabs")) . 6416) (undo-tree-id737 . -11) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -11) (undo-tree-id741 . -11) (undo-tree-id742 . -11) (undo-tree-id743 . -11) (undo-tree-id744 . -11) (undo-tree-id745 . -11) (undo-tree-id746 . -11) (undo-tree-id747 . -11) (undo-tree-id748 . -11) (undo-tree-id749 . -11) (undo-tree-id750 . -11) (undo-tree-id751 . -11) (undo-tree-id752 . -11) (undo-tree-id753 . -11) (undo-tree-id754 . -11) (undo-tree-id755 . -11) (undo-tree-id756 . -11) (undo-tree-id757 . -11) (undo-tree-id758 . -11)) (25845 57295 788784 126000) 0 nil])
([nil nil ((nil rear-nonsticky nil 76195 . 76196) (nil part-side javascript 76184 . 76196) (76184 . 76196)) nil (25860 33509 896681 920000) 0 nil])
([nil nil ((6434 . 6446) (6427 . 6435)) ((#("style=\"\"" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t tag-attr-beg 0) 1 2 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 2 3 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 3 4 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 4 5 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 5 6 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-tabs" tag-attr t) 6 7 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 7 8 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr-end 5 tag-attr t)) . 6427) (undo-tree-id665 . -7) (undo-tree-id666 . -7) (undo-tree-id667 . -7) (undo-tree-id668 . -7) (undo-tree-id669 . -7) (undo-tree-id670 . -7) (undo-tree-id671 . -7) (undo-tree-id672 . -7) (undo-tree-id673 . -7) (undo-tree-id674 . -7) (undo-tree-id675 . -7) (undo-tree-id676 . -7) (undo-tree-id677 . -7) (undo-tree-id678 . -7) (undo-tree-id679 . -7) (undo-tree-id680 . -7) (undo-tree-id681 . -7) (undo-tree-id682 . -7) (undo-tree-id683 . -7) (undo-tree-id684 . -7) (undo-tree-id685 . -7) (undo-tree-id686 . -7) (undo-tree-id687 . -7) (undo-tree-id688 . -7) (undo-tree-id689 . -7) (undo-tree-id690 . -7) (undo-tree-id691 . -7) (undo-tree-id692 . -7) (undo-tree-id693 . -7) (undo-tree-id694 . -7) (undo-tree-id695 . -7) (undo-tree-id696 . -7) (undo-tree-id697 . -7) (undo-tree-id698 . -7) (undo-tree-id699 . -7) (undo-tree-id700 . -7) (#("align:left; " 0 11 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 11 12 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t)) . 6434) (undo-tree-id701 . -12) (undo-tree-id702 . -12) (undo-tree-id703 . -12) (undo-tree-id704 . -12) (undo-tree-id705 . -12) (undo-tree-id706 . -12) (undo-tree-id707 . -12) (undo-tree-id708 . -12) (undo-tree-id709 . -12) (undo-tree-id710 . -12) (undo-tree-id711 . -12) (undo-tree-id712 . -12) (undo-tree-id713 . -12) (undo-tree-id714 . -12) (undo-tree-id715 . -12) (undo-tree-id716 . -12) (undo-tree-id717 . -12) (undo-tree-id718 . -12) (undo-tree-id719 . -12) (undo-tree-id720 . -12) (undo-tree-id721 . -12) (undo-tree-id722 . -12) (undo-tree-id723 . -12) (undo-tree-id724 . -12) (undo-tree-id725 . -12) (undo-tree-id726 . -12) (undo-tree-id727 . -12) (undo-tree-id728 . -12) (undo-tree-id729 . -12) (undo-tree-id730 . -12) (undo-tree-id731 . -12) (undo-tree-id732 . -12) (undo-tree-id733 . -12) (undo-tree-id734 . -12) (undo-tree-id735 . -12) (undo-tree-id736 . -12)) (25845 57294 456733 448000) 0 nil])
([nil nil ((26747 . 26752)) nil (25860 33509 896680 267000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t)) . -6445) (undo-tree-id210 . -1) (undo-tree-id212 . -1) (undo-tree-id214 . -1) (undo-tree-id216 . -1) 6446) ((6445 . 6446)) (25845 57292 526072 751000) 0 nil])
([nil nil ((26752 . 26753)) nil (25860 33509 896679 247000) 0 nil])
([nil nil ((#("
          style=\"align:left;\"" 0 1 (tag-type start tag-name "v-tabs") 1 11 (tag-type start tag-name "v-tabs") 11 12 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t tag-attr-beg 0) 12 13 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 13 14 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 14 15 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 15 16 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 16 17 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-tabs" tag-attr t) 17 29 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 29 30 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr-end 5 tag-attr t)) . 6416) (undo-tree-id224 . -30) (undo-tree-id225 . -28) (undo-tree-id226 . -1) (undo-tree-id227 . -30) (t 25845 55988 15007 365000)) ((6416 . 6446)) (25845 57292 40423 525000) 0 nil])
([nil nil (("<" . -26752) (undo-tree-id71 . -1) 26753) nil (25860 33509 896677 839000) 0 nil])
([nil nil ((6195 . 6206)) ((#("
          " 0 1 (tag-type start tag-name "v-tabs") 1 11 (tag-type start tag-name "v-tabs")) . 6195) (undo-tree-id607 . -11) (undo-tree-id608 . -11) (undo-tree-id609 . -11) (undo-tree-id610 . -11) (undo-tree-id611 . -11) (undo-tree-id612 . -11) (undo-tree-id613 . -1) (undo-tree-id614 . -11) (undo-tree-id615 . -11) (undo-tree-id616 . -11) (undo-tree-id617 . -11) (undo-tree-id618 . -11) (undo-tree-id619 . -11) (undo-tree-id620 . -11) (undo-tree-id621 . -11) (undo-tree-id622 . -11) (undo-tree-id623 . -11) (undo-tree-id624 . -11) (undo-tree-id625 . -11) (undo-tree-id626 . -11) (undo-tree-id627 . -11) (undo-tree-id628 . -11) (undo-tree-id629 . -11) (undo-tree-id630 . -11) (undo-tree-id631 . -11) (undo-tree-id632 . -11) (undo-tree-id633 . -11) (undo-tree-id634 . -11) (undo-tree-id635 . -11) (undo-tree-id636 . -11) (undo-tree-id637 . -11) (undo-tree-id638 . -11) (undo-tree-id639 . -11) (undo-tree-id640 . -11) (undo-tree-id641 . -11) (undo-tree-id642 . -11) (undo-tree-id643 . -11) (undo-tree-id644 . -11) (undo-tree-id645 . -11) (undo-tree-id646 . -11) (undo-tree-id647 . -11) (undo-tree-id648 . -11) (undo-tree-id649 . -11) (undo-tree-id650 . -11) (undo-tree-id651 . -11) (undo-tree-id652 . -11) (undo-tree-id653 . -11) (undo-tree-id654 . -11) (undo-tree-id655 . -11) (undo-tree-id656 . -11) (undo-tree-id657 . -11) (undo-tree-id658 . -11) (undo-tree-id659 . -11) (undo-tree-id660 . -11) (undo-tree-id661 . -11) (undo-tree-id662 . -11) (undo-tree-id663 . -11) (undo-tree-id664 . -11)) (25845 57291 556466 976000) 0 nil])
([nil nil ((26752 . 26755)) nil (25860 33509 896673 788000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6217 . 6218) (nil tag-attr t 6217 . 6218) (nil tag-attr-end 0 6217 . 6218) (nil tag-name "v-tabs" 6217 . 6218) (nil tag-type start 6217 . 6218) (nil font-lock-face web-mode-html-attr-name-face 6217 . 6218) (nil tag-attr t 6207 . 6217) (nil tag-name "v-tabs" 6207 . 6217) (nil tag-type start 6207 . 6217) (nil font-lock-face web-mode-html-attr-name-face 6207 . 6217) (nil tag-attr-beg 0 6206 . 6207) (nil tag-attr t 6206 . 6207) (nil tag-name "v-tabs" 6206 . 6207) (nil tag-type start 6206 . 6207) (nil font-lock-face web-mode-html-attr-name-face 6206 . 6207) (6206 . 6218)) ((#("align-center" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t tag-attr-beg 0) 1 6 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 6 7 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 7 8 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 8 9 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 9 10 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 10 11 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 11 12 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr-end 0 tag-attr t rear-nonsticky nil)) . 6206) (undo-tree-id585 . -12) (undo-tree-id586 . -6) (undo-tree-id587 . -12) (undo-tree-id588 . -12) (undo-tree-id589 . -12) (undo-tree-id590 . -12) (undo-tree-id591 . -12) (undo-tree-id592 . -12) (undo-tree-id593 . -12) (undo-tree-id594 . -12) (undo-tree-id595 . -12) (undo-tree-id596 . -12) (undo-tree-id597 . -12) (undo-tree-id598 . -12) (undo-tree-id599 . -12) (undo-tree-id600 . -12) (undo-tree-id601 . -12) (undo-tree-id602 . -12) (undo-tree-id603 . -12) (undo-tree-id604 . -12) (undo-tree-id605 . -12) (undo-tree-id606 . -12) (nil tag-name "v-tabs" 6206 . 6207) (nil tag-name "v-tabs" 6216 . 6217) (nil tag-name "v-tabs" 6215 . 6216) (nil tag-name "v-tabs" 6214 . 6215) (nil tag-name "v-tabs" 6213 . 6214) (nil tag-name "v-tabs" 6212 . 6213) (nil tag-name "v-tabs" 6207 . 6212) (nil tag-name "v-tabs" 6217 . 6218) (nil rear-nonsticky t 6217 . 6218)) (25845 57291 116523 623000) 0 nil])
([nil nil (("e" . -26754) (undo-tree-id70 . -1) 26755) nil (25860 33509 896672 402000) 0 nil])
([nil nil ((6206 . 6215)) ((#("class=\"\" " 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t tag-attr-beg 0) 1 5 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 5 6 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-tabs" tag-attr t) 6 7 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 7 8 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr-end 5 tag-attr t) 8 9 (tag-type start tag-name "v-tabs")) . 6206) (undo-tree-id573 . -7) (undo-tree-id574 . -7) (undo-tree-id575 . -7) (undo-tree-id576 . -7) (undo-tree-id577 . -7) (undo-tree-id578 . -7) (undo-tree-id579 . -7) (undo-tree-id580 . -7) (undo-tree-id581 . -7) (undo-tree-id582 . -7) (undo-tree-id583 . -7) (undo-tree-id584 . -7)) (25845 57290 718721 4000) 0 nil])
([nil nil ((26754 . 26771)) nil (25860 33509 896670 25000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t)) . 6213) (#("\"" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr-end 5 tag-attr t)) . 6213)) ((6213 . 6214) (6213 . 6214)) (25845 57290 106096 286000) 0 nil])
([nil nil ((" " . -26770) (undo-tree-id69 . -1) 26771) nil (25860 33509 896668 611000) 0 nil])
([nil nil ((6225 . 6226)) ((#("\"" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr-end 5 tag-attr t)) . 6225) (undo-tree-id571 . -1) (undo-tree-id572 . -1)) (25845 57289 930368 855000) 0 nil])
([nil nil ((26752 . 26779) ("Save filter dialog" . 26752) (undo-tree-id67 . -18) (undo-tree-id68 . -18)) nil (25860 33509 896665 978000) 0 nil])
([nil nil ((6195 . 6206)) ((#("
          " 0 1 (tag-type start tag-name "v-tabs") 1 11 (tag-type start tag-name "v-tabs")) . 6195) (undo-tree-id545 . -11) (undo-tree-id546 . -11) (undo-tree-id547 . -11) (undo-tree-id548 . -11) (undo-tree-id549 . -1) (undo-tree-id550 . -11) (undo-tree-id551 . -11) (undo-tree-id552 . -11) (undo-tree-id553 . -11) (undo-tree-id554 . -11) (undo-tree-id555 . -11) (undo-tree-id556 . -11) (undo-tree-id557 . -11) (undo-tree-id558 . -11) (undo-tree-id559 . -11) (undo-tree-id560 . -11) (undo-tree-id561 . -11) (undo-tree-id562 . -1) (undo-tree-id563 . -11) (undo-tree-id564 . -11) (undo-tree-id565 . -11) (undo-tree-id566 . -11) (undo-tree-id567 . -11) (undo-tree-id568 . -11) (undo-tree-id569 . -11) (undo-tree-id570 . -11)) (25845 57289 691390 976000) 0 nil] [nil nil ((#("class=\"align-center\"" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t tag-attr-beg 0) 1 5 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 5 6 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-tabs" tag-attr t) 6 7 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 7 8 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 8 13 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 13 14 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 14 15 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 15 16 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 16 17 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 17 18 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 18 19 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t rear-nonsticky t) 19 20 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr-end 5 tag-attr t)) . 6206) (undo-tree-id386 . -20) (undo-tree-id387 . -20) (undo-tree-id388 . -13) (undo-tree-id389 . -20)) ((6206 . 6226)) (25845 56148 537781 86000) 0 nil] [nil nil ((#("c" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t)) . -6219) (undo-tree-id218 . -1) (#("e" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t)) . -6220) (undo-tree-id219 . -1) (#("n" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t)) . -6221) (undo-tree-id220 . -1) (#("t" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t)) . -6222) (undo-tree-id221 . -1) (#("e" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t)) . -6223) (undo-tree-id222 . -1) (#("r" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t rear-nonsticky t)) . -6224) (undo-tree-id223 . -1) 6225) ((6219 . 6225)) (25845 56100 317810 995000) 0 nil])
([nil nil ((26747 . 26752)) nil (25860 33509 896662 697000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6218 . 6219) (nil tag-attr t 6218 . 6219) (nil tag-attr-end 0 6218 . 6219) (nil tag-name "v-tabs" 6218 . 6219) (nil tag-type start 6218 . 6219) (nil font-lock-face web-mode-html-attr-name-face 6218 . 6219) (nil tag-attr t 6207 . 6218) (nil tag-name "v-tabs" 6207 . 6218) (nil tag-type start 6207 . 6218) (nil font-lock-face web-mode-html-attr-name-face 6207 . 6218) (nil tag-attr-beg 0 6206 . 6207) (nil tag-attr t 6206 . 6207) (nil tag-name "v-tabs" 6206 . 6207) (nil tag-type start 6206 . 6207) (nil font-lock-face web-mode-html-attr-name-face 6206 . 6207) (6206 . 6219)) ((#("center-active" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t tag-attr-beg 0) 1 12 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 12 13 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr-end 0 tag-attr t rear-nonsticky nil)) . 6206) (undo-tree-id530 . -13) (undo-tree-id531 . -13) (undo-tree-id532 . -13) (undo-tree-id533 . -13) (undo-tree-id534 . -13) (undo-tree-id535 . -13) (undo-tree-id536 . -13) (undo-tree-id537 . -13) (undo-tree-id538 . -13) (undo-tree-id539 . -13) (undo-tree-id540 . -13) (undo-tree-id541 . -13) (undo-tree-id542 . -13) (undo-tree-id543 . -13) (undo-tree-id544 . -13) (nil tag-name "v-tabs" 6206 . 6207) (nil tag-name "v-tabs" 6207 . 6218) (nil tag-name "v-tabs" 6218 . 6219) (nil rear-nonsticky t 6218 . 6219) (t 25845 57275 232422 964000)) (25845 57274 375623 995000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6216 . 6217) (nil tag-attr t 6216 . 6217) (nil tag-attr-end 0 6216 . 6217) (nil tag-name "v-tabs" 6216 . 6217) (nil tag-type start 6216 . 6217) (nil font-lock-face web-mode-html-attr-engine-face 6216 . 6217) (nil tag-attr t 6207 . 6216) (nil tag-name "v-tabs" 6207 . 6216) (nil tag-type start 6207 . 6216) (nil font-lock-face web-mode-html-attr-engine-face 6207 . 6216) (nil tag-attr-beg 2 6206 . 6207) (nil tag-attr t 6206 . 6207) (nil tag-name "v-tabs" 6206 . 6207) (nil tag-type start 6206 . 6207) (nil font-lock-face web-mode-html-attr-engine-face 6206 . 6207) (6206 . 6217)) ((#("#fixed-tabs" 0 1 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-tabs" tag-attr t tag-attr-beg 2) 1 2 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-tabs" tag-attr t) 2 10 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-tabs" tag-attr t) 10 11 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-tabs" tag-attr-end 0 tag-attr t rear-nonsticky nil)) . 6206) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (nil tag-name "v-tabs" 6206 . 6207) (nil tag-name "v-tabs" 6208 . 6216) (nil tag-name "v-tabs" 6207 . 6208) (nil tag-name "v-tabs" 6216 . 6217) (nil rear-nonsticky t 6216 . 6217)) (25845 56148 121831 373000) 0 nil])
([nil nil ((6219 . 6223)) ((#("left" 0 4 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t)) . 6219) (undo-tree-id379 . -4)) (25845 56099 930611 549000) 0 nil])
([nil nil ((31182 . 31193)) nil (25860 33509 896661 464000) 0 nil])
([nil nil ((6219 . 6230)) ((#("
          " 0 1 (tag-type start tag-name "v-tabs") 1 11 (tag-type start tag-name "v-tabs")) . 6219) (undo-tree-id459 . -11) (undo-tree-id460 . -11) (undo-tree-id461 . -11) (undo-tree-id462 . -1) (undo-tree-id463 . -11) (undo-tree-id464 . -11) (undo-tree-id465 . -11) (undo-tree-id466 . -11) (undo-tree-id467 . -11) (undo-tree-id468 . -11) (undo-tree-id469 . -11) (undo-tree-id470 . -11) (undo-tree-id471 . -11) (undo-tree-id472 . -11) (undo-tree-id473 . -11) (undo-tree-id474 . -11) (undo-tree-id475 . -11) (undo-tree-id476 . -11) (undo-tree-id477 . -11) (undo-tree-id478 . -11) (undo-tree-id479 . -11) (undo-tree-id480 . -11) (undo-tree-id481 . -11) (undo-tree-id482 . -11) (undo-tree-id483 . -11) (undo-tree-id484 . -11) (undo-tree-id485 . -11) (undo-tree-id486 . -11) (undo-tree-id487 . -11) (undo-tree-id488 . -11) (undo-tree-id489 . -11) (undo-tree-id490 . -11) (undo-tree-id491 . -11) (undo-tree-id492 . -11) (undo-tree-id493 . -11) (undo-tree-id494 . -11) (undo-tree-id495 . -11) (undo-tree-id496 . -11) (undo-tree-id497 . -11) (undo-tree-id498 . -11) (undo-tree-id499 . -11) (undo-tree-id500 . -11) (undo-tree-id501 . -11) (undo-tree-id502 . -11) (undo-tree-id503 . -11) (undo-tree-id504 . -11) (undo-tree-id505 . -11) (undo-tree-id506 . -11) (undo-tree-id507 . -11) (undo-tree-id508 . -11) (undo-tree-id509 . -11) (undo-tree-id510 . -11) (undo-tree-id511 . -11) (undo-tree-id512 . -11) (undo-tree-id513 . -11) (undo-tree-id514 . -11) (undo-tree-id515 . -11) (undo-tree-id516 . -11) (undo-tree-id517 . -11) (undo-tree-id518 . -1) (undo-tree-id519 . -11) (undo-tree-id520 . -11) (undo-tree-id521 . -11) (undo-tree-id522 . -11) (undo-tree-id523 . -11) (undo-tree-id524 . -11) (undo-tree-id525 . -11) (undo-tree-id526 . -11) (undo-tree-id527 . -11) (undo-tree-id528 . -11) (undo-tree-id529 . -11)) (25845 57273 928185 168000) 0 nil])
([nil nil ((#("#" 0 1 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-tabs" tag-attr t tag-attr-beg 2)) . -6206) (undo-tree-id380 . -1) (undo-tree-id382 . -1) (undo-tree-id384 . -1) 6207) ((6206 . 6207) (t 25845 56138 790082 471000)) (25845 56138 688925 885000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6167 . 6168) (nil tag-attr t 6159 . 6168) (nil tag-name "v-col" 6159 . 6168) (nil tag-type start 6159 . 6168) (nil font-lock-face web-mode-html-attr-value-face 6159 . 6168) (nil tag-attr t 6158 . 6159) (nil tag-name "v-col" 6158 . 6159) (nil tag-type start 6158 . 6159) (nil font-lock-face web-mode-html-attr-value-face 6158 . 6159) (6158 . 6168) (t 25845 56066 230488 127000)) ((#("align-left" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t) 1 9 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t) 9 10 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t rear-nonsticky nil)) . 6158) (undo-tree-id363 . -10) (undo-tree-id364 . -10) (undo-tree-id365 . -10) (undo-tree-id366 . -10) (undo-tree-id367 . -10) (undo-tree-id368 . -10) (undo-tree-id369 . -10) (undo-tree-id370 . -10) (undo-tree-id371 . -10) (undo-tree-id372 . -10) (undo-tree-id373 . -10) (undo-tree-id374 . -10) (undo-tree-id375 . -10) (undo-tree-id376 . -10) (undo-tree-id377 . -10) (undo-tree-id378 . -10) (nil tag-name "v-col" 6158 . 6159) (nil tag-name "v-col" 6167 . 6168) (nil tag-name "v-col" 6159 . 6167) (nil rear-nonsticky t 6167 . 6168)) (25845 56099 442870 731000) 0 nil])
([nil nil ((31193 . 31208)) nil (25860 33509 896660 403000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6237 . 6238) (nil tag-attr t 6237 . 6238) (nil tag-attr-end 0 6237 . 6238) (nil tag-name "v-tabs" 6237 . 6238) (nil tag-type start 6237 . 6238) (nil font-lock-face web-mode-html-attr-name-face 6237 . 6238) (nil tag-attr t 6231 . 6237) (nil tag-name "v-tabs" 6231 . 6237) (nil tag-type start 6231 . 6237) (nil font-lock-face web-mode-html-attr-name-face 6231 . 6237) (nil tag-attr-beg 0 6230 . 6231) (nil tag-attr t 6230 . 6231) (nil tag-name "v-tabs" 6230 . 6231) (nil tag-type start 6230 . 6231) (nil font-lock-face web-mode-html-attr-name-face 6230 . 6231) (6230 . 6238)) ((#("centered" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t tag-attr-beg 0) 1 2 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 2 3 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 3 4 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 4 5 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 5 6 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 6 7 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr t) 7 8 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-tabs" tag-attr-end 0 tag-attr t rear-nonsticky nil)) . 6230) (undo-tree-id435 . -8) (undo-tree-id436 . -8) (undo-tree-id437 . -8) (undo-tree-id438 . -8) (undo-tree-id439 . -8) (undo-tree-id440 . -8) (undo-tree-id441 . -8) (undo-tree-id442 . -8) (undo-tree-id443 . -8) (undo-tree-id444 . -8) (undo-tree-id445 . -8) (undo-tree-id446 . -8) (undo-tree-id447 . -8) (undo-tree-id448 . -8) (undo-tree-id449 . -8) (undo-tree-id450 . -8) (undo-tree-id451 . -8) (undo-tree-id452 . -8) (undo-tree-id453 . -8) (undo-tree-id454 . -8) (undo-tree-id455 . -8) (undo-tree-id456 . -8) (undo-tree-id457 . -8) (undo-tree-id458 . -8) (nil tag-name "v-tabs" 6230 . 6231) (nil tag-name "v-tabs" 6236 . 6237) (nil tag-name "v-tabs" 6235 . 6236) (nil tag-name "v-tabs" 6234 . 6235) (nil tag-name "v-tabs" 6233 . 6234) (nil tag-name "v-tabs" 6232 . 6233) (nil tag-name "v-tabs" 6231 . 6232) (nil tag-name "v-tabs" 6237 . 6238) (nil rear-nonsticky t 6237 . 6238)) (25845 57273 536025 588000) 0 nil])
nil
([nil nil ((6168 . 6169)) ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t)) . 6168)) (25845 56099 126853 939000) 0 nil])
([nil nil ((31201 . 31213) (31202 . 31212) (#("            " 0 12 (face whitespace-trailing)) . 31201) (31201 . 31213) (31201 . 31202) ("          " . 31201) (31200 . 31211)) nil (25860 33509 896658 541000) 0 nil])
([nil nil ((6240 . 6246) (6238 . 6241)) ((#("=\"\"" 0 1 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-tabs" tag-attr t) 1 2 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 2 3 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr-end 8 tag-attr t)) . 6238) (undo-tree-id410 . -1) (undo-tree-id411 . -2) (undo-tree-id412 . -2) (undo-tree-id413 . -2) (undo-tree-id414 . -2) (undo-tree-id415 . -2) (undo-tree-id416 . -2) (undo-tree-id417 . -2) (undo-tree-id418 . -2) (undo-tree-id419 . -2) (undo-tree-id420 . -2) (undo-tree-id421 . -2) (undo-tree-id422 . -2) (#("false " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 1 2 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 2 3 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 3 4 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 4 5 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t) 5 6 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t)) . 6240) (undo-tree-id423 . -6) (undo-tree-id424 . -6) (undo-tree-id425 . -6) (undo-tree-id426 . -6) (undo-tree-id427 . -6) (undo-tree-id428 . -6) (undo-tree-id429 . -6) (undo-tree-id430 . -6) (undo-tree-id431 . -6) (undo-tree-id432 . -6) (undo-tree-id433 . -6) (undo-tree-id434 . -6)) (25845 57273 166381 861000) 0 nil])
([nil nil ((6136 . 6137) (t 25845 56081 546396 776000)) ((#(" " 0 1 (tag-type start tag-name "v-row")) . 6136) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1)) (25845 56098 818845 189000) 0 nil])
([nil nil ((31184 . 31194) ("          " . 31183) (undo-tree-id66 . -10) (31193 . 31194)) nil (25860 33509 896655 743000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-tabs" tag-attr t)) . -6245) (undo-tree-id402 . -1) (undo-tree-id404 . -1) (undo-tree-id406 . -1) (undo-tree-id408 . -1) 6246) ((6245 . 6246)) (25845 57271 240859 718000) 0 nil])
([nil nil ((6137 . 6142)) ((#("class" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t tag-attr-beg 0) 1 2 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t) 2 3 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t) 3 4 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t) 4 5 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr-end 0 tag-attr t)) . 6137) (undo-tree-id275 . -5) (undo-tree-id276 . -3) (undo-tree-id277 . -4) (undo-tree-id278 . -5) (undo-tree-id279 . -5) (undo-tree-id280 . -5) (undo-tree-id281 . -5) (undo-tree-id282 . -5) (undo-tree-id283 . -5) (undo-tree-id284 . -5) (undo-tree-id285 . -5) (undo-tree-id286 . -5) (undo-tree-id287 . -5) (undo-tree-id288 . -5) (undo-tree-id289 . -5) (undo-tree-id290 . -5) (undo-tree-id291 . -5) (undo-tree-id292 . -5) (undo-tree-id293 . -5) (undo-tree-id294 . -5) (undo-tree-id295 . -5) (undo-tree-id296 . -5) (undo-tree-id297 . -5) (undo-tree-id298 . -5) (undo-tree-id299 . -5) (undo-tree-id300 . -5) (undo-tree-id301 . -5) (undo-tree-id302 . -5) (undo-tree-id303 . -5) (undo-tree-id304 . -5) (undo-tree-id305 . -5) (undo-tree-id306 . -5) (undo-tree-id307 . -5) (undo-tree-id308 . -5) (undo-tree-id309 . -5) (undo-tree-id310 . -5) (undo-tree-id311 . -5) (undo-tree-id312 . -5)) (25845 56098 515944 210000) 0 nil] [nil nil ((nil rear-nonsticky nil 6146 . 6147) (nil tag-attr t 6146 . 6147) (nil tag-attr-end 0 6146 . 6147) (nil tag-name "v-row" 6146 . 6147) (nil tag-type start 6146 . 6147) (nil font-lock-face web-mode-html-attr-name-face 6146 . 6147) (nil tag-attr t 6138 . 6146) (nil tag-name "v-row" 6138 . 6146) (nil tag-type start 6138 . 6146) (nil font-lock-face web-mode-html-attr-name-face 6138 . 6146) (nil tag-attr-beg 0 6137 . 6138) (nil tag-attr t 6137 . 6138) (nil tag-name "v-row" 6137 . 6138) (nil tag-type start 6137 . 6138) (nil font-lock-face web-mode-html-attr-name-face 6137 . 6138) (6137 . 6147)) ((#("align-left" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t tag-attr-beg 0) 1 9 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t) 9 10 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr-end 0 tag-attr t rear-nonsticky nil)) . 6137) (undo-tree-id228 . -10) (nil tag-name "v-row" 6137 . 6138) (nil tag-name "v-row" 6138 . 6146) (nil tag-name "v-row" 6146 . 6147) (nil rear-nonsticky t 6146 . 6147)) (25845 56089 209069 627000) 0 nil])
([nil nil ((31183 . 31189)) nil (25860 33509 896652 974000) 0 nil])
([nil nil ((6230 . 6231) (t 25845 56360 125201 825000)) ((#(":" 0 1 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-tabs" block-token delimiter-beg block-side t block-controls 0 block-beg 0)) . 6230) (t 25845 56908 364412 199000)) (25845 56908 256368 358000) 0 nil])
([nil nil ((6142 . 6145)) ((#("=\"\"" 0 1 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-row" tag-attr t) 1 2 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t) 2 3 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr-end 5 tag-attr t)) . 6142) (undo-tree-id246 . -2) (undo-tree-id247 . -2) (undo-tree-id248 . -2) (undo-tree-id249 . -2) (undo-tree-id250 . -2) (undo-tree-id251 . -2) (undo-tree-id252 . -2) (undo-tree-id253 . -2) (undo-tree-id254 . -2) (undo-tree-id255 . -2) (undo-tree-id256 . -2) (undo-tree-id257 . -2) (undo-tree-id258 . -2) (undo-tree-id259 . -2) (undo-tree-id260 . -2) (undo-tree-id261 . -2) (undo-tree-id262 . -2) (undo-tree-id263 . -2) (undo-tree-id264 . -2) (undo-tree-id265 . -2) (undo-tree-id266 . -2) (undo-tree-id267 . -2) (undo-tree-id268 . -2) (undo-tree-id269 . -2) (undo-tree-id270 . -2) (undo-tree-id271 . -2) (undo-tree-id272 . -2) (undo-tree-id273 . -2) (undo-tree-id274 . -2)) (25845 56098 220722 554000) 0 nil])
nil
([nil nil (("r" . -31188) (undo-tree-id65 . -1) 31189) nil (25860 33509 896651 672000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 6153 . 6154) (nil tag-attr t 6145 . 6154) (nil tag-name "v-row" 6145 . 6154) (nil tag-type start 6145 . 6154) (nil font-lock-face web-mode-html-attr-value-face 6145 . 6154) (nil tag-attr t 6144 . 6145) (nil tag-name "v-row" 6144 . 6145) (nil tag-type start 6144 . 6145) (nil font-lock-face web-mode-html-attr-value-face 6144 . 6145) (6144 . 6154)) ((#("align-left" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t) 1 9 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t) 9 10 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t rear-nonsticky nil)) . 6144) (undo-tree-id229 . -10) (undo-tree-id230 . -10) (undo-tree-id231 . -10) (undo-tree-id232 . -10) (undo-tree-id233 . -10) (undo-tree-id234 . -10) (undo-tree-id235 . -10) (undo-tree-id236 . -10) (undo-tree-id237 . -10) (undo-tree-id238 . -10) (undo-tree-id239 . -10) (undo-tree-id240 . -10) (undo-tree-id241 . -10) (undo-tree-id242 . -10) (undo-tree-id243 . -10) (undo-tree-id244 . -10) (undo-tree-id245 . -10) (nil tag-name "v-row" 6144 . 6145) (nil tag-name "v-row" 6153 . 6154) (nil tag-name "v-row" 6145 . 6153) (nil rear-nonsticky t 6153 . 6154) (t 25845 56091 610338 468000)) (25845 56091 511702 105000) 0 nil])
([nil nil (("C" . -31183) (undo-tree-id56 . -1) (undo-tree-id57 . -1) ("o" . -31184) (undo-tree-id58 . -1) (undo-tree-id59 . -1) ("m" . -31185) (undo-tree-id60 . -1) (undo-tree-id61 . -1) ("p" . -31186) (undo-tree-id62 . -1) (undo-tree-id63 . -1) ("a" . -31187) (undo-tree-id64 . -1) 31188) nil (25860 33509 896645 924000) 0 nil])
nil
([nil nil ((31183 . 31204)) nil (25860 33509 896634 718000) 0 nil])
([nil nil ((" " . -31195) (undo-tree-id39 . -1) (undo-tree-id40 . -1) ("c" . -31196) (undo-tree-id41 . -1) (undo-tree-id42 . -1) ("o" . -31197) (undo-tree-id43 . -1) (undo-tree-id44 . -1) ("m" . -31198) (undo-tree-id45 . -1) (undo-tree-id46 . -1) ("p" . -31199) (undo-tree-id47 . -1) (undo-tree-id48 . -1) ("a" . -31200) (undo-tree-id49 . -1) (undo-tree-id50 . -1) ("r" . -31201) (undo-tree-id51 . -1) (undo-tree-id52 . -1) ("e" . -31202) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (" " . -31203) (undo-tree-id55 . -1) 31204) nil (25860 33509 896631 143000) 0 nil])
([nil nil ((31195 . 31202)) nil (25860 33509 896608 141000) 0 nil])
([nil nil ((31202 . 31211)) nil (25860 33509 896607 117000) 0 nil])
([nil nil (("w" . -31210) (undo-tree-id38 . -1) 31211) nil (25860 33509 896605 822000) 0 nil])
([nil nil ((31210 . 31218)) nil (25860 33509 896603 486000) 0 nil])
([nil nil (("c" . -31217) (undo-tree-id37 . -1) 31218) nil (25860 33509 896601 726000) 0 nil])
([nil nil ((31217 . 31228)) nil (25860 33509 896599 483000) 0 nil])
([nil nil ((" " . -31227) (undo-tree-id36 . -1) 31228) nil (25860 33509 896598 305000) 0 nil])
([nil nil ((31183 . 31193) (31183 . 31236) ("Filters that match current filter value wise" . 31183) (undo-tree-id34 . -44) (undo-tree-id35 . -44)) nil (25860 33509 896595 518000) 0 nil])
([nil nil ((31264 . 31277)) nil (25860 33509 896591 449000) 0 nil])
([nil nil ((31277 . 31278)) nil (25860 33509 896590 343000) 0 nil])
([nil nil ((31278 . 31281)) nil (25860 33509 896589 348000) 0 nil])
([nil nil ((31278 . 31284) (#("v-c" 0 3 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-c")) . -31278) (undo-tree-id31 . -3) (undo-tree-id32 . -3) (undo-tree-id33 . -3) 31281) nil (25860 33509 896587 741000) 0 nil])
([nil nil ((31284 . 31294)) nil (25860 33509 896582 419000) 0 nil])
([nil nil ((31286 . 31300) (31287 . 31299) (#("              " 0 14 (face whitespace-trailing)) . 31286) (31286 . 31300) (31286 . 31287) ("            " . 31286) (31285 . 31298)) nil (25860 33509 896580 717000) 0 nil])
([nil nil ((31300 . 31302)) nil (25860 33509 896578 364000) 0 nil])
([nil nil (("v" . -31300) (undo-tree-id27 . -1) (undo-tree-id28 . -1) ("-" . -31301) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 31302) nil (25860 33509 896576 859000) 0 nil])
([nil nil ((31300 . 31305)) nil (25860 33509 896571 185000) 0 nil])
([nil nil ((31301 . 31307) (#("v-te" 0 4 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-te")) . -31301) (undo-tree-id24 . -3) (undo-tree-id25 . -4) (undo-tree-id26 . -4) 31305) nil (25860 33509 896569 655000) 0 nil])
([nil nil ((#("t" 0 1 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-t")) . -31303) (undo-tree-id20 . -1) (#("e" 0 1 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-te")) . -31304) (undo-tree-id21 . -1) (#("x" 0 1 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-tex")) . -31305) (undo-tree-id22 . -1) (#("t" 0 1 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-text")) . -31306) (undo-tree-id23 . -1) 31307) nil (25860 33509 896563 513000) 0 nil])
([nil nil ((31303 . 31307)) nil (25860 33509 896557 486000) 0 nil])
([nil nil ((31301 . 31312) (#("v-card" 0 6 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-card")) . -31301) (undo-tree-id18 . -6) (undo-tree-id19 . -6) 31307) nil (25860 33509 896555 608000) 0 nil])
([nil nil ((31312 . 31327)) nil (25860 33509 896551 982000) 0 nil])
([nil nil ((31314 . 31330) (31315 . 31329) (#("                " 0 16 (face whitespace-trailing)) . 31314) (31314 . 31330) (31314 . 31315) ("              " . 31314) (31313 . 31328)) nil (25860 33509 896550 299000) 0 nil])
([nil nil (("
" . 31394) (undo-tree-id16 . -1) (undo-tree-id17 . 1)) nil (25860 33509 896547 152000) 0 nil])
([nil nil (("            " . -31392) (undo-tree-id15 . -2) 31394) nil (25860 33509 896543 656000) 0 nil])
([nil nil ((31287 . 31301) ("    " . 31287) (#("              " 0 14 (face whitespace-trailing)) . 31286) (undo-tree-id13 . -10) (undo-tree-id14 . 14) (31296 . 31300) (31296 . 31297)) nil (25860 33509 896540 683000) 0 nil])
([nil nil ((31286 . 31300)) nil (25860 33509 896536 567000) 0 nil])
([nil nil ((31300 . 31303)) nil (25860 33509 896535 518000) 0 nil])
([nil nil (("v" . -31300) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) ("-" . -31301) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) ("c" . -31302) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) 31303) nil (25860 33509 896533 222000) 0 nil])
([nil nil ((31300 . 31310)) nil (25860 33509 896521 584000) 0 nil])
([nil nil ((31301 . 31313) (#("v-card-ti" 0 9 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-card-ti")) . -31301) (undo-tree-id1 . -3) (undo-tree-id2 . -9) (undo-tree-id3 . -9) 31310) nil (25860 33509 896519 798000) 0 nil])
([nil nil ((31313 . 31329)) nil (25860 33509 896514 3000) 0 nil])
([nil nil ((31315 . 31331) (31316 . 31330) (#("                " 0 16 (face whitespace-trailing)) . 31315) (31315 . 31331) (31315 . 31316) ("              " . 31315) (31314 . 31329)) nil (25860 33509 896512 119000) 0 nil])
([nil nil ((31331 . 31349)) nil (25860 33509 896509 352000) 0 nil])
([nil nil ((" " . -31348) (undo-tree-id0 . -1) 31349) nil (25860 33509 896507 66000) 0 nil])
([nil nil ((#("                " 0 16 (face whitespace-trailing)) . -31403) (#("    " 0 4 (face whitespace-trailing)) . -26748) 31348) nil (25860 33509 896480 921000) 0 nil])
([nil nil ((31260 . 31273) (t 25860 33509 962887 886000)) nil (25860 33520 266182 903000) 0 nil])
([nil nil ((31273 . 31279)) nil (25860 33520 266181 540000) 0 nil])
([nil nil ((31279 . 31288)) nil (25860 33520 266180 471000) 0 nil])
([nil nil ((31281 . 31295) (31282 . 31294) (#("              " 0 14 (face whitespace-trailing)) . 31281) (31281 . 31295) (31281 . 31282) ("            " . 31281) (31280 . 31293)) nil (25860 33520 266178 512000) 0 nil])
([nil nil ((#("            <v-card>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-card") 13 19 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-card") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-card")) . 31338) (31317 . 31338) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 31296) (undo-tree-id149 . -14) (31317 . 31338) 31310) nil (25860 33520 266175 402000) 0 nil])
([nil nil ((#("              <v-card-title>
" 14 15 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-card-title") 15 27 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-card-title") 27 28 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-card-title")) . 31367) (31346 . 31367) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 31317) (undo-tree-id148 . -14) (31338 . 31367) 31331) nil (25860 33520 266171 907000) 0 nil])
([nil nil (("                Comparison values
" . 31401) (31380 . 31401) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 31346) (undo-tree-id147 . -14) (31367 . 31401) 31360) nil (25860 33520 266168 348000) 0 nil])
([nil nil ((#("              </v-card-title>
" 14 15 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-card-title") 15 16 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-card-title") 16 28 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-card-title") 28 29 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-card-title")) . 31431) (31410 . 31431) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 31380) (undo-tree-id146 . -14) (31401 . 31431) 31394) nil (25860 33520 266164 319000) 0 nil])
([nil nil ((#("              <v-card-text>
" 14 15 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-card-text") 15 26 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-card-text") 26 27 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-card-text")) . 31459) (31438 . 31459) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 31410) (undo-tree-id145 . -14) (31431 . 31459) 31424) nil (25860 33520 266159 723000) 0 nil])
([nil nil (("
" . 31460) (31439 . 31460) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 31438) (undo-tree-id144 . -14) (31459 . 31460) 31452) nil (25860 33520 266070 531000) 0 nil])
([nil nil ((#("              </v-card-text>
" 14 15 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-card-text") 15 16 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-card-text") 16 27 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-card-text") 27 28 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-card-text")) . 31489) (31468 . 31489) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 31439) (undo-tree-id143 . -14) (31460 . 31489) 31453) nil (25860 33520 266062 142000) 0 nil])
([nil nil ((#("            </v-card>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-card") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-card") 14 20 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-card") 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-card")) . 31511) (31490 . 31511) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 31468) (undo-tree-id142 . -14) (31489 . 31511) 31482) nil (25860 33520 266055 11000) 0 nil])
([nil nil ((31492 . 31494) (31449 . 31465) ("              " . 31449) (31418 . 31434) ("              " . 31418) (31386 . 31402) ("              " . 31386) (31366 . 31368) (31319 . 31335) ("              " . 31319) (31308 . 31310) 31265) nil (25860 33520 266044 781000) 0 nil])
([nil nil ((#("              " 0 14 (face whitespace-trailing)) . -31281) 31265) nil (25860 33520 266032 906000) 0 nil])
([nil nil ((76591 . 76592) (t 25860 33520 330777 624000)) nil (25860 33581 172984 513000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . 76581) (#(" " 0 1 (part-side javascript)) . 76581) (#(" " 0 1 (part-side javascript)) . 76581) (#(" " 0 1 (part-side javascript)) . 76581) (#(" " 0 1 (part-side javascript)) . 76581) (#(" " 0 1 (part-side javascript)) . 76581) (#(" " 0 1 (part-side javascript)) . 76581) (#(" " 0 1 (part-side javascript)) . 76581) (#("
" 0 1 (part-side javascript)) . 76581) (undo-tree-id150 . -1)) nil (25860 33581 172980 971000) 0 nil])
([nil nil ((76581 . 76590)) nil (25860 33581 172970 913000) 0 nil])
([nil nil ((76591 . 76592)) nil (25860 33581 172968 821000) 0 nil])
([nil nil ((#("," 0 1 (part-side javascript)) . 76592)) nil (25860 33581 172960 253000) 0 nil])
([nil nil ((#("          <!-- Filters that match current filter value wise -->
          <v-row>
            <v-col>

              <v-card>
                <v-card-title>
                  Comparison values
                </v-card-title>
                <v-card-text>

                </v-card-text>
              </v-card>
            </v-col>
          </v-row>" 10 11 (font-lock-face web-mode-comment-face tag-beg 0 tag-type comment) 11 62 (font-lock-face web-mode-comment-face tag-type comment) 62 63 (font-lock-face web-mode-comment-face tag-end t tag-type comment) 74 75 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-row") 75 80 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-row") 80 81 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-row") 94 95 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-col") 95 100 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-col") 100 101 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-col") 117 118 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-card") 118 124 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-card") 124 125 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-card") 142 143 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-card-title") 143 155 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-card-title") 155 156 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-card-title") 209 210 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-card-title") 210 211 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-card-title") 211 223 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-card-title") 223 224 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-card-title") 241 242 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-card-text") 242 253 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-card-text") 253 254 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-card-text") 272 273 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-card-text") 273 274 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-card-text") 274 285 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-card-text") 285 286 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-card-text") 301 302 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-card") 302 303 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-card") 303 309 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-card") 309 310 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-card") 323 324 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 324 325 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 325 330 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 330 331 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col") 342 343 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 343 344 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 344 349 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 349 350 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 31179) (undo-tree-id165 . -350) (undo-tree-id166 . -98) (undo-tree-id167 . -64) (undo-tree-id168 . -350) (undo-tree-id169 . -350) (t 25860 33581 234130 91000)) nil (25860 33905 26400 922000) 0 nil])
([nil nil (("
" . -31178) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) 31179) nil (25860 33905 26231 203000) 0 nil])
([nil nil (("
" . 31178) (undo-tree-id157 . -1)) nil (25860 33905 26221 310000) 0 nil])
([nil nil ((27396 . 27406) (#("          " 0 10 (face whitespace-trailing)) . 27395) (27395 . 27405) (27395 . 27396)) nil (25860 33905 26219 73000) 0 nil])
([nil nil ((27396 . 27397)) nil (25860 33905 26217 457000) 0 nil])
([nil nil (("<" . -27396) (undo-tree-id156 . -1) 27397) nil (25860 33905 26216 185000) 0 nil])
([nil nil ((27396 . 27406) (27396 . 27411)) nil (25860 33905 26213 832000) 0 nil])
([nil nil ((27414 . 27426) (27415 . 27425) (#("            " 0 12 (face whitespace-trailing)) . 27414) (27414 . 27426) (27414 . 27415) ("          " . 27414) (27413 . 27424)) nil (25860 33905 26211 921000) 0 nil])
([nil nil ((27426 . 27441)) nil (25860 33905 26209 735000) 0 nil])
([nil nil ((27434 . 27448) (27435 . 27447) (#("              " 0 14 (face whitespace-trailing)) . 27434) (27434 . 27448) (27434 . 27435) ("            " . 27434) (27433 . 27446)) nil (25860 33905 26208 87000) 0 nil])
([nil nil ((#("            </v-col>
          </v-row>" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col") 31 32 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 32 33 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 33 38 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 38 39 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 27449) (undo-tree-id153 . -39) (undo-tree-id154 . -21) (undo-tree-id155 . -39)) nil (25860 33905 26205 502000) 0 nil])
([nil nil ((33700 . 33711)) nil (25860 33905 26200 979000) 0 nil])
([nil nil ((nil rear-nonsticky nil 33749 . 33750) (nil tag-name "v-row" 33749 . 33750) (nil tag-type end 33749 . 33750) (nil tag-end t 33749 . 33750) (nil font-lock-face web-mode-html-tag-bracket-face 33749 . 33750) (nil tag-name "v-row" 33744 . 33749) (nil tag-type end 33744 . 33749) (nil font-lock-face web-mode-html-tag-custom-face 33744 . 33749) (nil tag-name "v-row" 33743 . 33744) (nil tag-type end 33743 . 33744) (nil font-lock-face web-mode-html-tag-bracket-face 33743 . 33744) (nil tag-name "v-row" 33742 . 33743) (nil tag-type end 33742 . 33743) (nil tag-beg 22 33742 . 33743) (nil font-lock-face web-mode-html-tag-bracket-face 33742 . 33743) (nil tag-name "v-col" 33730 . 33731) (nil tag-type end 33730 . 33731) (nil tag-end t 33730 . 33731) (nil font-lock-face web-mode-html-tag-bracket-face 33730 . 33731) (nil tag-name "v-col" 33725 . 33730) (nil tag-type end 33725 . 33730) (nil font-lock-face web-mode-html-tag-custom-face 33725 . 33730) (nil tag-name "v-col" 33724 . 33725) (nil tag-type end 33724 . 33725) (nil font-lock-face web-mode-html-tag-bracket-face 33724 . 33725) (nil tag-name "v-col" 33723 . 33724) (nil tag-type end 33723 . 33724) (nil tag-beg 22 33723 . 33724) (nil font-lock-face web-mode-html-tag-bracket-face 33723 . 33724) (33711 . 33750)) nil (25860 33905 26198 163000) 0 nil])
([nil nil ((27420 . 27429) (27412 . 27421)) nil (25860 33905 26191 13000) 0 nil])
([nil nil ((27450 . 27451)) nil (25860 33905 26189 698000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27467 . 27468) (nil tag-attr t 27467 . 27468) (nil tag-attr-end 5 27467 . 27468) (nil tag-name "v-col" 27467 . 27468) (nil tag-type start 27467 . 27468) (nil font-lock-face web-mode-html-attr-value-face 27467 . 27468) (nil tag-attr t 27457 . 27467) (nil tag-name "v-col" 27457 . 27467) (nil tag-type start 27457 . 27467) (nil font-lock-face web-mode-html-attr-value-face 27457 . 27467) (nil tag-attr t 27456 . 27457) (nil tag-name "v-col" 27456 . 27457) (nil tag-type start 27456 . 27457) (nil font-lock-face web-mode-html-attr-equal-face 27456 . 27457) (nil tag-attr t 27455 . 27456) (nil tag-name "v-col" 27455 . 27456) (nil tag-type start 27455 . 27456) (nil font-lock-face web-mode-html-attr-name-face 27455 . 27456) (nil tag-attr t 27454 . 27455) (nil tag-name "v-col" 27454 . 27455) (nil tag-type start 27454 . 27455) (nil font-lock-face web-mode-html-attr-name-face 27454 . 27455) (nil tag-attr t 27453 . 27454) (nil tag-name "v-col" 27453 . 27454) (nil tag-type start 27453 . 27454) (nil font-lock-face web-mode-html-attr-name-face 27453 . 27454) (nil tag-attr t 27452 . 27453) (nil tag-name "v-col" 27452 . 27453) (nil tag-type start 27452 . 27453) (nil font-lock-face web-mode-html-attr-name-face 27452 . 27453) (nil tag-attr-beg 0 27451 . 27452) (nil tag-attr t 27451 . 27452) (nil tag-name "v-col" 27451 . 27452) (nil tag-type start 27451 . 27452) (nil font-lock-face web-mode-html-attr-name-face 27451 . 27452) (27451 . 27468)) nil (25860 33905 26186 916000) 0 nil])
([nil nil (("          " . -33749) (undo-tree-id152 . -6) 33755) nil (25860 33905 26178 168000) 0 nil])
([nil nil ((33757 . 33770)) nil (25860 33905 26175 186000) 0 nil])
([nil nil ((nil rear-nonsticky nil 33794 . 33795) (nil tag-name "v-col" 33794 . 33795) (nil tag-type start 33794 . 33795) (nil tag-end t 33794 . 33795) (nil font-lock-face web-mode-html-tag-bracket-face 33794 . 33795) (nil rear-nonsticky t 33793 . 33794) (nil tag-attr t 33793 . 33794) (nil tag-attr-end 5 33793 . 33794) (nil tag-name "v-col" 33793 . 33794) (nil tag-type start 33793 . 33794) (nil font-lock-face web-mode-html-attr-value-face 33793 . 33794) (nil tag-attr t 33783 . 33793) (nil tag-name "v-col" 33783 . 33793) (nil tag-type start 33783 . 33793) (nil font-lock-face web-mode-html-attr-value-face 33783 . 33793) (nil tag-attr t 33782 . 33783) (nil tag-name "v-col" 33782 . 33783) (nil tag-type start 33782 . 33783) (nil font-lock-face web-mode-html-attr-equal-face 33782 . 33783) (nil tag-attr t 33778 . 33782) (nil tag-name "v-col" 33778 . 33782) (nil tag-type start 33778 . 33782) (nil font-lock-face web-mode-html-attr-name-face 33778 . 33782) (nil tag-attr-beg 0 33777 . 33778) (nil tag-attr t 33777 . 33778) (nil tag-name "v-col" 33777 . 33778) (nil tag-type start 33777 . 33778) (nil font-lock-face web-mode-html-attr-name-face 33777 . 33778) (nil tag-name "v-col" 33776 . 33777) (nil tag-type start 33776 . 33777) (nil tag-name "v-col" 33771 . 33776) (nil tag-type start 33771 . 33776) (nil font-lock-face web-mode-html-tag-custom-face 33771 . 33776) (nil tag-name "v-col" 33770 . 33771) (nil tag-type start 33770 . 33771) (nil tag-beg 19 33770 . 33771) (nil font-lock-face web-mode-html-tag-bracket-face 33770 . 33771) (33770 . 33795)) nil (25860 33905 26172 207000) 0 nil])
([nil nil ((33795 . 33810)) nil (25860 33905 26162 854000) 0 nil])
([nil nil (("  " . -33808) (33810 . 33818)) nil (25860 33905 26161 651000) 0 nil])
([nil nil ((33801 . 33802) (33794 . 33802)) nil (25860 33905 26160 184000) 0 nil])
([nil nil ((27468 . 27471)) nil (25860 33905 26158 936000) 0 nil])
([nil nil ((#("x" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr-end 0 tag-attr t)) . -27470) (undo-tree-id151 . -1) 27471) nil (25860 33905 26156 970000) 0 nil])
([nil nil ((27475 . 27476) (27470 . 27476)) nil (25860 33905 26148 223000) 0 nil])
([nil nil ((#("          " 0 9 (face whitespace-trailing) 9 10 (face whitespace-trailing)) . -27480) (#("              " 0 14 (face whitespace-trailing)) . -27479) 27476) nil (25860 33905 26132 643000) 0 nil])
([nil nil ((34169 . 34173) (34134 . 34150) ("            " . 34134) (34106 . 34124) ("              " . 34106) (34095 . 34097) (34066 . 34068) (34008 . 34032) ("                      " . 34008) (33994 . 33996) (33953 . 33955) (33902 . 33904) (33821 . 33853) ("                              " . 33821) (33715 . 33717) (33631 . 33663) ("                              " . 33631) (33607 . 33609) (33563 . 33565) (33509 . 33511) (33459 . 33483) (#("                      " 0 22 (tag-type start tag-name "v-combobox")) . 33459) (33416 . 33418) (33346 . 33348) (33286 . 33288) (33179 . 33181) (33075 . 33077) (33033 . 33035) (32999 . 33001) (32950 . 32952) (32918 . 32920) (32883 . 32885) (32848 . 32850) (32807 . 32809) (32759 . 32761) (32711 . 32713) (32656 . 32658) (32597 . 32599) (32537 . 32561) ("                      " . 32537) (32484 . 32486) (32453 . 32455) (32397 . 32421) ("                      " . 32397) (32371 . 32395) (#("                      " 0 22 (tag-type start tag-name "v-select")) . 32371) (32323 . 32325) (32269 . 32271) (32206 . 32208) (32160 . 32162) (32125 . 32127) (32079 . 32081) (32026 . 32028) (31972 . 31974) (31940 . 31942) (31905 . 31907) (31847 . 31871) ("                      " . 31847) (31809 . 31811) (31759 . 31763) (31691 . 31709) ("              " . 31691) (31649 . 31665) ("            " . 31649) (31614 . 31618) (31591 . 31595) (31556 . 31572) ("            " . 31556) (31529 . 31547) ("              " . 31529) (31516 . 31520) (31481 . 31485) (31425 . 31449) ("                    " . 31425) (31387 . 31413) ("                      " . 31387) (31374 . 31378) (31337 . 31341) (31265 . 31297) ("                            " . 31265) (31229 . 31233) (31184 . 31188) (31147 . 31151) (31106 . 31110) (31040 . 31072) ("                            " . 31040) (30997 . 31031) ("                              " . 30997) (30984 . 30988) (30914 . 30918) (30845 . 30849) (30753 . 30787) ("                              " . 30753) (30710 . 30744) ("                              " . 30710) (30697 . 30701) (30627 . 30631) (30563 . 30567) (30471 . 30505) ("                              " . 30471) (30432 . 30464) ("                            " . 30432) (30388 . 30420) ("                            " . 30388) (30345 . 30379) ("                              " . 30345) (30327 . 30331) (30229 . 30270) (#("                                     " 0 37 (tag-type start tag-name "v-col")) . 30229) (30178 . 30219) (#("                                     " 0 37 (tag-type start tag-name "v-col")) . 30178) (30122 . 30156) ("                              " . 30122) (30046 . 30078) ("                            " . 30046) (30040 . 30044) (29975 . 30007) (#("                            " 0 28 (tag-type start tag-name "v-tooltip")) . 29975) (29960 . 29964) (29903 . 29907) (29818 . 29844) ("                      " . 29818) (29780 . 29806) ("                      " . 29780) (29766 . 29770) (29727 . 29731) (29681 . 29685) (29643 . 29647) (29569 . 29573) (29505 . 29509) (29467 . 29471) (29426 . 29430) (29351 . 29355) (29258 . 29284) ("                      " . 29258) (29232 . 29256) (#("                    " 0 20 (tag-type start tag-name "v-treeview")) . 29232) (29183 . 29209) (#("                      " 0 22 (tag-type start tag-name "v-treeview")) . 29183) (29151 . 29177) (#("                      " 0 22 (tag-type start tag-name "v-treeview")) . 29151) (29111 . 29137) (#("                      " 0 22 (tag-type start tag-name "v-treeview")) . 29111) (29075 . 29101) (#("                      " 0 22 (tag-type start tag-name "v-treeview")) . 29075) (29037 . 29063) (#("                      " 0 22 (tag-type start tag-name "v-treeview")) . 29037) (28997 . 29023) (#("                      " 0 22 (tag-type start tag-name "v-treeview")) . 28997) (28949 . 28975) (#("                      " 0 22 (tag-type start tag-name "v-treeview")) . 28949) (28888 . 28914) (#("                      " 0 22 (tag-type start tag-name "v-treeview")) . 28888) (28837 . 28863) (#("                      " 0 22 (tag-type start tag-name "v-treeview")) . 28837) (28787 . 28813) (#("                      " 0 22 (tag-type start tag-name "v-treeview")) . 28787) (28740 . 28766) (#("                      " 0 22 (tag-type start tag-name "v-treeview")) . 28740) (28691 . 28717) (#("                      " 0 22 (tag-type start tag-name "v-treeview")) . 28691) (28655 . 28679) ("                    " . 28655) (28568 . 28572) (28520 . 28524) (28460 . 28478) ("              " . 28460) (28418 . 28436) ("              " . 28418) (28391 . 28409) ("              " . 28391) (28378 . 28382) (28341 . 28345) (28261 . 28285) (#("                    " 0 20 (tag-type start tag-name "v-text-field")) . 28261) (28227 . 28251) (#("                    " 0 20 (tag-type start tag-name "v-text-field")) . 28227) (28190 . 28214) (#("                    " 0 20 (tag-type start tag-name "v-text-field")) . 28190) (28161 . 28185) (#("                    " 0 20 (tag-type start tag-name "v-text-field")) . 28161) (28093 . 28117) (#("                    " 0 20 (tag-type start tag-name "v-text-field")) . 28093) (28045 . 28069) (#("                    " 0 20 (tag-type start tag-name "v-text-field")) . 28045) (27982 . 28006) (#("                    " 0 20 (tag-type start tag-name "v-text-field")) . 27982) (27964 . 27968) (27879 . 27883) (27850 . 27854) (27759 . 27763) (27674 . 27678) (27609 . 27627) ("              " . 27609) (27567 . 27583) ("            " . 27567) (27491 . 27495) 26972 (t 25860 33905 102690 948000)) nil (25860 34014 468664 281000) 0 nil])
([nil nil (("
" . 27478) (undo-tree-id171 . -1) (undo-tree-id172 . -1) ("
" . 27478) (undo-tree-id173 . -1)) nil (25860 34014 468621 276000) 0 nil])
([nil nil ((34249 . 34263) ("              " . 34248) (undo-tree-id170 . -14) (34247 . 34263)) nil (25860 34014 468615 357000) 0 nil])
([nil nil ((34620 . 34633)) nil (25860 34014 468607 400000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34637 . 34638) (nil tag-attr t 34637 . 34638) (nil tag-attr-end 0 34637 . 34638) (nil tag-name "v-btn" 34637 . 34638) (nil tag-type start 34637 . 34638) (nil font-lock-face web-mode-html-attr-name-face 34637 . 34638) (nil tag-attr t 34634 . 34637) (nil tag-name "v-btn" 34634 . 34637) (nil tag-type start 34634 . 34637) (nil font-lock-face web-mode-html-attr-name-face 34634 . 34637) (nil tag-attr-beg 0 34633 . 34634) (nil tag-attr t 34633 . 34634) (nil tag-name "v-btn" 34633 . 34634) (nil tag-type start 34633 . 34634) (nil font-lock-face web-mode-html-attr-name-face 34633 . 34634) (34633 . 34638)) nil (25860 34014 864179 461000) 0 nil])
([nil nil ((34839 . 34852)) nil (25860 34019 87521 385000) 0 nil] [nil nil ((34518 . 34531)) ((#("
            " 0 1 (tag-type start tag-name "v-checkbox") 1 13 (tag-type start tag-name "v-checkbox")) . 34518) (undo-tree-id175 . -13) (undo-tree-id176 . -13) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -13) (undo-tree-id180 . -13) (undo-tree-id181 . -13) (undo-tree-id182 . -13) (undo-tree-id183 . -13) (undo-tree-id184 . -13) (undo-tree-id185 . -13) (undo-tree-id186 . -13) (undo-tree-id187 . -13) (undo-tree-id188 . -13) (undo-tree-id189 . -13) (undo-tree-id190 . -13)) (25860 34014 472601 901000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34856 . 34857) (nil tag-attr t 34856 . 34857) (nil tag-attr-end 0 34856 . 34857) (nil tag-name "v-btn" 34856 . 34857) (nil tag-type start 34856 . 34857) (nil font-lock-face web-mode-html-attr-name-face 34856 . 34857) (nil tag-attr t 34853 . 34856) (nil tag-name "v-btn" 34853 . 34856) (nil tag-type start 34853 . 34856) (nil font-lock-face web-mode-html-attr-name-face 34853 . 34856) (nil tag-attr-beg 0 34852 . 34853) (nil tag-attr t 34852 . 34853) (nil tag-name "v-btn" 34852 . 34853) (nil tag-type start 34852 . 34853) (nil font-lock-face web-mode-html-attr-name-face 34852 . 34853) (34852 . 34857)) nil (25860 34019 87518 679000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34535 . 34536) (nil tag-attr t 34535 . 34536) (nil tag-attr-end 0 34535 . 34536) (nil tag-name "v-checkbox" 34535 . 34536) (nil tag-type start 34535 . 34536) (nil font-lock-face web-mode-html-attr-name-face 34535 . 34536) (nil tag-attr t 34532 . 34535) (nil tag-name "v-checkbox" 34532 . 34535) (nil tag-type start 34532 . 34535) (nil font-lock-face web-mode-html-attr-name-face 34532 . 34535) (nil tag-attr-beg 0 34531 . 34532) (nil tag-attr t 34531 . 34532) (nil tag-name "v-checkbox" 34531 . 34532) (nil tag-type start 34531 . 34532) (nil font-lock-face web-mode-html-attr-name-face 34531 . 34532) (34531 . 34536)) ((#("block" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t tag-attr-beg 0) 1 4 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t) 4 5 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr-end 0 tag-attr t rear-nonsticky nil)) . 34531) (undo-tree-id174 . -5) (nil tag-name "v-checkbox" 34531 . 34532) (nil tag-name "v-checkbox" 34532 . 34535) (nil tag-name "v-checkbox" 34535 . 34536) (nil rear-nonsticky t 34535 . 34536)) (25860 34014 468591 470000) 0 nil])
([nil nil (("              " . -34249) 34857) nil (25860 34019 87506 160000) 0 nil])
nil
([nil nil ((#("
        </v-card-text>" 9 10 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-card-text") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-card-text") 11 22 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-card-text") 22 23 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-card-text")) . 34289) (undo-tree-id243 . -23) (undo-tree-id244 . -1) (undo-tree-id245 . -23) (t 25860 34019 149445 947000)) nil (25860 34200 780463 183000) 0 nil])
([nil nil ((#("
        <v-card-actions>" 9 10 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-card-actions") 10 24 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-card-actions") 24 25 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-card-actions")) . 34289) (undo-tree-id238 . -25) (undo-tree-id239 . -25) (undo-tree-id240 . -1) (undo-tree-id241 . -25) (undo-tree-id242 . -25)) nil (25860 34200 780458 125000) 0 nil])
([nil nil ((#("
        </v-card-actions>" 9 10 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-card-actions") 10 11 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-card-actions") 11 25 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-card-actions") 25 26 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-card-actions")) . 34925) (undo-tree-id235 . -26) (undo-tree-id236 . -1) (undo-tree-id237 . -26)) nil (25860 34200 780448 302000) 0 nil])
([nil nil ((34925 . 34936)) nil (25860 34200 780431 437000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34958 . 34959) (nil tag-name "v-card-text" 34958 . 34959) (nil tag-type end 34958 . 34959) (nil tag-end t 34958 . 34959) (nil font-lock-face web-mode-html-tag-bracket-face 34958 . 34959) (nil tag-name "v-card-text" 34947 . 34958) (nil tag-type end 34947 . 34958) (nil font-lock-face web-mode-html-tag-custom-face 34947 . 34958) (nil tag-name "v-card-text" 34946 . 34947) (nil tag-type end 34946 . 34947) (nil font-lock-face web-mode-html-tag-bracket-face 34946 . 34947) (nil tag-name "v-card-text" 34945 . 34946) (nil tag-type end 34945 . 34946) (nil tag-beg 22 34945 . 34946) (nil font-lock-face web-mode-html-tag-bracket-face 34945 . 34946) (34936 . 34959)) nil (25860 34200 780428 343000) 0 nil])
([nil nil ((34289 . 34300)) nil (25860 34200 780418 302000) 0 nil])
([nil nil ((34300 . 34315)) nil (25860 34200 780417 24000) 0 nil])
([nil nil ((34308 . 34320) (34309 . 34319) (#("            " 0 12 (face whitespace-trailing)) . 34308) (34308 . 34320) (34308 . 34309) ("          " . 34308) (34307 . 34318)) nil (25860 34200 780415 235000) 0 nil])
([nil nil ((#("
          </v-row>" 11 12 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 13 18 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 18 19 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 34320) (undo-tree-id231 . -19) (undo-tree-id232 . -1) (undo-tree-id233 . -19) (undo-tree-id234 . 19)) nil (25860 34200 780411 2000) 0 nil])
([nil nil (("
" . 34320) (undo-tree-id230 . -1)) nil (25860 34200 780047 370000) 0 nil])
([nil nil (("          " . -34320)) nil (25860 34200 780043 537000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34974 . 34975) (nil tag-name "v-row" 34974 . 34975) (nil tag-type end 34974 . 34975) (nil tag-end t 34974 . 34975) (nil font-lock-face web-mode-html-tag-bracket-face 34974 . 34975) (nil tag-name "v-row" 34969 . 34974) (nil tag-type end 34969 . 34974) (nil font-lock-face web-mode-html-tag-custom-face 34969 . 34974) (nil tag-name "v-row" 34968 . 34969) (nil tag-type end 34968 . 34969) (nil font-lock-face web-mode-html-tag-bracket-face 34968 . 34969) (nil tag-name "v-row" 34967 . 34968) (nil tag-type end 34967 . 34968) (nil tag-beg 22 34967 . 34968) (nil font-lock-face web-mode-html-tag-bracket-face 34967 . 34968) (34956 . 34975)) nil (25860 34200 780040 312000) 0 nil])
([nil nil (("
" . 34945) (undo-tree-id229 . -1)) nil (25860 34200 780031 383000) 0 nil])
([nil nil ((34974 . 34985)) nil (25860 34200 780026 970000) 0 nil])
([nil nil ((34979 . 34981) (34943 . 34945) (34927 . 34929) (34864 . 34866) (34844 . 34846) (34816 . 34818) (34795 . 34797) (34774 . 34776) (34725 . 34727) (34709 . 34711) (34674 . 34676) (34629 . 34631) (34609 . 34611) (34579 . 34581) (34558 . 34560) (34524 . 34526) (34497 . 34499) (34479 . 34481) (34440 . 34442) (34410 . 34412) (34380 . 34382) (34344 . 34346) 34290) nil (25860 34200 780023 12000) 0 nil])
([nil nil ((34307 . 34320)) nil (25860 34200 780009 358000) 0 nil])
([nil nil ((34320 . 34335)) nil (25860 34200 780007 865000) 0 nil])
([nil nil ((34328 . 34342) (34329 . 34341) (#("              " 0 14 (face whitespace-trailing)) . 34328) (34328 . 34342) (34328 . 34329) ("            " . 34328) (34327 . 34340)) nil (25860 34200 780004 396000) 0 nil])
([nil nil ((#("            <v-checkbox
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-checkbox") 13 23 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-checkbox") 23 24 (tag-type start tag-name "v-checkbox")) . 34388) (undo-tree-id227 . -12) (34367 . 34388) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34343) (undo-tree-id228 . -14) (34364 . 34388) 34357) nil (25860 34200 779998 356000) 0 nil])
([nil nil (("              v-if=\"save_root == 0\"
" . 34424) (34403 . 34424) (#("            </v-col>
" 0 11 (tag-type start tag-name "v-checkbox") 11 12 (tag-end t tag-type start tag-name "v-checkbox") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34367) (undo-tree-id226 . -14) (34388 . 34424) 34381) nil (25860 34200 779989 546000) 0 nil])
([nil nil (("              color=\"primary\"
" . 34454) (34433 . 34454) (#("            </v-col>
" 0 11 (tag-type start tag-name "v-checkbox") 11 12 (tag-end t tag-type start tag-name "v-checkbox") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34403) (undo-tree-id225 . -14) (34424 . 34454) 34417) nil (25860 34200 779983 738000) 0 nil])
([nil nil (("              label=\"Private\"
" . 34484) (34463 . 34484) (#("            </v-col>
" 0 11 (tag-type start tag-name "v-checkbox") 11 12 (tag-end t tag-type start tag-name "v-checkbox") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34433) (undo-tree-id224 . -14) (34454 . 34484) 34447) nil (25860 34200 779975 689000) 0 nil])
([nil nil (("              v-model=\"private_filter\"
" . 34523) (34502 . 34523) (#("            </v-col>
" 0 11 (tag-type start tag-name "v-checkbox") 11 12 (tag-end t tag-type start tag-name "v-checkbox") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34463) (undo-tree-id223 . -14) (34484 . 34523) 34477) nil (25860 34200 779969 233000) 0 nil])
([nil nil (("              dense
" . 34543) (undo-tree-id221 . -19) (34522 . 34543) (#("            </v-col>
" 0 11 (tag-type start tag-name "v-checkbox") 11 12 (tag-end t tag-type start tag-name "v-checkbox") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34502) (undo-tree-id222 . -14) (34523 . 34543) 34516) nil (25860 34200 779962 221000) 0 nil])
([nil nil ((#("            ></v-checkbox>
" 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-checkbox") 14 15 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-checkbox") 15 25 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-checkbox") 25 26 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-checkbox")) . 34570) (34549 . 34570) (#("            </v-col>
" 0 11 (tag-type start tag-name "v-checkbox") 11 12 (tag-end t tag-type start tag-name "v-checkbox") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34522) (undo-tree-id220 . -14) (34543 . 34570) 34536) nil (25860 34200 779953 446000) 0 nil])
([nil nil ((#("
            <v-spacer></v-spacer>" 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-spacer") 14 22 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-spacer") 22 23 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-spacer") 23 24 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-spacer") 24 25 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-spacer") 25 33 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-spacer") 33 34 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-spacer")) . 34569) (undo-tree-id217 . -34) (undo-tree-id218 . -1) (undo-tree-id219 . -34)) nil (25860 34200 779943 967000) 0 nil])
([nil nil ((34569 . 34582)) nil (25860 34200 779934 961000) 0 nil])
([nil nil ((34582 . 34597)) nil (25860 34200 779933 136000) 0 nil])
([nil nil ((34590 . 34604) (34591 . 34603) (#("              " 0 14 (face whitespace-trailing)) . 34590) (34590 . 34604) (34590 . 34591) ("            " . 34590) (34589 . 34602)) nil (25860 34200 779930 838000) 0 nil])
([nil nil ((#("            <v-btn
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-btn") 13 18 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-btn") 18 19 (tag-type start tag-name "v-btn")) . 34645) (34624 . 34645) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34605) (undo-tree-id216 . -14) (34626 . 34645) 34619) nil (25860 34200 779924 950000) 0 nil])
([nil nil (("              color=\"primary\"
" . 34675) (34654 . 34675) (#("            </v-col>
" 0 11 (tag-type start tag-name "v-btn") 11 12 (tag-end t tag-type start tag-name "v-btn") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34624) (undo-tree-id215 . -14) (34645 . 34675) 34638) nil (25860 34200 779919 449000) 0 nil])
([nil nil ((#("              block
" 18 19 (rear-nonsticky t)) . 34695) (undo-tree-id213 . -12) (34674 . 34695) (#("            </v-col>
" 0 11 (tag-type start tag-name "v-btn") 11 12 (tag-end t tag-type start tag-name "v-btn") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34654) (undo-tree-id214 . -14) (34675 . 34695) 34668) nil (25860 34200 779907 34000) 0 nil])
([nil nil ((#("              :loading=\"save_filter_loading\"
" 14 15 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 15 16 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 16 17 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 17 18 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 18 19 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 19 20 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 20 21 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 21 22 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 22 23 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 23 24 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 28 (face web-mode-variable-name-face block-side t) 28 29 (face web-mode-variable-name-face block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (face web-mode-variable-name-face block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (face web-mode-variable-name-face block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (face web-mode-variable-name-face block-side t) 43 44 (font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 34740) (34719 . 34740) (#("            </v-col>
" 0 11 (tag-type start tag-name "v-btn") 11 12 (tag-end t tag-type start tag-name "v-btn") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34674) (undo-tree-id212 . -14) (34695 . 34740) 34688) nil (25860 34200 779894 807000) 0 nil])
([nil nil ((#("              @click=\"save_filter()\"
" 14 15 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 15 16 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 16 17 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 17 18 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 18 19 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 19 20 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 20 22 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 22 33 (face web-mode-function-call-face block-side t) 33 35 (block-side t) 35 36 (font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 34777) (34756 . 34777) (#("            </v-col>
" 0 11 (tag-type start tag-name "v-btn") 11 12 (tag-end t tag-type start tag-name "v-btn") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34719) (undo-tree-id211 . -14) (34740 . 34777) 34733) nil (25860 34200 779880 661000) 0 nil])
([nil nil (("            >
" . 34791) (34770 . 34791) (#("            </v-col>
" 0 11 (tag-type start tag-name "v-btn") 11 12 (tag-end t tag-type start tag-name "v-btn") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34756) (undo-tree-id210 . -14) (34777 . 34791) 34770) nil (25860 34200 779877 200000) 0 nil])
([nil nil ((#("              {{$t('AnalysisNetwork.saveFilter')}}
" 14 15 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 15 16 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 16 17 (block-side t) 17 18 (face web-mode-variable-name-face block-side t) 18 19 (face (rainbow-delimiters-depth-3-face) block-side t) 19 20 (block-side t) 20 21 (face web-mode-variable-name-face block-side t) 21 22 (face web-mode-variable-name-face block-side t) 22 23 (face web-mode-variable-name-face block-side t) 23 24 (face web-mode-variable-name-face block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 28 (face web-mode-variable-name-face block-side t) 28 29 (face web-mode-variable-name-face block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (face web-mode-variable-name-face block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (face web-mode-variable-name-face block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (face web-mode-variable-name-face block-side t) 43 44 (face web-mode-variable-name-face block-side t) 44 45 (face web-mode-variable-name-face block-side t) 45 46 (face web-mode-variable-name-face block-side t) 46 47 (block-side t) 47 48 (face (rainbow-delimiters-depth-3-face) block-side t) 48 49 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-side t) 49 50 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 34842) (34821 . 34842) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34770) (undo-tree-id209 . -14) (34791 . 34842) 34784) nil (25860 34200 779873 622000) 0 nil])
([nil nil ((#("            </v-btn>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-btn") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-btn") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-btn") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-btn")) . 34863) (34842 . 34863) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34821) (undo-tree-id208 . -14) (34842 . 34863) 34835) nil (25860 34200 779869 827000) 0 nil])
([nil nil ((34862 . 34875)) nil (25860 34200 779866 760000) 0 nil])
([nil nil ((34875 . 34890)) nil (25860 34200 779865 753000) 0 nil])
([nil nil ((34883 . 34897) (34884 . 34896) (#("              " 0 14 (face whitespace-trailing)) . 34883) (34883 . 34897) (34883 . 34884) ("            " . 34883) (34882 . 34895)) nil (25860 34200 779864 144000) 0 nil])
([nil nil ((#("            <v-btn
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-btn") 13 18 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-btn") 18 19 (tag-type start tag-name "v-btn")) . 34938) (34917 . 34938) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34898) (undo-tree-id207 . -14) (34919 . 34938) 34912) nil (25860 34200 779860 866000) 0 nil])
([nil nil (("              color=\"white\"
" . 34966) (34945 . 34966) (#("            </v-col>
" 0 11 (tag-type start tag-name "v-btn") 11 12 (tag-end t tag-type start tag-name "v-btn") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34917) (undo-tree-id206 . -14) (34938 . 34966) 34931) nil (25860 34200 779857 418000) 0 nil])
([nil nil ((#("              block
" 18 19 (rear-nonsticky t)) . 34986) (undo-tree-id204 . -12) (34965 . 34986) (#("            </v-col>
" 0 11 (tag-type start tag-name "v-btn") 11 12 (tag-end t tag-type start tag-name "v-btn") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34945) (undo-tree-id205 . -14) (34966 . 34986) 34959) nil (25860 34200 779853 620000) 0 nil])
([nil nil ((#("              @click=\"save_filter_dialog=false; filter_items=[]\"
" 14 15 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 15 16 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 16 17 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 17 18 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 18 19 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 19 20 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 20 21 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 21 22 (font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 22 23 (face web-mode-variable-name-face block-side t) 23 24 (face web-mode-variable-name-face block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 28 (face web-mode-variable-name-face block-side t) 28 29 (face web-mode-variable-name-face block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (face web-mode-variable-name-face block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (face web-mode-variable-name-face block-side t) 34 35 (face web-mode-variable-name-face block-side t) 35 36 (face web-mode-variable-name-face block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (face web-mode-variable-name-face block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (block-side t) 41 42 (face web-mode-variable-name-face block-side t) 42 43 (face web-mode-variable-name-face block-side t) 43 44 (face web-mode-variable-name-face block-side t) 44 45 (face web-mode-variable-name-face block-side t) 45 46 (face web-mode-variable-name-face block-side t) 46 48 (block-side t) 48 49 (face web-mode-variable-name-face block-side t) 49 50 (face web-mode-variable-name-face block-side t) 50 51 (face web-mode-variable-name-face block-side t) 51 52 (face web-mode-variable-name-face block-side t) 52 53 (face web-mode-variable-name-face block-side t) 53 54 (face web-mode-variable-name-face block-side t) 54 55 (face web-mode-variable-name-face block-side t) 55 56 (face web-mode-variable-name-face block-side t) 56 57 (face web-mode-variable-name-face block-side t) 57 58 (face web-mode-variable-name-face block-side t) 58 59 (face web-mode-variable-name-face block-side t) 59 60 (face web-mode-variable-name-face block-side t) 60 63 (block-side t) 63 64 (font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 35051) (35030 . 35051) (#("            </v-col>
" 0 11 (tag-type start tag-name "v-btn") 11 12 (tag-end t tag-type start tag-name "v-btn") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34965) (undo-tree-id203 . -14) (34986 . 35051) 34979) nil (25860 34200 779848 676000) 0 nil])
([nil nil (("            >
" . 35065) (35044 . 35065) (#("            </v-col>
" 0 11 (tag-type start tag-name "v-btn") 11 12 (tag-end t tag-type start tag-name "v-btn") 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 35030) (undo-tree-id202 . -14) (35051 . 35065) 35044) nil (25860 34200 779844 921000) 0 nil])
([nil nil ((#("              {{$t('General.close')}}
" 14 15 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 15 16 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 16 17 (block-side t) 17 18 (face web-mode-variable-name-face block-side t) 18 19 (face (rainbow-delimiters-depth-3-face) block-side t) 19 20 (block-side t) 20 21 (face web-mode-variable-name-face block-side t) 21 22 (face web-mode-variable-name-face block-side t) 22 23 (face web-mode-variable-name-face block-side t) 23 24 (face web-mode-variable-name-face block-side t) 24 25 (face web-mode-variable-name-face block-side t) 25 26 (face web-mode-variable-name-face block-side t) 26 27 (face web-mode-variable-name-face block-side t) 27 28 (block-side t) 28 29 (face web-mode-variable-name-face block-side t) 29 30 (face web-mode-variable-name-face block-side t) 30 31 (face web-mode-variable-name-face block-side t) 31 32 (face web-mode-variable-name-face block-side t) 32 33 (face web-mode-variable-name-face block-side t) 33 34 (block-side t) 34 35 (face (rainbow-delimiters-depth-3-face) block-side t) 35 36 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-side t) 36 37 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t)) . 35103) (35082 . 35103) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 35044) (undo-tree-id201 . -14) (35065 . 35103) 35058) nil (25860 34200 779841 91000) 0 nil])
([nil nil ((#("            </v-btn>          
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-btn") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-btn") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-btn") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-btn") 20 30 (face whitespace-trailing)) . 35134) (undo-tree-id197 . -20) (undo-tree-id198 . -30) (undo-tree-id199 . -30) (35113 . 35134) (#("            </v-col>
" 12 13 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 14 19 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 35082) (undo-tree-id200 . -14) (35103 . 35134) 35096) nil (25860 34200 779837 291000) 0 nil])
([nil nil (("
" . 35152) (undo-tree-id196 . -1)) nil (25860 34200 779830 314000) 0 nil])
([nil nil ((35136 . 35138) (35084 . 35100) ("              " . 35084) (35080 . 35082) (35001 . 35017) (#("              " 0 14 (tag-type start tag-name "v-btn")) . 35001) (34979 . 34995) (#("              " 0 14 (tag-type start tag-name "v-btn")) . 34979) (34949 . 34965) (#("              " 0 14 (tag-type start tag-name "v-btn")) . 34949) (34940 . 34942) (34861 . 34863) (34796 . 34812) ("              " . 34796) (34792 . 34794) (34741 . 34757) (#("              " 0 14 (tag-type start tag-name "v-btn")) . 34741) (34694 . 34710) (#("              " 0 14 (tag-type start tag-name "v-btn")) . 34694) (34672 . 34688) (#("              " 0 14 (tag-type start tag-name "v-btn")) . 34672) (34640 . 34656) (#("              " 0 14 (tag-type start tag-name "v-btn")) . 34640) (34631 . 34633) (34546 . 34548) (34512 . 34528) (#("              " 0 14 (tag-type start tag-name "v-checkbox")) . 34512) (34471 . 34487) (#("              " 0 14 (tag-type start tag-name "v-checkbox")) . 34471) (34439 . 34455) (#("              " 0 14 (tag-type start tag-name "v-checkbox")) . 34439) (34407 . 34423) (#("              " 0 14 (tag-type start tag-name "v-checkbox")) . 34407) (34369 . 34385) (#("              " 0 14 (tag-type start tag-name "v-checkbox")) . 34369) (34355 . 34357) 34290) nil (25860 34200 779824 644000) 0 nil])
([nil nil (("
" . 34327) (undo-tree-id195 . -1)) nil (25860 34200 779815 292000) 0 nil])
([nil nil ((34333 . 34334) (34326 . 34334)) nil (25860 34200 779812 805000) 0 nil])
([nil nil ((34610 . 34611)) nil (25860 34200 779811 572000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34618 . 34619) (nil tag-attr t 34618 . 34619) (nil tag-attr-end 4 34618 . 34619) (nil tag-name "v-col" 34618 . 34619) (nil tag-type start 34618 . 34619) (nil font-lock-face web-mode-html-attr-value-face 34618 . 34619) (nil tag-attr t 34616 . 34618) (nil tag-name "v-col" 34616 . 34618) (nil tag-type start 34616 . 34618) (nil font-lock-face web-mode-html-attr-value-face 34616 . 34618) (nil tag-attr t 34615 . 34616) (nil tag-name "v-col" 34615 . 34616) (nil tag-type start 34615 . 34616) (nil font-lock-face web-mode-html-attr-equal-face 34615 . 34616) (nil tag-attr t 34614 . 34615) (nil tag-name "v-col" 34614 . 34615) (nil tag-type start 34614 . 34615) (nil font-lock-face web-mode-html-attr-name-face 34614 . 34615) (nil tag-attr t 34613 . 34614) (nil tag-name "v-col" 34613 . 34614) (nil tag-type start 34613 . 34614) (nil font-lock-face web-mode-html-attr-name-face 34613 . 34614) (nil tag-attr t 34612 . 34613) (nil tag-name "v-col" 34612 . 34613) (nil tag-type start 34612 . 34613) (nil font-lock-face web-mode-html-attr-name-face 34612 . 34613) (nil tag-attr-beg 0 34611 . 34612) (nil tag-attr t 34611 . 34612) (nil tag-name "v-col" 34611 . 34612) (nil tag-type start 34611 . 34612) (nil font-lock-face web-mode-html-attr-name-face 34611 . 34612) (34611 . 34619)) nil (25860 34200 779808 680000) 0 nil])
([nil nil ((#("2" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t)) . -34617) (undo-tree-id194 . -1) 34618) nil (25860 34200 779799 458000) 0 nil])
([nil nil ((34617 . 34618)) nil (25860 34200 779796 825000) 0 nil])
([nil nil ((34928 . 34929)) nil (25860 34200 779795 646000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34936 . 34937) (nil tag-attr t 34936 . 34937) (nil tag-attr-end 4 34936 . 34937) (nil tag-name "v-col" 34936 . 34937) (nil tag-type start 34936 . 34937) (nil font-lock-face web-mode-html-attr-value-face 34936 . 34937) (nil tag-attr t 34934 . 34936) (nil tag-name "v-col" 34934 . 34936) (nil tag-type start 34934 . 34936) (nil font-lock-face web-mode-html-attr-value-face 34934 . 34936) (nil tag-attr t 34933 . 34934) (nil tag-name "v-col" 34933 . 34934) (nil tag-type start 34933 . 34934) (nil font-lock-face web-mode-html-attr-equal-face 34933 . 34934) (nil tag-attr t 34932 . 34933) (nil tag-name "v-col" 34932 . 34933) (nil tag-type start 34932 . 34933) (nil font-lock-face web-mode-html-attr-name-face 34932 . 34933) (nil tag-attr t 34931 . 34932) (nil tag-name "v-col" 34931 . 34932) (nil tag-type start 34931 . 34932) (nil font-lock-face web-mode-html-attr-name-face 34931 . 34932) (nil tag-attr t 34930 . 34931) (nil tag-name "v-col" 34930 . 34931) (nil tag-type start 34930 . 34931) (nil font-lock-face web-mode-html-attr-name-face 34930 . 34931) (nil tag-attr-beg 0 34929 . 34930) (nil tag-attr t 34929 . 34930) (nil tag-name "v-col" 34929 . 34930) (nil tag-type start 34929 . 34930) (nil font-lock-face web-mode-html-attr-name-face 34929 . 34930) (34929 . 34937)) nil (25860 34200 779792 813000) 0 nil])
([nil nil ((#("2" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t)) . -34935) (undo-tree-id193 . -1) 34936) nil (25860 34200 779783 457000) 0 nil])
([nil nil ((34935 . 34936)) nil (25860 34200 779780 362000) 0 nil])
([nil nil (("
" . 34938) (undo-tree-id192 . -1)) nil (25860 34200 779778 708000) 0 nil])
([nil nil (("
" . 34620) (undo-tree-id191 . -1)) nil (25860 34200 779774 939000) 0 nil])
([nil nil ((#("          " 0 10 (face whitespace-trailing)) . -35168) (#("          " 0 10 (face whitespace-trailing)) . -35128) (#("              " 0 14 (face whitespace-trailing)) . -34909) (#("              " 0 14 (face whitespace-trailing)) . -34606) (#("              " 0 14 (face whitespace-trailing)) . -34336) 34620) nil (25860 34200 779757 972000) 0 nil])
([nil nil ((#("5" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t)) . -34603) (undo-tree-id488 . -1) 34604 (t 25860 34200 847264 493000)) nil (25864 8058 694991 71000) 0 nil])
([nil nil ((34603 . 34604)) nil (25864 8058 694987 734000) 0 nil])
([nil nil ((#("5" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t)) . -34906) (undo-tree-id487 . -1) 34907) nil (25864 8058 694986 485000) 0 nil])
([nil nil ((34906 . 34907)) nil (25864 8058 694984 218000) 0 nil])
([nil nil ((34248 . 34262)) nil (25864 8058 694983 60000) 0 nil])
([nil nil ((34262 . 34264)) nil (25864 8058 694981 968000) 0 nil])
([nil nil (("v" . -34262) (undo-tree-id483 . -1) (undo-tree-id484 . -1) ("-" . -34263) (undo-tree-id485 . -1) (undo-tree-id486 . -1) 34264) nil (25864 8058 694980 358000) 0 nil])
([nil nil ((34262 . 34279)) nil (25864 8058 694974 129000) 0 nil])
([nil nil ((34271 . 34287) (34272 . 34286) (#("                " 0 16 (face whitespace-trailing)) . 34271) (34271 . 34287) (34271 . 34272) ("              " . 34271) (34270 . 34285)) nil (25864 8058 694972 516000) 0 nil])
([nil nil ((34271 . 34285) (#("                " 0 16 (face whitespace-trailing tag-type start tag-name "v-card")) . 34270) (34270 . 34286) (#("              " 0 14 (tag-type start tag-name "v-card")) . 34270) (undo-tree-id482 . -14) (34269 . 34285)) nil (25864 8058 694969 418000) 0 nil])
([nil nil ((34270 . 34286)) nil (25864 8058 694966 287000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34319 . 34320) (nil tag-attr t 34319 . 34320) (nil tag-attr-end 5 34319 . 34320) (nil tag-name "v-card" 34319 . 34320) (nil tag-type start 34319 . 34320) (nil font-lock-face web-mode-html-attr-value-face 34319 . 34320) (nil tag-attr t 34292 . 34319) (nil tag-name "v-card" 34292 . 34319) (nil tag-type start 34292 . 34319) (nil font-lock-face web-mode-html-attr-value-face 34292 . 34319) (nil tag-attr t 34291 . 34292) (nil tag-name "v-card" 34291 . 34292) (nil tag-type start 34291 . 34292) (nil font-lock-face web-mode-html-attr-equal-face 34291 . 34292) (nil tag-attr t 34287 . 34291) (nil tag-name "v-card" 34287 . 34291) (nil tag-type start 34287 . 34291) (nil font-lock-face web-mode-html-attr-engine-face 34287 . 34291) (nil tag-attr-beg 2 34286 . 34287) (nil tag-attr t 34286 . 34287) (nil tag-name "v-card" 34286 . 34287) (nil tag-type start 34286 . 34287) (nil font-lock-face web-mode-html-attr-engine-face 34286 . 34287) (34286 . 34320)) nil (25864 8058 694963 955000) 0 nil])
([nil nil ((34320 . 34337)) nil (25864 8058 694957 411000) 0 nil])
([nil nil ((34337 . 34345)) nil (25864 8058 694956 302000) 0 nil])
([nil nil ((#("l" 0 1 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-card" tag-attr-end 0 tag-attr t)) . -34338) (undo-tree-id476 . -1) (#("k" 0 1 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-card" tag-attr-end 0 tag-attr t)) . -34339) (undo-tree-id477 . -1) (#("e" 0 1 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-card" tag-attr-end 0 tag-attr t)) . -34340) (undo-tree-id478 . -1) (#("y" 0 1 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-card" tag-attr-end 0 tag-attr t)) . -34341) (undo-tree-id479 . -1) (#("=" 0 1 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-card" tag-attr-end 5 tag-attr t)) . -34342) (undo-tree-id480 . -1) (#("\"" 0 1 (tag-type start tag-name "v-card")) . -34343) (undo-tree-id481 . -1) (#("\"" 0 1 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-card" block-token delimiter-end block-end t block-side t)) . 34344)) nil (25864 8058 694953 21000) 0 nil])
([nil nil ((34338 . 34342)) nil (25864 8058 694944 7000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-unmatched-face web-mode-html-attr-engine-face) font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-card" tag-attr-end 0 tag-attr t)) . -34341) (undo-tree-id475 . -1) 34342) nil (25864 8058 694942 760000) 0 nil])
([nil nil ((34341 . 34344)) nil (25864 8058 694939 840000) 0 nil])
([nil nil ((34343 . 34349)) nil (25864 8058 694938 538000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-card" block-side t)) . -34348) (undo-tree-id474 . -1) 34349) nil (25864 8058 694937 199000) 0 nil])
([nil nil ((#("clickMenu" 0 9 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34310) (undo-tree-id472 . -9) (undo-tree-id473 . -9)) nil (25864 8058 694934 376000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34321 . 34322) (nil tag-attr t 34310 . 34322) (nil tag-name "v-card" 34310 . 34322) (nil tag-type start 34310 . 34322) (nil font-lock-face web-mode-html-attr-value-face 34310 . 34322) (34310 . 34322)) nil (25864 8058 694930 933000) 0 nil])
([nil nil ((#("
                :key=\"index\"" 0 1 (tag-type start tag-name "v-card") 1 17 (tag-type start tag-name "v-card") 17 18 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-card" block-token delimiter-beg block-side t block-controls 0 block-beg 0) 18 19 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-card" block-token delimiter-beg block-side t) 19 20 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-card" block-token delimiter-beg block-side t) 20 21 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-card" block-token delimiter-beg block-side t) 21 22 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-card" block-token delimiter-beg block-side t) 22 23 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-card" block-token delimiter-beg block-side t) 23 24 (face web-mode-variable-name-face tag-type start tag-name "v-card" block-side t) 24 25 (face web-mode-variable-name-face tag-type start tag-name "v-card" block-side t) 25 26 (face web-mode-variable-name-face tag-type start tag-name "v-card" block-side t) 26 27 (face web-mode-variable-name-face tag-type start tag-name "v-card" block-side t) 27 28 (face web-mode-variable-name-face tag-type start tag-name "v-card" block-side t) 28 29 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-card" block-token delimiter-end block-end t block-side t)) . 34323) (undo-tree-id468 . -29) (undo-tree-id469 . -28) (undo-tree-id470 . -1) (undo-tree-id471 . -29)) nil (25864 8058 694928 173000) 0 nil])
([nil nil ((#("index)" 0 6 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34300) (undo-tree-id466 . -6) (undo-tree-id467 . -6)) nil (25864 8058 694922 336000) 0 nil])
([nil nil ((#("," 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34298) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34299) (undo-tree-id464 . -1) (undo-tree-id465 . -1) 34300) nil (25864 8058 694917 672000) 0 nil])
([nil nil ((#("(" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34293) (undo-tree-id461 . -1) 34294) nil (25864 8058 694911 474000) 0 nil])
([nil nil ((34346 . 34349)) nil (25864 8058 694908 988000) 0 nil])
([nil nil ((#("v" 0 1 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v")) . -34347) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (#("-" 0 1 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-")) . -34348) (undo-tree-id459 . -1) (undo-tree-id460 . -1) 34349) nil (25864 8058 694906 947000) 0 nil])
([nil nil ((34347 . 34355)) nil (25864 8058 694901 26000) 0 nil])
([nil nil ((34347 . 34359) (#("v-card-t" 0 8 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-card-t")) . -34347) (undo-tree-id454 . -3) (undo-tree-id455 . -8) (undo-tree-id456 . -8) 34355) nil (25864 8058 694899 308000) 0 nil])
([nil nil ((34331 . 34347) ("               " . 34331) (34359 . 34375)) nil (25864 8058 694893 620000) 0 nil])
([nil nil ((34362 . 34380) (34363 . 34379) (#("                  " 0 18 (face whitespace-trailing)) . 34362) (34362 . 34380) (34362 . 34363) ("                " . 34362) (34361 . 34378)) nil (25864 8058 694891 329000) 0 nil])
([nil nil ((34320 . 34322) (#("(" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34320) (34313 . 34321)) nil (25864 8058 694888 523000) 0 nil])
([nil nil ((34294 . 34295) (34293 . 34295) (#("[" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34293) (34293 . 34294)) nil (25864 8058 694886 701000) 0 nil])
([nil nil ((#("[" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34293) (undo-tree-id452 . -1) (#("]" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34294) (#("k" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34294) (undo-tree-id453 . -1) 34295) nil (25864 8058 694884 189000) 0 nil])
([nil nil ((34293 . 34295) (#("{" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34293) (34293 . 34294)) nil (25864 8058 694879 903000) 0 nil])
([nil nil ((#("{" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34293) (undo-tree-id451 . -1) (#("}" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34294)) nil (25864 8058 694877 817000) 0 nil])
([nil nil ((34294 . 34295) (34293 . 34295) (#("(" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34293) (34293 . 34294)) nil (25864 8058 694874 929000) 0 nil])
([nil nil ((34295 . 34300)) nil (25864 8058 694873 58000) 0 nil])
([nil nil ((#("i" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34299) (undo-tree-id450 . -1) 34300) nil (25864 8058 694871 651000) 0 nil])
([nil nil ((34299 . 34305)) nil (25864 8058 694869 85000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34304) (undo-tree-id449 . -1) 34305) nil (25864 8058 694867 692000) 0 nil])
([nil nil ((#("m" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34305) (undo-tree-id448 . -1) (#("e" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34305) (#("t" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34305) (#("i" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34305)) nil (25864 8058 694863 996000) 0 nil])
([nil nil ((34331 . 34348)) nil (25864 8058 694861 56000) 0 nil])
([nil nil ((34353 . 34354) (34348 . 34354)) nil (25864 8058 694859 796000) 0 nil])
([nil nil ((#(")" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34353) (undo-tree-id447 . -1) 34354) nil (25864 8058 694858 303000) 0 nil])
([nil nil ((34353 . 34356)) nil (25864 8058 694855 527000) 0 nil])
([nil nil ((34348 . 34349)) nil (25864 8058 694854 216000) 0 nil])
([nil nil ((34424 . 34439)) nil (25864 8058 694853 157000) 0 nil])
([nil nil ((34440 . 34443) (34439 . 34441) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face))) . -34439) (34439 . 34440)) nil (25864 8058 694851 445000) 0 nil])
([nil nil ((34444 . 34452)) nil (25864 8058 694849 526000) 0 nil])
([nil nil ((34424 . 34426) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face))) . -34424) (34424 . 34425)) nil (25864 8058 694848 116000) 0 nil])
([nil nil ((34425 . 34427) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t)) . -34425) (34425 . 34426)) nil (25864 8058 694846 230000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-2-face) block-side t)) . 34426) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-side t)) . 34426)) nil (25864 8058 694844 394000) 0 nil])
([nil nil ((34426 . 34427)) nil (25864 8058 694843 80000) 0 nil])
([nil nil ((34488 . 34504) (#(" " 0 1 (face whitespace-trailing)) . 34488) (34487 . 34488)) nil (25864 8058 694841 788000) 0 nil])
([nil nil ((34504 . 34511)) nil (25864 8058 694840 108000) 0 nil])
([nil nil ((34505 . 34516) (#("v-card" 0 6 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-card")) . -34505) (undo-tree-id444 . -3) (undo-tree-id445 . -6) (undo-tree-id446 . -6) 34511) nil (25864 8058 694838 628000) 0 nil])
([nil nil ((34516 . 34531)) nil (25864 8058 694832 964000) 0 nil])
([nil nil ((34518 . 34536) (34519 . 34535) (#("                  " 0 18 (face whitespace-trailing)) . 34518) (34518 . 34536) (34518 . 34519) ("                " . 34518) (34517 . 34534)) nil (25864 8058 694830 995000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34566 . 34567) (nil block-side t 34566 . 34567) (nil block-end t 34566 . 34567) (nil block-token delimiter-end 34566 . 34567) (nil font-lock-face web-mode-block-delimiter-face 34566 . 34567) (nil face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) 34566 . 34567) (nil block-side t 34565 . 34566) (nil block-token delimiter-end 34565 . 34566) (nil font-lock-face web-mode-block-delimiter-face 34565 . 34566) (nil face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) 34565 . 34566) (nil block-side t 34564 . 34565) (nil block-side t 34563 . 34564) (nil face web-mode-variable-name-face 34563 . 34564) (nil block-side t 34562 . 34563) (nil face web-mode-variable-name-face 34562 . 34563) (nil block-side t 34561 . 34562) (nil face web-mode-variable-name-face 34561 . 34562) (nil block-side t 34560 . 34561) (nil face web-mode-variable-name-face 34560 . 34561) (nil block-side t 34559 . 34560) (nil block-side t 34558 . 34559) (nil face (rainbow-delimiters-depth-3-face) 34558 . 34559) (nil block-side t 34557 . 34558) (nil face web-mode-variable-name-face 34557 . 34558) (nil block-side t 34556 . 34557) (nil face web-mode-variable-name-face 34556 . 34557) (nil block-side t 34555 . 34556) (nil face web-mode-variable-name-face 34555 . 34556) (nil block-side t 34554 . 34555) (nil face (rainbow-delimiters-depth-3-face) 34554 . 34555) (nil block-side t 34553 . 34554) (nil face web-mode-variable-name-face 34553 . 34554) (nil block-side t 34552 . 34553) (nil face web-mode-variable-name-face 34552 . 34553) (nil block-side t 34551 . 34552) (nil face web-mode-variable-name-face 34551 . 34552) (nil block-side t 34550 . 34551) (nil face web-mode-variable-name-face 34550 . 34551) (nil block-side t 34549 . 34550) (nil face web-mode-variable-name-face 34549 . 34550) (nil block-side t 34548 . 34549) (nil face web-mode-variable-name-face 34548 . 34549) (nil block-side t 34547 . 34548) (nil face web-mode-variable-name-face 34547 . 34548) (nil block-side t 34546 . 34547) (nil face web-mode-variable-name-face 34546 . 34547) (nil block-side t 34545 . 34546) (nil face web-mode-variable-name-face 34545 . 34546) (nil block-side t 34544 . 34545) (nil face web-mode-variable-name-face 34544 . 34545) (nil block-side t 34543 . 34544) (nil face web-mode-variable-name-face 34543 . 34544) (nil block-side t 34542 . 34543) (nil face web-mode-variable-name-face 34542 . 34543) (nil block-side t 34541 . 34542) (nil face web-mode-variable-name-face 34541 . 34542) (nil block-side t 34540 . 34541) (nil face web-mode-variable-name-face 34540 . 34541) (nil block-side t 34539 . 34540) (nil face web-mode-variable-name-face 34539 . 34540) (nil block-side t 34538 . 34539) (nil block-side t 34537 . 34538) (nil block-token delimiter-beg 34537 . 34538) (nil font-lock-face web-mode-block-delimiter-face 34537 . 34538) (nil face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) 34537 . 34538) (nil block-beg 0 34536 . 34537) (nil block-controls 0 34536 . 34537) (nil block-side t 34536 . 34537) (nil block-token delimiter-beg 34536 . 34537) (nil font-lock-face web-mode-block-delimiter-face 34536 . 34537) (nil face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) 34536 . 34537) (34536 . 34567)) nil (25864 8058 694824 907000) 0 nil])
([nil nil ((34459 . 34461) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face))) . -34459) (34459 . 34460) (34458 . 34460) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face))) . -34458) (34455 . 34459)) nil (25864 8058 694805 806000) 0 nil])
([nil nil ((34462 . 34471)) nil (25864 8058 694803 538000) 0 nil])
([nil nil ((" " . -34470) (undo-tree-id443 . -1) 34471) nil (25864 8058 694802 194000) 0 nil])
([nil nil ((34460 . 34466)) nil (25864 8058 694799 520000) 0 nil])
([nil nil ((#("." 0 1 (block-side t)) . -34465) (undo-tree-id442 . -1) 34466) nil (25864 8058 694798 207000) 0 nil])
([nil nil ((34466 . 34467) (34465 . 34467) (#("[" 0 1 (face (rainbow-delimiters-depth-3-face) block-side t)) . -34465) (34465 . 34466)) nil (25864 8058 694795 135000) 0 nil])
([nil nil ((#("m" 0 1 (face web-mode-variable-name-face block-side t)) . -34585) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (#("e" 0 1 (face web-mode-variable-name-face block-side t)) . -34586) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) 34587) nil (25864 8058 694788 651000) 0 nil])
([nil nil ((#("n" 0 1 (face web-mode-variable-name-face block-side t)) . -34583) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#("a" 0 1 (face web-mode-variable-name-face block-side t)) . -34584) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) 34585) nil (25864 8058 694452 986000) 0 nil])
([nil nil ((34583 . 34589)) nil (25864 8058 694294 448000) 0 nil])
([nil nil ((#("values(" 0 6 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 6 7 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34322) (undo-tree-id540 . -7) (undo-tree-id541 . -2) (undo-tree-id542 . -2) (undo-tree-id543 . -2) (undo-tree-id544 . -2) (undo-tree-id545 . -2) (undo-tree-id546 . -2) (undo-tree-id547 . -2) (undo-tree-id548 . -2) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -7) (undo-tree-id554 . -7) (t 25864 8058 758650 368000)) nil (25864 8095 286075 957000) 0 nil])
([nil nil ((#("." 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34321) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) 34322) nil (25864 8095 286052 145000) 0 nil])
([nil nil ((#(")" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34321)) nil (25864 8095 285975 875000) 0 nil])
([nil nil ((#("2" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t)) . -34723) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) 34724 (t 25864 8095 362259 815000)) nil (25864 8183 616916 967000) 0 nil])
([nil nil ((34723 . 34724)) nil (25864 8183 616886 843000) 0 nil])
([nil nil ((34963 . 34980) (#("            " 0 12 (font-lock-face web-mode-comment-face tag-type comment)) . 34963) (34931 . 34948) (#("              " 0 14 (font-lock-face web-mode-comment-face tag-type comment)) . 34931) (34924 . 34925) (34882 . 34883) (34849 . 34850) (34816 . 34817) (34777 . 34778) (34732 . 34749) (#("              " 0 14 (font-lock-face web-mode-comment-face tag-type comment)) . 34732) (34710 . 34976) (#("<v-col cols=\"1\">
              <v-checkbox
                v-if=\"save_root == 0\"
                color=\"primary\"
                label=\"Private\"
                v-model=\"private_filter\"
                dense
              ></v-checkbox>
            </v-col>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-col") 1 6 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-col") 6 7 (tag-type start tag-name "v-col") 7 8 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t tag-attr-beg 0) 8 9 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t) 9 10 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t) 10 11 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t) 11 12 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-col" tag-attr t) 12 14 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t) 14 15 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr-end 4 tag-attr t) 15 16 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-col") 31 32 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-checkbox") 32 42 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-checkbox") 42 59 (tag-type start tag-name "v-checkbox") 59 60 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-checkbox" tag-attr t tag-attr-beg 2) 60 63 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-checkbox" tag-attr t) 63 64 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-checkbox" tag-attr t) 64 79 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr t) 79 80 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr-end 4 tag-attr t) 80 97 (tag-type start tag-name "v-checkbox") 97 98 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t tag-attr-beg 0) 98 102 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t) 102 103 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-checkbox" tag-attr t) 103 111 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr t) 111 112 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr-end 5 tag-attr t) 112 129 (tag-type start tag-name "v-checkbox") 129 130 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t tag-attr-beg 0) 130 134 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t) 134 135 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-checkbox" tag-attr t) 135 143 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr t) 143 144 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr-end 5 tag-attr t) 144 161 (tag-type start tag-name "v-checkbox") 161 162 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-checkbox" tag-attr t tag-attr-beg 2) 162 168 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-checkbox" tag-attr t) 168 169 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-checkbox" tag-attr t) 169 184 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr t) 184 185 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr-end 7 tag-attr t) 185 202 (tag-type start tag-name "v-checkbox") 202 203 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t tag-attr-beg 0) 203 206 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t) 206 207 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr-end 0 tag-attr t) 207 208 (tag-type start tag-name "v-checkbox") 208 222 (tag-type start tag-name "v-checkbox") 222 223 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-checkbox") 223 224 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-checkbox") 224 225 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-checkbox") 225 235 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-checkbox") 235 236 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-checkbox") 249 250 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 250 251 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 251 256 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 256 257 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34710) (undo-tree-id569 . -257) (undo-tree-id570 . -14) (undo-tree-id571 . -17) (undo-tree-id572 . -257) (t 25864 8183 681321 801000)) nil (25864 8243 589466 727000) 0 nil])
([nil nil ((34179 . 34194) (t 25864 8243 648687 997000)) nil (25864 8291 904523 972000) 0 nil])
([nil nil ((34194 . 34209)) nil (25864 8291 904522 638000) 0 nil])
([nil nil ((34202 . 34218) (34203 . 34217) (#("                " 0 16 (face whitespace-trailing)) . 34202) (34202 . 34218) (34202 . 34203) ("              " . 34202) (34201 . 34216)) nil (25864 8291 904521 24000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34447 . 34448) (nil tag-name "v-checkbox" 34447 . 34448) (nil tag-type end 34447 . 34448) (nil tag-end t 34447 . 34448) (nil font-lock-face web-mode-html-tag-bracket-face 34447 . 34448) (nil tag-name "v-checkbox" 34437 . 34447) (nil tag-type end 34437 . 34447) (nil font-lock-face web-mode-html-tag-custom-face 34437 . 34447) (nil tag-name "v-checkbox" 34436 . 34437) (nil tag-type end 34436 . 34437) (nil font-lock-face web-mode-html-tag-bracket-face 34436 . 34437) (nil tag-name "v-checkbox" 34435 . 34436) (nil tag-type end 34435 . 34436) (nil tag-beg 22 34435 . 34436) (nil font-lock-face web-mode-html-tag-bracket-face 34435 . 34436) (nil tag-name "v-checkbox" 34434 . 34435) (nil tag-type start 34434 . 34435) (nil tag-end t 34434 . 34435) (nil font-lock-face web-mode-html-tag-bracket-face 34434 . 34435) (nil tag-name "v-checkbox" 34416 . 34434) (nil tag-type start 34416 . 34434) (nil tag-attr t 34415 . 34416) (nil tag-attr-end 0 34415 . 34416) (nil tag-name "v-checkbox" 34415 . 34416) (nil tag-type start 34415 . 34416) (nil font-lock-face web-mode-html-attr-name-face 34415 . 34416) (nil tag-attr t 34412 . 34415) (nil tag-name "v-checkbox" 34412 . 34415) (nil tag-type start 34412 . 34415) (nil font-lock-face web-mode-html-attr-name-face 34412 . 34415) (nil tag-attr-beg 0 34411 . 34412) (nil tag-attr t 34411 . 34412) (nil tag-name "v-checkbox" 34411 . 34412) (nil tag-type start 34411 . 34412) (nil font-lock-face web-mode-html-attr-name-face 34411 . 34412) (nil tag-name "v-checkbox" 34393 . 34411) (nil tag-type start 34393 . 34411) (nil tag-attr t 34392 . 34393) (nil tag-attr-end 7 34392 . 34393) (nil tag-name "v-checkbox" 34392 . 34393) (nil tag-type start 34392 . 34393) (nil font-lock-face web-mode-html-attr-value-face 34392 . 34393) (nil tag-attr t 34377 . 34392) (nil tag-name "v-checkbox" 34377 . 34392) (nil tag-type start 34377 . 34392) (nil font-lock-face web-mode-html-attr-value-face 34377 . 34392) (nil tag-attr t 34376 . 34377) (nil tag-name "v-checkbox" 34376 . 34377) (nil tag-type start 34376 . 34377) (nil font-lock-face web-mode-html-attr-equal-face 34376 . 34377) (nil tag-attr t 34370 . 34376) (nil tag-name "v-checkbox" 34370 . 34376) (nil tag-type start 34370 . 34376) (nil font-lock-face web-mode-html-attr-engine-face 34370 . 34376) (nil tag-attr-beg 2 34369 . 34370) (nil tag-attr t 34369 . 34370) (nil tag-name "v-checkbox" 34369 . 34370) (nil tag-type start 34369 . 34370) (nil font-lock-face web-mode-html-attr-engine-face 34369 . 34370) (nil tag-name "v-checkbox" 34351 . 34369) (nil tag-type start 34351 . 34369) (nil tag-attr t 34350 . 34351) (nil tag-attr-end 5 34350 . 34351) (nil tag-name "v-checkbox" 34350 . 34351) (nil tag-type start 34350 . 34351) (nil font-lock-face web-mode-html-attr-value-face 34350 . 34351) (nil tag-attr t 34342 . 34350) (nil tag-name "v-checkbox" 34342 . 34350) (nil tag-type start 34342 . 34350) (nil font-lock-face web-mode-html-attr-value-face 34342 . 34350) (nil tag-attr t 34341 . 34342) (nil tag-name "v-checkbox" 34341 . 34342) (nil tag-type start 34341 . 34342) (nil font-lock-face web-mode-html-attr-equal-face 34341 . 34342) (nil tag-attr t 34337 . 34341) (nil tag-name "v-checkbox" 34337 . 34341) (nil tag-type start 34337 . 34341) (nil font-lock-face web-mode-html-attr-name-face 34337 . 34341) (nil tag-attr-beg 0 34336 . 34337) (nil tag-attr t 34336 . 34337) (nil tag-name "v-checkbox" 34336 . 34337) (nil tag-type start 34336 . 34337) (nil font-lock-face web-mode-html-attr-name-face 34336 . 34337) (nil tag-name "v-checkbox" 34318 . 34336) (nil tag-type start 34318 . 34336) (nil tag-attr t 34317 . 34318) (nil tag-attr-end 5 34317 . 34318) (nil tag-name "v-checkbox" 34317 . 34318) (nil tag-type start 34317 . 34318) (nil font-lock-face web-mode-html-attr-value-face 34317 . 34318) (nil tag-attr t 34309 . 34317) (nil tag-name "v-checkbox" 34309 . 34317) (nil tag-type start 34309 . 34317) (nil font-lock-face web-mode-html-attr-value-face 34309 . 34317) (nil tag-attr t 34308 . 34309) (nil tag-name "v-checkbox" 34308 . 34309) (nil tag-type start 34308 . 34309) (nil font-lock-face web-mode-html-attr-equal-face 34308 . 34309) (nil tag-attr t 34304 . 34308) (nil tag-name "v-checkbox" 34304 . 34308) (nil tag-type start 34304 . 34308) (nil font-lock-face web-mode-html-attr-name-face 34304 . 34308) (nil tag-attr-beg 0 34303 . 34304) (nil tag-attr t 34303 . 34304) (nil tag-name "v-checkbox" 34303 . 34304) (nil tag-type start 34303 . 34304) (nil font-lock-face web-mode-html-attr-name-face 34303 . 34304) (nil tag-name "v-checkbox" 34285 . 34303) (nil tag-type start 34285 . 34303) (nil tag-attr t 34284 . 34285) (nil tag-attr-end 4 34284 . 34285) (nil tag-name "v-checkbox" 34284 . 34285) (nil tag-type start 34284 . 34285) (nil font-lock-face web-mode-html-attr-value-face 34284 . 34285) (nil tag-attr t 34269 . 34284) (nil tag-name "v-checkbox" 34269 . 34284) (nil tag-type start 34269 . 34284) (nil font-lock-face web-mode-html-attr-value-face 34269 . 34284) (nil tag-attr t 34268 . 34269) (nil tag-name "v-checkbox" 34268 . 34269) (nil tag-type start 34268 . 34269) (nil font-lock-face web-mode-html-attr-equal-face 34268 . 34269) (nil tag-attr t 34265 . 34268) (nil tag-name "v-checkbox" 34265 . 34268) (nil tag-type start 34265 . 34268) (nil font-lock-face web-mode-html-attr-engine-face 34265 . 34268) (nil tag-attr-beg 2 34264 . 34265) (nil tag-attr t 34264 . 34265) (nil tag-name "v-checkbox" 34264 . 34265) (nil tag-type start 34264 . 34265) (nil font-lock-face web-mode-html-attr-engine-face 34264 . 34265) (nil tag-name "v-checkbox" 34246 . 34264) (nil tag-type start 34246 . 34264) (nil tag-name "v-checkbox" 34236 . 34246) (nil tag-type start 34236 . 34246) (nil font-lock-face web-mode-html-tag-custom-face 34236 . 34246) (nil tag-name "v-checkbox" 34235 . 34236) (nil tag-type start 34235 . 34236) (nil tag-beg 19 34235 . 34236) (nil font-lock-face web-mode-html-tag-bracket-face 34235 . 34236) (34218 . 34448)) nil (25864 8291 904511 504000) 0 nil])
([nil nil ((34201 . 34218)) nil (25864 8291 904476 825000) 0 nil])
([nil nil ((34218 . 34233)) nil (25864 8291 904475 574000) 0 nil])
([nil nil ((34226 . 34244) (34227 . 34243) (#("                  " 0 18 (face whitespace-trailing)) . 34226) (34226 . 34244) (34226 . 34227) ("                " . 34226) (34225 . 34242)) nil (25864 8291 904473 609000) 0 nil])
([nil nil ((#("                                 <v-checkbox
" 33 34 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-checkbox") 34 44 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-checkbox") 44 45 (tag-type start tag-name "v-checkbox")) . 34315) (undo-tree-id597 . -16) (34290 . 34315) (#("                </v-col>
" 16 17 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 18 23 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 23 24 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34245) (undo-tree-id598 . -18) (34270 . 34315) 34263) nil (25864 8291 904470 616000) 0 nil])
([nil nil (("                 v-if=\"save_root == 0\"
" . 34354) (34329 . 34354) (#("                </v-col>
" 0 15 (tag-type start tag-name "v-checkbox") 15 16 (tag-end t tag-type start tag-name "v-checkbox") 16 17 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 18 23 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 23 24 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34290) (undo-tree-id596 . -18) (34315 . 34354) 34308) nil (25864 8291 904465 472000) 0 nil])
([nil nil (("                 color=\"primary\"
" . 34387) (34362 . 34387) (#("                </v-col>
" 0 15 (tag-type start tag-name "v-checkbox") 15 16 (tag-end t tag-type start tag-name "v-checkbox") 16 17 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 18 23 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 23 24 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34329) (undo-tree-id595 . -18) (34354 . 34387) 34347) nil (25864 8291 904461 719000) 0 nil])
([nil nil (("                 label=\"Private\"
" . 34420) (34395 . 34420) (#("                </v-col>
" 0 15 (tag-type start tag-name "v-checkbox") 15 16 (tag-end t tag-type start tag-name "v-checkbox") 16 17 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 18 23 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 23 24 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34362) (undo-tree-id594 . -18) (34387 . 34420) 34380) nil (25864 8291 904458 90000) 0 nil])
([nil nil (("                 v-model=\"private_filter\"
" . 34462) (34437 . 34462) (#("                </v-col>
" 0 15 (tag-type start tag-name "v-checkbox") 15 16 (tag-end t tag-type start tag-name "v-checkbox") 16 17 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 18 23 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 23 24 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34395) (undo-tree-id593 . -18) (34420 . 34462) 34413) nil (25864 8291 904454 120000) 0 nil])
([nil nil (("                 dense
" . 34485) (34460 . 34485) (#("                </v-col>
" 0 15 (tag-type start tag-name "v-checkbox") 15 16 (tag-end t tag-type start tag-name "v-checkbox") 16 17 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 18 23 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 23 24 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34437) (undo-tree-id592 . -18) (34462 . 34485) 34455) nil (25864 8291 904448 986000) 0 nil])
([nil nil ((#("                 ></v-checkbox>
" 18 19 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-checkbox") 19 20 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-checkbox") 20 30 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-checkbox") 30 31 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-checkbox" rear-nonsticky t)) . 34517) (34492 . 34517) (#("                </v-col>
" 0 15 (tag-type start tag-name "v-checkbox") 15 16 (tag-end t tag-type start tag-name "v-checkbox") 16 17 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 18 23 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 23 24 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 34460) (undo-tree-id591 . -18) (34485 . 34517) 34478) nil (25864 8291 904445 353000) 0 nil])
([nil nil ((34477 . 34478) (34451 . 34454) (34406 . 34409) (34370 . 34373) (34334 . 34337) (34292 . 34295) ("               " . -34263) 34206) nil (25864 8291 904441 328000) 0 nil])
([nil nil (("
" . 34225) (undo-tree-id590 . -1)) nil (25864 8291 904437 448000) 0 nil])
([nil nil ((#("                  " 0 18 (face whitespace-trailing)) . -34225) (undo-tree-id573 . -18) (undo-tree-id574 . -18) (undo-tree-id575 . -18) (undo-tree-id576 . -18) (undo-tree-id577 . -18) (undo-tree-id578 . -18) (undo-tree-id579 . -18) (undo-tree-id580 . -18) (undo-tree-id581 . -18) (undo-tree-id582 . -18) (undo-tree-id583 . -18) (undo-tree-id584 . -18) (undo-tree-id585 . -18) (undo-tree-id586 . -18) (undo-tree-id587 . -18) (undo-tree-id588 . -18) (undo-tree-id589 . -18)) nil (25864 8291 904429 641000) 0 nil])
([nil nil ((34208 . 34210) (34200 . 34209) (t 25864 8291 968178 894000)) nil (25864 8324 899880 353000) 0 nil])
([nil nil ((#("1" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -34209) (undo-tree-id600 . -1) 34210) nil (25864 8324 899878 449000) 0 nil])
([nil nil ((34209 . 34213)) nil (25864 8324 899875 527000) 0 nil])
([nil nil ((#("m" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t)) . -34212) (undo-tree-id599 . -1) 34213) nil (25864 8324 899873 562000) 0 nil])
([nil nil ((34212 . 34217)) nil (25864 8324 899865 62000) 0 nil])
([nil nil ((34242 . 34243)) nil (25864 8324 899863 253000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34259 . 34260) (nil tag-attr t 34259 . 34260) (nil tag-attr-end 5 34259 . 34260) (nil tag-name "v-col" 34259 . 34260) (nil tag-type start 34259 . 34260) (nil font-lock-face web-mode-html-attr-value-face 34259 . 34260) (nil tag-attr t 34249 . 34259) (nil tag-name "v-col" 34249 . 34259) (nil tag-type start 34249 . 34259) (nil font-lock-face web-mode-html-attr-value-face 34249 . 34259) (nil tag-attr t 34248 . 34249) (nil tag-name "v-col" 34248 . 34249) (nil tag-type start 34248 . 34249) (nil font-lock-face web-mode-html-attr-equal-face 34248 . 34249) (nil tag-attr t 34247 . 34248) (nil tag-name "v-col" 34247 . 34248) (nil tag-type start 34247 . 34248) (nil font-lock-face web-mode-html-attr-name-face 34247 . 34248) (nil tag-attr t 34246 . 34247) (nil tag-name "v-col" 34246 . 34247) (nil tag-type start 34246 . 34247) (nil font-lock-face web-mode-html-attr-name-face 34246 . 34247) (nil tag-attr t 34245 . 34246) (nil tag-name "v-col" 34245 . 34246) (nil tag-type start 34245 . 34246) (nil font-lock-face web-mode-html-attr-name-face 34245 . 34246) (nil tag-attr t 34244 . 34245) (nil tag-name "v-col" 34244 . 34245) (nil tag-type start 34244 . 34245) (nil font-lock-face web-mode-html-attr-name-face 34244 . 34245) (nil tag-attr-beg 0 34243 . 34244) (nil tag-attr t 34243 . 34244) (nil tag-name "v-col" 34243 . 34244) (nil tag-type start 34243 . 34244) (nil font-lock-face web-mode-html-attr-name-face 34243 . 34244) (34243 . 34260)) nil (25864 8324 899853 242000) 0 nil])
([nil nil ((77847 . 77852) (t 25864 8324 959832 41000)) nil (25864 8401 117679 869000) 0 nil])
([nil nil ((77919 . 77928) (t 25864 8401 179032 824000)) nil (25864 8895 450222 862000) 0 nil])
([nil nil ((77939 . 77941) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) part-side javascript)) . -77939) (77928 . 77940)) nil (25864 8895 450221 147000) 0 nil])
([nil nil ((nil rear-nonsticky nil 77956 . 77957) (nil part-side javascript 77944 . 77957) (nil part-side javascript 77940 . 77944) (nil face web-mode-constant-face 77940 . 77944) (77940 . 77957)) nil (25864 8895 450219 277000) 0 nil])
([nil nil ((77958 . 77967)) nil (25864 8895 450217 111000) 0 nil])
([nil nil ((nil rear-nonsticky nil 77996 . 77997) (nil part-side javascript 77996 . 77997) (nil face (rainbow-delimiters-depth-4-face) 77996 . 77997) (nil rear-nonsticky t 77995 . 77996) (nil part-side javascript 77995 . 77996) (nil part-side javascript 77983 . 77995) (nil part-side javascript 77979 . 77983) (nil face web-mode-constant-face 77979 . 77983) (nil part-side javascript 77978 . 77979) (nil face (rainbow-delimiters-depth-4-face) 77978 . 77979) (nil part-side javascript 77975 . 77978) (nil face web-mode-function-call-face 77975 . 77978) (nil part-side javascript 77967 . 77975) (77967 . 77997)) nil (25864 8895 450215 149000) 0 nil])
([nil nil ((#("f" 0 1 (part-side javascript)) . -77984) (undo-tree-id601 . -1) (#("i" 0 1 (part-side javascript)) . -77985) (undo-tree-id602 . -1) (#("l" 0 1 (part-side javascript)) . -77986) (undo-tree-id603 . -1) (#("t" 0 1 (part-side javascript)) . -77987) (undo-tree-id604 . -1) (#("e" 0 1 (part-side javascript)) . -77988) (undo-tree-id605 . -1) (#("r" 0 1 (part-side javascript)) . -77989) (undo-tree-id606 . -1) (#("_" 0 1 (part-side javascript)) . -77990) (undo-tree-id607 . -1) (#("s" 0 1 (part-side javascript)) . -77991) (undo-tree-id608 . -1) (#("c" 0 1 (part-side javascript)) . -77992) (undo-tree-id609 . -1) (#("o" 0 1 (part-side javascript)) . -77993) (undo-tree-id610 . -1) (#("r" 0 1 (part-side javascript)) . -77994) (undo-tree-id611 . -1) (#("e" 0 1 (part-side javascript)) . -77995) (undo-tree-id612 . -1) 77996) nil (25864 8895 450206 949000) 0 nil])
([nil nil ((nil rear-nonsticky nil 77998 . 77999) (nil part-side javascript 77984 . 77999) (77984 . 77999)) nil (25864 8895 450176 271000) 0 nil])
([nil nil ((77804 . 77815) (t 25864 8895 514383 665000)) nil (25864 9129 89600 803000) 0 nil])
([nil nil ((77815 . 77817)) nil (25864 9129 89599 460000) 0 nil])
([nil nil ((#("r" 0 1 (part-side javascript)) . -77815) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (#("e" 0 1 (part-side javascript)) . -77816) (undo-tree-id661 . -1) (undo-tree-id662 . -1) 77817) nil (25864 9129 89597 649000) 0 nil])
([nil nil ((77815 . 77826)) nil (25864 9129 89591 578000) 0 nil])
([nil nil ((#("t" 0 1 (face web-mode-variable-name-face part-side javascript)) . -77824) (undo-tree-id657 . -1) (#(" " 0 1 (part-side javascript)) . -77825) (undo-tree-id658 . -1) 77826) nil (25864 9129 89590 61000) 0 nil])
([nil nil ((77824 . 77827)) nil (25864 9129 89586 227000) 0 nil])
([nil nil ((nil rear-nonsticky nil 77887 . 77888) (nil part-side javascript 77887 . 77888) (nil face (rainbow-delimiters-depth-6-face) 77887 . 77888) (nil rear-nonsticky t 77886 . 77887) (nil part-side javascript 77886 . 77887) (nil part-side javascript 77875 . 77886) (nil part-side javascript 77873 . 77875) (nil rear-nonsticky t 77872 . 77873) (nil part-side javascript 77872 . 77873) (nil part-side javascript 77858 . 77872) (nil part-side javascript 77854 . 77858) (nil face web-mode-constant-face 77854 . 77858) (nil part-side javascript 77853 . 77854) (nil face (rainbow-delimiters-depth-6-face) 77853 . 77854) (nil rear-nonsticky t 77852 . 77853) (nil part-side javascript 77852 . 77853) (nil face web-mode-function-call-face 77852 . 77853) (nil part-side javascript 77832 . 77852) (nil face web-mode-function-call-face 77832 . 77852) (nil part-side javascript 77831 . 77832) (nil part-side javascript 77827 . 77831) (nil face web-mode-constant-face 77827 . 77831) (77827 . 77888)) nil (25864 9129 89583 935000) 0 nil])
([nil nil ((77888 . 77899)) nil (25864 9129 89577 946000) 0 nil])
([nil nil ((77907 . 77908) (77906 . 77908) (#("[" 0 1 (face (rainbow-delimiters-depth-7-face) part-side javascript)) . -77906) (77903 . 77907) (77902 . 77904) (#("(" 0 1 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . -77902) (77899 . 77903)) nil (25864 9129 89576 166000) 0 nil])
([nil nil ((77909 . 77914)) nil (25864 9129 89573 960000) 0 nil])
([nil nil ((#("+" 0 1 (part-side javascript)) . -77912) (undo-tree-id655 . -1) (#(" " 0 1 (part-side javascript)) . -77913) (undo-tree-id656 . -1) 77914) nil (25864 9129 89572 297000) 0 nil])
([nil nil ((77912 . 77914)) nil (25864 9129 89568 394000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -77913) (undo-tree-id654 . -1) 77914) nil (25864 9129 89567 198000) 0 nil])
([nil nil ((77915 . 77917) (#("{" 0 1 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . -77915) (77914 . 77916)) nil (25864 9129 89564 647000) 0 nil])
([nil nil ((77918 . 77928) (#("            " 0 12 (face whitespace-trailing part-side javascript)) . 77917) (undo-tree-id652 . -10) (undo-tree-id653 . 12) (77927 . 77929) (77916 . 77928)) nil (25864 9129 89562 747000) 0 nil])
([nil nil ((#("          this.filter_score[element.id] = this.filter_compare_values(this.core_value_obj, compare_core)
" 0 10 (part-side javascript) 10 14 (face web-mode-constant-face part-side javascript) 14 27 (part-side javascript) 27 28 (face (rainbow-delimiters-depth-6-face) part-side javascript) 28 38 (part-side javascript) 38 39 (face (rainbow-delimiters-depth-6-face) part-side javascript rear-nonsticky t) 39 42 (part-side javascript) 42 46 (face web-mode-constant-face part-side javascript) 46 47 (part-side javascript) 47 67 (face web-mode-function-call-face part-side javascript) 67 68 (face web-mode-function-call-face part-side javascript rear-nonsticky t) 68 69 (face (rainbow-delimiters-depth-6-face) part-side javascript) 69 73 (face web-mode-constant-face part-side javascript) 73 87 (part-side javascript) 87 88 (part-side javascript rear-nonsticky t) 88 90 (part-side javascript) 90 101 (part-side javascript) 101 102 (part-side javascript rear-nonsticky t) 102 103 (face (rainbow-delimiters-depth-6-face) part-side javascript) 103 104 (part-side javascript)) . 78034) (undo-tree-id645 . -103) (undo-tree-id646 . -47) (undo-tree-id647 . -21) (undo-tree-id648 . -10) (undo-tree-id649 . -27) (undo-tree-id650 . -104) (undo-tree-id651 . -103) (78022 . 78034) (#("          }
" 0 10 (part-side javascript) 10 11 (face (rainbow-delimiters-depth-6-face) part-side javascript) 11 12 (part-side javascript)) . 77918) (77930 . 78034) 77940) nil (25864 9129 89557 874000) 0 nil])
([nil nil ((#("          this.filter_score[element.id] = this.filter_compare_values(this.core_value_obj, compare_core)
" 0 10 (part-side javascript) 10 14 (face web-mode-constant-face part-side javascript) 14 27 (part-side javascript) 27 28 (face (rainbow-delimiters-depth-7-face) part-side javascript) 28 38 (part-side javascript) 38 39 (face (rainbow-delimiters-depth-7-face) part-side javascript rear-nonsticky t) 39 42 (part-side javascript) 42 46 (face web-mode-constant-face part-side javascript) 46 47 (part-side javascript) 47 67 (face web-mode-function-call-face part-side javascript) 67 68 (face web-mode-function-call-face part-side javascript rear-nonsticky t) 68 69 (face (rainbow-delimiters-depth-7-face) part-side javascript) 69 73 (face web-mode-constant-face part-side javascript) 73 87 (part-side javascript) 87 88 (part-side javascript rear-nonsticky t) 88 90 (part-side javascript) 90 101 (part-side javascript) 101 102 (part-side javascript rear-nonsticky t) 102 103 (face (rainbow-delimiters-depth-7-face) part-side javascript) 103 104 (part-side javascript)) . 78022) (undo-tree-id643 . -10) (undo-tree-id644 . -104) (78021 . 78022) (#("
" 0 1 (part-side javascript)) . 77917) (77918 . 78022) 77928) nil (25864 9129 89546 829000) 0 nil])
([nil nil ((77927 . 77929)) nil (25864 9129 89542 635000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . 78022) (undo-tree-id642 . -1)) nil (25864 9129 89541 343000) 0 nil])
([nil nil ((77961 . 77963) (#("[" 0 1 (face (rainbow-delimiters-depth-7-face) part-side javascript)) . -77961) (77961 . 77962)) nil (25864 9129 89538 759000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-7-face) part-side javascript)) . 77962)) nil (25864 9129 89537 127000) 0 nil])
([nil nil ((78023 . 78024)) nil (25864 9129 89536 109000) 0 nil])
([nil nil ((#("this.filter_compare_values(this.core_value_obj, compare_core)" 0 4 (face web-mode-constant-face part-side javascript) 4 5 (part-side javascript) 5 25 (face web-mode-function-call-face part-side javascript) 25 26 (face web-mode-function-call-face part-side javascript rear-nonsticky t) 26 27 (face (rainbow-delimiters-depth-8-face) part-side javascript) 27 31 (face web-mode-constant-face part-side javascript) 31 45 (part-side javascript) 45 46 (part-side javascript rear-nonsticky t) 46 48 (part-side javascript) 48 59 (part-side javascript) 59 60 (part-side javascript rear-nonsticky t) 60 61 (face (rainbow-delimiters-depth-8-face) part-side javascript)) . 77962) (undo-tree-id640 . -61) (undo-tree-id641 . -61)) nil (25864 9129 89534 776000) 0 nil])
([nil nil ((77962 . 77965)) nil (25864 9129 89531 534000) 0 nil])
([nil nil ((77962 . 77983)) nil (25864 9129 89530 601000) 0 nil])
([nil nil ((77983 . 77987)) nil (25864 9129 89529 621000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -77986) (undo-tree-id639 . -1) 77987) nil (25864 9129 89528 305000) 0 nil])
([nil nil ((77986 . 77992)) nil (25864 9129 89524 616000) 0 nil])
([nil nil ((#("raw_filter_list[key].name" 0 1 (face web-mode-variable-name-face block-side t) 1 2 (face web-mode-variable-name-face block-side t) 2 3 (face web-mode-variable-name-face block-side t) 3 4 (face web-mode-variable-name-face block-side t) 4 5 (face web-mode-variable-name-face block-side t) 5 6 (face web-mode-variable-name-face block-side t) 6 7 (face web-mode-variable-name-face block-side t) 7 8 (face web-mode-variable-name-face block-side t) 8 9 (face web-mode-variable-name-face block-side t) 9 10 (face web-mode-variable-name-face block-side t) 10 11 (face web-mode-variable-name-face block-side t) 11 12 (face web-mode-variable-name-face block-side t) 12 13 (face web-mode-variable-name-face block-side t) 13 14 (face web-mode-variable-name-face block-side t) 14 15 (face web-mode-variable-name-face block-side t) 15 16 (face (rainbow-delimiters-depth-3-face) block-side t) 16 17 (face web-mode-variable-name-face block-side t) 17 18 (face web-mode-variable-name-face block-side t) 18 19 (face web-mode-variable-name-face block-side t) 19 20 (face (rainbow-delimiters-depth-3-face) block-side t) 20 21 (block-side t) 21 22 (face web-mode-variable-name-face block-side t) 22 23 (face web-mode-variable-name-face block-side t) 23 24 (face web-mode-variable-name-face block-side t) 24 25 (face web-mode-variable-name-face block-side t)) . 34796) (undo-tree-id636 . -25) (undo-tree-id637 . -20) (undo-tree-id638 . -25)) nil (25864 9129 89522 835000) 0 nil])
([nil nil ((34796 . 34799)) nil (25864 9129 89518 367000) 0 nil])
([nil nil ((#("l" 0 1 (face web-mode-variable-name-face block-side t)) . -34797) (undo-tree-id634 . -1) (#("a" 0 1 (face web-mode-variable-name-face block-side t)) . -34798) (undo-tree-id635 . -1) 34799) nil (25864 9129 89516 826000) 0 nil])
([nil nil ((34802 . 34803) (34801 . 34803) (#("[" 0 1 (face (rainbow-delimiters-depth-3-face) block-side t)) . -34801) (34797 . 34802)) nil (25864 9129 89512 712000) 0 nil])
([nil nil ((#("0" 0 1 (block-side t)) . -34818) (undo-tree-id633 . -1) 34819) nil (25864 9129 89510 768000) 0 nil])
([nil nil ((34818 . 34819)) nil (25864 9129 89507 910000) 0 nil])
([nil nil ((34821 . 34822) (34820 . 34822) (#("[" 0 1 (face (rainbow-delimiters-depth-3-face) block-side t)) . -34820) (34820 . 34821)) nil (25864 9129 89506 324000) 0 nil])
([nil nil ((#("r" 0 1 (face web-mode-variable-name-face block-side t)) . -34917) (undo-tree-id613 . -1) (#("a" 0 1 (face web-mode-variable-name-face block-side t)) . -34918) (undo-tree-id614 . -1) (#("w" 0 1 (face web-mode-variable-name-face block-side t)) . -34919) (undo-tree-id615 . -1) (#("_" 0 1 (face web-mode-variable-name-face block-side t)) . -34920) (undo-tree-id616 . -1) (#("f" 0 1 (face web-mode-variable-name-face block-side t)) . -34921) (undo-tree-id617 . -1) (#("i" 0 1 (face web-mode-variable-name-face block-side t)) . -34922) (undo-tree-id618 . -1) (#("l" 0 1 (face web-mode-variable-name-face block-side t)) . -34923) (undo-tree-id619 . -1) (#("t" 0 1 (face web-mode-variable-name-face block-side t)) . -34924) (undo-tree-id620 . -1) (#("e" 0 1 (face web-mode-variable-name-face block-side t)) . -34925) (undo-tree-id621 . -1) (#("r" 0 1 (face web-mode-variable-name-face block-side t)) . -34926) (undo-tree-id622 . -1) (#("_" 0 1 (face web-mode-variable-name-face block-side t)) . -34927) (undo-tree-id623 . -1) (#("l" 0 1 (face web-mode-variable-name-face block-side t)) . -34928) (undo-tree-id624 . -1) (#("i" 0 1 (face web-mode-variable-name-face block-side t)) . -34929) (undo-tree-id625 . -1) (#("s" 0 1 (face web-mode-variable-name-face block-side t)) . -34930) (undo-tree-id626 . -1) (#("t" 0 1 (face web-mode-variable-name-face block-side t)) . -34931) (undo-tree-id627 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-3-face) block-side t)) . -34932) (undo-tree-id628 . -1) (#("k" 0 1 (face web-mode-variable-name-face block-side t)) . -34933) (undo-tree-id629 . -1) (#("e" 0 1 (face web-mode-variable-name-face block-side t)) . -34934) (undo-tree-id630 . -1) (#("y" 0 1 (face web-mode-variable-name-face block-side t)) . -34935) (undo-tree-id631 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) block-side t)) . -34936) (undo-tree-id632 . -1) 34937) nil (25864 9129 89499 954000) 0 nil])
([nil nil ((34923 . 34924) (34922 . 34924) (#("[" 0 1 (face (rainbow-delimiters-depth-3-face) block-side t)) . -34922) (34917 . 34923)) nil (25864 9129 89464 490000) 0 nil])
([nil nil ((#("r" 0 1 (face web-mode-variable-name-face block-side t)) . 34925) (#("e" 0 1 (face web-mode-variable-name-face block-side t)) . 34925) (#("t" 0 1 (face web-mode-variable-name-face block-side t)) . 34925) (#("l" 0 1 (face web-mode-variable-name-face block-side t)) . 34925) (#("i" 0 1 (face web-mode-variable-name-face block-side t)) . 34925) (#("f" 0 1 (face web-mode-variable-name-face block-side t)) . 34925) (#("." 0 1 (block-side t)) . 34925)) nil (25864 9266 959810 818000) 0 nil])
([nil nil ((#("value" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 1 2 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 2 3 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 3 4 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 4 5 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34677) (undo-tree-id696 . -5) (undo-tree-id697 . -5)) nil (25864 9275 548117 519000) 0 nil] [nil nil ((#("
                <v-card-title>
                  {{ value[1] }} - {{value[2][0]}} matches
                </v-card-title>" 1 17 (face whitespace-trailing) 17 18 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-card-title") 18 30 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-card-title") 30 31 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-card-title") 50 51 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 51 52 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 52 53 (block-side t) 53 54 (face web-mode-variable-name-face block-side t) 54 55 (face web-mode-variable-name-face block-side t) 55 56 (face web-mode-variable-name-face block-side t) 56 57 (face web-mode-variable-name-face block-side t) 57 58 (face web-mode-variable-name-face block-side t) 58 59 (face (rainbow-delimiters-depth-3-face) block-side t) 59 60 (block-side t) 60 61 (face (rainbow-delimiters-depth-3-face) block-side t) 61 62 (block-side t) 62 63 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-side t) 63 64 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t) 67 68 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 68 69 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 69 70 (face web-mode-variable-name-face block-side t) 70 71 (face web-mode-variable-name-face block-side t) 71 72 (face web-mode-variable-name-face block-side t) 72 73 (face web-mode-variable-name-face block-side t) 73 74 (face web-mode-variable-name-face block-side t) 74 75 (face (rainbow-delimiters-depth-3-face) block-side t) 75 76 (block-side t) 76 77 (face (rainbow-delimiters-depth-3-face) block-side t) 77 78 (face (rainbow-delimiters-depth-3-face) block-side t) 78 79 (block-side t) 79 80 (face (rainbow-delimiters-depth-3-face) block-side t) 80 81 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-side t) 81 82 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t) 107 108 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-card-title") 108 109 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-card-title") 109 121 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-card-title") 121 122 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-card-title")) . 34743) (undo-tree-id677 . -122) (undo-tree-id678 . -1) (undo-tree-id679 . -55) (undo-tree-id680 . -1) (undo-tree-id681 . -53) (undo-tree-id682 . -53) (undo-tree-id683 . -1) (undo-tree-id684 . -122) (undo-tree-id685 . -122) (t 25864 9129 156296 51000)) ((34743 . 34865)) (25864 9266 596988 75000) 0 nil] [nil nil ((34858 . 34863) (34798 . 34801) (34760 . 34874) (#("<v-card-title>
                  {{ value[1] }} - {{value[2][0]}} matches
                </v-card-title>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 18 tag-type start tag-name "v-card-title") 1 13 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-card-title") 13 14 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-card-title") 33 34 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 34 35 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 35 36 (block-side t) 36 37 (face web-mode-variable-name-face block-side t) 37 38 (face web-mode-variable-name-face block-side t) 38 39 (face web-mode-variable-name-face block-side t) 39 40 (face web-mode-variable-name-face block-side t) 40 41 (face web-mode-variable-name-face block-side t) 41 42 (face (rainbow-delimiters-depth-3-face) block-side t) 42 43 (block-side t) 43 44 (face (rainbow-delimiters-depth-3-face) block-side t) 44 45 (block-side t) 45 46 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-side t) 46 47 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t) 50 51 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t block-controls 0 block-beg 0) 51 52 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-beg block-side t) 52 53 (face web-mode-variable-name-face block-side t) 53 54 (face web-mode-variable-name-face block-side t) 54 55 (face web-mode-variable-name-face block-side t) 55 56 (face web-mode-variable-name-face block-side t) 56 57 (face web-mode-variable-name-face block-side t) 57 58 (face (rainbow-delimiters-depth-3-face) block-side t) 58 59 (block-side t) 59 60 (face (rainbow-delimiters-depth-3-face) block-side t) 60 61 (face (rainbow-delimiters-depth-3-face) block-side t) 61 62 (block-side t) 62 63 (face (rainbow-delimiters-depth-3-face) block-side t) 63 64 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-side t) 64 65 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face block-token delimiter-end block-end t block-side t) 90 91 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-card-title") 91 92 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-card-title") 92 104 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-card-title") 104 105 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-card-title")) . 34760) (undo-tree-id663 . -105) (undo-tree-id664 . -38) (undo-tree-id665 . -15) (undo-tree-id666 . -36) (undo-tree-id667 . -36) (undo-tree-id668 . -105) (undo-tree-id669 . -105) (t 25864 9129 156296 51000)) ((34760 . 34865) (#("<!-- <v-card-title>
                  {{ value[1] }} - {{value[2][0]}} matches
                </v-card-title> -->" 0 1 (font-lock-face web-mode-comment-face tag-beg 0 tag-type comment) 1 38 (font-lock-face web-mode-comment-face tag-type comment) 38 39 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face tag-type comment block-token delimiter-beg block-side t block-controls 0 block-beg 0) 39 40 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face tag-type comment block-token delimiter-beg block-side t) 40 41 (tag-type comment block-side t) 41 42 (face web-mode-variable-name-face tag-type comment block-side t) 42 43 (face web-mode-variable-name-face tag-type comment block-side t) 43 44 (face web-mode-variable-name-face tag-type comment block-side t) 44 45 (face web-mode-variable-name-face tag-type comment block-side t) 45 46 (face web-mode-variable-name-face tag-type comment block-side t) 46 47 (face (rainbow-delimiters-depth-3-face) tag-type comment block-side t) 47 48 (tag-type comment block-side t) 48 49 (face (rainbow-delimiters-depth-3-face) tag-type comment block-side t) 49 50 (tag-type comment block-side t) 50 51 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face tag-type comment block-token delimiter-end block-side t) 51 52 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face tag-type comment block-token delimiter-end block-end t block-side t) 52 55 (font-lock-face web-mode-comment-face tag-type comment) 55 56 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face tag-type comment block-token delimiter-beg block-side t block-controls 0 block-beg 0) 56 57 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face tag-type comment block-token delimiter-beg block-side t) 57 58 (face web-mode-variable-name-face tag-type comment block-side t) 58 59 (face web-mode-variable-name-face tag-type comment block-side t) 59 60 (face web-mode-variable-name-face tag-type comment block-side t) 60 61 (face web-mode-variable-name-face tag-type comment block-side t) 61 62 (face web-mode-variable-name-face tag-type comment block-side t) 62 63 (face (rainbow-delimiters-depth-3-face) tag-type comment block-side t) 63 64 (tag-type comment block-side t) 64 65 (face (rainbow-delimiters-depth-3-face) tag-type comment block-side t) 65 66 (face (rainbow-delimiters-depth-3-face) tag-type comment block-side t) 66 67 (tag-type comment block-side t) 67 68 (face (rainbow-delimiters-depth-3-face) tag-type comment block-side t) 68 69 (face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face tag-type comment block-token delimiter-end block-side t) 69 70 (face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) font-lock-face web-mode-block-delimiter-face tag-type comment block-token delimiter-end block-end t block-side t) 70 113 (font-lock-face web-mode-comment-face tag-type comment) 113 114 (font-lock-face web-mode-comment-face tag-end t tag-type comment)) . 34760) (undo-tree-id670 . -20) (#("   " 0 3 (font-lock-face web-mode-comment-face tag-type comment)) . 34798) (#("     " 0 5 (font-lock-face web-mode-comment-face tag-type comment)) . 34858)) (25864 9212 410245 827000) 0 nil])
([nil nil ((#("," 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34675) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34676) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) 34677) nil (25864 9275 548112 36000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-3-face) block-side t)) . -34800) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (#("0" 0 1 (block-side t)) . -34801) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) block-side t)) . -34802) (undo-tree-id675 . -1) (undo-tree-id676 . -1) 34803) ((34800 . 34803)) (25864 9266 54994 360000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 34676 . 34677) (nil tag-attr t 34676 . 34677) (nil tag-name "v-card" 34676 . 34677) (nil tag-type start 34676 . 34677) (nil font-lock-face web-mode-html-attr-value-face 34676 . 34677) (nil tag-attr t 34675 . 34676) (nil tag-name "v-card" 34675 . 34676) (nil tag-type start 34675 . 34676) (nil font-lock-face web-mode-html-attr-value-face 34675 . 34676) (nil tag-attr t 34674 . 34675) (nil tag-name "v-card" 34674 . 34675) (nil tag-type start 34674 . 34675) (nil font-lock-face web-mode-html-attr-value-face 34674 . 34675) (nil tag-attr t 34673 . 34674) (nil tag-name "v-card" 34673 . 34674) (nil tag-type start 34673 . 34674) (nil font-lock-face web-mode-html-attr-value-face 34673 . 34674) (nil tag-attr t 34672 . 34673) (nil tag-name "v-card" 34672 . 34673) (nil tag-type start 34672 . 34673) (nil font-lock-face web-mode-html-attr-value-face 34672 . 34673) (34672 . 34677)) nil (25864 9275 548095 347000) 0 nil])
([nil nil ((#("k" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34672) (undo-tree-id686 . -1) (#("e" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34673) (undo-tree-id687 . -1) (#("y" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34674) (undo-tree-id688 . -1) 34675 (t 25864 9218 979469 928000)) ((34672 . 34675)) (25864 9265 708924 505000) 0 nil])
([nil nil ((34677 . 34679)) nil (25864 9275 548080 851000) 0 nil])
([nil nil ((34672 . 34677)) ((#("value" 0 5 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34672)) (25864 9265 417221 945000) 0 nil])
([nil nil ((34768 . 34771) (t 25864 9275 610943 872000)) nil (25864 9305 14058 464000) 0 nil])
([nil nil ((#("e" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34679) (#("u" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34679) (#("l" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34679) (#("a" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34679) (#("v" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34679)) ((34679 . 34680) (34679 . 34680) (34679 . 34680) (34679 . 34680) (34679 . 34680)) (25864 9265 140485 103000) 0 nil])
([nil nil ((34862 . 34865)) nil (25864 9305 14050 376000) 0 nil])
([nil nil ((34679 . 34682)) ((#("key" 0 3 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34679) (undo-tree-id689 . -3) (t 25864 9250 927173 618000)) (25864 9250 862036 246000) 0 nil])
([nil nil ((34647 . 34664) (t 25864 9305 74668 765000)) nil (25864 9357 16441 846000) 0 nil])
nil
([nil nil ((34671 . 34672) (34664 . 34672)) nil (25864 9357 16440 208000) 0 nil])
([nil nil ((#("p" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34671) (undo-tree-id699 . -1) 34672) nil (25864 9357 16438 408000) 0 nil])
([nil nil ((34671 . 34680)) nil (25864 9357 16435 71000) 0 nil])
([nil nil ((34680 . 34681)) nil (25864 9357 16433 350000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34680) (undo-tree-id698 . -1) 34681) nil (25864 9357 16428 193000) 0 nil])
([nil nil ((#("m" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34671) (undo-tree-id700 . -1) (#("r" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34672) (undo-tree-id701 . -1) (#("-" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34673) (undo-tree-id702 . -1) (#("2" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34674) (undo-tree-id703 . -1) 34675 (t 25864 9357 86180 946000)) nil (25864 9379 16862 216000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34671)) nil (25864 9379 16847 721000) 0 nil])
([nil nil ((34675 . 34680)) nil (25864 9379 16839 444000) 0 nil])
([nil nil ((34830 . 34843) (t 25864 9379 81973 871000)) nil (25864 9443 486527 447000) 0 nil])
([nil nil ((#("</span>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "span") 1 2 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "span") 2 6 (font-lock-face web-mode-html-tag-face tag-type end tag-name "span") 6 7 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "span")) . 34836) (undo-tree-id710 . -7) (undo-tree-id711 . -7)) nil (25864 9443 486525 770000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34856 . 34857) (nil tag-name "span" 34856 . 34857) (nil tag-type end 34856 . 34857) (nil tag-end t 34856 . 34857) (nil font-lock-face web-mode-html-tag-bracket-face 34856 . 34857) (nil tag-name "span" 34852 . 34856) (nil tag-type end 34852 . 34856) (nil font-lock-face web-mode-html-tag-face 34852 . 34856) (nil tag-name "span" 34851 . 34852) (nil tag-type end 34851 . 34852) (nil font-lock-face web-mode-html-tag-bracket-face 34851 . 34852) (nil tag-name "span" 34850 . 34851) (nil tag-type end 34850 . 34851) (nil tag-beg 20 34850 . 34851) (nil font-lock-face web-mode-html-tag-bracket-face 34850 . 34851) (34850 . 34857)) nil (25864 9443 486521 23000) 0 nil])
([nil nil ((34843 . 34844) (34835 . 34844)) nil (25864 9443 486516 91000) 0 nil])
([nil nil ((#("?" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "span" tag-attr t)) . -34843) (undo-tree-id709 . -1) 34844) nil (25864 9443 486514 520000) 0 nil])
([nil nil ((34843 . 34851)) nil (25864 9443 486511 501000) 0 nil])
([nil nil ((#("o" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "span" tag-attr t)) . -34846) (undo-tree-id704 . -1) (#("m" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "span" tag-attr t)) . -34847) (undo-tree-id705 . -1) (#("a" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "span" tag-attr t)) . -34848) (undo-tree-id706 . -1) (#("r" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "span" tag-attr t)) . -34849) (undo-tree-id707 . -1) (#("y" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "span" tag-attr t)) . -34850) (undo-tree-id708 . -1) 34851) nil (25864 9443 486507 545000) 0 nil])
([nil nil ((34846 . 34850)) nil (25864 9443 486488 105000) 0 nil])
([nil nil ((#("o" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "span" tag-attr-end 0 tag-attr t)) . -34837) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (#("l" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "span" tag-attr-end 0 tag-attr t)) . -34838) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (#("o" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "span" tag-attr-end 0 tag-attr t)) . -34839) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (#("r" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "span" tag-attr-end 0 tag-attr t)) . -34840) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (#("=" 0 1 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "span" tag-attr-end 5 tag-attr t)) . -34841) (undo-tree-id726 . -1) (#("\"" 0 1 (tag-type start tag-name "span")) . -34842) (undo-tree-id727 . -1) (#("p" 0 1 (tag-type start tag-name "span")) . -34843) (undo-tree-id728 . -1) (#("r" 0 1 (tag-type start tag-name "span")) . -34844) (undo-tree-id729 . -1) (#("i" 0 1 (tag-type start tag-name "span")) . -34845) (undo-tree-id730 . -1) (#("m" 0 1 (tag-type start tag-name "span")) . -34846) (undo-tree-id731 . -1) (#("a" 0 1 (tag-type start tag-name "span")) . -34847) (undo-tree-id732 . -1) (#("r" 0 1 (tag-type start tag-name "span")) . -34848) (undo-tree-id733 . -1) (#("y" 0 1 (tag-type start tag-name "span")) . -34849) (undo-tree-id734 . -1) (#("\"" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "span" tag-attr-end 5 tag-attr t)) . -34850) (undo-tree-id735 . -1) 34851 (t 25864 9443 561364 404000)) nil (25864 9493 415586 864000) 0 nil])
([nil nil ((34837 . 34838)) nil (25864 9493 415560 328000) 0 nil])
([nil nil ((#("c" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "span" tag-attr-end 0 tag-attr t tag-attr-beg 0)) . -34836) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (#("c" 0 1 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "span" tag-attr-end 0 tag-attr t)) . -34837) (undo-tree-id715 . -1) 34838) nil (25864 9493 415557 10000) 0 nil])
([nil nil ((34843 . 34856) (34836 . 34844)) nil (25864 9493 415537 877000) 0 nil])
([nil nil ((34818 . 34825) (34810 . 34819) (t 25864 9493 476890 315000)) nil (25864 9540 614549 495000) 0 nil])
([nil nil ((#("-" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-subtitle" tag-attr t)) . -34824) (undo-tree-id745 . -1) 34825) nil (25864 9540 614547 252000) 0 nil])
([nil nil ((34824 . 34828)) nil (25864 9540 614543 606000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-subtitle" tag-attr t)) . -34827) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) 34828) nil (25864 9540 614536 926000) 0 nil])
([nil nil ((34987 . 34988) (t 25864 9540 680440 334000)) nil (25864 9571 245364 729000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35004 . 35005) (nil tag-attr t 35004 . 35005) (nil tag-attr-end 5 35004 . 35005) (nil tag-name "v-card-text" 35004 . 35005) (nil tag-type start 35004 . 35005) (nil font-lock-face web-mode-html-attr-value-face 35004 . 35005) (nil tag-attr t 34994 . 35004) (nil tag-name "v-card-text" 34994 . 35004) (nil tag-type start 34994 . 35004) (nil font-lock-face web-mode-html-attr-value-face 34994 . 35004) (nil tag-attr t 34993 . 34994) (nil tag-name "v-card-text" 34993 . 34994) (nil tag-type start 34993 . 34994) (nil font-lock-face web-mode-html-attr-equal-face 34993 . 34994) (nil tag-attr t 34992 . 34993) (nil tag-name "v-card-text" 34992 . 34993) (nil tag-type start 34992 . 34993) (nil font-lock-face web-mode-html-attr-name-face 34992 . 34993) (nil tag-attr t 34991 . 34992) (nil tag-name "v-card-text" 34991 . 34992) (nil tag-type start 34991 . 34992) (nil font-lock-face web-mode-html-attr-name-face 34991 . 34992) (nil tag-attr t 34990 . 34991) (nil tag-name "v-card-text" 34990 . 34991) (nil tag-type start 34990 . 34991) (nil font-lock-face web-mode-html-attr-name-face 34990 . 34991) (nil tag-attr t 34989 . 34990) (nil tag-name "v-card-text" 34989 . 34990) (nil tag-type start 34989 . 34990) (nil font-lock-face web-mode-html-attr-name-face 34989 . 34990) (nil tag-attr-beg 0 34988 . 34989) (nil tag-attr t 34988 . 34989) (nil tag-name "v-card-text" 34988 . 34989) (nil tag-type start 34988 . 34989) (nil font-lock-face web-mode-html-attr-name-face 34988 . 34989) (34988 . 35005)) nil (25864 9571 245361 642000) 0 nil])
([nil nil ((34827 . 34831)) nil (25864 9571 245352 933000) 0 nil])
([nil nil ((#("-" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-subtitle" tag-attr t)) . -34828) (undo-tree-id753 . -1) (#("p" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-subtitle" tag-attr t)) . -34829) (undo-tree-id754 . -1) (#("b" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-subtitle" tag-attr t)) . -34830) (undo-tree-id755 . -1) 34831) nil (25864 9571 245351 34000) 0 nil])
([nil nil ((34828 . 34832)) nil (25864 9571 245345 566000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-subtitle" tag-attr t)) . -34831) (undo-tree-id752 . -1) 34832) nil (25864 9571 245343 917000) 0 nil])
([nil nil ((34831 . 34833)) nil (25864 9571 245340 320000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-subtitle" tag-attr t)) . -34832) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) 34833) nil (25864 9571 245334 308000) 0 nil])
([nil nil ((35000 . 35007) (t 25864 9571 308147 578000)) nil (25864 9706 419126 958000) 0 nil])
([nil nil ((#("e" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-text" tag-attr t)) . -35006) (undo-tree-id756 . -1) 35007) nil (25864 9706 419123 979000) 0 nil])
([nil nil ((35006 . 35010)) nil (25864 9706 419109 992000) 0 nil])
([nil nil ((#("a" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-text" tag-attr t)) . -35011) (undo-tree-id761 . -1) 35012 (t 25864 9706 478849 89000)) nil (25864 9744 946863 475000) 0 nil])
([nil nil ((35011 . 35012)) nil (25864 9744 946860 450000) 0 nil])
([nil nil ((#("0" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-text" tag-attr t)) . -35013) (undo-tree-id760 . -1) 35014) nil (25864 9744 946859 181000) 0 nil])
([nil nil ((35013 . 35020)) nil (25864 9744 946856 457000) 0 nil])
([nil nil ((#("2" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-text" tag-attr t)) . -35018) (undo-tree-id758 . -1) (#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-text" tag-attr t)) . -35019) (undo-tree-id759 . -1) 35020) nil (25864 9744 946854 674000) 0 nil])
([nil nil ((35018 . 35030)) nil (25864 9744 946848 995000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-text" tag-attr t)) . -35029) (undo-tree-id757 . -1) 35030) nil (25864 9744 946843 137000) 0 nil])
([nil nil ((34614 . 34615) (t 25864 9745 10477 258000)) nil (25864 11642 940865 405000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34618 . 34619) (nil tag-attr t 34615 . 34619) (nil tag-name "v-col" 34615 . 34619) (nil tag-type start 34615 . 34619) (nil font-lock-face web-mode-html-attr-value-face 34615 . 34619) (34615 . 34619)) nil (25864 11642 940857 651000) 0 nil])
([nil nil ((#("2" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34681) (#("-" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34681) (#("t" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34681) (undo-tree-id762 . -1) (#("m" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 34681) (t 25864 11643 2946 168000)) nil (25864 11667 309744 382000) 0 nil])
([nil nil ((34681 . 34685)) nil (25864 11667 309728 354000) 0 nil])
([nil nil ((47594 . 47595) (t 25864 11667 374694 513000)) nil (25865 22275 450891 582000) 0 nil])
([nil nil ((47595 . 47604)) nil (25865 22275 450890 95000) 0 nil])
([nil nil ((47604 . 47613)) nil (25865 22275 450888 887000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -47612) (undo-tree-id15 . -1) 47613) nil (25865 22275 450887 551000) 0 nil])
([nil nil ((47612 . 47616)) nil (25865 22275 450884 998000) 0 nil])
([nil nil ((47615 . 47620)) nil (25865 22275 450883 756000) 0 nil])
([nil nil ((#("s" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -47615) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("p" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -47616) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#("a" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -47617) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("n" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -47618) (undo-tree-id13 . -1) (#(" " 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -47619) (undo-tree-id14 . -1) 47620) nil (25865 22275 450881 269000) 0 nil])
([nil nil ((47615 . 47623)) nil (25865 22275 450869 94000) 0 nil])
([nil nil ((#("&" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -47622) (undo-tree-id6 . -1) 47623) nil (25865 22275 450867 744000) 0 nil])
([nil nil ((47622 . 47623)) nil (25865 22275 450865 475000) 0 nil])
([nil nil ((47623 . 47628)) nil (25865 22275 450864 526000) 0 nil])
([nil nil ((47621 . 47629)) nil (25865 22275 450863 558000) 0 nil])
([nil nil ((47620 . 47627)) nil (25865 22275 450862 569000) 0 nil])
([nil nil ((47627 . 47629)) nil (25865 22275 450861 476000) 0 nil])
([nil nil ((47628 . 47635)) nil (25865 22275 450860 400000) 0 nil])
([nil nil ((#("a" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -47632) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (#("r" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -47633) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (#("y" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -47634) (undo-tree-id5 . -1) 47635) nil (25865 22275 450858 445000) 0 nil])
([nil nil ((47632 . 47641)) nil (25865 22275 450850 460000) 0 nil])
([nil nil ((35074 . 35093)) nil (25865 22275 450849 365000) 0 nil])
([nil nil ((35095 . 35104) (35094 . 35096) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face))) . -35094) (35094 . 35095) (35093 . 35095) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face))) . -35093) (35093 . 35094)) nil (25865 22275 450841 594000) 0 nil])
([nil nil ((#(" " 0 1 (block-side t)) . -35103) (undo-tree-id0 . -1) 35104) nil (25865 22275 450838 58000) 0 nil])
([nil nil ((35103 . 35104)) nil (25865 22275 450818 875000) 0 nil])
([nil nil ((35095 . 35096)) nil (25865 22275 450811 464000) 0 nil])
([nil nil ((35074 . 35093) (t 25865 22275 574639 77000)) nil (25865 22321 564288 140000) 0 nil])
([nil nil ((35093 . 35097)) nil (25865 22321 564286 819000) 0 nil])
([nil nil ((#("s" 0 1 (tag-name "s" tag-type start font-lock-face web-mode-html-tag-unclosed-face)) . -35094) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("p" 0 1 (tag-name "sp" tag-type start font-lock-face web-mode-html-tag-unclosed-face)) . -35095) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("a" 0 1 (tag-name "spa" tag-type start font-lock-face web-mode-html-tag-unclosed-face)) . -35096) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 35097) nil (25865 22321 564284 542000) 0 nil])
([nil nil ((35094 . 35104)) nil (25865 22321 564275 513000) 0 nil])
([nil nil ((35106 . 35114) (35097 . 35107)) nil (25865 22321 564273 638000) 0 nil])
([nil nil ((#("
                  {{ test_one }}" 19 20 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face)) 20 21 (block-side t block-token delimiter-beg font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 21 22 (block-side t) 22 23 (block-side t face web-mode-variable-name-face) 23 24 (block-side t face web-mode-variable-name-face) 24 25 (block-side t face web-mode-variable-name-face) 25 26 (block-side t face web-mode-variable-name-face) 26 27 (block-side t face web-mode-variable-name-face) 27 28 (block-side t face web-mode-variable-name-face) 28 29 (block-side t face web-mode-variable-name-face) 29 30 (block-side t face web-mode-variable-name-face) 30 31 (block-side t) 31 32 (block-side t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face)) 32 33 (block-side t block-end t block-token delimiter-end font-lock-face web-mode-block-delimiter-face face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face))) . 35122) (undo-tree-id16 . -1) (undo-tree-id17 . -33) (undo-tree-id18 . -20) (undo-tree-id19 . -33)) nil (25865 22817 195308 943000) 0 nil])
([nil nil ((#("
        test_one: '<span class=\"primary--text\">test red</span>'" 0 1 (part-side javascript) 1 9 (part-side javascript) 9 17 (part-side javascript face web-mode-variable-name-face) 17 18 (part-side javascript) 18 19 (part-side javascript) 19 20 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 20 26 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 26 31 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 31 47 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 47 64 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . 47643) (undo-tree-id123 . -64) (undo-tree-id124 . -1) (undo-tree-id125 . -64) (undo-tree-id126 . -64) (undo-tree-id127 . -64) (undo-tree-id128 . -64) (undo-tree-id129 . -64) (undo-tree-id130 . -64) (undo-tree-id131 . -64) (undo-tree-id132 . -64) (undo-tree-id133 . -64) (undo-tree-id134 . -64) (undo-tree-id135 . -64) (undo-tree-id136 . -64) (undo-tree-id137 . -64) (t 25865 22321 686614 63000)) nil (25865 22822 284309 168000) 0 nil] [nil nil ((#("
        test_one: '<span class=\"primary--text\">test red</span>'" 0 1 (part-side javascript) 1 9 (part-side javascript) 9 17 (part-side javascript face web-mode-variable-name-face) 17 18 (part-side javascript) 18 19 (part-side javascript) 19 20 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 20 26 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 26 31 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 31 47 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 47 64 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . 47643) (undo-tree-id30 . -1) (undo-tree-id31 . -64) (undo-tree-id32 . -64) (undo-tree-id33 . -64) (undo-tree-id34 . -64) (t 25865 22321 686614 63000)) ((47643 . 47707)) (25865 22815 363417 382000) 0 nil])
([nil nil ((#("," 0 1 (part-side javascript)) . -47642) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) 47643) nil (25865 22822 284283 846000) 0 nil])
([nil nil ((#("
        core_value_obj: {}," 0 9 (part-side javascript) 9 23 (part-side javascript face web-mode-variable-name-face) 23 25 (part-side javascript) 25 26 (part-side javascript face (rainbow-delimiters-depth-4-face)) 26 27 (part-side javascript face (rainbow-delimiters-depth-4-face)) 27 28 (part-side javascript)) . 47615) (undo-tree-id38 . -28) (undo-tree-id39 . -27) (undo-tree-id40 . -1) (undo-tree-id41 . -28)) ((47615 . 47643)) (25865 22815 28491 800000) 0 nil] [nil nil ((#("," 0 1 (part-side javascript)) . -47642) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 47643) ((47642 . 47643)) (25865 22810 631541 520000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35088 . 35089) (nil tag-name "div" 35088 . 35089) (nil tag-type end 35088 . 35089) (nil tag-end t 35088 . 35089) (nil font-lock-face web-mode-html-tag-bracket-face 35088 . 35089) (nil tag-name "div" 35085 . 35088) (nil tag-type end 35085 . 35088) (nil font-lock-face web-mode-html-tag-face 35085 . 35088) (nil tag-name "div" 35084 . 35085) (nil tag-type end 35084 . 35085) (nil font-lock-face web-mode-html-tag-bracket-face 35084 . 35085) (nil tag-name "div" 35083 . 35084) (nil tag-type end 35083 . 35084) (nil tag-beg 20 35083 . 35084) (nil font-lock-face web-mode-html-tag-bracket-face 35083 . 35084) (nil tag-name "div" 35082 . 35083) (nil tag-type start 35082 . 35083) (nil tag-end t 35082 . 35083) (nil font-lock-face web-mode-html-tag-bracket-face 35082 . 35083) (nil tag-attr t 35081 . 35082) (nil tag-attr-end 6 35081 . 35082) (nil tag-name "div" 35081 . 35082) (nil tag-type start 35081 . 35082) (nil font-lock-face web-mode-html-attr-value-face 35081 . 35082) (nil tag-attr t 35072 . 35081) (nil tag-name "div" 35072 . 35081) (nil tag-type start 35072 . 35081) (nil font-lock-face web-mode-html-attr-value-face 35072 . 35081) (nil tag-attr t 35071 . 35072) (nil tag-name "div" 35071 . 35072) (nil tag-type start 35071 . 35072) (nil font-lock-face web-mode-html-attr-equal-face 35071 . 35072) (nil tag-attr t 35070 . 35071) (nil tag-name "div" 35070 . 35071) (nil tag-type start 35070 . 35071) (nil font-lock-face web-mode-html-attr-engine-face 35070 . 35071) (nil tag-attr t 35069 . 35070) (nil tag-name "div" 35069 . 35070) (nil tag-type start 35069 . 35070) (nil font-lock-face web-mode-html-attr-engine-face 35069 . 35070) (nil tag-attr t 35068 . 35069) (nil tag-name "div" 35068 . 35069) (nil tag-type start 35068 . 35069) (nil font-lock-face web-mode-html-attr-engine-face 35068 . 35069) (nil tag-attr t 35067 . 35068) (nil tag-name "div" 35067 . 35068) (nil tag-type start 35067 . 35068) (nil font-lock-face web-mode-html-attr-engine-face 35067 . 35068) (nil tag-attr t 35066 . 35067) (nil tag-name "div" 35066 . 35067) (nil tag-type start 35066 . 35067) (nil font-lock-face web-mode-html-attr-engine-face 35066 . 35067) (nil tag-attr-beg 2 35065 . 35066) (nil tag-attr t 35065 . 35066) (nil tag-name "div" 35065 . 35066) (nil tag-type start 35065 . 35066) (nil font-lock-face web-mode-html-attr-engine-face 35065 . 35066) (nil tag-name "div" 35064 . 35065) (nil tag-type start 35064 . 35065) (nil tag-name "div" 35061 . 35064) (nil tag-type start 35061 . 35064) (nil font-lock-face web-mode-html-tag-face 35061 . 35064) (nil tag-name "div" 35060 . 35061) (nil tag-type start 35060 . 35061) (nil tag-beg 17 35060 . 35061) (nil font-lock-face web-mode-html-tag-bracket-face 35060 . 35061) (35060 . 35089) (t 25865 22822 345718 751000)) nil (25865 22849 805625 889000) 0 nil])
([nil nil ((#("," 0 1 (part-side javascript)) . -47614) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 47615) ((47614 . 47615)) (25865 22815 21705 800000) 0 nil])
nil
([nil nil ((35089 . 35090)) nil (25865 22849 805610 733000) 0 nil])
nil
([nil nil ((#("test_one" 0 8 (tag-attr t tag-name "div" tag-type start font-lock-face web-mode-html-attr-value-face)) . 35073) (undo-tree-id149 . -8) (undo-tree-id150 . -8)) nil (25865 22849 805609 358000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35080 . 35081) (nil tag-attr t 35080 . 35081) (nil tag-name "div" 35080 . 35081) (nil tag-type start 35080 . 35081) (nil font-lock-face web-mode-html-attr-value-face 35080 . 35081) (nil tag-attr t 35079 . 35080) (nil tag-name "div" 35079 . 35080) (nil tag-type start 35079 . 35080) (nil font-lock-face web-mode-html-attr-value-face 35079 . 35080) (nil tag-attr t 35078 . 35079) (nil tag-name "div" 35078 . 35079) (nil tag-type start 35078 . 35079) (nil font-lock-face web-mode-html-attr-value-face 35078 . 35079) (nil tag-attr t 35077 . 35078) (nil tag-name "div" 35077 . 35078) (nil tag-type start 35077 . 35078) (nil font-lock-face web-mode-html-attr-value-face 35077 . 35078) (nil tag-attr t 35076 . 35077) (nil tag-name "div" 35076 . 35077) (nil tag-type start 35076 . 35077) (nil font-lock-face web-mode-html-attr-value-face 35076 . 35077) (nil tag-attr t 35075 . 35076) (nil tag-name "div" 35075 . 35076) (nil tag-type start 35075 . 35076) (nil font-lock-face web-mode-html-attr-value-face 35075 . 35076) (nil tag-attr t 35074 . 35075) (nil tag-name "div" 35074 . 35075) (nil tag-type start 35074 . 35075) (nil font-lock-face web-mode-html-attr-value-face 35074 . 35075) (nil tag-attr t 35073 . 35074) (nil tag-name "div" 35073 . 35074) (nil tag-type start 35073 . 35074) (nil font-lock-face web-mode-html-attr-value-face 35073 . 35074) (35073 . 35081)) nil (25865 22849 805603 977000) 0 nil])
([nil nil ((#("{{ value[0] }}
                  <div v-html=\"test_one\"></div>" 0 1 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg face (rainbow-delimiters-depth-1-face)) 1 2 (block-side t block-token delimiter-beg face (rainbow-delimiters-depth-2-face)) 2 3 (block-side t) 3 4 (block-side t) 4 5 (block-side t) 5 6 (block-side t) 6 7 (block-side t) 7 8 (block-side t) 8 9 (block-side t face (rainbow-delimiters-depth-3-face)) 9 10 (block-side t) 10 11 (block-side t face (rainbow-delimiters-depth-3-face)) 11 12 (block-side t) 12 13 (block-side t block-token delimiter-end face (rainbow-delimiters-depth-2-face)) 13 14 (block-side t block-end t block-token delimiter-end face (rainbow-delimiters-depth-1-face)) 33 34 (tag-name "div" tag-type start tag-beg 17 font-lock-face web-mode-html-tag-bracket-face) 34 37 (tag-name "div" tag-type start font-lock-face web-mode-html-tag-face) 37 38 (tag-name "div" tag-type start) 38 39 (tag-attr-beg 2 tag-attr t tag-name "div" tag-type start font-lock-face web-mode-html-attr-engine-face) 39 40 (tag-attr t tag-name "div" tag-type start font-lock-face web-mode-html-attr-engine-face) 40 41 (tag-attr t tag-name "div" tag-type start font-lock-face web-mode-html-attr-engine-face) 41 42 (tag-attr t tag-name "div" tag-type start font-lock-face web-mode-html-attr-engine-face) 42 43 (tag-attr t tag-name "div" tag-type start font-lock-face web-mode-html-attr-engine-face) 43 44 (tag-attr t tag-name "div" tag-type start font-lock-face web-mode-html-attr-engine-face) 44 45 (tag-attr t tag-name "div" tag-type start font-lock-face web-mode-html-attr-equal-face) 45 54 (tag-attr t tag-name "div" tag-type start font-lock-face web-mode-html-attr-value-face) 54 55 (tag-attr t tag-attr-end 6 tag-name "div" tag-type start font-lock-face web-mode-html-attr-value-face) 55 56 (tag-name "div" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 56 57 (tag-name "div" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 57 58 (tag-name "div" tag-type end font-lock-face web-mode-html-tag-bracket-face) 58 61 (tag-name "div" tag-type end font-lock-face web-mode-html-tag-face) 61 62 (tag-name "div" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 35090) (undo-tree-id143 . -62) (undo-tree-id144 . -62) (undo-tree-id145 . -15) (undo-tree-id146 . -62) (undo-tree-id147 . -11) (undo-tree-id148 . -62)) nil (25865 22849 805594 195000) 0 nil])
([nil nil ((" " . -35089) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) 35090) nil (25865 22849 805581 400000) 0 nil])
([nil nil ((78044 . 78057) (t 25865 22849 865653 639000)) nil (25865 23238 52032 141000) 0 nil])
([nil nil ((78057 . 78078)) nil (25865 23238 52030 284000) 0 nil])
([nil nil ((78078 . 78079)) nil (25865 23238 52029 29000) 0 nil])
([nil nil ((nil rear-nonsticky nil 78096 . 78097) (nil part-side javascript 78079 . 78097) (78079 . 78097)) nil (25865 23238 52027 703000) 0 nil])
([nil nil ((78079 . 78084)) nil (25865 23238 52025 737000) 0 nil])
([nil nil ((78102 . 78104) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-7-face))) . -78102) (78102 . 78103)) nil (25865 23238 52024 158000) 0 nil])
([nil nil ((nil rear-nonsticky nil 78116 . 78117) (nil part-side javascript 78103 . 78117) (78103 . 78117)) nil (25865 23238 52022 262000) 0 nil])
([nil nil ((78117 . 78119)) nil (25865 23238 52020 546000) 0 nil])
([nil nil ((nil rear-nonsticky nil 78137 . 78138) (nil part-side javascript 78123 . 78138) (nil part-side javascript 78119 . 78123) (nil face web-mode-constant-face 78119 . 78123) (78119 . 78138)) nil (25865 23238 52018 975000) 0 nil])
([nil nil ((#("element.filter" 0 14 (part-side javascript)) . 78185) (undo-tree-id151 . -14) (undo-tree-id152 . -14) (undo-tree-id153 . -14) (undo-tree-id154 . -14) (undo-tree-id155 . -14) (undo-tree-id156 . -14) (undo-tree-id157 . -14) (undo-tree-id158 . -14) (undo-tree-id159 . -14) (undo-tree-id160 . -14) (undo-tree-id161 . -14) (undo-tree-id162 . -14) (undo-tree-id163 . -13) (undo-tree-id164 . -13) (undo-tree-id165 . -13) (undo-tree-id166 . -12) (undo-tree-id167 . -12) (undo-tree-id168 . -12) (undo-tree-id169 . -11) (undo-tree-id170 . -11) (undo-tree-id171 . -11) (undo-tree-id172 . -10) (undo-tree-id173 . -10) (undo-tree-id174 . -10) (undo-tree-id175 . -7) (undo-tree-id176 . -7) (undo-tree-id177 . -7) (undo-tree-id178 . -6) (undo-tree-id179 . -6) (undo-tree-id180 . -6) (undo-tree-id181 . -5) (undo-tree-id182 . -5) (undo-tree-id183 . -5) (undo-tree-id184 . -5) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (undo-tree-id187 . -4) (undo-tree-id188 . -3) (undo-tree-id189 . -3) (undo-tree-id190 . -3) (undo-tree-id191 . -2) (undo-tree-id192 . -2) (undo-tree-id193 . -2) (undo-tree-id194 . -2) (undo-tree-id195 . -2) (undo-tree-id196 . -2) (undo-tree-id197 . -2) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -14) (undo-tree-id202 . -14)) nil (25865 23238 52012 447000) 0 nil])
([nil nil ((nil rear-nonsticky nil 78197 . 78198) (nil part-side javascript 78185 . 78198) (78185 . 78198)) nil (25865 23238 51934 239000) 0 nil])
([nil nil ((34932 . 34934) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face))) . -34932) (34932 . 34933) (t 25865 23238 125985 967000)) nil (25865 23293 193097 634000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face))) . 34933)) nil (25865 23293 193095 269000) 0 nil])
([nil nil ((34934 . 34936) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face))) . -34934) (34934 . 34935)) nil (25865 23293 193093 724000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face))) . -34934) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face))) . 34935) (undo-tree-id208 . -1)) nil (25865 23293 193090 237000) 0 nil])
([nil nil ((34934 . 34935)) nil (25865 23293 193067 462000) 0 nil])
([nil nil ((#("[0]" 0 1 (block-side t face (rainbow-delimiters-depth-3-face)) 1 2 (block-side t) 2 3 (block-side t face (rainbow-delimiters-depth-3-face))) . 34920) (undo-tree-id209 . -3) (undo-tree-id210 . -3) (t 25865 23293 254115 749000)) nil (25865 25132 879011 859000) 0 nil])
([nil nil ((#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-7-face))) . -78033) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (#("0" 0 1 (part-side javascript)) . -78034) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("]" 0 1 (part-side javascript face (rainbow-delimiters-depth-7-face))) . -78035) (undo-tree-id215 . -1) (undo-tree-id216 . -1) 78036 (t 25865 25132 941057 348000)) nil (25865 25212 214521 24000) 0 nil])
([nil nil ((#("2" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34684) (undo-tree-id220 . -1) (undo-tree-id221 . -1) 34685 (t 25865 25212 273272 153000)) nil (25865 25569 184737 39000) 0 nil])
([nil nil ((34684 . 34685)) nil (25865 25569 184732 961000) 0 nil])
([nil nil ((#("p" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34681) (undo-tree-id219 . -1) 34682) nil (25865 25569 184731 606000) 0 nil])
([nil nil ((34681 . 34683)) nil (25865 25569 184728 900000) 0 nil])
([nil nil ((#("m" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34682) (undo-tree-id218 . -1) 34683) nil (25865 25569 184727 339000) 0 nil])
([nil nil ((#("4" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34684) (undo-tree-id217 . -1) 34685) nil (25865 25569 184722 761000) 0 nil])
([nil nil ((34684 . 34685)) nil (25865 25569 184709 123000) 0 nil])
([nil nil ((34685 . 34690) (t 25865 25569 245771 701000)) nil (25865 25587 109711 350000) 0 nil])
([nil nil ((#("2" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34684) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) 34685) nil (25865 25587 109707 860000) 0 nil])
([nil nil ((34684 . 34685)) nil (25865 25587 109682 495000) 0 nil])
([nil nil ((#("2" 0 1 (tag-attr t tag-name "v-dialog" tag-type start font-lock-face web-mode-html-attr-value-face)) . -26813) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) 26814 (t 25865 25587 173781 829000)) nil (25865 25613 523726 893000) 0 nil])
([nil nil ((26813 . 26814)) nil (25865 25613 523673 398000) 0 nil])
([nil nil ((#("8" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -27475) (undo-tree-id295 . -1) 27476 (t 25865 25613 585794 776000)) nil (25865 25652 639527 774000) 0 nil])
([nil nil ((27475 . 27476)) nil (25865 25652 639525 86000) 0 nil])
([nil nil ((#("6" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -27475) (undo-tree-id293 . -1) (undo-tree-id294 . -1) 27476) nil (25865 25652 639518 860000) 0 nil])
([nil nil ((27475 . 27476)) nil (25865 25652 639515 218000) 0 nil])
([nil nil ((#("4" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34627) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) 34628) nil (25865 25652 639510 978000) 0 nil])
([nil nil ((34627 . 34628)) nil (25865 34161 328019 507000) 0 nil])
([nil nil ((34652 . 34669) (t 25865 34162 989437 953000)) nil (25865 34224 967673 202000) 0 nil] [nil nil ((27027 . 27037) (t 25865 25652 701809 845000)) ((#(" outlined " 0 1 (tag-name "v-card" tag-type start) 1 2 (tag-attr-beg 0 tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 2 3 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 3 4 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 4 5 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 5 6 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 6 7 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 7 8 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 8 9 (tag-attr t tag-attr-end 0 tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 9 10 (tag-name "v-card" tag-type start)) . 27027) (undo-tree-id297 . -8) (undo-tree-id298 . -10) (undo-tree-id299 . -9) (undo-tree-id300 . -9) (undo-tree-id301 . -9) (undo-tree-id302 . -9) (undo-tree-id303 . -9) (undo-tree-id304 . -9) (undo-tree-id305 . -9) (undo-tree-id306 . -9) (undo-tree-id307 . -9) (undo-tree-id308 . -9) (undo-tree-id309 . -9) (undo-tree-id310 . -9) (undo-tree-id311 . -9) (undo-tree-id312 . -10) (undo-tree-id313 . -10) (undo-tree-id314 . -10) (undo-tree-id315 . -10) (undo-tree-id316 . -10) (undo-tree-id317 . -10) (undo-tree-id318 . -10) (undo-tree-id319 . -10) (undo-tree-id320 . -10) (undo-tree-id321 . -10) (undo-tree-id322 . -10)) (25865 34160 857435 347000) 0 nil])
([nil nil ((34669 . 34678)) nil (25865 34224 967671 611000) 0 nil])
([nil nil ((#(" " 0 1 (tag-name "v-card" tag-type start)) . -27036) (undo-tree-id296 . -1) 27037) ((27036 . 27037) (t 25865 31723 151581 330000)) (25865 31723 93222 788000) 0 nil])
([nil nil ((#(" " 0 1 (tag-name "v-card" tag-type start)) . -34677) (undo-tree-id323 . -1) 34678) nil (25865 34224 967669 412000) 0 nil])
nil
([nil nil ((34630 . 34645)) nil (25865 34224 969001 188000) 0 nil])
([nil nil ((34645 . 34649)) nil (25865 34261 924052 279000) 0 nil] [nil nil ((34645 . 34662)) ((#("<v-cont></v-cont>" 0 1 (tag-name "v-cont" tag-type start tag-beg 18 font-lock-face web-mode-html-tag-bracket-face) 1 7 (tag-name "v-cont" tag-type start font-lock-face web-mode-html-tag-custom-face) 7 8 (tag-name "v-cont" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 8 9 (tag-name "v-cont" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 9 10 (tag-name "v-cont" tag-type end font-lock-face web-mode-html-tag-bracket-face) 10 16 (tag-name "v-cont" tag-type end font-lock-face web-mode-html-tag-custom-face) 16 17 (tag-name "v-cont" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 34645) (undo-tree-id324 . -5) (undo-tree-id325 . -7) (undo-tree-id326 . -8)) (25865 34224 967650 542000) 0 nil])
([nil nil (("-" . -34646) (undo-tree-id348 . -1) ("v" . -34647) (undo-tree-id349 . -1) ("o" . -34648) (undo-tree-id350 . -1) 34649) nil (25865 34261 924050 624000) 0 nil])
nil
([nil nil ((34646 . 34653)) nil (25865 34261 924044 879000) 0 nil])
([nil nil ((34646 . 34657) (#("v-conta" 0 7 (tag-name "v-conta" tag-type start font-lock-face web-mode-html-tag-unclosed-face)) . -34646) (undo-tree-id345 . -4) (undo-tree-id346 . -7) (undo-tree-id347 . -7) 34653) nil (25865 34261 924043 571000) 0 nil])
([nil nil ((34657 . 34672)) nil (25865 34261 924039 217000) 0 nil])
([nil nil ((34659 . 34675) (34660 . 34674) (#("                " 0 16 (face whitespace-trailing)) . 34659) (34659 . 34675) (34659 . 34660) ("              " . 34659) (34658 . 34673)) nil (25865 34261 924037 836000) 0 nil])
([nil nil ((#("              <v-card
" 14 15 (tag-name "v-card" tag-type start tag-beg 19 font-lock-face web-mode-html-tag-bracket-face) 15 21 (tag-name "v-card" tag-type start font-lock-face web-mode-html-tag-custom-face) 21 22 (tag-name "v-card" tag-type start)) . 34727) (undo-tree-id342 . -21) (undo-tree-id343 . -21) (34698 . 34727) (#("              </v-container>
" 14 15 (tag-name "v-container" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 15 16 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-bracket-face) 16 27 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-custom-face) 27 28 (tag-name "v-container" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 34676) (undo-tree-id344 . -16) (34705 . 34727) 34692) nil (25865 34261 924035 134000) 0 nil])
([nil nil (("                outlined
" . 34752) (34723 . 34752) (#("              </v-container>
" 0 13 (tag-name "v-card" tag-type start) 13 14 (tag-name "v-card" tag-type start tag-end t) 14 15 (tag-name "v-container" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 15 16 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-bracket-face) 16 27 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-custom-face) 27 28 (tag-name "v-container" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 34698) (undo-tree-id341 . -16) (34727 . 34752) 34714) nil (25865 34261 924030 19000) 0 nil])
([nil nil (("                class=\"ml-2 mb-1 pb-1\"
" . 34791) (34762 . 34791) (#("              </v-container>
" 0 13 (tag-name "v-card" tag-type start) 13 14 (tag-name "v-card" tag-type start tag-end t) 14 15 (tag-name "v-container" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 15 16 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-bracket-face) 16 27 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-custom-face) 27 28 (tag-name "v-container" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 34723) (undo-tree-id340 . -16) (34752 . 34791) 34739) nil (25865 34261 924026 820000) 0 nil])
([nil nil (("                v-for=\"(value, key) in filter_score\"
" . 34844) (34815 . 34844) (#("              </v-container>
" 0 13 (tag-name "v-card" tag-type start) 13 14 (tag-name "v-card" tag-type start tag-end t) 14 15 (tag-name "v-container" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 15 16 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-bracket-face) 16 27 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-custom-face) 27 28 (tag-name "v-container" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 34762) (undo-tree-id339 . -16) (34791 . 34844) 34778) nil (25865 34261 924023 373000) 0 nil])
([nil nil ((#("                :key=\"key\"
" 16 17 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg) 17 18 (block-side t block-token delimiter-beg) 18 19 (block-side t block-token delimiter-beg) 19 20 (block-side t block-token delimiter-beg) 20 22 (block-side t block-token delimiter-beg) 22 23 (block-side t) 23 24 (block-side t) 24 25 (block-side t) 25 26 (block-side t block-end t block-token delimiter-end)) . 34871) (34842 . 34871) (#("              </v-container>
" 0 13 (tag-name "v-card" tag-type start) 13 14 (tag-name "v-card" tag-type start tag-end t) 14 15 (tag-name "v-container" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 15 16 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-bracket-face) 16 27 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-custom-face) 27 28 (tag-name "v-container" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 34815) (undo-tree-id338 . -16) (34844 . 34871) 34831) nil (25865 34261 924020 112000) 0 nil])
([nil nil (("              >
" . 34887) (34858 . 34887) (#("              </v-container>
" 0 13 (tag-name "v-card" tag-type start) 13 14 (tag-name "v-card" tag-type start tag-end t) 14 15 (tag-name "v-container" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 15 16 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-bracket-face) 16 27 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-custom-face) 27 28 (tag-name "v-container" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 34842) (undo-tree-id337 . -16) (34871 . 34887) 34858) nil (25865 34261 924016 710000) 0 nil])
([nil nil ((#("                <v-card-subtitle class=\"pa-0 ma-0 pb-1\">
" 16 17 (tag-name "v-card-subtitle" tag-type start tag-beg 19 font-lock-face web-mode-html-tag-bracket-face) 17 32 (tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-tag-custom-face) 32 33 (tag-name "v-card-subtitle" tag-type start) 33 34 (tag-attr-beg 0 tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-name-face) 34 38 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-name-face) 38 39 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-equal-face) 39 54 (tag-attr t tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face) 54 55 (tag-attr t tag-attr-end 5 tag-name "v-card-subtitle" tag-type start font-lock-face web-mode-html-attr-value-face) 55 56 (tag-name "v-card-subtitle" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 34944) (34915 . 34944) (#("              </v-container>
" 14 15 (tag-name "v-container" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 15 16 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-bracket-face) 16 27 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-custom-face) 27 28 (tag-name "v-container" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 34858) (undo-tree-id336 . -16) (34887 . 34944) 34874) nil (25865 34261 924013 0) 0 nil])
([nil nil ((#("                  <span class=\"primary--text\">{{ value[1] }}</span> - {{value[2]}} matche(s)
" 18 19 (tag-name "span" tag-type start tag-beg 17 font-lock-face web-mode-html-tag-bracket-face) 19 23 (tag-name "span" tag-type start font-lock-face web-mode-html-tag-face) 23 24 (tag-name "span" tag-type start) 24 25 (tag-attr-beg 0 tag-attr t tag-name "span" tag-type start font-lock-face web-mode-html-attr-name-face) 25 29 (tag-attr t tag-name "span" tag-type start font-lock-face web-mode-html-attr-name-face) 29 30 (tag-attr t tag-name "span" tag-type start font-lock-face web-mode-html-attr-equal-face) 30 44 (tag-attr t tag-name "span" tag-type start font-lock-face web-mode-html-attr-value-face) 44 45 (tag-attr t tag-attr-end 5 tag-name "span" tag-type start font-lock-face web-mode-html-attr-value-face) 45 46 (tag-name "span" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 46 47 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg face (rainbow-delimiters-depth-1-face)) 47 48 (block-side t block-token delimiter-beg face (rainbow-delimiters-depth-2-face)) 48 49 (block-side t) 49 50 (block-side t) 50 51 (block-side t) 51 52 (block-side t) 52 53 (block-side t) 53 54 (block-side t) 54 55 (block-side t face (rainbow-delimiters-depth-3-face)) 55 56 (block-side t) 56 57 (block-side t face (rainbow-delimiters-depth-3-face)) 57 58 (block-side t) 58 59 (block-side t block-token delimiter-end face (rainbow-delimiters-depth-2-face)) 59 60 (block-side t block-end t block-token delimiter-end face (rainbow-delimiters-depth-1-face)) 60 61 (tag-name "span" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 61 62 (tag-name "span" tag-type end font-lock-face web-mode-html-tag-bracket-face) 62 66 (tag-name "span" tag-type end font-lock-face web-mode-html-tag-face) 66 67 (tag-name "span" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face) 70 71 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg face (rainbow-delimiters-depth-1-face)) 71 72 (block-side t block-token delimiter-beg face (rainbow-delimiters-depth-2-face)) 72 73 (block-side t) 73 74 (block-side t) 74 75 (block-side t) 75 76 (block-side t) 76 77 (block-side t) 77 78 (block-side t face (rainbow-delimiters-depth-3-face)) 78 79 (block-side t) 79 80 (block-side t face (rainbow-delimiters-depth-3-face)) 80 81 (block-side t block-token delimiter-end face (rainbow-delimiters-depth-2-face)) 81 82 (block-side t block-end t block-token delimiter-end face (rainbow-delimiters-depth-1-face)) 89 90 (face (rainbow-delimiters-depth-1-face)) 91 92 (face (rainbow-delimiters-depth-1-face))) . 35037) (undo-tree-id334 . -80) (35008 . 35037) (#("              </v-container>
" 14 15 (tag-name "v-container" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 15 16 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-bracket-face) 16 27 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-custom-face) 27 28 (tag-name "v-container" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 34915) (undo-tree-id335 . -16) (34944 . 35037) 34931) nil (25865 34261 924009 626000) 0 nil])
([nil nil ((#("                </v-card-subtitle>
" 16 17 (tag-name "v-card-subtitle" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 17 18 (tag-name "v-card-subtitle" tag-type end font-lock-face web-mode-html-tag-bracket-face) 18 33 (tag-name "v-card-subtitle" tag-type end font-lock-face web-mode-html-tag-custom-face) 33 34 (tag-name "v-card-subtitle" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 35072) (35043 . 35072) (#("              </v-container>
" 14 15 (tag-name "v-container" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 15 16 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-bracket-face) 16 27 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-custom-face) 27 28 (tag-name "v-container" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 35008) (undo-tree-id333 . -16) (35037 . 35072) 35024) nil (25865 34261 924005 230000) 0 nil])
([nil nil ((#("                <v-card-text class=\"text-left pl-1 pr-1 pb-0 pt-0 ma-0\">
" 16 17 (tag-name "v-card-text" tag-type start tag-beg 19 font-lock-face web-mode-html-tag-bracket-face) 17 28 (tag-name "v-card-text" tag-type start font-lock-face web-mode-html-tag-custom-face) 28 29 (tag-name "v-card-text" tag-type start) 29 30 (tag-attr-beg 0 tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 30 34 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-name-face) 34 35 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-equal-face) 35 70 (tag-attr t tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 70 71 (tag-attr t tag-attr-end 5 tag-name "v-card-text" tag-type start font-lock-face web-mode-html-attr-value-face) 71 72 (tag-name "v-card-text" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 35145) (35116 . 35145) (#("              </v-container>
" 14 15 (tag-name "v-container" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 15 16 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-bracket-face) 16 27 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-custom-face) 27 28 (tag-name "v-container" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 35043) (undo-tree-id332 . -16) (35072 . 35145) 35059) nil (25865 34261 924001 934000) 0 nil])
([nil nil ((#("                  <div v-html=\"value[0]\"></div>
" 18 19 (tag-name "div" tag-type start tag-beg 17 font-lock-face web-mode-html-tag-bracket-face) 19 22 (tag-name "div" tag-type start font-lock-face web-mode-html-tag-face) 22 23 (tag-name "div" tag-type start) 23 24 (tag-attr-beg 2 tag-attr t tag-name "div" tag-type start font-lock-face web-mode-html-attr-engine-face) 24 29 (tag-attr t tag-name "div" tag-type start font-lock-face web-mode-html-attr-engine-face) 29 30 (tag-attr t tag-name "div" tag-type start font-lock-face web-mode-html-attr-equal-face) 30 31 (tag-attr t tag-name "div" tag-type start font-lock-face web-mode-html-attr-value-face) 31 38 (tag-attr t tag-name "div" tag-type start font-lock-face web-mode-html-attr-value-face) 38 39 (rear-nonsticky t tag-attr t tag-name "div" tag-type start font-lock-face web-mode-html-attr-value-face) 39 40 (tag-attr t tag-attr-end 6 tag-name "div" tag-type start font-lock-face web-mode-html-attr-value-face) 40 41 (tag-name "div" tag-type start tag-end t font-lock-face web-mode-html-tag-bracket-face) 41 42 (tag-name "div" tag-type end tag-beg 20 font-lock-face web-mode-html-tag-bracket-face) 42 43 (tag-name "div" tag-type end font-lock-face web-mode-html-tag-bracket-face) 43 46 (tag-name "div" tag-type end font-lock-face web-mode-html-tag-face) 46 47 (rear-nonsticky t tag-name "div" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 35193) (undo-tree-id330 . -47) (35164 . 35193) (#("              </v-container>
" 14 15 (tag-name "v-container" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 15 16 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-bracket-face) 16 27 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-custom-face) 27 28 (tag-name "v-container" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 35116) (undo-tree-id331 . -16) (35145 . 35193) 35132) nil (25865 34261 923998 56000) 0 nil])
([nil nil ((#("                </v-card-text>
" 16 17 (tag-name "v-card-text" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 17 18 (tag-name "v-card-text" tag-type end font-lock-face web-mode-html-tag-bracket-face) 18 29 (tag-name "v-card-text" tag-type end font-lock-face web-mode-html-tag-custom-face) 29 30 (tag-name "v-card-text" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 35224) (35195 . 35224) (#("              </v-container>
" 14 15 (tag-name "v-container" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 15 16 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-bracket-face) 16 27 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-custom-face) 27 28 (tag-name "v-container" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 35164) (undo-tree-id329 . -16) (35193 . 35224) 35180) nil (25865 34261 923993 663000) 0 nil])
([nil nil ((#("              </v-card>
" 14 15 (tag-name "v-card" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 15 16 (tag-name "v-card" tag-type end font-lock-face web-mode-html-tag-bracket-face) 16 22 (tag-name "v-card" tag-type end font-lock-face web-mode-html-tag-custom-face) 22 23 (tag-name "v-card" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 35248) (35219 . 35248) (#("              </v-container>
" 14 15 (tag-name "v-container" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 15 16 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-bracket-face) 16 27 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-custom-face) 27 28 (tag-name "v-container" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 35195) (undo-tree-id328 . -16) (35224 . 35248) 35211) nil (25865 34261 923989 986000) 0 nil])
([nil nil (("
" . 35249) (35220 . 35249) (#("              </v-container>
" 14 15 (tag-name "v-container" tag-type end tag-beg 22 font-lock-face web-mode-html-tag-bracket-face) 15 16 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-bracket-face) 16 27 (tag-name "v-container" tag-type end font-lock-face web-mode-html-tag-custom-face) 27 28 (tag-name "v-container" tag-type end tag-end t font-lock-face web-mode-html-tag-bracket-face)) . 35219) (undo-tree-id327 . -16) (35248 . 35249) 35235) nil (25865 34261 923985 757000) 0 nil])
([nil nil ((34657 . 34658)) nil (25865 34261 923975 2000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34693 . 34694) (nil tag-attr t 34693 . 34694) (nil tag-attr-end 5 34693 . 34694) (nil tag-name "v-container" 34693 . 34694) (nil tag-type start 34693 . 34694) (nil font-lock-face web-mode-html-attr-value-face 34693 . 34694) (nil tag-attr t 34664 . 34693) (nil tag-name "v-container" 34664 . 34693) (nil tag-type start 34664 . 34693) (nil font-lock-face web-mode-html-attr-value-face 34664 . 34693) (nil tag-attr t 34663 . 34664) (nil tag-name "v-container" 34663 . 34664) (nil tag-type start 34663 . 34664) (nil font-lock-face web-mode-html-attr-equal-face 34663 . 34664) (nil tag-attr t 34659 . 34663) (nil tag-name "v-container" 34659 . 34663) (nil tag-type start 34659 . 34663) (nil font-lock-face web-mode-html-attr-name-face 34659 . 34663) (nil tag-attr-beg 0 34658 . 34659) (nil tag-attr t 34658 . 34659) (nil tag-name "v-container" 34658 . 34659) (nil tag-type start 34658 . 34659) (nil font-lock-face web-mode-html-attr-name-face 34658 . 34659) (34658 . 34694)) nil (25865 34261 923972 702000) 0 nil])
([nil nil ((34687 . 34689)) nil (25865 34261 923965 761000) 0 nil])
([nil nil ((#("                " 0 16 (face whitespace-trailing)) . -34698) 34694) nil (25865 34261 923957 498000) 0 nil])
([nil nil ((#("a" 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34690) (undo-tree-id351 . -1) (#("u" 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34691) (undo-tree-id352 . -1) (#("t" 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34692) (undo-tree-id353 . -1) (#("o" 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34693) (undo-tree-id354 . -1) 34694 (t 25865 34261 985284 84000)) nil (25865 34276 35014 490000) 0 nil])
([nil nil ((34690 . 34696)) nil (25865 34276 34994 758000) 0 nil])
([nil nil ((#("4" 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34672) (undo-tree-id355 . -1) 34673 (t 25865 34276 105262 965000)) nil (25865 34316 834353 999000) 0 nil])
([nil nil ((34672 . 34673)) nil (25865 34316 834337 492000) 0 nil])
([nil nil ((#("5" 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34672) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) 34673 (t 25865 34316 897203 5000)) nil (25865 34328 967765 946000) 0 nil])
([nil nil ((34672 . 34673)) nil (25865 34328 967739 119000) 0 nil])
([nil nil ((34665 . 34670) (34658 . 34667) (t 25865 34329 33185 455000)) nil (25865 34384 98319 869000) 0 nil])
([nil nil ((#("9" 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34669) (undo-tree-id367 . -1) 34670) nil (25865 34384 98317 771000) 0 nil])
([nil nil ((34669 . 34674)) nil (25865 34384 98314 151000) 0 nil])
([nil nil ((#("9" 0 1 (tag-attr t tag-name "v-container" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34673) (undo-tree-id366 . -1) 34674) nil (25865 34384 98311 602000) 0 nil])
([nil nil ((34673 . 34674)) nil (25865 34384 98295 358000) 0 nil])
([nil nil ((34670 . 34675) (t 25865 34384 157107 289000)) nil (25865 34403 446308 893000) 0 nil])
([nil nil ((#("2" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34797) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) 34798 (t 25865 34403 537080 379000)) nil (25865 34426 341134 316000) 0 nil])
([nil nil ((34797 . 34798)) nil (25865 34426 341106 285000) 0 nil])
([nil nil ((#("{{value[2]}} matche(s)" 0 1 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg face (rainbow-delimiters-depth-1-face)) 1 2 (block-side t block-token delimiter-beg face (rainbow-delimiters-depth-2-face)) 2 3 (block-side t) 3 4 (block-side t) 4 5 (block-side t) 5 6 (block-side t) 6 7 (block-side t) 7 8 (block-side t face (rainbow-delimiters-depth-3-face)) 8 9 (block-side t) 9 10 (block-side t face (rainbow-delimiters-depth-3-face)) 10 11 (block-side t block-token delimiter-end face (rainbow-delimiters-depth-2-face)) 11 12 (block-side t block-end t block-token delimiter-end face (rainbow-delimiters-depth-1-face)) 19 20 (face (rainbow-delimiters-depth-1-face)) 21 22 (face (rainbow-delimiters-depth-1-face))) . 35033) (undo-tree-id384 . -22) (undo-tree-id385 . -22) (t 25865 34426 401048 989000)) nil (25865 34928 813700 82000) 0 nil])
([nil nil ((" " . -35030) (undo-tree-id378 . -1) (undo-tree-id379 . -1) ("-" . -35031) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (" " . -35032) (undo-tree-id382 . -1) (undo-tree-id383 . -1) 35033) nil (25865 34928 813695 50000) 0 nil])
([nil nil ((34962 . 34981)) nil (25865 34928 813679 172000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35002 . 35003) (nil face (rainbow-delimiters-depth-1-face) 35002 . 35003) (nil face (rainbow-delimiters-depth-1-face) 35000 . 35001) (nil block-side t 34992 . 34993) (nil block-end t 34992 . 34993) (nil block-token delimiter-end 34992 . 34993) (nil face (rainbow-delimiters-depth-1-face) 34992 . 34993) (nil block-side t 34991 . 34992) (nil block-token delimiter-end 34991 . 34992) (nil face (rainbow-delimiters-depth-2-face) 34991 . 34992) (nil block-side t 34990 . 34991) (nil face (rainbow-delimiters-depth-3-face) 34990 . 34991) (nil block-side t 34989 . 34990) (nil block-side t 34988 . 34989) (nil face (rainbow-delimiters-depth-3-face) 34988 . 34989) (nil block-side t 34987 . 34988) (nil block-side t 34986 . 34987) (nil block-side t 34985 . 34986) (nil block-side t 34984 . 34985) (nil block-side t 34983 . 34984) (nil block-side t 34982 . 34983) (nil block-token delimiter-beg 34982 . 34983) (nil face (rainbow-delimiters-depth-2-face) 34982 . 34983) (nil block-beg 0 34981 . 34982) (nil block-controls 0 34981 . 34982) (nil block-side t 34981 . 34982) (nil block-token delimiter-beg 34981 . 34982) (nil face (rainbow-delimiters-depth-1-face) 34981 . 34982) (34981 . 35003)) nil (25865 34928 813671 28000) 0 nil])
([nil nil ((35003 . 35005) (t 25865 34928 876429 656000)) nil (25865 34942 33735 865000) 0 nil])
([nil nil (("\\" . -35004) (undo-tree-id386 . -1) 35005) nil (25865 34942 33733 38000) 0 nil])
([nil nil ((35007 . 35008) (35004 . 35008)) nil (25865 34942 33681 31000) 0 nil])
([nil nil ((78355 . 78356) (t 25865 34942 92414 648000)) nil (25865 35380 153970 779000) 0 nil])
([nil nil ((nil rear-nonsticky nil 78364 . 78365) (nil part-side javascript 78355 . 78365) (78355 . 78365)) nil (25865 35380 153969 426000) 0 nil])
([nil nil ((78366 . 78367)) nil (25865 35380 153968 113000) 0 nil])
([nil nil ((#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-7-face))) . -78339) (undo-tree-id439 . -1) (#("e" 0 1 (part-side javascript)) . -78340) (undo-tree-id440 . -1) (#("l" 0 1 (part-side javascript)) . -78341) (undo-tree-id441 . -1) (#("e" 0 1 (part-side javascript)) . -78342) (undo-tree-id442 . -1) (#("m" 0 1 (part-side javascript)) . -78343) (undo-tree-id443 . -1) (#("e" 0 1 (part-side javascript)) . -78344) (undo-tree-id444 . -1) (#("n" 0 1 (part-side javascript)) . -78345) (undo-tree-id445 . -1) (#("t" 0 1 (part-side javascript)) . -78346) (undo-tree-id446 . -1) (#("." 0 1 (part-side javascript)) . -78347) (undo-tree-id447 . -1) (#("i" 0 1 (part-side javascript)) . -78348) (undo-tree-id448 . -1) (#("d" 0 1 (part-side javascript)) . -78349) (undo-tree-id449 . -1) (#("]" 0 1 (part-side javascript face (rainbow-delimiters-depth-7-face))) . -78350) (undo-tree-id450 . -1) 78351) nil (25865 35380 153964 829000) 0 nil])
([nil nil ((78339 . 78346)) nil (25865 35380 153949 898000) 0 nil])
([nil nil ((78346 . 78348) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-7-face))) . -78346) (78346 . 78347)) nil (25865 35380 153948 818000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . 78347) (#("=" 0 1 (part-side javascript)) . 78347) (#(" " 0 1 (part-side javascript)) . 78347) (#(")" 0 1 (part-side javascript face (rainbow-delimiters-depth-7-face))) . 78347)) nil (25865 35380 153946 917000) 0 nil])
([nil nil ((78393 . 78394)) nil (25865 35380 153945 434000) 0 nil])
([nil nil ((78622 . 78629)) nil (25865 35380 153944 519000) 0 nil])
([nil nil ((78629 . 78641)) nil (25865 35380 153943 624000) 0 nil])
([nil nil ((#("_" 0 1 (part-side javascript)) . -78634) (undo-tree-id432 . -1) (#("f" 0 1 (part-side javascript)) . -78635) (undo-tree-id433 . -1) (#("i" 0 1 (part-side javascript)) . -78636) (undo-tree-id434 . -1) (#("l" 0 1 (part-side javascript)) . -78637) (undo-tree-id435 . -1) (#("t" 0 1 (part-side javascript)) . -78638) (undo-tree-id436 . -1) (#("e" 0 1 (part-side javascript)) . -78639) (undo-tree-id437 . -1) (#("r" 0 1 (part-side javascript)) . -78640) (undo-tree-id438 . -1) 78641) nil (25865 35380 153941 355000) 0 nil])
([nil nil ((78646 . 78648) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-3-face))) . -78646) (78634 . 78647)) nil (25865 35380 153930 992000) 0 nil])
([nil nil ((78649 . 78651) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-3-face))) . -78649) (78648 . 78650)) nil (25865 35380 153929 406000) 0 nil])
([nil nil ((78652 . 78658) (#("        " 0 8 (part-side javascript face whitespace-trailing)) . 78651) (undo-tree-id430 . 8) (78651 . 78659) (#("      " 0 6 (part-side javascript)) . 78651) (undo-tree-id431 . -6) (78650 . 78658)) nil (25865 35380 153927 586000) 0 nil])
([nil nil ((78651 . 78659)) nil (25865 35380 153923 914000) 0 nil])
([nil nil ((78659 . 78664)) nil (25865 35380 153923 15000) 0 nil])
([nil nil ((nil rear-nonsticky nil 78678 . 78679) (nil part-side javascript 78678 . 78679) (nil face (rainbow-delimiters-depth-4-face) 78678 . 78679) (nil part-side javascript 78677 . 78678) (nil face (rainbow-delimiters-depth-4-face) 78677 . 78678) (nil part-side javascript 78676 . 78677) (nil part-side javascript 78675 . 78676) (nil part-side javascript 78674 . 78675) (nil part-side javascript 78673 . 78674) (nil part-side javascript 78672 . 78673) (nil part-side javascript 78671 . 78672) (nil part-side javascript 78670 . 78671) (nil part-side javascript 78669 . 78670) (nil part-side javascript 78668 . 78669) (nil part-side javascript 78667 . 78668) (nil part-side javascript 78666 . 78667) (nil part-side javascript 78665 . 78666) (nil part-side javascript 78664 . 78665) (78664 . 78679)) nil (25865 35380 153921 219000) 0 nil])
([nil nil ((78676 . 78677)) nil (25865 35380 153916 571000) 0 nil])
([nil nil ((78678 . 78679)) nil (25865 35380 153915 736000) 0 nil])
([nil nil ((78681 . 78690)) nil (25865 35380 153914 811000) 0 nil])
([nil nil ((78690 . 78706)) nil (25865 35380 153913 812000) 0 nil])
([nil nil ((78706 . 78707)) nil (25865 35380 153912 857000) 0 nil])
([nil nil ((78695 . 78713) (#("save_filter_" 0 12 (part-side javascript)) . -78695) (undo-tree-id427 . -5) (undo-tree-id428 . -12) (undo-tree-id429 . -12) 78707) nil (25865 35380 153911 487000) 0 nil])
([nil nil ((78713 . 78716)) nil (25865 35380 153907 258000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . -78714) (undo-tree-id425 . -1) (#(" " 0 1 (part-side javascript)) . -78715) (undo-tree-id426 . -1) 78716) nil (25865 35380 153905 856000) 0 nil])
([nil nil ((78714 . 78717)) nil (25865 35380 153902 442000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . -78714) (undo-tree-id422 . -1) (#(" " 0 1 (part-side javascript)) . -78715) (undo-tree-id423 . -1) (#("f" 0 1 (part-side javascript)) . -78716) (undo-tree-id424 . -1) 78717) nil (25865 35380 153900 811000) 0 nil])
([nil nil ((78714 . 78722)) nil (25865 35380 153896 260000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -78721) (undo-tree-id421 . -1) 78722) nil (25865 35380 153895 59000) 0 nil])
([nil nil ((#("ave_filter_dialog=false; filter_items=[]" 0 1 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 1 2 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 2 3 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 3 4 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 4 5 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 5 6 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 6 7 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 7 8 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 8 9 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 9 10 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 10 11 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 11 12 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 12 13 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 13 14 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 14 15 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 15 16 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 16 17 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 17 18 (block-side t tag-attr t tag-name "v-btn" tag-type start) 18 19 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 19 20 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 20 21 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 21 22 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 22 23 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 23 25 (block-side t tag-attr t tag-name "v-btn" tag-type start) 25 26 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 26 27 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 27 28 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 28 29 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 29 30 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 30 31 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 31 32 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 32 33 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 33 34 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 34 35 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 35 36 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 36 37 (block-side t tag-attr t tag-name "v-btn" tag-type start face web-mode-variable-name-face) 37 40 (block-side t tag-attr t tag-name "v-btn" tag-type start)) . 27203) (undo-tree-id416 . -40) (undo-tree-id417 . -25) (undo-tree-id418 . -25) (undo-tree-id419 . -40) (undo-tree-id420 . -40)) nil (25865 35380 153892 430000) 0 nil])
([nil nil ((#("s" 0 1 (block-side t tag-attr t tag-name "v-btn" tag-type start)) . -27202) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) 27203) nil (25865 35380 153864 130000) 0 nil])
([nil nil ((nil rear-nonsticky nil 27218 . 27219) (nil block-side t 27202 . 27219) (nil tag-attr t 27202 . 27219) (nil tag-name "v-btn" 27202 . 27219) (nil tag-type start 27202 . 27219) (27202 . 27219)) nil (25865 35380 153855 923000) 0 nil])
([nil nil ((27219 . 27221) (#("(" 0 1 (block-side t tag-attr t tag-name "v-btn" tag-type start)) . -27219) (27219 . 27220)) nil (25865 35380 153853 572000) 0 nil])
([nil nil ((#("filter_items=[]" 0 1 (block-side t tag-attr t tag-name "v-dialog" tag-type start) 1 2 (block-side t tag-attr t tag-name "v-dialog" tag-type start) 2 3 (block-side t tag-attr t tag-name "v-dialog" tag-type start) 3 4 (block-side t tag-attr t tag-name "v-dialog" tag-type start) 4 5 (block-side t tag-attr t tag-name "v-dialog" tag-type start) 5 6 (block-side t tag-attr t tag-name "v-dialog" tag-type start) 6 7 (block-side t tag-attr t tag-name "v-dialog" tag-type start) 7 8 (block-side t tag-attr t tag-name "v-dialog" tag-type start) 8 9 (block-side t tag-attr t tag-name "v-dialog" tag-type start) 9 10 (block-side t tag-attr t tag-name "v-dialog" tag-type start) 10 11 (block-side t tag-attr t tag-name "v-dialog" tag-type start) 11 12 (block-side t tag-attr t tag-name "v-dialog" tag-type start) 12 15 (block-side t tag-attr t tag-name "v-dialog" tag-type start)) . 26877) (undo-tree-id409 . -15) (undo-tree-id410 . -15)) nil (25865 35380 153852 29000) 0 nil])
([nil nil ((nil rear-nonsticky nil 26893 . 26894) (nil block-side t 26877 . 26894) (nil tag-attr t 26877 . 26894) (nil tag-name "v-dialog" 26877 . 26894) (nil tag-type start 26877 . 26894) (26877 . 26894)) nil (25865 35380 153848 643000) 0 nil])
([nil nil ((26894 . 26895)) nil (25865 35380 153846 585000) 0 nil])
([nil nil ((#("/" 0 1 (block-side t tag-attr t tag-name "v-dialog" tag-type start)) . -26894) (undo-tree-id408 . -1) 26895) nil (25865 35380 153845 365000) 0 nil])
([nil nil ((26894 . 26896) (#("(" 0 1 (block-side t tag-attr t tag-name "v-dialog" tag-type start)) . -26894) (26894 . 26895)) nil (25865 35380 153843 19000) 0 nil])
([nil nil ((78703 . 78712)) nil (25865 35380 153841 686000) 0 nil])
([nil nil ((nil rear-nonsticky nil 78728 . 78729) (nil part-side javascript 78716 . 78729) (nil part-side javascript 78712 . 78716) (nil face web-mode-constant-face 78712 . 78716) (78712 . 78729)) nil (25865 35380 153840 535000) 0 nil])
([nil nil ((78729 . 78732)) nil (25865 35380 153838 754000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . -78730) (undo-tree-id406 . -1) (#(" " 0 1 (part-side javascript)) . -78731) (undo-tree-id407 . -1) 78732) nil (25865 35380 153837 299000) 0 nil])
([nil nil ((78730 . 78732)) nil (25865 35380 153833 648000) 0 nil])
([nil nil ((#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -47734) (undo-tree-id404 . -1) (#("}" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -47735) (undo-tree-id405 . -1) 47736) nil (25865 35380 153832 268000) 0 nil])
([nil nil ((47734 . 47736) (#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -47734) (47734 . 47735)) nil (25865 35380 153828 720000) 0 nil])
([nil nil ((78732 . 78734) (#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -78732) (78732 . 78733)) nil (25865 35380 153827 86000) 0 nil])
([nil nil ((#("," 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34821) (undo-tree-id398 . -1) (#(" " 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34822) (undo-tree-id399 . -1) (#("k" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34823) (undo-tree-id400 . -1) (#("e" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34824) (undo-tree-id401 . -1) (#("y" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34825) (undo-tree-id402 . -1) (#(")" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34826) (undo-tree-id403 . -1) 34827) nil (25865 35380 153824 443000) 0 nil])
([nil nil ((34821 . 34827)) nil (25865 35380 153815 809000) 0 nil])
([nil nil ((34827 . 34829)) nil (25865 35380 153814 782000) 0 nil])
([nil nil ((#("," 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34821) (undo-tree-id390 . -1) (#(" " 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34822) (undo-tree-id391 . -1) (#("i" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34823) (undo-tree-id392 . -1) (#("n" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34824) (undo-tree-id393 . -1) (#("d" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34825) (undo-tree-id394 . -1) (#("e" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34826) (undo-tree-id395 . -1) (#("x" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34827) (undo-tree-id396 . -1) (#(")" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34828) (undo-tree-id397 . -1) 34829) nil (25865 35380 153812 262000) 0 nil])
([nil nil ((#("(" 0 1 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face)) . -34815) (undo-tree-id389 . -1) 34816) nil (25865 35380 153800 259000) 0 nil])
([nil nil ((#("y" 0 1 (block-side t tag-name "v-card" tag-type start)) . 34860) (#("e" 0 1 (block-side t tag-name "v-card" tag-type start)) . 34860) (#("k" 0 1 (block-side t tag-name "v-card" tag-type start)) . 34860)) nil (25865 35380 153797 527000) 0 nil])
([nil nil ((34866 . 34867) (34865 . 34867) (#("[" 0 1 (block-side t tag-name "v-card" tag-type start)) . -34865) (34860 . 34866)) nil (25865 35380 153795 829000) 0 nil])
([nil nil ((#("2" 0 1 (block-side t)) . -34969) (undo-tree-id388 . -1) 34970) nil (25865 35380 153793 838000) 0 nil])
([nil nil ((34969 . 34970)) nil (25865 35380 153790 834000) 0 nil])
([nil nil ((#("1" 0 1 (block-side t)) . 35045)) nil (25865 35380 153789 730000) 0 nil])
([nil nil ((35045 . 35046)) nil (25865 35380 153788 601000) 0 nil])
([nil nil ((#("0" 0 1 (tag-attr t tag-name "div" tag-type start font-lock-face web-mode-html-attr-value-face)) . -35203) (undo-tree-id387 . -1) 35204) nil (25865 35380 153786 169000) 0 nil])
([nil nil ((35203 . 35204)) nil (25865 35380 153771 295000) 0 nil])
([nil nil ((78740 . 78741) (t 25865 35380 279844 163000)) nil (25865 35394 594088 667000) 0 nil])
([nil nil ((#("a" 0 1 (part-side javascript face web-mode-function-call-face)) . -78320) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (#("p" 0 1 (part-side javascript face web-mode-function-call-face)) . -78321) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (#("p" 0 1 (part-side javascript face web-mode-function-call-face)) . -78322) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (#("e" 0 1 (part-side javascript face web-mode-function-call-face)) . -78323) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (#("n" 0 1 (part-side javascript face web-mode-function-call-face)) . -78324) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (#("d" 0 1 (part-side javascript face web-mode-function-call-face)) . -78325) (undo-tree-id461 . -1) (undo-tree-id462 . -1) 78326 (t 25865 35394 723784 717000)) nil (25865 35423 966650 75000) 0 nil])
([nil nil ((78320 . 78324)) nil (25865 35423 966620 587000) 0 nil])
([nil nil ((78395 . 78404) (t 25865 35424 99667 3000)) nil (25865 35561 304979 390000) 0 nil])
([nil nil ((78404 . 78409)) nil (25865 35561 304978 312000) 0 nil])
([nil nil ((#("t" 0 1 (part-side javascript)) . -78404) (undo-tree-id479 . -1) (#("h" 0 1 (part-side javascript)) . -78405) (undo-tree-id480 . -1) (#("i" 0 1 (part-side javascript)) . -78406) (undo-tree-id481 . -1) (#("s" 0 1 (part-side javascript face web-mode-constant-face)) . -78407) (undo-tree-id482 . -1) (#("." 0 1 (part-side javascript)) . -78408) (undo-tree-id483 . -1) 78409) nil (25865 35561 304976 207000) 0 nil])
([nil nil ((78405 . 78406) (78404 . 78406) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -78404) (78404 . 78405)) nil (25865 35561 304969 115000) 0 nil])
([nil nil ((#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -78404) (undo-tree-id477 . -1) (#(")" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 78405) (#("/" 0 1 (part-side javascript)) . -78405) (undo-tree-id478 . -1) 78406) nil (25865 35561 304966 974000) 0 nil])
([nil nil ((78404 . 78423)) nil (25865 35561 304963 423000) 0 nil])
([nil nil ((78423 . 78425)) nil (25865 35561 304962 509000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face)) . -78424) (undo-tree-id476 . -1) 78425) nil (25865 35561 304961 42000) 0 nil])
([nil nil ((78424 . 78433)) nil (25865 35561 304957 982000) 0 nil])
([nil nil ((78433 . 78439)) nil (25865 35561 304957 99000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 78457) (78456 . 78457) (78455 . 78457) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -78455) (78439 . 78456)) nil (25865 35561 304955 602000) 0 nil])
([nil nil ((78456 . 78459)) nil (25865 35561 304953 725000) 0 nil])
([nil nil ((78456 . 78458) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-5-face))) . -78456) (78456 . 78457)) nil (25865 35561 304952 624000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-depth-5-face))) . 78457)) nil (25865 35561 304951 148000) 0 nil])
([nil nil ((78461 . 78462)) nil (25865 35561 304950 271000) 0 nil])
([nil nil ((78463 . 78473) (#("          " 0 10 (part-side javascript)) . 78462) (undo-tree-id474 . -10) (78462 . 78473) (#(" " 0 1 (part-side javascript)) . 78461) (undo-tree-id475 . -1) (78462 . 78463)) nil (25865 35561 304948 877000) 0 nil])
([nil nil ((78461 . 78464)) nil (25865 35561 304944 876000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -78463) (undo-tree-id473 . -1) 78464) nil (25865 35561 304943 708000) 0 nil])
([nil nil ((78465 . 78467) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-5-face))) . -78465) (78463 . 78466)) nil (25865 35561 304941 306000) 0 nil])
([nil nil ((78466 . 78475)) nil (25865 35561 304940 56000) 0 nil])
([nil nil ((78469 . 78477) (#("          " 0 10 (part-side javascript face whitespace-trailing)) . 78468) (undo-tree-id469 . -8) (undo-tree-id470 . 10) (78476 . 78478) (78468 . 78477) (#("          " 0 10 (part-side javascript face whitespace-trailing)) . 78467) (undo-tree-id471 . -8) (undo-tree-id472 . 10) (78475 . 78477) (78475 . 78476)) nil (25865 35561 304938 362000) 0 nil])
([nil nil ((78478 . 78479)) nil (25865 35561 304931 725000) 0 nil])
([nil nil ((78468 . 78478)) nil (25865 35561 304930 726000) 0 nil])
([nil nil ((78478 . 78484)) nil (25865 35561 304929 649000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -78483) (undo-tree-id468 . -1) 78484) nil (25865 35561 304928 339000) 0 nil])
([nil nil ((78483 . 78485)) nil (25865 35561 304926 29000) 0 nil])
([nil nil ((78486 . 78488) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . -78486) (78485 . 78487)) nil (25865 35561 304924 831000) 0 nil])
([nil nil ((#("a" 0 1 (part-side javascript)) . -78485) (undo-tree-id466 . -1) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . -78486) (undo-tree-id467 . -1) (#(")" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . 78487)) nil (25865 35561 304922 617000) 0 nil])
([nil nil ((78485 . 78487) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . -78485) (78485 . 78486)) nil (25865 35561 304918 261000) 0 nil])
([nil nil ((#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . -78485) (undo-tree-id464 . -1) (#(")" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . -78486) (undo-tree-id465 . -1) 78487) nil (25865 35561 304916 118000) 0 nil])
([nil nil ((78487 . 78488) (78486 . 78488) (#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . -78486) (78485 . 78487)) nil (25865 35561 304911 472000) 0 nil])
([nil nil ((78489 . 78491)) nil (25865 35561 304909 569000) 0 nil])
([nil nil ((78492 . 78493) (78491 . 78493) (#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . -78491) (78491 . 78492)) nil (25865 35561 304908 115000) 0 nil])
([nil nil ((78494 . 78495)) nil (25865 35561 304906 180000) 0 nil])
([nil nil ((#(";" 0 1 (part-side javascript)) . -78494) (undo-tree-id463 . -1) 78495) nil (25865 35561 304903 898000) 0 nil])
([nil nil ((#("          " 0 10 (part-side javascript face whitespace-trailing)) . -78507) 78494) nil (25865 35561 304886 970000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . 78467) (undo-tree-id484 . -1) (t 25865 35561 439167 198000)) nil (25865 35566 959949 734000) 0 nil])
([nil nil ((78554 . 78555) (t 25865 35567 87148 237000)) nil (25865 35909 988744 959000) 0 nil])
([nil nil ((#("#console.log(this.raw_filter_list)" 0 9 (part-side javascript) 9 12 (part-side javascript face web-mode-function-call-face) 12 13 (part-side javascript face (rainbow-delimiters-depth-4-face)) 13 17 (part-side javascript face web-mode-constant-face) 17 33 (part-side javascript) 33 34 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 78554)) nil (25865 35909 988743 373000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . 78554) (undo-tree-id485 . -1)) nil (25865 35909 988741 871000) 0 nil])
([nil nil ((#("        " 0 8 (part-side javascript)) . -78554)) nil (25865 35909 988731 512000) 0 nil])
([nil nil ((78527 . 78529)) nil (25865 35909 988730 426000) 0 nil])
([nil nil ((78528 . 78540)) nil (25865 35909 988729 74000) 0 nil])
([nil nil ((78541 . 78542)) nil (25865 35909 988727 678000) 0 nil])
([nil nil ((78542 . 78543)) nil (25865 35909 988725 739000) 0 nil])
([nil nil ((78540 . 78541)) nil (25865 35909 988718 203000) 0 nil])
([nil nil ((#("1" 0 1 (part-side javascript)) . -78486) (undo-tree-id491 . -1) 78487 (t 25865 35910 118170 182000)) nil (25865 35943 594756 157000) 0 nil])
([nil nil ((78486 . 78487)) nil (25865 35943 594752 827000) 0 nil])
([nil nil ((#("1" 0 1 (part-side javascript)) . -78491) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) 78492) nil (25865 35943 594749 698000) 0 nil])
([nil nil ((78491 . 78492)) nil (25865 35943 594728 904000) 0 nil])
([nil nil ((#("a" 0 1 (part-side javascript)) . -78484) (undo-tree-id506 . -1) 78485 (t 25865 35943 722088 709000)) nil (25865 35989 708650 177000) 0 nil])
([nil nil ((78484 . 78485)) nil (25865 35989 708647 559000) 0 nil])
([nil nil ((#("b" 0 1 (part-side javascript)) . -78489) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) 78490) nil (25865 35989 708643 920000) 0 nil])
([nil nil ((78489 . 78490)) nil (25865 35989 708563 442000) 0 nil])
([nil nil ((112796 . 112805) (t 25865 35989 853979 990000)) nil (25865 36285 980391 87000) 0 nil])
([nil nil ((112818 . 112826) (nil part-token string 112818 . 112819) (nil font-lock-face web-mode-javascript-string-face 112818 . 112819) (nil part-side javascript 112818 . 112819) (112817 . 112819) (#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . -112817) (112817 . 112818) (112816 . 112818) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -112816) (112805 . 112817)) nil (25865 36285 980388 955000) 0 nil])
([nil nil ((112826 . 112829)) nil (25865 36285 980385 636000) 0 nil])
([nil nil ((#("e" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -112827) (undo-tree-id516 . -1) (#("v" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -112828) (undo-tree-id517 . -1) 112829) nil (25865 36285 980383 925000) 0 nil])
([nil nil ((112827 . 112833)) nil (25865 36285 980379 845000) 0 nil])
([nil nil ((112834 . 112840)) nil (25865 36285 980378 317000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -112839) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) 112840) nil (25865 36285 980372 814000) 0 nil])
([nil nil ((86026 . 86037) (t 25865 36286 109349 856000)) nil (25865 38577 134734 426000) 0 nil])
([nil nil ((86050 . 86058) (86049 . 86051) (#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . -86049) (86049 . 86050) (86048 . 86050) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . -86048) (86037 . 86049)) nil (25865 38577 134731 992000) 0 nil])
([nil nil ((86058 . 86061)) nil (25865 38577 134728 897000) 0 nil])
([nil nil ((86062 . 86080)) nil (25865 39473 298443 440000) 0 nil])
([nil nil ((78370 . 78380)) nil (25865 39478 849198 188000) 0 nil] [nil nil ((#("element.id" 0 9 (part-side javascript) 9 10 (rear-nonsticky t part-side javascript)) . 78326) (undo-tree-id527 . -10) (undo-tree-id528 . -10) (undo-tree-id529 . -10) (undo-tree-id530 . -10) (t 25865 38577 274022 713000)) ((78326 . 78336)) (25865 39472 908858 150000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -78379) (undo-tree-id541 . -1) 78380) nil (25865 39478 849192 698000) 0 nil])
([nil nil ((78326 . 78334)) ((#("element " 0 7 (part-side javascript) 7 8 (part-side javascript)) . 78326) (undo-tree-id531 . -7) (undo-tree-id532 . -8) (undo-tree-id533 . -8) (undo-tree-id534 . -8) (undo-tree-id535 . -8) (undo-tree-id536 . -8) (undo-tree-id537 . -8) (undo-tree-id538 . -8) (undo-tree-id539 . -8) (undo-tree-id540 . -8)) (25865 39472 375984 820000) 0 nil])
([nil nil ((77965 . 77974) (t 25865 39478 985921 38000)) nil (25865 39601 205315 699000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -78333) (undo-tree-id518 . -1) (undo-tree-id520 . -1) (undo-tree-id522 . -1) (undo-tree-id524 . -1) (undo-tree-id526 . -1) 78334) ((78333 . 78334) (t 25865 39466 485956 776000)) (25865 39466 355347 7000) 0 nil])
([nil nil ((nil rear-nonsticky nil 78020 . 78021) (nil part-side javascript 78020 . 78021) (nil face (rainbow-delimiters-depth-4-face) 78020 . 78021) (nil part-side javascript 78007 . 78020) (nil part-side javascript 78003 . 78007) (nil face web-mode-constant-face 78003 . 78007) (nil part-side javascript 78001 . 78003) (nil part-side javascript 78000 . 78001) (nil part-token string 78000 . 78001) (nil syntax-table (15) 78000 . 78001) (nil font-lock-face web-mode-javascript-string-face 78000 . 78001) (nil part-side javascript 77987 . 78000) (nil part-token string 77987 . 78000) (nil font-lock-face web-mode-javascript-string-face 77987 . 78000) (nil part-side javascript 77986 . 77987) (nil part-token string 77986 . 77987) (nil syntax-table (15) 77986 . 77987) (nil font-lock-face web-mode-javascript-string-face 77986 . 77987) (nil part-side javascript 77985 . 77986) (nil face (rainbow-delimiters-depth-4-face) 77985 . 77986) (nil part-side javascript 77982 . 77985) (nil face web-mode-function-call-face 77982 . 77985) (nil part-side javascript 77974 . 77982) (77974 . 78021)) nil (25865 39601 205307 984000) 0 nil])
nil
([nil nil ((#("f" 0 1 (part-side javascript)) . -78008) (undo-tree-id542 . -1) (#("i" 0 1 (part-side javascript)) . -78009) (undo-tree-id543 . -1) (#("l" 0 1 (part-side javascript)) . -78010) (undo-tree-id544 . -1) (#("t" 0 1 (part-side javascript)) . -78011) (undo-tree-id545 . -1) (#("e" 0 1 (part-side javascript)) . -78012) (undo-tree-id546 . -1) (#("r" 0 1 (part-side javascript)) . -78013) (undo-tree-id547 . -1) (#("_" 0 1 (part-side javascript)) . -78014) (undo-tree-id548 . -1) (#("s" 0 1 (part-side javascript)) . -78015) (undo-tree-id549 . -1) (#("c" 0 1 (part-side javascript)) . -78016) (undo-tree-id550 . -1) (#("o" 0 1 (part-side javascript)) . -78017) (undo-tree-id551 . -1) (#("r" 0 1 (part-side javascript)) . -78018) (undo-tree-id552 . -1) (#("e" 0 1 (part-side javascript)) . -78019) (undo-tree-id553 . -1) 78020) nil (25865 39601 205291 834000) 0 nil])
([nil nil ((78008 . 78023)) nil (25865 39601 205262 43000) 0 nil])
([nil nil ((nil rear-nonsticky nil 86314 . 86315) (nil part-side javascript 86314 . 86315) (nil face (rainbow-delimiters-depth-6-face) 86314 . 86315) (nil part-side javascript 86309 . 86314) (nil face web-mode-function-call-face 86309 . 86314) (nil part-side javascript 86304 . 86309) (86304 . 86315) (t 25865 39601 341604 551000)) nil (25865 39794 922949 101000) 0 nil])
([nil nil ((86345 . 86346)) nil (25865 39794 922940 128000) 0 nil])
([nil nil ((#("
          console.log(\"filter_tree\", this.filter_tree)" 0 1 (part-side javascript) 1 19 (part-side javascript) 19 22 (part-side javascript face web-mode-function-call-face) 22 23 (part-side javascript face (rainbow-delimiters-depth-6-face)) 23 24 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 24 35 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 35 36 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 36 38 (part-side javascript) 38 42 (part-side javascript face web-mode-constant-face) 42 54 (part-side javascript) 54 55 (part-side javascript face (rainbow-delimiters-depth-6-face))) . 86094) (undo-tree-id579 . -55) (undo-tree-id580 . -51) (undo-tree-id581 . -1) (undo-tree-id582 . -55) (t 25865 39795 53203 985000)) nil (25865 39884 312364 359000) 0 nil])
([nil nil ((86291 . 86302)) nil (25865 39884 312359 68000) 0 nil])
([nil nil ((nil rear-nonsticky nil 86356 . 86357) (nil part-side javascript 86356 . 86357) (nil face (rainbow-delimiters-depth-6-face) 86356 . 86357) (nil part-side javascript 86344 . 86356) (nil part-side javascript 86340 . 86344) (nil face web-mode-constant-face 86340 . 86344) (nil part-side javascript 86338 . 86340) (nil part-side javascript 86337 . 86338) (nil part-token string 86337 . 86338) (nil syntax-table (15) 86337 . 86338) (nil font-lock-face web-mode-javascript-string-face 86337 . 86338) (nil part-side javascript 86326 . 86337) (nil part-token string 86326 . 86337) (nil font-lock-face web-mode-javascript-string-face 86326 . 86337) (nil part-side javascript 86325 . 86326) (nil part-token string 86325 . 86326) (nil syntax-table (15) 86325 . 86326) (nil font-lock-face web-mode-javascript-string-face 86325 . 86326) (nil part-side javascript 86324 . 86325) (nil face (rainbow-delimiters-depth-6-face) 86324 . 86325) (nil part-side javascript 86321 . 86324) (nil face web-mode-function-call-face 86321 . 86324) (nil part-side javascript 86303 . 86321) (nil part-side javascript 86302 . 86303) (86302 . 86357)) nil (25865 39884 312356 751000) 0 nil])
([nil nil ((86326 . 86329)) nil (25865 39884 312350 865000) 0 nil])
([nil nil ((#("w" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -86327) (undo-tree-id577 . -1) (#("a" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -86328) (undo-tree-id578 . -1) 86329) nil (25865 39884 312349 515000) 0 nil])
([nil nil ((86327 . 86331)) nil (25865 39884 312345 998000) 0 nil])
([nil nil ((#(":" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -86329) (undo-tree-id575 . -1) (#("_" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -86330) (undo-tree-id576 . -1) 86331) nil (25865 39884 312344 349000) 0 nil])
([nil nil ((86329 . 86330)) nil (25865 39884 312340 355000) 0 nil])
([nil nil ((#("this.filter_tree" 0 4 (part-side javascript face web-mode-constant-face) 4 16 (part-side javascript)) . 86344) (undo-tree-id573 . -16) (undo-tree-id574 . -16)) nil (25865 39884 312338 833000) 0 nil])
([nil nil ((nil rear-nonsticky nil 86363 . 86364) (nil part-side javascript 86348 . 86364) (nil part-side javascript 86344 . 86348) (nil face web-mode-constant-face 86344 . 86348) (86344 . 86364)) nil (25865 39884 312334 672000) 0 nil])
([nil nil ((#("          " 0 10 (part-side javascript)) . -86292) (undo-tree-id554 . -10) (undo-tree-id555 . -10) (undo-tree-id556 . -10) (undo-tree-id557 . -10) (undo-tree-id558 . -10) (undo-tree-id559 . -10) (undo-tree-id560 . -10) (undo-tree-id561 . -10) (undo-tree-id562 . -10) (undo-tree-id563 . -10) (undo-tree-id564 . -10) (undo-tree-id565 . -10) (undo-tree-id566 . -10) (undo-tree-id567 . -10) (undo-tree-id568 . -10) (undo-tree-id569 . -10) (undo-tree-id570 . -10) (undo-tree-id571 . -10) (undo-tree-id572 . -10) 86302) nil (25865 39884 312327 437000) 0 nil])
([nil nil ((34730 . 34748) (34706 . 34722) ("              " . 34706) (34727 . 34728) (t 25865 39884 445050 989000)) nil (25865 40398 595129 225000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34798 . 34799) (nil block-side t 34798 . 34799) (nil block-end t 34798 . 34799) (nil block-token delimiter-end 34798 . 34799) (nil tag-name "v-card" 34798 . 34799) (nil tag-type start 34798 . 34799) (nil block-side t 34797 . 34798) (nil tag-name "v-card" 34797 . 34798) (nil tag-type start 34797 . 34798) (nil block-side t 34796 . 34797) (nil tag-name "v-card" 34796 . 34797) (nil tag-type start 34796 . 34797) (nil block-side t 34795 . 34796) (nil tag-name "v-card" 34795 . 34796) (nil tag-type start 34795 . 34796) (nil block-side t 34794 . 34795) (nil tag-name "v-card" 34794 . 34795) (nil tag-type start 34794 . 34795) (nil block-side t 34793 . 34794) (nil tag-name "v-card" 34793 . 34794) (nil tag-type start 34793 . 34794) (nil block-side t 34792 . 34793) (nil tag-name "v-card" 34792 . 34793) (nil tag-type start 34792 . 34793) (nil block-side t 34791 . 34792) (nil tag-name "v-card" 34791 . 34792) (nil tag-type start 34791 . 34792) (nil block-side t 34790 . 34791) (nil tag-name "v-card" 34790 . 34791) (nil tag-type start 34790 . 34791) (nil block-side t 34789 . 34790) (nil tag-name "v-card" 34789 . 34790) (nil tag-type start 34789 . 34790) (nil block-side t 34788 . 34789) (nil tag-name "v-card" 34788 . 34789) (nil tag-type start 34788 . 34789) (nil block-side t 34787 . 34788) (nil tag-name "v-card" 34787 . 34788) (nil tag-type start 34787 . 34788) (nil block-side t 34786 . 34787) (nil tag-name "v-card" 34786 . 34787) (nil tag-type start 34786 . 34787) (nil block-side t 34785 . 34786) (nil tag-name "v-card" 34785 . 34786) (nil tag-type start 34785 . 34786) (nil block-side t 34784 . 34785) (nil tag-name "v-card" 34784 . 34785) (nil tag-type start 34784 . 34785) (nil block-side t 34783 . 34784) (nil tag-name "v-card" 34783 . 34784) (nil tag-type start 34783 . 34784) (nil block-side t 34782 . 34783) (nil tag-name "v-card" 34782 . 34783) (nil tag-type start 34782 . 34783) (nil block-side t 34781 . 34782) (nil tag-name "v-card" 34781 . 34782) (nil tag-type start 34781 . 34782) (nil block-side t 34780 . 34781) (nil tag-name "v-card" 34780 . 34781) (nil tag-type start 34780 . 34781) (nil block-side t 34779 . 34780) (nil tag-name "v-card" 34779 . 34780) (nil tag-type start 34779 . 34780) (nil block-side t 34775 . 34779) (nil tag-name "v-card" 34775 . 34779) (nil tag-type start 34775 . 34779) (nil block-side t 34774 . 34775) (nil tag-name "v-card" 34774 . 34775) (nil tag-type start 34774 . 34775) (nil block-side t 34773 . 34774) (nil tag-name "v-card" 34773 . 34774) (nil tag-type start 34773 . 34774) (nil block-side t 34772 . 34773) (nil tag-name "v-card" 34772 . 34773) (nil tag-type start 34772 . 34773) (nil block-side t 34771 . 34772) (nil tag-name "v-card" 34771 . 34772) (nil tag-type start 34771 . 34772) (nil block-side t 34770 . 34771) (nil tag-name "v-card" 34770 . 34771) (nil tag-type start 34770 . 34771) (nil block-side t 34769 . 34770) (nil tag-name "v-card" 34769 . 34770) (nil tag-type start 34769 . 34770) (nil block-side t 34768 . 34769) (nil tag-name "v-card" 34768 . 34769) (nil tag-type start 34768 . 34769) (nil block-side t 34767 . 34768) (nil tag-name "v-card" 34767 . 34768) (nil tag-type start 34767 . 34768) (nil block-side t 34766 . 34767) (nil tag-name "v-card" 34766 . 34767) (nil tag-type start 34766 . 34767) (nil block-side t 34765 . 34766) (nil tag-name "v-card" 34765 . 34766) (nil tag-type start 34765 . 34766) (nil block-side t 34764 . 34765) (nil tag-name "v-card" 34764 . 34765) (nil tag-type start 34764 . 34765) (nil block-side t 34763 . 34764) (nil tag-name "v-card" 34763 . 34764) (nil tag-type start 34763 . 34764) (nil block-side t 34762 . 34763) (nil tag-name "v-card" 34762 . 34763) (nil tag-type start 34762 . 34763) (nil block-side t 34761 . 34762) (nil tag-name "v-card" 34761 . 34762) (nil tag-type start 34761 . 34762) (nil block-side t 34760 . 34761) (nil tag-name "v-card" 34760 . 34761) (nil tag-type start 34760 . 34761) (nil block-side t 34759 . 34760) (nil tag-name "v-card" 34759 . 34760) (nil tag-type start 34759 . 34760) (nil block-side t 34758 . 34759) (nil tag-name "v-card" 34758 . 34759) (nil tag-type start 34758 . 34759) (nil block-side t 34757 . 34758) (nil tag-name "v-card" 34757 . 34758) (nil tag-type start 34757 . 34758) (nil block-side t 34756 . 34757) (nil tag-name "v-card" 34756 . 34757) (nil tag-type start 34756 . 34757) (nil block-side t 34754 . 34756) (nil block-token delimiter-beg 34754 . 34756) (nil tag-name "v-card" 34754 . 34756) (nil tag-type start 34754 . 34756) (nil block-side t 34753 . 34754) (nil block-token delimiter-beg 34753 . 34754) (nil tag-name "v-card" 34753 . 34754) (nil tag-type start 34753 . 34754) (nil block-side t 34752 . 34753) (nil block-token delimiter-beg 34752 . 34753) (nil tag-name "v-card" 34752 . 34753) (nil tag-type start 34752 . 34753) (nil block-side t 34751 . 34752) (nil block-token delimiter-beg 34751 . 34752) (nil tag-name "v-card" 34751 . 34752) (nil tag-type start 34751 . 34752) (nil block-side t 34750 . 34751) (nil block-token delimiter-beg 34750 . 34751) (nil tag-name "v-card" 34750 . 34751) (nil tag-type start 34750 . 34751) (nil block-side t 34749 . 34750) (nil block-token delimiter-beg 34749 . 34750) (nil tag-name "v-card" 34749 . 34750) (nil tag-type start 34749 . 34750) (nil block-beg 0 34748 . 34749) (nil block-controls 0 34748 . 34749) (nil block-side t 34748 . 34749) (nil block-token delimiter-beg 34748 . 34749) (nil tag-name "v-card" 34748 . 34749) (nil tag-type start 34748 . 34749) (34748 . 34799)) nil (25865 40398 595120 208000) 0 nil])
([nil nil ((34816 . 34818) 34823) nil (25865 40398 595087 389000) 0 nil])
([nil nil ((34843 . 34845) 34852) nil (25865 40398 595086 302000) 0 nil])
([nil nil ((34884 . 34886) 34895) nil (25865 40398 595085 109000) 0 nil])
([nil nil ((34932 . 34934) 34945) nil (25865 40398 595083 897000) 0 nil])
([nil nil ((#("                  outlined
" 0 18 (tag-name "v-card" tag-type start) 18 19 (tag-attr-beg 0 tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 19 25 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 25 26 (tag-attr t tag-attr-end 0 tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 26 27 (tag-name "v-card" tag-type start)) . 34827) (34757 . 34827) (#("                  @click=\"displayActiveFilter = !displayActiveFilter\"
" 0 18 (tag-name "v-card" tag-type start) 18 19 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg tag-name "v-card" tag-type start) 19 26 (block-side t block-token delimiter-beg tag-name "v-card" tag-type start) 26 68 (block-side t tag-name "v-card" tag-type start) 68 69 (rear-nonsticky t block-side t block-end t block-token delimiter-end tag-name "v-card" tag-type start) 69 70 (tag-name "v-card" tag-type start)) . 34730) (undo-tree-id592 . -18) (undo-tree-id593 . -31) (34800 . 34827) 34761) nil (25865 40398 595082 353000) 0 nil])
([nil nil ((#("                  class=\"ml-1 mb-1 pb-1\"
" 0 18 (tag-name "v-card" tag-type start) 18 19 (tag-attr-beg 0 tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 19 23 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-name-face) 23 24 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-equal-face) 24 39 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face) 39 40 (tag-attr t tag-attr-end 5 tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face) 40 41 (tag-name "v-card" tag-type start)) . 34868) (34798 . 34868) (#("                  @click=\"displayActiveFilter = !displayActiveFilter\"
" 0 18 (tag-name "v-card" tag-type start) 18 19 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg tag-name "v-card" tag-type start) 19 20 (block-side t block-token delimiter-beg tag-attr-beg 0 tag-attr t tag-name "v-card" tag-type start) 20 24 (block-side t block-token delimiter-beg tag-attr t tag-name "v-card" tag-type start) 24 25 (block-side t block-token delimiter-beg tag-attr t tag-name "v-card" tag-type start) 25 26 (block-side t block-token delimiter-beg tag-attr t tag-name "v-card" tag-type start) 26 68 (block-side t tag-attr t tag-name "v-card" tag-type start) 68 69 (rear-nonsticky t block-side t block-end t block-token delimiter-end tag-attr t tag-attr-end 5 tag-name "v-card" tag-type start) 69 70 (tag-name "v-card" tag-type start)) . 34757) (undo-tree-id591 . -31) (34827 . 34868) 34788) nil (25865 40398 595078 111000) 0 nil])
([nil nil ((#("                  v-for=\"value in filter_score\"
" 0 18 (tag-name "v-card" tag-type start) 18 19 (tag-attr-beg 2 tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-engine-face) 19 23 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-engine-face) 23 24 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-equal-face) 24 46 (tag-attr t tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face) 46 47 (tag-attr t tag-attr-end 5 tag-name "v-card" tag-type start font-lock-face web-mode-html-attr-value-face) 47 48 (tag-name "v-card" tag-type start)) . 34916) (undo-tree-id589 . -47) (34846 . 34916) (#("                  @click=\"displayActiveFilter = !displayActiveFilter\"
" 0 18 (tag-name "v-card" tag-type start) 18 19 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg tag-name "v-card" tag-type start) 19 20 (block-side t block-token delimiter-beg tag-name "v-card" tag-type start) 20 24 (block-side t block-token delimiter-beg tag-name "v-card" tag-type start) 24 25 (block-side t block-token delimiter-beg tag-name "v-card" tag-type start) 25 26 (block-side t block-token delimiter-beg tag-name "v-card" tag-type start) 26 68 (block-side t tag-name "v-card" tag-type start) 68 69 (rear-nonsticky t block-side t block-end t block-token delimiter-end tag-name "v-card" tag-type start) 69 70 (tag-name "v-card" tag-type start)) . 34798) (undo-tree-id590 . -31) (34868 . 34916) 34829) nil (25865 40398 595074 643000) 0 nil])
([nil nil ((#("                  :key=\"value[0]\"
" 0 18 (tag-name "v-card" tag-type start) 18 19 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg tag-name "v-card" tag-type start) 19 20 (block-side t block-token delimiter-beg tag-name "v-card" tag-type start) 20 21 (block-side t block-token delimiter-beg tag-name "v-card" tag-type start) 21 22 (block-side t block-token delimiter-beg tag-name "v-card" tag-type start) 22 24 (block-side t block-token delimiter-beg tag-name "v-card" tag-type start) 24 29 (block-side t tag-name "v-card" tag-type start) 29 31 (block-side t tag-name "v-card" tag-type start) 31 32 (block-side t tag-name "v-card" tag-type start) 32 33 (block-side t block-end t block-token delimiter-end tag-name "v-card" tag-type start) 33 34 (tag-name "v-card" tag-type start)) . 34950) (34880 . 34950) (#("                  @click=\"displayActiveFilter = !displayActiveFilter\"
" 0 18 (tag-name "v-card" tag-type start) 18 19 (block-beg 0 block-controls 0 block-side t block-token delimiter-beg tag-name "v-card" tag-type start) 19 20 (block-side t block-token delimiter-beg tag-name "v-card" tag-type start) 20 24 (block-side t block-token delimiter-beg tag-name "v-card" tag-type start) 24 25 (block-side t block-token delimiter-beg tag-name "v-card" tag-type start) 25 26 (block-side t block-token delimiter-beg tag-name "v-card" tag-type start) 26 68 (block-side t tag-name "v-card" tag-type start) 68 69 (rear-nonsticky t block-side t block-end t block-token delimiter-end tag-name "v-card" tag-type start) 69 70 (tag-name "v-card" tag-type start)) . 34846) (undo-tree-id588 . -31) (34916 . 34950) 34877) nil (25865 40398 595069 882000) 0 nil])
([nil nil ((#("displayActiveFilter" 0 19 (block-side t tag-name "v-card" tag-type start)) . 34906) (undo-tree-id585 . -19) (undo-tree-id586 . -5) (undo-tree-id587 . -19)) nil (25865 40398 595066 665000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34919 . 34920) (nil block-side t 34919 . 34920) (nil tag-name "v-card" 34919 . 34920) (nil tag-type start 34919 . 34920) (nil block-side t 34918 . 34919) (nil tag-name "v-card" 34918 . 34919) (nil tag-type start 34918 . 34919) (nil block-side t 34917 . 34918) (nil tag-name "v-card" 34917 . 34918) (nil tag-type start 34917 . 34918) (nil block-side t 34916 . 34917) (nil tag-name "v-card" 34916 . 34917) (nil tag-type start 34916 . 34917) (nil block-side t 34915 . 34916) (nil tag-name "v-card" 34915 . 34916) (nil tag-type start 34915 . 34916) (nil block-side t 34914 . 34915) (nil tag-name "v-card" 34914 . 34915) (nil tag-type start 34914 . 34915) (nil block-side t 34913 . 34914) (nil tag-name "v-card" 34913 . 34914) (nil tag-type start 34913 . 34914) (nil block-side t 34912 . 34913) (nil tag-name "v-card" 34912 . 34913) (nil tag-type start 34912 . 34913) (nil block-side t 34911 . 34912) (nil tag-name "v-card" 34911 . 34912) (nil tag-type start 34911 . 34912) (nil block-side t 34910 . 34911) (nil tag-name "v-card" 34910 . 34911) (nil tag-type start 34910 . 34911) (nil block-side t 34909 . 34910) (nil tag-name "v-card" 34909 . 34910) (nil tag-type start 34909 . 34910) (nil block-side t 34908 . 34909) (nil tag-name "v-card" 34908 . 34909) (nil tag-type start 34908 . 34909) (nil block-side t 34907 . 34908) (nil tag-name "v-card" 34907 . 34908) (nil tag-type start 34907 . 34908) (nil block-side t 34906 . 34907) (nil tag-name "v-card" 34906 . 34907) (nil tag-type start 34906 . 34907) (34906 . 34920)) nil (25865 40398 595060 81000) 0 nil])
([nil nil ((#("!displayActiveFilter" 0 20 (block-side t tag-name "v-card" tag-type start)) . 34923) (undo-tree-id583 . -20) (undo-tree-id584 . -20)) nil (25865 40398 595049 988000) 0 nil])
([nil nil ((34929 . 34930) (34928 . 34930) (#("[" 0 1 (block-side t tag-name "v-card" tag-type start)) . -34928) (34923 . 34929)) nil (25865 40398 595032 614000) 0 nil])
([nil nil ((34756 . 34775)) nil (25865 40398 595030 43000) 0 nil])
([nil nil ((34775 . 34779)) nil (25865 40398 595022 841000) 0 nil])
([nil nil ((34946 . 34948) (#("[" 0 1 (block-side t tag-name "v-card" tag-type start)) . -34946) (34946 . 34947) (t 25865 40398 724409 162000)) nil (25865 40436 588251 738000) 0 nil])
([nil nil ((#("]" 0 1 (block-side t tag-name "v-card" tag-type start)) . 34947)) nil (25865 40436 588248 199000) 0 nil])
([nil nil ((34955 . 34956)) nil (25865 40436 588241 49000) 0 nil])
([nil nil ((#("
        console.log('filter score ', this.raw_filter_list)" 0 1 (part-side javascript) 1 9 (part-side javascript) 9 17 (part-side javascript) 17 20 (part-side javascript face web-mode-function-call-face) 20 21 (part-side javascript face (rainbow-delimiters-depth-4-face)) 21 22 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 22 35 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 35 36 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 36 38 (part-side javascript) 38 42 (part-side javascript face web-mode-constant-face) 42 58 (part-side javascript) 58 59 (rear-nonsticky t part-side javascript face (rainbow-delimiters-depth-4-face))) . 78053) (undo-tree-id612 . -59) (undo-tree-id613 . -1) (undo-tree-id614 . -59) (t 25865 40436 716372 343000)) nil (25865 40528 961609 165000) 0 nil])
([nil nil ((#("

        console.log('filter score ', this.filter_score)" 0 1 (part-side javascript) 1 2 (part-side javascript) 2 18 (part-side javascript) 18 21 (part-side javascript face web-mode-function-call-face) 21 22 (part-side javascript face (rainbow-delimiters-depth-4-face)) 22 23 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 23 36 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 36 37 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 37 39 (part-side javascript) 39 43 (part-side javascript face web-mode-constant-face) 43 56 (part-side javascript) 56 57 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 78602) (undo-tree-id609 . -57) (undo-tree-id610 . -1) (undo-tree-id611 . -57)) nil (25865 40528 961595 755000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . -78601) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) 78602) nil (25865 40528 961587 965000) 0 nil])
([nil nil ((#("
          console.log(\"raw_filter_tree\", this.raw_filter_list)" 0 19 (part-side javascript) 19 22 (part-side javascript face web-mode-function-call-face) 22 23 (part-side javascript face (rainbow-delimiters-depth-6-face)) 23 24 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 24 28 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 28 39 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 39 40 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 40 42 (part-side javascript) 42 46 (part-side javascript face web-mode-constant-face) 46 61 (part-side javascript) 61 62 (rear-nonsticky t part-side javascript) 62 63 (rear-nonsticky t part-side javascript face (rainbow-delimiters-depth-6-face))) . 86263) (undo-tree-id602 . -63) (undo-tree-id603 . -1) (undo-tree-id604 . -42) (undo-tree-id605 . -63)) nil (25865 40528 961582 940000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . -86262) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) 86263) nil (25865 40528 961573 202000) 0 nil])
([nil nil ((#("
        console.log(\"chosen save ref\", val)" 0 1 (part-side javascript) 1 17 (part-side javascript) 17 20 (part-side javascript face web-mode-function-call-face) 20 21 (part-side javascript face (rainbow-delimiters-depth-4-face)) 21 22 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 22 37 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 37 38 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 38 43 (part-side javascript) 43 44 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 112847) (undo-tree-id594 . -44) (undo-tree-id595 . -1) (undo-tree-id596 . -44)) nil (25865 40528 961561 615000) 0 nil])
([nil nil ((78556 . 78557) (t 25865 40529 96286 702000)) nil (25865 40580 947695 64000) 0 nil])
([nil nil ((78586 . 78587)) nil (25865 40580 947692 533000) 0 nil])
([nil nil ((78588 . 78589)) nil (25865 40580 947685 635000) 0 nil])
([nil nil ((21826 . 21830) (#("    " 0 4 (face whitespace-trailing)) . 21825) (21825 . 21829) (21825 . 21826) (t 25865 40581 84240 654000)) nil (25865 41594 874697 235000) 0 nil])
([nil nil ((21826 . 21830) (#("    " 0 4 (face whitespace-trailing)) . 21825) (21825 . 21829) (21825 . 21826)) nil (25865 41594 874694 400000) 0 nil])
([nil nil ((21830 . 21849)) nil (25865 41594 874692 335000) 0 nil])
([nil nil ((" " . -21848) (undo-tree-id620 . -1) 21849) nil (25865 41594 874690 807000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type comment font-lock-face web-mode-comment-face)) . -21858) (21830 . 21862) ("edit filter dialog
    " . 21830) (undo-tree-id616 . -23) (undo-tree-id617 . -15) (undo-tree-id618 . -19) (undo-tree-id619 . -23)) nil (25865 41835 351490 766000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type comment font-lock-face web-mode-comment-face)) . 21853) (#(" " 0 1 (tag-type comment font-lock-face web-mode-comment-face)) . 21853) (#(" " 0 1 (tag-type comment font-lock-face web-mode-comment-face)) . 21853) (#("
" 0 1 (tag-type comment font-lock-face web-mode-comment-face)) . 21853) (undo-tree-id882 . -1)) nil (25865 41838 837049 283000) 0 nil] [nil nil ((#(" " 0 1 (tag-type comment font-lock-face web-mode-comment-face)) . 21853) (#(" " 0 1 (tag-type comment font-lock-face web-mode-comment-face)) . 21853) (#(" " 0 1 (tag-type comment font-lock-face web-mode-comment-face)) . 21853) (#("
" 0 1 (tag-type comment font-lock-face web-mode-comment-face)) . 21853) (undo-tree-id615 . -1)) ((21853 . 21854) (21853 . 21854) (21853 . 21854) (21853 . 21854)) (25865 41834 947092 888000) 0 nil])
([nil nil ((22434 . 22435) (22427 . 22435) (t 25865 41838 907222 974000)) nil (25865 41864 429847 26000) 0 nil])
([nil nil ((22434 . 22435) (22427 . 22435) (t 25865 41594 943460 409000)) ((#(" cols=\"\"" 0 1 (tag-name "v-col" tag-type start) 1 2 (tag-attr-beg 0 tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face) 2 3 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face) 3 4 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face) 4 5 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face) 5 6 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-equal-face) 6 7 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face) 7 8 (tag-attr t tag-attr-end 4 tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . 22427) (undo-tree-id879 . -4) (undo-tree-id880 . -4) (undo-tree-id881 . -8) (#("5" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . 22434)) (25865 41834 589051 457000) 0 nil])
([nil nil ((22862 . 22863)) nil (25865 41864 429845 424000) 0 nil])
([nil nil ((22862 . 22863)) ((#(" " 0 1 (tag-name "v-col" tag-type start)) . 22862) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1)) (25865 41834 241016 953000) 0 nil])
([nil nil ((nil rear-nonsticky nil 22870 . 22871) (nil tag-attr t 22870 . 22871) (nil tag-attr-end 4 22870 . 22871) (nil tag-name "v-col" 22870 . 22871) (nil tag-type start 22870 . 22871) (nil font-lock-face web-mode-html-attr-value-face 22870 . 22871) (nil tag-attr t 22868 . 22870) (nil tag-name "v-col" 22868 . 22870) (nil tag-type start 22868 . 22870) (nil font-lock-face web-mode-html-attr-value-face 22868 . 22870) (nil tag-attr t 22867 . 22868) (nil tag-name "v-col" 22867 . 22868) (nil tag-type start 22867 . 22868) (nil font-lock-face web-mode-html-attr-equal-face 22867 . 22868) (nil tag-attr t 22866 . 22867) (nil tag-name "v-col" 22866 . 22867) (nil tag-type start 22866 . 22867) (nil font-lock-face web-mode-html-attr-name-face 22866 . 22867) (nil tag-attr t 22865 . 22866) (nil tag-name "v-col" 22865 . 22866) (nil tag-type start 22865 . 22866) (nil font-lock-face web-mode-html-attr-name-face 22865 . 22866) (nil tag-attr t 22864 . 22865) (nil tag-name "v-col" 22864 . 22865) (nil tag-type start 22864 . 22865) (nil font-lock-face web-mode-html-attr-name-face 22864 . 22865) (nil tag-attr-beg 0 22863 . 22864) (nil tag-attr t 22863 . 22864) (nil tag-name "v-col" 22863 . 22864) (nil tag-type start 22863 . 22864) (nil font-lock-face web-mode-html-attr-name-face 22863 . 22864) (22863 . 22871)) nil (25865 41864 429842 911000) 0 nil])
([nil nil ((nil rear-nonsticky nil 22870 . 22871) (nil tag-attr t 22870 . 22871) (nil tag-attr-end 4 22870 . 22871) (nil tag-name "v-col" 22870 . 22871) (nil tag-type start 22870 . 22871) (nil font-lock-face web-mode-html-attr-value-face 22870 . 22871) (nil tag-attr t 22868 . 22870) (nil tag-name "v-col" 22868 . 22870) (nil tag-type start 22868 . 22870) (nil font-lock-face web-mode-html-attr-value-face 22868 . 22870) (nil tag-attr t 22867 . 22868) (nil tag-name "v-col" 22867 . 22868) (nil tag-type start 22867 . 22868) (nil font-lock-face web-mode-html-attr-equal-face 22867 . 22868) (nil tag-attr t 22866 . 22867) (nil tag-name "v-col" 22866 . 22867) (nil tag-type start 22866 . 22867) (nil font-lock-face web-mode-html-attr-name-face 22866 . 22867) (nil tag-attr t 22865 . 22866) (nil tag-name "v-col" 22865 . 22866) (nil tag-type start 22865 . 22866) (nil font-lock-face web-mode-html-attr-name-face 22865 . 22866) (nil tag-attr t 22864 . 22865) (nil tag-name "v-col" 22864 . 22865) (nil tag-type start 22864 . 22865) (nil font-lock-face web-mode-html-attr-name-face 22864 . 22865) (nil tag-attr-beg 0 22863 . 22864) (nil tag-attr t 22863 . 22864) (nil tag-name "v-col" 22863 . 22864) (nil tag-type start 22863 . 22864) (nil font-lock-face web-mode-html-attr-name-face 22863 . 22864) (22863 . 22871)) ((#("cols=\"5\"" 0 1 (tag-attr-beg 0 tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face) 1 2 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face) 2 3 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face) 3 4 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face) 4 5 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-equal-face) 5 6 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face) 6 7 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face) 7 8 (rear-nonsticky nil tag-attr t tag-attr-end 4 tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . 22863) (undo-tree-id719 . -7) (undo-tree-id720 . -6) (undo-tree-id721 . -6) (undo-tree-id722 . -6) (undo-tree-id723 . -6) (undo-tree-id724 . -6) (undo-tree-id725 . -6) (undo-tree-id726 . -6) (undo-tree-id727 . -6) (undo-tree-id728 . -6) (undo-tree-id729 . -6) (undo-tree-id730 . -6) (undo-tree-id731 . -6) (undo-tree-id732 . -6) (undo-tree-id733 . -6) (undo-tree-id734 . -6) (undo-tree-id735 . -6) (undo-tree-id736 . -6) (undo-tree-id737 . -6) (undo-tree-id738 . -6) (undo-tree-id739 . -6) (undo-tree-id740 . -6) (undo-tree-id741 . -6) (undo-tree-id742 . -6) (undo-tree-id743 . -6) (undo-tree-id744 . -6) (undo-tree-id745 . -6) (undo-tree-id746 . -6) (undo-tree-id747 . -6) (undo-tree-id748 . -6) (undo-tree-id749 . -6) (undo-tree-id750 . -6) (undo-tree-id751 . -6) (undo-tree-id752 . -6) (undo-tree-id753 . -6) (undo-tree-id754 . -6) (undo-tree-id755 . -6) (undo-tree-id756 . -6) (undo-tree-id757 . -6) (undo-tree-id758 . -6) (undo-tree-id759 . -6) (undo-tree-id760 . -6) (undo-tree-id761 . -6) (undo-tree-id762 . -6) (undo-tree-id763 . -6) (undo-tree-id764 . -6) (undo-tree-id765 . -6) (undo-tree-id766 . -6) (undo-tree-id767 . -6) (undo-tree-id768 . -6) (undo-tree-id769 . -6) (undo-tree-id770 . -6) (undo-tree-id771 . -6) (undo-tree-id772 . -6) (undo-tree-id773 . -6) (undo-tree-id774 . -6) (undo-tree-id775 . -6) (undo-tree-id776 . -6) (undo-tree-id777 . -6) (undo-tree-id778 . -6) (undo-tree-id779 . -6) (undo-tree-id780 . -6) (undo-tree-id781 . -6) (undo-tree-id782 . -6) (undo-tree-id783 . -7) (undo-tree-id784 . -7) (undo-tree-id785 . -7) (undo-tree-id786 . -7) (undo-tree-id787 . -7) (undo-tree-id788 . -7) (undo-tree-id789 . -7) (undo-tree-id790 . -7) (undo-tree-id791 . -7) (undo-tree-id792 . -7) (undo-tree-id793 . -7) (nil tag-name "v-col" 22863 . 22864) (nil tag-name "v-col" 22864 . 22865) (nil tag-name "v-col" 22865 . 22866) (nil tag-name "v-col" 22866 . 22867) (nil tag-name "v-col" 22867 . 22868) (nil tag-name "v-col" 22869 . 22870) (nil tag-name "v-col" 22868 . 22869) (nil tag-name "v-col" 22870 . 22871) (nil rear-nonsticky t 22870 . 22871)) (25865 41833 891858 879000) 0 nil])
([nil nil ((23335 . 23336)) nil (25865 41864 429834 903000) 0 nil])
([nil nil ((23335 . 23336)) ((#(" " 0 1 (tag-name "v-col" tag-type start)) . 23335) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1)) (25865 41833 493732 973000) 0 nil])
([nil nil ((nil rear-nonsticky nil 23343 . 23344) (nil tag-attr t 23343 . 23344) (nil tag-attr-end 4 23343 . 23344) (nil tag-name "v-col" 23343 . 23344) (nil tag-type start 23343 . 23344) (nil font-lock-face web-mode-html-attr-value-face 23343 . 23344) (nil tag-attr t 23341 . 23343) (nil tag-name "v-col" 23341 . 23343) (nil tag-type start 23341 . 23343) (nil font-lock-face web-mode-html-attr-value-face 23341 . 23343) (nil tag-attr t 23340 . 23341) (nil tag-name "v-col" 23340 . 23341) (nil tag-type start 23340 . 23341) (nil font-lock-face web-mode-html-attr-equal-face 23340 . 23341) (nil tag-attr t 23339 . 23340) (nil tag-name "v-col" 23339 . 23340) (nil tag-type start 23339 . 23340) (nil font-lock-face web-mode-html-attr-name-face 23339 . 23340) (nil tag-attr t 23338 . 23339) (nil tag-name "v-col" 23338 . 23339) (nil tag-type start 23338 . 23339) (nil font-lock-face web-mode-html-attr-name-face 23338 . 23339) (nil tag-attr t 23337 . 23338) (nil tag-name "v-col" 23337 . 23338) (nil tag-type start 23337 . 23338) (nil font-lock-face web-mode-html-attr-name-face 23337 . 23338) (nil tag-attr-beg 0 23336 . 23337) (nil tag-attr t 23336 . 23337) (nil tag-name "v-col" 23336 . 23337) (nil tag-type start 23336 . 23337) (nil font-lock-face web-mode-html-attr-name-face 23336 . 23337) (23336 . 23344)) nil (25865 41864 429831 855000) 0 nil])
([nil nil ((nil rear-nonsticky nil 23343 . 23344) (nil tag-attr t 23343 . 23344) (nil tag-attr-end 4 23343 . 23344) (nil tag-name "v-col" 23343 . 23344) (nil tag-type start 23343 . 23344) (nil font-lock-face web-mode-html-attr-value-face 23343 . 23344) (nil tag-attr t 23341 . 23343) (nil tag-name "v-col" 23341 . 23343) (nil tag-type start 23341 . 23343) (nil font-lock-face web-mode-html-attr-value-face 23341 . 23343) (nil tag-attr t 23340 . 23341) (nil tag-name "v-col" 23340 . 23341) (nil tag-type start 23340 . 23341) (nil font-lock-face web-mode-html-attr-equal-face 23340 . 23341) (nil tag-attr t 23339 . 23340) (nil tag-name "v-col" 23339 . 23340) (nil tag-type start 23339 . 23340) (nil font-lock-face web-mode-html-attr-name-face 23339 . 23340) (nil tag-attr t 23338 . 23339) (nil tag-name "v-col" 23338 . 23339) (nil tag-type start 23338 . 23339) (nil font-lock-face web-mode-html-attr-name-face 23338 . 23339) (nil tag-attr t 23337 . 23338) (nil tag-name "v-col" 23337 . 23338) (nil tag-type start 23337 . 23338) (nil font-lock-face web-mode-html-attr-name-face 23337 . 23338) (nil tag-attr-beg 0 23336 . 23337) (nil tag-attr t 23336 . 23337) (nil tag-name "v-col" 23336 . 23337) (nil tag-type start 23336 . 23337) (nil font-lock-face web-mode-html-attr-name-face 23336 . 23337) (23336 . 23344)) ((#("cols=\"5\"" 0 1 (tag-attr-beg 0 tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face) 1 2 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face) 2 3 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face) 3 4 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-name-face) 4 5 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-equal-face) 5 7 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face) 7 8 (rear-nonsticky nil tag-attr t tag-attr-end 4 tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . 23336) (nil tag-name "v-col" 23336 . 23337) (nil tag-name "v-col" 23337 . 23338) (nil tag-name "v-col" 23338 . 23339) (nil tag-name "v-col" 23339 . 23340) (nil tag-name "v-col" 23340 . 23341) (nil tag-name "v-col" 23341 . 23343) (nil tag-name "v-col" 23343 . 23344) (nil rear-nonsticky t 23343 . 23344)) (25865 41833 157996 241000) 0 nil])
([nil nil ((#("5" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . 22869)) nil (25865 41864 429822 231000) 0 nil])
([nil nil ((#("5" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . -22869) (undo-tree-id621 . -1) (undo-tree-id623 . -1) (undo-tree-id625 . -1) (undo-tree-id627 . -1) (undo-tree-id629 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id634 . -1) (undo-tree-id636 . -1) (undo-tree-id638 . -1) (undo-tree-id640 . -1) (undo-tree-id642 . -1) (undo-tree-id644 . -1) (undo-tree-id646 . -1) (undo-tree-id648 . -1) 22870) ((22869 . 22870)) (25865 41832 873456 473000) 0 nil])
([nil nil ((22869 . 22870)) nil (25865 41864 429813 973000) 0 nil])
([nil nil ((22869 . 22870)) ((#("2" 0 1 (tag-attr t tag-name "v-col" tag-type start font-lock-face web-mode-html-attr-value-face)) . 22869) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (t 25865 41633 515420 442000)) (25865 41633 448452 606000) 0 nil])
([nil nil ((34879 . 34898) (t 25865 41864 499199 908000)) nil (25873 17839 141936 997000) 0 nil])
nil
([nil nil ((34904 . 34917) (34898 . 34905)) nil (25873 17839 141935 282000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34916) (undo-tree-id17 . -1) 34917) nil (25873 17839 141933 997000) 0 nil])
([nil nil ((34916 . 34928)) nil (25873 17839 141931 575000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -34927) (undo-tree-id16 . -1) 34928) nil (25873 17839 141930 352000) 0 nil])
([nil nil ((34898 . 34899)) nil (25873 17839 141927 825000) 0 nil])
([nil nil ((35468 . 35484) (35442 . 35458) ("              " . 35442) (35465 . 35466)) nil (25873 17839 141926 733000) 0 nil])
([nil nil ((35484 . 35501)) nil (25873 17839 141924 872000) 0 nil])
([nil nil ((35493 . 35511) (35494 . 35510) (#("                  " 0 18 (face whitespace-trailing)) . 35493) (35493 . 35511) (35493 . 35494) ("                " . 35493) (35492 . 35509)) nil (25873 17839 141923 168000) 0 nil])
([nil nil ((35494 . 35510) (#("                  " 0 18 (face whitespace-trailing tag-type start tag-name "v-card")) . 35493) (undo-tree-id12 . -16) (undo-tree-id13 . 18) (35509 . 35511) (35493 . 35510) (#("                  " 0 18 (face whitespace-trailing tag-type start tag-name "v-card")) . 35492) (undo-tree-id14 . -16) (undo-tree-id15 . 18) (35508 . 35510) (35491 . 35509)) nil (25873 17839 141919 844000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35499 . 35500) (nil tag-attr t 35499 . 35500) (nil tag-attr-end 0 35499 . 35500) (nil tag-name "v-card" 35499 . 35500) (nil tag-type start 35499 . 35500) (nil font-lock-face web-mode-html-attr-name-face 35499 . 35500) (nil tag-attr t 35493 . 35499) (nil tag-name "v-card" 35493 . 35499) (nil tag-type start 35493 . 35499) (nil font-lock-face web-mode-html-attr-name-face 35493 . 35499) (nil tag-attr-beg 0 35492 . 35493) (nil tag-attr t 35492 . 35493) (nil tag-name "v-card" 35492 . 35493) (nil tag-type start 35492 . 35493) (nil font-lock-face web-mode-html-attr-name-face 35492 . 35493) (35492 . 35500)) nil (25873 17839 141912 448000) 0 nil])
([nil nil ((35492 . 35510) 35500) nil (25873 17839 141907 627000) 0 nil])
([nil nil ((35518 . 35537)) nil (25873 17839 141906 315000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35558 . 35559) (nil tag-attr t 35558 . 35559) (nil tag-attr-end 5 35558 . 35559) (nil tag-name "v-card" 35558 . 35559) (nil tag-type start 35558 . 35559) (nil font-lock-face web-mode-html-attr-value-face 35558 . 35559) (nil tag-attr t 35543 . 35558) (nil tag-name "v-card" 35543 . 35558) (nil tag-type start 35543 . 35558) (nil font-lock-face web-mode-html-attr-value-face 35543 . 35558) (nil tag-attr t 35542 . 35543) (nil tag-name "v-card" 35542 . 35543) (nil tag-type start 35542 . 35543) (nil font-lock-face web-mode-html-attr-equal-face 35542 . 35543) (nil tag-attr t 35538 . 35542) (nil tag-name "v-card" 35538 . 35542) (nil tag-type start 35538 . 35542) (nil font-lock-face web-mode-html-attr-name-face 35538 . 35542) (nil tag-attr-beg 0 35537 . 35538) (nil tag-attr t 35537 . 35538) (nil tag-name "v-card" 35537 . 35538) (nil tag-type start 35537 . 35538) (nil font-lock-face web-mode-html-attr-name-face 35537 . 35538) (35537 . 35559)) nil (25873 17839 141904 117000) 0 nil])
([nil nil ((35559 . 35578)) nil (25873 17839 141898 667000) 0 nil])
([nil nil ((35578 . 35585)) nil (25873 17839 141897 788000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-card")) . -35584) (undo-tree-id11 . -1) 35585) nil (25873 17839 141896 777000) 0 nil])
([nil nil ((35622 . 35624)) nil (25873 17839 141894 664000) 0 nil])
([nil nil (("v" . -35622) (undo-tree-id7 . -1) (undo-tree-id8 . -1) ("-" . -35623) (undo-tree-id9 . -1) (undo-tree-id10 . -1) 35624) nil (25873 17839 141893 225000) 0 nil])
([nil nil ((35622 . 35625)) nil (25873 17839 141888 41000) 0 nil])
([nil nil (("-" . -35623) (undo-tree-id5 . -1) ("v" . -35624) (undo-tree-id6 . -1) 35625) nil (25873 17839 141886 757000) 0 nil])
([nil nil ((35623 . 35633)) nil (25873 17839 141883 492000) 0 nil])
([nil nil ((35623 . 35638) (#("v-card-sub" 0 10 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-card-sub")) . -35623) (undo-tree-id2 . -10) (undo-tree-id3 . -10) (undo-tree-id4 . -4) 35633) nil (25873 17839 141882 100000) 0 nil])
([nil nil ((35638 . 35657)) nil (25873 17839 141877 173000) 0 nil])
([nil nil ((35640 . 35660) (35641 . 35659) (#("                    " 0 20 (face whitespace-trailing)) . 35640) (35640 . 35660) (35640 . 35641) ("                  " . 35640) (35639 . 35658)) nil (25873 17839 141875 640000) 0 nil])
([nil nil ((35638 . 35639)) nil (25873 17839 141873 285000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35660 . 35661) (nil tag-attr t 35660 . 35661) (nil tag-attr-end 5 35660 . 35661) (nil tag-name "v-card-subtitle" 35660 . 35661) (nil tag-type start 35660 . 35661) (nil font-lock-face web-mode-html-attr-value-face 35660 . 35661) (nil tag-attr t 35645 . 35660) (nil tag-name "v-card-subtitle" 35645 . 35660) (nil tag-type start 35645 . 35660) (nil font-lock-face web-mode-html-attr-value-face 35645 . 35660) (nil tag-attr t 35644 . 35645) (nil tag-name "v-card-subtitle" 35644 . 35645) (nil tag-type start 35644 . 35645) (nil font-lock-face web-mode-html-attr-equal-face 35644 . 35645) (nil tag-attr t 35640 . 35644) (nil tag-name "v-card-subtitle" 35640 . 35644) (nil tag-type start 35640 . 35644) (nil font-lock-face web-mode-html-attr-name-face 35640 . 35644) (nil tag-attr-beg 0 35639 . 35640) (nil tag-attr t 35639 . 35640) (nil tag-name "v-card-subtitle" 35639 . 35640) (nil tag-type start 35639 . 35640) (nil font-lock-face web-mode-html-attr-name-face 35639 . 35640) (35639 . 35661)) nil (25873 17839 141871 127000) 0 nil])
([nil nil ((35683 . 35700)) nil (25873 17839 141865 166000) 0 nil])
([nil nil ((" " . -35699) (undo-tree-id1 . -1) 35700) nil (25873 17839 141863 595000) 0 nil])
([nil nil ((35467 . 35484)) nil (25873 17839 141860 522000) 0 nil])
([nil nil (("
" . 35780) (undo-tree-id0 . -1)) nil (25873 17839 141858 233000) 0 nil])
([nil nil (("                " . -35468) 35794) nil (25873 17839 141832 782000) 0 nil])
([nil nil ((35439 . 35441) (35391 . 35393) (35314 . 35316) (35277 . 35279) (35209 . 35211) (35160 . 35162) (35099 . 35101) 35083 (t 25873 17839 278048 974000)) nil (25873 18017 254198 332000) 0 nil])
([nil nil ((#("
" 0 1 (tag-type start tag-name "v-card")) . 35599) (undo-tree-id18 . -1)) nil (25873 18017 254194 794000) 0 nil])
([nil nil ((35067 . 35083) (#("              " 0 14 (tag-type start tag-name "v-card")) . 35067) 35082) nil (25873 18017 254184 238000) 0 nil])
([nil nil ((#(":" 0 1 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-card" block-token delimiter-beg block-side t block-controls 0 block-beg 0)) . 34898)) nil (25873 18017 254175 498000) 0 nil])
([nil nil ((#("
                  v-if=\"filter_score.length > 0\"" 0 1 (tag-type start tag-name "v-card") 1 19 (tag-type start tag-name "v-card") 19 20 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-card" tag-attr t tag-attr-beg 2) 20 21 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-card" tag-attr t) 21 22 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-card" tag-attr t) 22 23 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-card" tag-attr t) 23 24 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-card" tag-attr t) 24 25 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 25 26 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 26 27 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 27 28 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 28 29 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 29 30 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 30 31 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 31 32 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 32 33 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 33 34 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 34 35 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 35 36 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 36 37 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 37 38 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 38 39 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 39 40 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 40 41 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 41 42 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 42 43 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 43 44 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 44 48 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 48 49 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr-end 4 tag-attr t)) . 34879) (undo-tree-id85 . -37) (undo-tree-id86 . -37) (undo-tree-id87 . -1) (undo-tree-id88 . -49) (undo-tree-id89 . -37) (undo-tree-id90 . -49) (undo-tree-id91 . -49) (t 25873 18017 389074 595000)) nil (25873 18094 146231 567000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34747 . 34748) (nil tag-attr t 34747 . 34748) (nil tag-attr-end 4 34747 . 34748) (nil tag-name "v-container" 34747 . 34748) (nil tag-type start 34747 . 34748) (nil font-lock-face web-mode-html-attr-value-face 34747 . 34748) (nil tag-attr t 34743 . 34747) (nil tag-name "v-container" 34743 . 34747) (nil tag-type start 34743 . 34747) (nil font-lock-face web-mode-html-attr-value-face 34743 . 34747) (nil tag-attr t 34742 . 34743) (nil tag-name "v-container" 34742 . 34743) (nil tag-type start 34742 . 34743) (nil font-lock-face web-mode-html-attr-value-face 34742 . 34743) (nil tag-attr t 34741 . 34742) (nil tag-name "v-container" 34741 . 34742) (nil tag-type start 34741 . 34742) (nil font-lock-face web-mode-html-attr-value-face 34741 . 34742) (nil tag-attr t 34740 . 34741) (nil tag-name "v-container" 34740 . 34741) (nil tag-type start 34740 . 34741) (nil font-lock-face web-mode-html-attr-value-face 34740 . 34741) (nil tag-attr t 34739 . 34740) (nil tag-name "v-container" 34739 . 34740) (nil tag-type start 34739 . 34740) (nil font-lock-face web-mode-html-attr-value-face 34739 . 34740) (nil tag-attr t 34738 . 34739) (nil tag-name "v-container" 34738 . 34739) (nil tag-type start 34738 . 34739) (nil font-lock-face web-mode-html-attr-value-face 34738 . 34739) (nil tag-attr t 34737 . 34738) (nil tag-name "v-container" 34737 . 34738) (nil tag-type start 34737 . 34738) (nil font-lock-face web-mode-html-attr-value-face 34737 . 34738) (nil tag-attr t 34736 . 34737) (nil tag-name "v-container" 34736 . 34737) (nil tag-type start 34736 . 34737) (nil font-lock-face web-mode-html-attr-value-face 34736 . 34737) (nil tag-attr t 34735 . 34736) (nil tag-name "v-container" 34735 . 34736) (nil tag-type start 34735 . 34736) (nil font-lock-face web-mode-html-attr-value-face 34735 . 34736) (nil tag-attr t 34734 . 34735) (nil tag-name "v-container" 34734 . 34735) (nil tag-type start 34734 . 34735) (nil font-lock-face web-mode-html-attr-value-face 34734 . 34735) (nil tag-attr t 34733 . 34734) (nil tag-name "v-container" 34733 . 34734) (nil tag-type start 34733 . 34734) (nil font-lock-face web-mode-html-attr-value-face 34733 . 34734) (nil tag-attr t 34732 . 34733) (nil tag-name "v-container" 34732 . 34733) (nil tag-type start 34732 . 34733) (nil font-lock-face web-mode-html-attr-value-face 34732 . 34733) (nil tag-attr t 34731 . 34732) (nil tag-name "v-container" 34731 . 34732) (nil tag-type start 34731 . 34732) (nil font-lock-face web-mode-html-attr-value-face 34731 . 34732) (nil tag-attr t 34730 . 34731) (nil tag-name "v-container" 34730 . 34731) (nil tag-type start 34730 . 34731) (nil font-lock-face web-mode-html-attr-value-face 34730 . 34731) (nil tag-attr t 34729 . 34730) (nil tag-name "v-container" 34729 . 34730) (nil tag-type start 34729 . 34730) (nil font-lock-face web-mode-html-attr-value-face 34729 . 34730) (nil tag-attr t 34728 . 34729) (nil tag-name "v-container" 34728 . 34729) (nil tag-type start 34728 . 34729) (nil font-lock-face web-mode-html-attr-value-face 34728 . 34729) (nil tag-attr t 34727 . 34728) (nil tag-name "v-container" 34727 . 34728) (nil tag-type start 34727 . 34728) (nil font-lock-face web-mode-html-attr-value-face 34727 . 34728) (nil tag-attr t 34726 . 34727) (nil tag-name "v-container" 34726 . 34727) (nil tag-type start 34726 . 34727) (nil font-lock-face web-mode-html-attr-value-face 34726 . 34727) (nil tag-attr t 34725 . 34726) (nil tag-name "v-container" 34725 . 34726) (nil tag-type start 34725 . 34726) (nil font-lock-face web-mode-html-attr-value-face 34725 . 34726) (nil tag-attr t 34724 . 34725) (nil tag-name "v-container" 34724 . 34725) (nil tag-type start 34724 . 34725) (nil font-lock-face web-mode-html-attr-value-face 34724 . 34725) (nil tag-attr t 34723 . 34724) (nil tag-name "v-container" 34723 . 34724) (nil tag-type start 34723 . 34724) (nil font-lock-face web-mode-html-attr-value-face 34723 . 34724) (nil tag-attr t 34722 . 34723) (nil tag-name "v-container" 34722 . 34723) (nil tag-type start 34722 . 34723) (nil font-lock-face web-mode-html-attr-equal-face 34722 . 34723) (nil tag-attr t 34721 . 34722) (nil tag-name "v-container" 34721 . 34722) (nil tag-type start 34721 . 34722) (nil font-lock-face web-mode-html-attr-engine-face 34721 . 34722) (nil tag-attr t 34720 . 34721) (nil tag-name "v-container" 34720 . 34721) (nil tag-type start 34720 . 34721) (nil font-lock-face web-mode-html-attr-engine-face 34720 . 34721) (nil tag-attr t 34719 . 34720) (nil tag-name "v-container" 34719 . 34720) (nil tag-type start 34719 . 34720) (nil font-lock-face web-mode-html-attr-engine-face 34719 . 34720) (nil tag-attr-beg 2 34718 . 34719) (nil tag-attr t 34718 . 34719) (nil tag-name "v-container" 34718 . 34719) (nil tag-type start 34718 . 34719) (nil font-lock-face web-mode-html-attr-engine-face 34718 . 34719) (nil tag-name "v-container" 34700 . 34718) (nil tag-type start 34700 . 34718) (nil tag-name "v-container" 34699 . 34700) (nil tag-type start 34699 . 34700) (34699 . 34748)) nil (25873 18094 146217 53000) 0 nil])
([nil nil ((34748 . 34749)) nil (25873 18094 146190 875000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-container")) . 34699) (#(" " 0 1 (tag-type start tag-name "v-container")) . 34699) (#(" " 0 1 (tag-type start tag-name "v-container")) . 34699) (#(" " 0 1 (tag-type start tag-name "v-container")) . 34699) (#(" " 0 1 (tag-type start tag-name "v-container")) . 34699) (#(" " 0 1 (tag-type start tag-name "v-container")) . 34699) (#(" " 0 1 (tag-type start tag-name "v-container")) . 34699) (#(" " 0 1 (tag-type start tag-name "v-container")) . 34699) (#(" " 0 1 (tag-type start tag-name "v-container")) . 34699) (#(" " 0 1 (tag-type start tag-name "v-container")) . 34699) (#(" " 0 1 (tag-type start tag-name "v-container")) . 34699) (#(" " 0 1 (tag-type start tag-name "v-container")) . 34699) (#(" " 0 1 (tag-type start tag-name "v-container")) . 34699) (#(" " 0 1 (tag-type start tag-name "v-container")) . 34699) (#(" " 0 1 (tag-type start tag-name "v-container")) . 34699) (#(" " 0 1 (tag-type start tag-name "v-container")) . 34699) (#(" " 0 1 (tag-type start tag-name "v-container")) . 34699) (#(" " 0 1 (tag-type start tag-name "v-container")) . 34699) (#("
" 0 1 (tag-type start tag-name "v-container")) . 34699) (undo-tree-id83 . -1) (undo-tree-id84 . 1)) nil (25873 18094 146186 925000) 0 nil])
([nil nil ((35788 . 35803)) nil (25873 18094 146179 667000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35924 . 35925) (nil tag-name "v-container" 35924 . 35925) (nil tag-type start 35924 . 35925) (nil tag-end t 35924 . 35925) (nil font-lock-face web-mode-html-tag-bracket-face 35924 . 35925) (nil tag-attr t 35923 . 35924) (nil tag-attr-end 5 35923 . 35924) (nil tag-name "v-container" 35923 . 35924) (nil tag-type start 35923 . 35924) (nil font-lock-face web-mode-html-attr-value-face 35923 . 35924) (nil tag-attr t 35890 . 35923) (nil tag-name "v-container" 35890 . 35923) (nil tag-type start 35890 . 35923) (nil font-lock-face web-mode-html-attr-value-face 35890 . 35923) (nil tag-attr t 35889 . 35890) (nil tag-name "v-container" 35889 . 35890) (nil tag-type start 35889 . 35890) (nil font-lock-face web-mode-html-attr-equal-face 35889 . 35890) (nil tag-attr t 35885 . 35889) (nil tag-name "v-container" 35885 . 35889) (nil tag-type start 35885 . 35889) (nil font-lock-face web-mode-html-attr-name-face 35885 . 35889) (nil tag-attr-beg 0 35884 . 35885) (nil tag-attr t 35884 . 35885) (nil tag-name "v-container" 35884 . 35885) (nil tag-type start 35884 . 35885) (nil font-lock-face web-mode-html-attr-name-face 35884 . 35885) (nil tag-name "v-container" 35883 . 35884) (nil tag-type start 35883 . 35884) (nil tag-attr t 35882 . 35883) (nil tag-attr-end 5 35882 . 35883) (nil tag-name "v-container" 35882 . 35883) (nil tag-type start 35882 . 35883) (nil font-lock-face web-mode-html-attr-value-face 35882 . 35883) (nil tag-attr t 35879 . 35882) (nil tag-name "v-container" 35879 . 35882) (nil tag-type start 35879 . 35882) (nil font-lock-face web-mode-html-attr-value-face 35879 . 35882) (nil tag-attr t 35878 . 35879) (nil tag-name "v-container" 35878 . 35879) (nil tag-type start 35878 . 35879) (nil font-lock-face web-mode-html-attr-value-face 35878 . 35879) (nil tag-attr t 35877 . 35878) (nil tag-name "v-container" 35877 . 35878) (nil tag-type start 35877 . 35878) (nil font-lock-face web-mode-html-attr-value-face 35877 . 35878) (nil tag-attr t 35876 . 35877) (nil tag-name "v-container" 35876 . 35877) (nil tag-type start 35876 . 35877) (nil font-lock-face web-mode-html-attr-value-face 35876 . 35877) (nil tag-attr t 35874 . 35876) (nil tag-name "v-container" 35874 . 35876) (nil tag-type start 35874 . 35876) (nil font-lock-face web-mode-html-attr-value-face 35874 . 35876) (nil tag-attr t 35873 . 35874) (nil tag-name "v-container" 35873 . 35874) (nil tag-type start 35873 . 35874) (nil font-lock-face web-mode-html-attr-value-face 35873 . 35874) (nil tag-attr t 35867 . 35873) (nil tag-name "v-container" 35867 . 35873) (nil tag-type start 35867 . 35873) (nil font-lock-face web-mode-html-attr-value-face 35867 . 35873) (nil tag-attr t 35866 . 35867) (nil tag-name "v-container" 35866 . 35867) (nil tag-type start 35866 . 35867) (nil font-lock-face web-mode-html-attr-equal-face 35866 . 35867) (nil tag-attr t 35862 . 35866) (nil tag-name "v-container" 35862 . 35866) (nil tag-type start 35862 . 35866) (nil font-lock-face web-mode-html-attr-name-face 35862 . 35866) (nil tag-attr-beg 0 35861 . 35862) (nil tag-attr t 35861 . 35862) (nil tag-name "v-container" 35861 . 35862) (nil tag-type start 35861 . 35862) (nil font-lock-face web-mode-html-attr-name-face 35861 . 35862) (nil tag-name "v-container" 35860 . 35861) (nil tag-type start 35860 . 35861) (nil rear-nonsticky t 35859 . 35860) (nil tag-attr t 35859 . 35860) (nil tag-attr-end 4 35859 . 35860) (nil tag-name "v-container" 35859 . 35860) (nil tag-type start 35859 . 35860) (nil font-lock-face web-mode-html-attr-value-face 35859 . 35860) (nil tag-attr t 35835 . 35859) (nil tag-name "v-container" 35835 . 35859) (nil tag-type start 35835 . 35859) (nil font-lock-face web-mode-html-attr-value-face 35835 . 35859) (nil tag-attr t 35834 . 35835) (nil tag-name "v-container" 35834 . 35835) (nil tag-type start 35834 . 35835) (nil font-lock-face web-mode-html-attr-equal-face 35834 . 35835) (nil tag-attr t 35831 . 35834) (nil tag-name "v-container" 35831 . 35834) (nil tag-type start 35831 . 35834) (nil font-lock-face web-mode-html-attr-engine-face 35831 . 35834) (nil tag-attr-beg 2 35830 . 35831) (nil tag-attr t 35830 . 35831) (nil tag-name "v-container" 35830 . 35831) (nil tag-type start 35830 . 35831) (nil font-lock-face web-mode-html-attr-engine-face 35830 . 35831) (nil tag-name "v-container" 35829 . 35830) (nil tag-type start 35829 . 35830) (nil tag-name "v-container" 35818 . 35829) (nil tag-type start 35818 . 35829) (nil font-lock-face web-mode-html-tag-custom-face 35818 . 35829) (nil tag-name "v-container" 35817 . 35818) (nil tag-type start 35817 . 35818) (nil tag-beg 19 35817 . 35818) (nil font-lock-face web-mode-html-tag-bracket-face 35817 . 35818) (35803 . 35925)) nil (25873 18094 146173 322000) 0 nil])
([nil nil ((35912 . 35928) ("              " . -35803) (35925 . 35926)) nil (25873 18094 146149 143000) 0 nil])
([nil nil (("  " . -35926) (35928 . 35942)) nil (25873 18094 146147 653000) 0 nil])
([nil nil ((#("ilter_score.length > 0" 0 22 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-container" tag-attr t)) . 35823) (undo-tree-id81 . -22) (undo-tree-id82 . -22)) nil (25873 18094 146146 211000) 0 nil])
([nil nil ((#("i" 0 1 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-container" tag-attr-end 0 tag-attr t)) . -35818) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("f" 0 1 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-container" tag-attr-end 0 tag-attr t)) . -35819) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("=" 0 1 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-container" tag-attr t)) . -35820) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("\"" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-container" tag-attr t)) . -35821) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("\"" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-container" tag-attr-end 4 tag-attr t)) . 35822) (#("f" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-container" tag-attr t)) . -35822) (undo-tree-id79 . -1) (undo-tree-id80 . -1) 35823) nil (25873 18094 146141 220000) 0 nil])
([nil nil ((35818 . 35822)) nil (25873 18094 146128 492000) 0 nil])
([nil nil ((#("                <v-card
                  outlined
                  class=\"ml-1 mb-1 pb-1\"
                  v-else
                >
                  <v-card-subtitle class=\"pa-0 ma-0 pb-1\">
                    No matches found
                  </v-card-subtitle>
                </v-card>" 16 17 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-card") 17 23 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-card") 23 42 (tag-type start tag-name "v-card") 42 43 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-card" tag-attr t tag-attr-beg 0) 43 49 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-card" tag-attr t) 49 50 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-card" tag-attr-end 0 tag-attr t rear-nonsticky t) 50 51 (tag-type start tag-name "v-card") 51 69 (tag-type start tag-name "v-card") 69 70 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-card" tag-attr t tag-attr-beg 0) 70 74 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-card" tag-attr t) 74 75 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-card" tag-attr t) 75 90 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t) 90 91 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr-end 5 tag-attr t rear-nonsticky t) 91 92 (tag-type start tag-name "v-card") 92 110 (tag-type start tag-name "v-card") 110 111 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-card" tag-attr t tag-attr-beg 2) 111 112 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-card" tag-attr t) 112 113 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-card" tag-attr t) 113 114 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-card" tag-attr t) 114 115 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-card" tag-attr t) 115 116 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-card" tag-attr-end 0 tag-attr t) 116 133 (tag-type start tag-name "v-card") 133 134 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-card") 153 154 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-card-subtitle") 154 169 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-card-subtitle") 169 170 (tag-type start tag-name "v-card-subtitle") 170 171 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-card-subtitle" tag-attr t tag-attr-beg 0) 171 175 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-card-subtitle" tag-attr t) 175 176 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-card-subtitle" tag-attr t) 176 191 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-subtitle" tag-attr t) 191 192 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card-subtitle" tag-attr-end 5 tag-attr t rear-nonsticky t) 192 193 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-card-subtitle") 249 250 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-card-subtitle") 250 251 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-card-subtitle") 251 266 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-card-subtitle") 266 267 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-card-subtitle") 284 285 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-card") 285 286 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-card") 286 292 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-card") 292 293 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-card")) . 35466) (undo-tree-id64 . -24) (undo-tree-id65 . -293) (undo-tree-id66 . -154) (undo-tree-id67 . -24) (undo-tree-id68 . -69) (undo-tree-id69 . -170) (undo-tree-id70 . -293)) nil (25873 18094 146127 89000) 0 nil])
([nil nil (("
" . -35464) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) ("
" . -35465) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) 35466) nil (25873 18094 146115 574000) 0 nil])
([nil nil (("
" . 34794) (undo-tree-id49 . -1)) nil (25873 18094 146098 931000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35883 . 35884) (nil tag-name "v-card" 35883 . 35884) (nil tag-type end 35883 . 35884) (nil tag-end t 35883 . 35884) (nil font-lock-face web-mode-html-tag-bracket-face 35883 . 35884) (nil tag-name "v-card" 35877 . 35883) (nil tag-type end 35877 . 35883) (nil font-lock-face web-mode-html-tag-custom-face 35877 . 35883) (nil tag-name "v-card" 35876 . 35877) (nil tag-type end 35876 . 35877) (nil font-lock-face web-mode-html-tag-bracket-face 35876 . 35877) (nil tag-name "v-card" 35875 . 35876) (nil tag-type end 35875 . 35876) (nil tag-beg 22 35875 . 35876) (nil font-lock-face web-mode-html-tag-bracket-face 35875 . 35876) (nil tag-name "v-card-subtitle" 35857 . 35858) (nil tag-type end 35857 . 35858) (nil tag-end t 35857 . 35858) (nil font-lock-face web-mode-html-tag-bracket-face 35857 . 35858) (nil tag-name "v-card-subtitle" 35842 . 35857) (nil tag-type end 35842 . 35857) (nil font-lock-face web-mode-html-tag-custom-face 35842 . 35857) (nil tag-name "v-card-subtitle" 35841 . 35842) (nil tag-type end 35841 . 35842) (nil font-lock-face web-mode-html-tag-bracket-face 35841 . 35842) (nil tag-name "v-card-subtitle" 35840 . 35841) (nil tag-type end 35840 . 35841) (nil tag-beg 22 35840 . 35841) (nil font-lock-face web-mode-html-tag-bracket-face 35840 . 35841) (nil tag-name "v-card-subtitle" 35783 . 35784) (nil tag-type start 35783 . 35784) (nil tag-end t 35783 . 35784) (nil font-lock-face web-mode-html-tag-bracket-face 35783 . 35784) (nil rear-nonsticky t 35782 . 35783) (nil tag-attr t 35782 . 35783) (nil tag-attr-end 5 35782 . 35783) (nil tag-name "v-card-subtitle" 35782 . 35783) (nil tag-type start 35782 . 35783) (nil font-lock-face web-mode-html-attr-value-face 35782 . 35783) (nil tag-attr t 35767 . 35782) (nil tag-name "v-card-subtitle" 35767 . 35782) (nil tag-type start 35767 . 35782) (nil font-lock-face web-mode-html-attr-value-face 35767 . 35782) (nil tag-attr t 35766 . 35767) (nil tag-name "v-card-subtitle" 35766 . 35767) (nil tag-type start 35766 . 35767) (nil font-lock-face web-mode-html-attr-equal-face 35766 . 35767) (nil tag-attr t 35762 . 35766) (nil tag-name "v-card-subtitle" 35762 . 35766) (nil tag-type start 35762 . 35766) (nil font-lock-face web-mode-html-attr-name-face 35762 . 35766) (nil tag-attr-beg 0 35761 . 35762) (nil tag-attr t 35761 . 35762) (nil tag-name "v-card-subtitle" 35761 . 35762) (nil tag-type start 35761 . 35762) (nil font-lock-face web-mode-html-attr-name-face 35761 . 35762) (nil tag-name "v-card-subtitle" 35760 . 35761) (nil tag-type start 35760 . 35761) (nil tag-name "v-card-subtitle" 35745 . 35760) (nil tag-type start 35745 . 35760) (nil font-lock-face web-mode-html-tag-custom-face 35745 . 35760) (nil tag-name "v-card-subtitle" 35744 . 35745) (nil tag-type start 35744 . 35745) (nil tag-beg 19 35744 . 35745) (nil font-lock-face web-mode-html-tag-bracket-face 35744 . 35745) (nil tag-name "v-card" 35724 . 35725) (nil tag-type start 35724 . 35725) (nil tag-end t 35724 . 35725) (nil font-lock-face web-mode-html-tag-bracket-face 35724 . 35725) (nil tag-name "v-card" 35707 . 35724) (nil tag-type start 35707 . 35724) (nil tag-attr t 35706 . 35707) (nil tag-attr-end 0 35706 . 35707) (nil tag-name "v-card" 35706 . 35707) (nil tag-type start 35706 . 35707) (nil font-lock-face web-mode-html-attr-engine-face 35706 . 35707) (nil tag-attr t 35705 . 35706) (nil tag-name "v-card" 35705 . 35706) (nil tag-type start 35705 . 35706) (nil font-lock-face web-mode-html-attr-engine-face 35705 . 35706) (nil tag-attr t 35704 . 35705) (nil tag-name "v-card" 35704 . 35705) (nil tag-type start 35704 . 35705) (nil font-lock-face web-mode-html-attr-engine-face 35704 . 35705) (nil tag-attr t 35703 . 35704) (nil tag-name "v-card" 35703 . 35704) (nil tag-type start 35703 . 35704) (nil font-lock-face web-mode-html-attr-engine-face 35703 . 35704) (nil tag-attr t 35702 . 35703) (nil tag-name "v-card" 35702 . 35703) (nil tag-type start 35702 . 35703) (nil font-lock-face web-mode-html-attr-engine-face 35702 . 35703) (nil tag-attr-beg 2 35701 . 35702) (nil tag-attr t 35701 . 35702) (nil tag-name "v-card" 35701 . 35702) (nil tag-type start 35701 . 35702) (nil font-lock-face web-mode-html-attr-engine-face 35701 . 35702) (nil tag-name "v-card" 35683 . 35701) (nil tag-type start 35683 . 35701) (nil tag-name "v-card" 35682 . 35683) (nil tag-type start 35682 . 35683) (nil rear-nonsticky t 35681 . 35682) (nil tag-attr t 35681 . 35682) (nil tag-attr-end 5 35681 . 35682) (nil tag-name "v-card" 35681 . 35682) (nil tag-type start 35681 . 35682) (nil font-lock-face web-mode-html-attr-value-face 35681 . 35682) (nil tag-attr t 35666 . 35681) (nil tag-name "v-card" 35666 . 35681) (nil tag-type start 35666 . 35681) (nil font-lock-face web-mode-html-attr-value-face 35666 . 35681) (nil tag-attr t 35665 . 35666) (nil tag-name "v-card" 35665 . 35666) (nil tag-type start 35665 . 35666) (nil font-lock-face web-mode-html-attr-equal-face 35665 . 35666) (nil tag-attr t 35661 . 35665) (nil tag-name "v-card" 35661 . 35665) (nil tag-type start 35661 . 35665) (nil font-lock-face web-mode-html-attr-name-face 35661 . 35665) (nil tag-attr-beg 0 35660 . 35661) (nil tag-attr t 35660 . 35661) (nil tag-name "v-card" 35660 . 35661) (nil tag-type start 35660 . 35661) (nil font-lock-face web-mode-html-attr-name-face 35660 . 35661) (nil tag-name "v-card" 35642 . 35660) (nil tag-type start 35642 . 35660) (nil tag-name "v-card" 35641 . 35642) (nil tag-type start 35641 . 35642) (nil rear-nonsticky t 35640 . 35641) (nil tag-attr t 35640 . 35641) (nil tag-attr-end 0 35640 . 35641) (nil tag-name "v-card" 35640 . 35641) (nil tag-type start 35640 . 35641) (nil font-lock-face web-mode-html-attr-name-face 35640 . 35641) (nil tag-attr t 35634 . 35640) (nil tag-name "v-card" 35634 . 35640) (nil tag-type start 35634 . 35640) (nil font-lock-face web-mode-html-attr-name-face 35634 . 35640) (nil tag-attr-beg 0 35633 . 35634) (nil tag-attr t 35633 . 35634) (nil tag-name "v-card" 35633 . 35634) (nil tag-type start 35633 . 35634) (nil font-lock-face web-mode-html-attr-name-face 35633 . 35634) (nil tag-name "v-card" 35614 . 35633) (nil tag-type start 35614 . 35633) (nil tag-name "v-card" 35608 . 35614) (nil tag-type start 35608 . 35614) (nil font-lock-face web-mode-html-tag-custom-face 35608 . 35614) (nil tag-name "v-card" 35607 . 35608) (nil tag-type start 35607 . 35608) (nil tag-beg 19 35607 . 35608) (nil font-lock-face web-mode-html-tag-bracket-face 35607 . 35608) (35591 . 35884)) nil (25873 18094 146088 233000) 0 nil])
([nil nil ((35592 . 35608) ("                " . 35591) (undo-tree-id19 . -16) (undo-tree-id20 . -16) (undo-tree-id21 . -16) (undo-tree-id22 . -16) (undo-tree-id23 . -16) (undo-tree-id24 . -16) (undo-tree-id25 . -16) (undo-tree-id26 . -16) (undo-tree-id27 . -16) (undo-tree-id28 . -16) (undo-tree-id29 . -16) (undo-tree-id30 . -16) (undo-tree-id31 . -16) (undo-tree-id32 . -16) (undo-tree-id33 . -16) (undo-tree-id34 . -16) (undo-tree-id35 . -16) (undo-tree-id36 . -16) (undo-tree-id37 . -16) (undo-tree-id38 . -16) (undo-tree-id39 . -16) (undo-tree-id40 . -16) (undo-tree-id41 . -16) (undo-tree-id42 . -16) (undo-tree-id43 . -16) (undo-tree-id44 . -16) (undo-tree-id45 . -16) (undo-tree-id46 . -16) (undo-tree-id47 . -16) (undo-tree-id48 . -16) (35607 . 35608)) nil (25873 18094 146048 681000) 0 nil])
([nil nil ((#("
                  v-else" 0 19 (tag-type start tag-name "v-card") 19 20 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-card" tag-attr t tag-attr-beg 2) 20 24 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-card" tag-attr t) 24 25 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-card" tag-attr-end 0 tag-attr t)) . 35683) (undo-tree-id92 . -1) (undo-tree-id93 . -25) (undo-tree-id94 . -25) (undo-tree-id95 . -25) (undo-tree-id96 . -25) (undo-tree-id97 . -25) (undo-tree-id98 . -25) (undo-tree-id99 . -25) (undo-tree-id100 . -25) (undo-tree-id101 . -25) (undo-tree-id102 . -25) (undo-tree-id103 . -25) (undo-tree-id104 . -25) (undo-tree-id105 . -25) (undo-tree-id106 . -25) (t 25873 18094 284545 149000)) nil (25873 18111 112029 318000) 0 nil])
([nil nil (("N" . -35781) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) ("o" . -35782) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) 35783 (t 25873 18111 248426 549000)) nil (25873 18139 385705 533000) 0 nil])
([nil nil ((35781 . 35782)) nil (25873 18139 385500 944000) 0 nil])
([nil nil ((#("b" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . -35679) (undo-tree-id165 . -1) 35680 (t 25873 18139 524230 764000)) nil (25873 18177 358061 544000) 0 nil])
([nil nil ((35679 . 35680)) nil (25873 18177 358052 768000) 0 nil])
([nil nil ((#("1" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-card" tag-attr t)) . 35681)) nil (25873 18177 358049 743000) 0 nil])
([nil nil ((35681 . 35687)) nil (25873 18177 358041 719000) 0 nil])
([nil nil (("0 matches found" . 35786) (undo-tree-id169 . -15) (undo-tree-id170 . -15) (t 25873 18177 491971 398000)) nil (25873 18591 621108 948000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35819 . 35820) (nil block-side t 35819 . 35820) (nil block-end t 35819 . 35820) (nil block-token delimiter-end 35819 . 35820) (nil face (rainbow-delimiters-depth-1-face) 35819 . 35820) (nil block-side t 35818 . 35819) (nil block-token delimiter-end 35818 . 35819) (nil face (rainbow-delimiters-depth-2-face) 35818 . 35819) (nil block-side t 35817 . 35818) (nil face (rainbow-delimiters-depth-3-face) 35817 . 35818) (nil block-side t 35815 . 35817) (nil block-side t 35814 . 35815) (nil block-side t 35813 . 35814) (nil block-side t 35812 . 35813) (nil block-side t 35811 . 35812) (nil block-side t 35810 . 35811) (nil block-side t 35809 . 35810) (nil block-side t 35808 . 35809) (nil block-side t 35807 . 35808) (nil block-side t 35806 . 35807) (nil block-side t 35805 . 35806) (nil block-side t 35804 . 35805) (nil block-side t 35803 . 35804) (nil block-side t 35802 . 35803) (nil block-side t 35801 . 35802) (nil block-side t 35800 . 35801) (nil block-side t 35799 . 35800) (nil block-side t 35798 . 35799) (nil block-side t 35797 . 35798) (nil block-side t 35796 . 35797) (nil block-side t 35795 . 35796) (nil block-side t 35794 . 35795) (nil block-side t 35793 . 35794) (nil block-side t 35792 . 35793) (nil block-side t 35791 . 35792) (nil block-side t 35790 . 35791) (nil face (rainbow-delimiters-depth-3-face) 35790 . 35791) (nil block-side t 35789 . 35790) (nil block-side t 35788 . 35789) (nil block-side t 35787 . 35788) (nil block-token delimiter-beg 35787 . 35788) (nil face (rainbow-delimiters-depth-2-face) 35787 . 35788) (nil block-beg 0 35786 . 35787) (nil block-controls 0 35786 . 35787) (nil block-side t 35786 . 35787) (nil block-token delimiter-beg 35786 . 35787) (nil face (rainbow-delimiters-depth-1-face) 35786 . 35787) (35786 . 35820)) nil (25873 18591 621102 780000) 0 nil])
([nil nil ((#("noMatch1" 0 8 (block-side t)) . 35808) (undo-tree-id166 . -8) (undo-tree-id167 . -8) (undo-tree-id168 . -8)) nil (25873 18591 621089 780000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35822 . 35823) (nil block-side t 35808 . 35823) (35808 . 35823)) nil (25873 18591 621071 65000) 0 nil])
([nil nil ((35786 . 35792) (t 25873 18591 689337 923000)) nil (25873 18633 41611 573000) 0 nil])
([nil nil (("<" . -35786) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#("v" 0 1 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v")) . -35787) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (#("-" 0 1 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-")) . -35788) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (#("s" 0 1 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-s")) . -35789) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (#("t" 0 1 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-st")) . -35790) (undo-tree-id199 . -1) (#("r" 0 1 (font-lock-face web-mode-html-tag-unclosed-face tag-type start tag-name "v-str")) . -35791) (undo-tree-id200 . -1) 35792) nil (25873 18633 41607 952000) 0 nil])
([nil nil ((35786 . 35787)) nil (25873 18633 41510 822000) 0 nil])
([nil nil (("s" . -35786) (undo-tree-id186 . -1) 35787) nil (25873 18633 41509 391000) 0 nil])
([nil nil ((35786 . 35803)) nil (25873 18633 41506 746000) 0 nil])
([nil nil ((35795 . 35817) (35796 . 35816) (#("                      " 0 22 (face whitespace-trailing)) . 35795) (35795 . 35817) (35795 . 35796) ("                    " . 35795) (35794 . 35815)) nil (25873 18633 41505 57000) 0 nil])
([nil nil ((#("                    </strong>{{$t('AnalysisNetwork.filter_no_match')}}
" 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "strong") 21 22 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "strong") 22 28 (font-lock-face web-mode-html-tag-face tag-type end tag-name "strong") 28 29 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "strong") 29 30 (face (rainbow-delimiters-depth-1-face) block-token delimiter-beg block-side t block-controls 0 block-beg 0) 30 31 (face (rainbow-delimiters-depth-2-face) block-token delimiter-beg block-side t) 31 33 (block-side t) 33 34 (face (rainbow-delimiters-depth-3-face) block-side t) 34 51 (block-side t) 51 65 (block-side t) 65 66 (block-side t rear-nonsticky t) 66 67 (block-side t) 67 68 (face (rainbow-delimiters-depth-3-face) block-side t) 68 69 (face (rainbow-delimiters-depth-2-face) block-token delimiter-end block-side t) 69 70 (face (rainbow-delimiters-depth-1-face) block-token delimiter-end block-end t block-side t rear-nonsticky t)) . 35889) (undo-tree-id181 . -51) (undo-tree-id182 . -51) (undo-tree-id183 . -51) (undo-tree-id184 . -29) (undo-tree-id185 . -71) (35866 . 35889) (#("                      
" 0 22 (face whitespace-trailing)) . 35795) (35818 . 35889) 35847) nil (25873 18633 41501 840000) 0 nil])
([nil nil ((35824 . 35845)) nil (25873 18633 41493 673000) 0 nil])
([nil nil ((#("                    {{$t('AnalysisNetwork.filter_no_match')}}
" 20 21 (face (rainbow-delimiters-depth-1-face) block-token delimiter-beg block-side t block-controls 0 block-beg 0) 21 22 (face (rainbow-delimiters-depth-2-face) block-token delimiter-beg block-side t) 22 24 (block-side t) 24 25 (face (rainbow-delimiters-depth-3-face) block-side t) 25 42 (block-side t) 42 56 (block-side t) 56 57 (block-side t rear-nonsticky t) 57 58 (block-side t) 58 59 (face (rainbow-delimiters-depth-3-face) block-side t) 59 60 (face (rainbow-delimiters-depth-2-face) block-token delimiter-end block-side t) 60 61 (face (rainbow-delimiters-depth-1-face) block-token delimiter-end block-end t block-side t rear-nonsticky t)) . 35887) (undo-tree-id179 . -20) (undo-tree-id180 . -62) (35857 . 35887) (#("                    </strong>
" 20 21 (font-lock-face web-mode-html-tag-bracket-face tag-beg 20 tag-type end tag-name "strong") 21 22 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "strong") 22 28 (font-lock-face web-mode-html-tag-face tag-type end tag-name "strong") 28 29 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "strong")) . 35795) (35825 . 35887) 35845) nil (25873 18633 41491 538000) 0 nil])
([nil nil (("
" . 35907) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#(" " 0 1 (face whitespace-trailing)) . 35907) (#(" " 0 1 (face whitespace-trailing)) . 35907)) nil (25873 18633 41485 539000) 0 nil])
([nil nil (("                    " . -35905) (undo-tree-id171 . -2) (undo-tree-id172 . -2) (undo-tree-id173 . -2) (undo-tree-id174 . -2) 35907) nil (25873 18633 41474 518000) 0 nil])
([nil nil ((34584 . 34603) (#("              " 0 14 (font-lock-face web-mode-comment-face tag-type comment)) . 34584) (34572 . 34575) (34540 . 34541) (#(" " 0 1 (font-lock-face web-mode-comment-face tag-type comment)) . -34516) (#(" " 0 1 (font-lock-face web-mode-comment-face tag-type comment)) . -34472) (#(" " 0 1 (font-lock-face web-mode-comment-face tag-type comment)) . -34437) (#(" " 0 1 (font-lock-face web-mode-comment-face tag-type comment)) . -34402) (#(" " 0 1 (font-lock-face web-mode-comment-face tag-type comment)) . -34361) (34329 . 34330) (34282 . 34285) (34235 . 34607) (#("<v-row class=\"pa-0 ma-0\">
                <v-col class=\"pa-0 ma-0\">
                  <v-checkbox
                    v-if=\"save_root == 0\"
                    color=\"primary\"
                    label=\"Private\"
                    v-model=\"private_filter\"
                    dense
                  ></v-checkbox>
                </v-col>
              </v-row>" 0 1 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-row") 1 6 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-row") 6 7 (tag-type start tag-name "v-row") 7 8 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t tag-attr-beg 0) 8 12 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-row" tag-attr t) 12 13 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-row" tag-attr t) 13 23 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr t) 23 24 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-row" tag-attr-end 5 tag-attr t) 24 25 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-row") 42 43 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-col") 43 48 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-col") 48 49 (tag-type start tag-name "v-col") 49 50 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t tag-attr-beg 0) 50 54 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t) 54 55 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-col" tag-attr t) 55 65 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t) 65 66 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr-end 5 tag-attr t) 66 67 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-col") 86 87 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-checkbox") 87 97 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-checkbox") 97 118 (tag-type start tag-name "v-checkbox") 118 119 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-checkbox" tag-attr t tag-attr-beg 2) 119 122 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-checkbox" tag-attr t) 122 123 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-checkbox" tag-attr t) 123 138 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr t) 138 139 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr-end 4 tag-attr t) 139 160 (tag-type start tag-name "v-checkbox") 160 161 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t tag-attr-beg 0) 161 165 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t) 165 166 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-checkbox" tag-attr t) 166 174 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr t) 174 175 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr-end 5 tag-attr t) 175 196 (tag-type start tag-name "v-checkbox") 196 197 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t tag-attr-beg 0) 197 201 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t) 201 202 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-checkbox" tag-attr t) 202 210 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr t) 210 211 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr-end 5 tag-attr t) 211 232 (tag-type start tag-name "v-checkbox") 232 233 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-checkbox" tag-attr t tag-attr-beg 2) 233 239 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-checkbox" tag-attr t) 239 240 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-checkbox" tag-attr t) 240 255 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr t) 255 256 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr-end 7 tag-attr t) 256 277 (tag-type start tag-name "v-checkbox") 277 278 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t tag-attr-beg 0) 278 281 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t) 281 282 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr-end 0 tag-attr t) 282 301 (tag-type start tag-name "v-checkbox") 301 302 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-checkbox") 302 303 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-checkbox") 303 304 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-checkbox") 304 314 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-checkbox") 314 315 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-checkbox") 332 333 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 333 334 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 334 339 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 339 340 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col") 355 356 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-row") 356 357 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-row") 357 362 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-row") 362 363 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-row")) . 34235) (undo-tree-id201 . -363) (undo-tree-id202 . -26) (undo-tree-id203 . -363) (undo-tree-id204 . -363) (t 25873 18633 113088 894000)) nil (25873 19979 432177 961000) 0 nil])
([nil nil ((#("4" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-container" tag-attr t)) . -28651) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) 28652 (t 25873 19979 497505 536000)) nil (25873 20016 400339 129000) 0 nil])
([nil nil ((28651 . 28652)) nil (25873 20016 400298 836000) 0 nil])
([nil nil ((#("5" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-container" tag-attr t)) . -28651) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) 28652 (t 25873 20016 469303 62000)) nil (25873 20055 284013 841000) 0 nil])
([nil nil ((28651 . 28652)) nil (25873 20055 283692 113000) 0 nil])
([nil nil ((#("0" 0 1 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-container" tag-attr t)) . 28652)) nil (25873 20055 283689 893000) 0 nil])
([nil nil ((28652 . 28653)) nil (25873 20055 283682 741000) 0 nil])
([nil nil ((31827 . 31850) (t 25873 20055 349090 254000)) nil (25873 20269 705272 230000) 0 nil])
([nil nil ((31850 . 31865)) nil (25873 20269 705270 633000) 0 nil])
([nil nil ((31858 . 31882) (31859 . 31881) (#("                        " 0 24 (face whitespace-trailing)) . 31858) (31858 . 31882) (31858 . 31859) ("                      " . 31858) (31857 . 31880)) nil (25873 20269 705268 803000) 0 nil])
([nil nil ((nil rear-nonsticky nil 32125 . 32126) (nil tag-name "v-checkbox" 32125 . 32126) (nil tag-type end 32125 . 32126) (nil tag-end t 32125 . 32126) (nil font-lock-face web-mode-html-tag-bracket-face 32125 . 32126) (nil tag-name "v-checkbox" 32115 . 32125) (nil tag-type end 32115 . 32125) (nil font-lock-face web-mode-html-tag-custom-face 32115 . 32125) (nil tag-name "v-checkbox" 32114 . 32115) (nil tag-type end 32114 . 32115) (nil font-lock-face web-mode-html-tag-bracket-face 32114 . 32115) (nil tag-name "v-checkbox" 32113 . 32114) (nil tag-type end 32113 . 32114) (nil tag-beg 22 32113 . 32114) (nil font-lock-face web-mode-html-tag-bracket-face 32113 . 32114) (nil tag-name "v-checkbox" 32112 . 32113) (nil tag-type start 32112 . 32113) (nil tag-end t 32112 . 32113) (nil font-lock-face web-mode-html-tag-bracket-face 32112 . 32113) (nil tag-name "v-checkbox" 32092 . 32112) (nil tag-type start 32092 . 32112) (nil tag-attr t 32091 . 32092) (nil tag-attr-end 0 32091 . 32092) (nil tag-name "v-checkbox" 32091 . 32092) (nil tag-type start 32091 . 32092) (nil font-lock-face web-mode-html-attr-name-face 32091 . 32092) (nil tag-attr t 32088 . 32091) (nil tag-name "v-checkbox" 32088 . 32091) (nil tag-type start 32088 . 32091) (nil font-lock-face web-mode-html-attr-name-face 32088 . 32091) (nil tag-attr-beg 0 32087 . 32088) (nil tag-attr t 32087 . 32088) (nil tag-name "v-checkbox" 32087 . 32088) (nil tag-type start 32087 . 32088) (nil font-lock-face web-mode-html-attr-name-face 32087 . 32088) (nil tag-name "v-checkbox" 32067 . 32087) (nil tag-type start 32067 . 32087) (nil tag-attr t 32066 . 32067) (nil tag-attr-end 7 32066 . 32067) (nil tag-name "v-checkbox" 32066 . 32067) (nil tag-type start 32066 . 32067) (nil font-lock-face web-mode-html-attr-value-face 32066 . 32067) (nil tag-attr t 32051 . 32066) (nil tag-name "v-checkbox" 32051 . 32066) (nil tag-type start 32051 . 32066) (nil font-lock-face web-mode-html-attr-value-face 32051 . 32066) (nil tag-attr t 32050 . 32051) (nil tag-name "v-checkbox" 32050 . 32051) (nil tag-type start 32050 . 32051) (nil font-lock-face web-mode-html-attr-equal-face 32050 . 32051) (nil tag-attr t 32044 . 32050) (nil tag-name "v-checkbox" 32044 . 32050) (nil tag-type start 32044 . 32050) (nil font-lock-face web-mode-html-attr-engine-face 32044 . 32050) (nil tag-attr-beg 2 32043 . 32044) (nil tag-attr t 32043 . 32044) (nil tag-name "v-checkbox" 32043 . 32044) (nil tag-type start 32043 . 32044) (nil font-lock-face web-mode-html-attr-engine-face 32043 . 32044) (nil tag-name "v-checkbox" 32023 . 32043) (nil tag-type start 32023 . 32043) (nil tag-attr t 32022 . 32023) (nil tag-attr-end 5 32022 . 32023) (nil tag-name "v-checkbox" 32022 . 32023) (nil tag-type start 32022 . 32023) (nil font-lock-face web-mode-html-attr-value-face 32022 . 32023) (nil tag-attr t 32014 . 32022) (nil tag-name "v-checkbox" 32014 . 32022) (nil tag-type start 32014 . 32022) (nil font-lock-face web-mode-html-attr-value-face 32014 . 32022) (nil tag-attr t 32013 . 32014) (nil tag-name "v-checkbox" 32013 . 32014) (nil tag-type start 32013 . 32014) (nil font-lock-face web-mode-html-attr-equal-face 32013 . 32014) (nil tag-attr t 32009 . 32013) (nil tag-name "v-checkbox" 32009 . 32013) (nil tag-type start 32009 . 32013) (nil font-lock-face web-mode-html-attr-name-face 32009 . 32013) (nil tag-attr-beg 0 32008 . 32009) (nil tag-attr t 32008 . 32009) (nil tag-name "v-checkbox" 32008 . 32009) (nil tag-type start 32008 . 32009) (nil font-lock-face web-mode-html-attr-name-face 32008 . 32009) (nil tag-name "v-checkbox" 31988 . 32008) (nil tag-type start 31988 . 32008) (nil tag-attr t 31987 . 31988) (nil tag-attr-end 5 31987 . 31988) (nil tag-name "v-checkbox" 31987 . 31988) (nil tag-type start 31987 . 31988) (nil font-lock-face web-mode-html-attr-value-face 31987 . 31988) (nil tag-attr t 31979 . 31987) (nil tag-name "v-checkbox" 31979 . 31987) (nil tag-type start 31979 . 31987) (nil font-lock-face web-mode-html-attr-value-face 31979 . 31987) (nil tag-attr t 31978 . 31979) (nil tag-name "v-checkbox" 31978 . 31979) (nil tag-type start 31978 . 31979) (nil font-lock-face web-mode-html-attr-equal-face 31978 . 31979) (nil tag-attr t 31974 . 31978) (nil tag-name "v-checkbox" 31974 . 31978) (nil tag-type start 31974 . 31978) (nil font-lock-face web-mode-html-attr-name-face 31974 . 31978) (nil tag-attr-beg 0 31973 . 31974) (nil tag-attr t 31973 . 31974) (nil tag-name "v-checkbox" 31973 . 31974) (nil tag-type start 31973 . 31974) (nil font-lock-face web-mode-html-attr-name-face 31973 . 31974) (nil tag-name "v-checkbox" 31953 . 31973) (nil tag-type start 31953 . 31973) (nil tag-attr t 31952 . 31953) (nil tag-attr-end 4 31952 . 31953) (nil tag-name "v-checkbox" 31952 . 31953) (nil tag-type start 31952 . 31953) (nil font-lock-face web-mode-html-attr-value-face 31952 . 31953) (nil tag-attr t 31937 . 31952) (nil tag-name "v-checkbox" 31937 . 31952) (nil tag-type start 31937 . 31952) (nil font-lock-face web-mode-html-attr-value-face 31937 . 31952) (nil tag-attr t 31936 . 31937) (nil tag-name "v-checkbox" 31936 . 31937) (nil tag-type start 31936 . 31937) (nil font-lock-face web-mode-html-attr-equal-face 31936 . 31937) (nil tag-attr t 31933 . 31936) (nil tag-name "v-checkbox" 31933 . 31936) (nil tag-type start 31933 . 31936) (nil font-lock-face web-mode-html-attr-engine-face 31933 . 31936) (nil tag-attr-beg 2 31932 . 31933) (nil tag-attr t 31932 . 31933) (nil tag-name "v-checkbox" 31932 . 31933) (nil tag-type start 31932 . 31933) (nil font-lock-face web-mode-html-attr-engine-face 31932 . 31933) (nil tag-name "v-checkbox" 31912 . 31932) (nil tag-type start 31912 . 31932) (nil tag-name "v-checkbox" 31902 . 31912) (nil tag-type start 31902 . 31912) (nil font-lock-face web-mode-html-tag-custom-face 31902 . 31912) (nil tag-name "v-checkbox" 31901 . 31902) (nil tag-type start 31901 . 31902) (nil tag-beg 19 31901 . 31902) (nil font-lock-face web-mode-html-tag-bracket-face 31901 . 31902) (31882 . 32126)) nil (25873 20269 705259 214000) 0 nil])
([nil nil ((32109 . 32133) (#("                   " 0 19 (tag-type start tag-name "v-checkbox")) . 32109) (32077 . 32103) (#("                   " 0 19 (tag-type start tag-name "v-checkbox")) . 32077) (32026 . 32052) (#("                   " 0 19 (tag-type start tag-name "v-checkbox")) . 32026) (31984 . 32010) (#("                   " 0 19 (tag-type start tag-name "v-checkbox")) . 31984) (31942 . 31968) (#("                   " 0 19 (tag-type start tag-name "v-checkbox")) . 31942) (31894 . 31920) (#("                   " 0 19 (tag-type start tag-name "v-checkbox")) . 31894) ("                   " . -31882) 31858) nil (25873 20269 705220 432000) 0 nil])
([nil nil ((#(":cols=\"5\"" 0 1 (tag-type start tag-name "v-col" block-token delimiter-beg block-side t block-controls 0 block-beg 0) 1 2 (tag-type start tag-name "v-col" block-token delimiter-beg block-side t) 2 3 (tag-type start tag-name "v-col" block-token delimiter-beg block-side t) 3 4 (tag-type start tag-name "v-col" block-token delimiter-beg block-side t) 4 5 (tag-type start tag-name "v-col" block-token delimiter-beg block-side t) 5 7 (tag-type start tag-name "v-col" block-token delimiter-beg block-side t) 7 8 (tag-type start tag-name "v-col" block-side t) 8 9 (tag-type start tag-name "v-col" block-token delimiter-end block-end t block-side t)) . 32226) (undo-tree-id318 . -9) (undo-tree-id319 . -9)) nil (25873 20269 705215 331000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-col")) . -32225) (undo-tree-id316 . -1) (undo-tree-id317 . -1) 32226) nil (25873 20269 705210 66000) 0 nil])
([nil nil ((#(":" 0 1 (font-lock-face web-mode-block-delimiter-face tag-type start tag-name "v-col" block-token delimiter-beg block-side t block-controls 0 block-beg 0)) . 32906)) nil (25873 20269 705193 722000) 0 nil])
([nil nil ((#("
                          v-if=\"save_root == 0\"" 0 27 (tag-type start tag-name "v-checkbox") 27 28 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-checkbox" tag-attr t tag-attr-beg 2) 28 31 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-checkbox" tag-attr t) 31 32 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-checkbox" tag-attr t) 32 47 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr t) 47 48 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr-end 4 tag-attr t)) . 31893) (undo-tree-id320 . -48) (undo-tree-id321 . -1) (undo-tree-id322 . -48) (undo-tree-id323 . -48) (t 25873 20269 778428 237000)) nil (25873 20325 26745 553000) 0 nil])
([nil nil ((31863 . 31864) (31856 . 31864)) nil (25873 20325 26724 939000) 0 nil])
([nil nil ((#("                      <v-col cols=\"1\">
                        <v-checkbox
                          color=\"primary\"
                          label=\"Private\"
                          v-model=\"private_filter\"
                          dense
                        ></v-checkbox>
                      </v-col>" 22 23 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-col") 23 28 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-col") 28 29 (tag-type start tag-name "v-col") 29 30 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t tag-attr-beg 0) 30 31 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t) 31 32 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t) 32 33 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-col" tag-attr t) 33 34 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-col" tag-attr t) 34 36 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr t) 36 37 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-col" tag-attr-end 4 tag-attr t) 37 38 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-col") 63 64 (font-lock-face web-mode-html-tag-bracket-face tag-beg 19 tag-type start tag-name "v-checkbox") 64 74 (font-lock-face web-mode-html-tag-custom-face tag-type start tag-name "v-checkbox") 74 101 (tag-type start tag-name "v-checkbox") 101 102 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t tag-attr-beg 0) 102 106 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t) 106 107 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-checkbox" tag-attr t) 107 115 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr t) 115 116 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr-end 5 tag-attr t) 116 143 (tag-type start tag-name "v-checkbox") 143 144 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t tag-attr-beg 0) 144 148 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t) 148 149 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-checkbox" tag-attr t) 149 157 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr t) 157 158 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr-end 5 tag-attr t) 158 185 (tag-type start tag-name "v-checkbox") 185 186 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-checkbox" tag-attr t tag-attr-beg 2) 186 192 (font-lock-face web-mode-html-attr-engine-face tag-type start tag-name "v-checkbox" tag-attr t) 192 193 (font-lock-face web-mode-html-attr-equal-face tag-type start tag-name "v-checkbox" tag-attr t) 193 208 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr t) 208 209 (font-lock-face web-mode-html-attr-value-face tag-type start tag-name "v-checkbox" tag-attr-end 7 tag-attr t) 209 236 (tag-type start tag-name "v-checkbox") 236 237 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t tag-attr-beg 0) 237 240 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr t) 240 241 (font-lock-face web-mode-html-attr-name-face tag-type start tag-name "v-checkbox" tag-attr-end 0 tag-attr t) 241 266 (tag-type start tag-name "v-checkbox") 266 267 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "v-checkbox") 267 268 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-checkbox") 268 269 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-checkbox") 269 279 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-checkbox") 279 280 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-checkbox" rear-nonsticky t) 303 304 (font-lock-face web-mode-html-tag-bracket-face tag-beg 22 tag-type end tag-name "v-col") 304 305 (font-lock-face web-mode-html-tag-bracket-face tag-type end tag-name "v-col") 305 310 (font-lock-face web-mode-html-tag-custom-face tag-type end tag-name "v-col") 310 311 (font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type end tag-name "v-col")) . 31828) (undo-tree-id334 . -311) (undo-tree-id335 . -27) (undo-tree-id336 . -39) (undo-tree-id337 . -32) (undo-tree-id338 . -63) (undo-tree-id339 . -280) (undo-tree-id340 . -74) (undo-tree-id341 . -74) (undo-tree-id342 . -280) (undo-tree-id343 . -311) (t 25873 20325 93782 416000)) nil (25873 20425 102586 860000) 0 nil])
([nil nil (("
" . -31827) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) 31828) nil (25873 20425 102573 325000) 0 nil])
([nil nil ((34133 . 34154)) nil (25873 20425 102553 344000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34393 . 34394) (nil rear-nonsticky t 34393 . 34394) (nil tag-name "v-checkbox" 34393 . 34394) (nil tag-type end 34393 . 34394) (nil tag-end t 34393 . 34394) (nil font-lock-face web-mode-html-tag-bracket-face 34393 . 34394) (nil tag-name "v-checkbox" 34383 . 34393) (nil tag-type end 34383 . 34393) (nil font-lock-face web-mode-html-tag-custom-face 34383 . 34393) (nil tag-name "v-checkbox" 34382 . 34383) (nil tag-type end 34382 . 34383) (nil font-lock-face web-mode-html-tag-bracket-face 34382 . 34383) (nil tag-name "v-checkbox" 34381 . 34382) (nil tag-type end 34381 . 34382) (nil tag-beg 22 34381 . 34382) (nil font-lock-face web-mode-html-tag-bracket-face 34381 . 34382) (nil tag-name "v-checkbox" 34380 . 34381) (nil tag-type start 34380 . 34381) (nil tag-end t 34380 . 34381) (nil font-lock-face web-mode-html-tag-bracket-face 34380 . 34381) (nil tag-name "v-checkbox" 34355 . 34380) (nil tag-type start 34355 . 34380) (nil tag-attr t 34354 . 34355) (nil tag-attr-end 0 34354 . 34355) (nil tag-name "v-checkbox" 34354 . 34355) (nil tag-type start 34354 . 34355) (nil font-lock-face web-mode-html-attr-name-face 34354 . 34355) (nil tag-attr t 34351 . 34354) (nil tag-name "v-checkbox" 34351 . 34354) (nil tag-type start 34351 . 34354) (nil font-lock-face web-mode-html-attr-name-face 34351 . 34354) (nil tag-attr-beg 0 34350 . 34351) (nil tag-attr t 34350 . 34351) (nil tag-name "v-checkbox" 34350 . 34351) (nil tag-type start 34350 . 34351) (nil font-lock-face web-mode-html-attr-name-face 34350 . 34351) (nil tag-name "v-checkbox" 34323 . 34350) (nil tag-type start 34323 . 34350) (nil tag-attr t 34322 . 34323) (nil tag-attr-end 7 34322 . 34323) (nil tag-name "v-checkbox" 34322 . 34323) (nil tag-type start 34322 . 34323) (nil font-lock-face web-mode-html-attr-value-face 34322 . 34323) (nil tag-attr t 34307 . 34322) (nil tag-name "v-checkbox" 34307 . 34322) (nil tag-type start 34307 . 34322) (nil font-lock-face web-mode-html-attr-value-face 34307 . 34322) (nil tag-attr t 34306 . 34307) (nil tag-name "v-checkbox" 34306 . 34307) (nil tag-type start 34306 . 34307) (nil font-lock-face web-mode-html-attr-equal-face 34306 . 34307) (nil tag-attr t 34300 . 34306) (nil tag-name "v-checkbox" 34300 . 34306) (nil tag-type start 34300 . 34306) (nil font-lock-face web-mode-html-attr-engine-face 34300 . 34306) (nil tag-attr-beg 2 34299 . 34300) (nil tag-attr t 34299 . 34300) (nil tag-name "v-checkbox" 34299 . 34300) (nil tag-type start 34299 . 34300) (nil font-lock-face web-mode-html-attr-engine-face 34299 . 34300) (nil tag-name "v-checkbox" 34272 . 34299) (nil tag-type start 34272 . 34299) (nil tag-attr t 34271 . 34272) (nil tag-attr-end 5 34271 . 34272) (nil tag-name "v-checkbox" 34271 . 34272) (nil tag-type start 34271 . 34272) (nil font-lock-face web-mode-html-attr-value-face 34271 . 34272) (nil tag-attr t 34263 . 34271) (nil tag-name "v-checkbox" 34263 . 34271) (nil tag-type start 34263 . 34271) (nil font-lock-face web-mode-html-attr-value-face 34263 . 34271) (nil tag-attr t 34262 . 34263) (nil tag-name "v-checkbox" 34262 . 34263) (nil tag-type start 34262 . 34263) (nil font-lock-face web-mode-html-attr-equal-face 34262 . 34263) (nil tag-attr t 34258 . 34262) (nil tag-name "v-checkbox" 34258 . 34262) (nil tag-type start 34258 . 34262) (nil font-lock-face web-mode-html-attr-name-face 34258 . 34262) (nil tag-attr-beg 0 34257 . 34258) (nil tag-attr t 34257 . 34258) (nil tag-name "v-checkbox" 34257 . 34258) (nil tag-type start 34257 . 34258) (nil font-lock-face web-mode-html-attr-name-face 34257 . 34258) (nil tag-name "v-checkbox" 34230 . 34257) (nil tag-type start 34230 . 34257) (nil tag-attr t 34229 . 34230) (nil tag-attr-end 5 34229 . 34230) (nil tag-name "v-checkbox" 34229 . 34230) (nil tag-type start 34229 . 34230) (nil font-lock-face web-mode-html-attr-value-face 34229 . 34230) (nil tag-attr t 34221 . 34229) (nil tag-name "v-checkbox" 34221 . 34229) (nil tag-type start 34221 . 34229) (nil font-lock-face web-mode-html-attr-value-face 34221 . 34229) (nil tag-attr t 34220 . 34221) (nil tag-name "v-checkbox" 34220 . 34221) (nil tag-type start 34220 . 34221) (nil font-lock-face web-mode-html-attr-equal-face 34220 . 34221) (nil tag-attr t 34216 . 34220) (nil tag-name "v-checkbox" 34216 . 34220) (nil tag-type start 34216 . 34220) (nil font-lock-face web-mode-html-attr-name-face 34216 . 34220) (nil tag-attr-beg 0 34215 . 34216) (nil tag-attr t 34215 . 34216) (nil tag-name "v-checkbox" 34215 . 34216) (nil tag-type start 34215 . 34216) (nil font-lock-face web-mode-html-attr-name-face 34215 . 34216) (nil tag-name "v-checkbox" 34188 . 34215) (nil tag-type start 34188 . 34215) (nil tag-name "v-checkbox" 34178 . 34188) (nil tag-type start 34178 . 34188) (nil font-lock-face web-mode-html-tag-custom-face 34178 . 34188) (nil tag-name "v-checkbox" 34177 . 34178) (nil tag-type start 34177 . 34178) (nil tag-beg 19 34177 . 34178) (nil font-lock-face web-mode-html-tag-bracket-face 34177 . 34178) (34154 . 34394)) nil (25873 20425 102539 779000) 0 nil])
([nil nil (("                       " . -34154) (undo-tree-id345 . -18) 34172 (t 25873 20425 172687 235000)) nil (25873 20459 225014 127000) 0 nil])
([nil nil ((#("    " 0 4 (tag-type start tag-name "v-checkbox")) . -34188) 34186) nil (25873 20459 224997 883000) 0 nil])
([nil nil ((#("    " 0 4 (tag-type start tag-name "v-checkbox")) . -34226)) nil (25873 20459 224996 264000) 0 nil])
([nil nil ((#("    " 0 4 (tag-type start tag-name "v-checkbox")) . -34264)) nil (25873 20459 224994 779000) 0 nil])
([nil nil ((#("    " 0 4 (tag-type start tag-name "v-checkbox")) . -34311)) nil (25873 20459 224993 474000) 0 nil])
([nil nil ((#("    " 0 4 (tag-type start tag-name "v-checkbox")) . -34337) (undo-tree-id344 . -2) 34339) nil (25873 20459 224991 117000) 0 nil])
([nil nil ((34165 . 34188)) nil (25873 20459 224981 323000) 0 nil])
([nil nil ((34195 . 34204) (34188 . 34196)) nil (25873 20459 224973 143000) 0 nil])
([nil nil ((34165 . 34188) (t 25873 20459 292332 923000)) nil (25873 20689 396987 950000) 0 nil])
([nil nil ((nil rear-nonsticky nil 34208 . 34209) (nil tag-attr t 34208 . 34209) (nil tag-attr-end 4 34208 . 34209) (nil tag-name "v-checkbox" 34208 . 34209) (nil tag-type start 34208 . 34209) (nil font-lock-face web-mode-html-attr-value-face 34208 . 34209) (nil tag-attr t 34193 . 34208) (nil tag-name "v-checkbox" 34193 . 34208) (nil tag-type start 34193 . 34208) (nil font-lock-face web-mode-html-attr-value-face 34193 . 34208) (nil tag-attr t 34192 . 34193) (nil tag-name "v-checkbox" 34192 . 34193) (nil tag-type start 34192 . 34193) (nil font-lock-face web-mode-html-attr-equal-face 34192 . 34193) (nil tag-attr t 34189 . 34192) (nil tag-name "v-checkbox" 34189 . 34192) (nil tag-type start 34189 . 34192) (nil font-lock-face web-mode-html-attr-engine-face 34189 . 34192) (nil tag-attr-beg 2 34188 . 34189) (nil tag-attr t 34188 . 34189) (nil tag-name "v-checkbox" 34188 . 34189) (nil tag-type start 34188 . 34189) (nil font-lock-face web-mode-html-attr-engine-face 34188 . 34189) (34188 . 34209)) nil (25873 20689 396978 580000) 0 nil])
([nil nil ((50400 . 50407) (t 25873 20689 466143 326000)) nil (25873 39693 768711 569000) 0 nil])
([nil nil ((50407 . 50420)) nil (25873 39693 768710 423000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -50419) (undo-tree-id8 . -1) 50420) nil (25873 39693 768709 248000) 0 nil])
([nil nil ((50421 . 50423) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-3-face))) . -50421) (50419 . 50422)) nil (25873 39693 768707 11000) 0 nil])
([nil nil ((50424 . 50430) (#("        " 0 8 (part-side javascript face whitespace-trailing)) . 50423) (undo-tree-id6 . 8) (50423 . 50431) (#("      " 0 6 (part-side javascript)) . 50423) (undo-tree-id7 . -6) (50422 . 50430)) nil (25873 39693 768705 154000) 0 nil])
([nil nil ((50431 . 50432)) nil (25873 39693 768701 291000) 0 nil])
([nil nil ((nil rear-nonsticky nil 50451 . 50452) (nil part-side javascript 50451 . 50452) (nil face (rainbow-delimiters-depth-4-face) 50451 . 50452) (nil part-side javascript 50450 . 50451) (nil part-side javascript 50449 . 50450) (nil face (rainbow-delimiters-depth-4-face) 50449 . 50450) (nil part-side javascript 50448 . 50449) (nil face (rainbow-delimiters-depth-4-face) 50448 . 50449) (nil part-side javascript 50445 . 50448) (nil face web-mode-keyword-face 50445 . 50448) (nil part-side javascript 50435 . 50445) (nil part-side javascript 50430 . 50435) (nil face web-mode-constant-face 50430 . 50435) (nil part-side javascript 50428 . 50430) (nil part-side javascript 50423 . 50428) (nil face web-mode-variable-name-face 50423 . 50428) (50423 . 50452)) nil (25873 39693 768699 513000) 0 nil])
([nil nil ((50423 . 50431) 50436) nil (25873 39693 768695 297000) 0 nil])
([nil nil ((50460 . 50471)) nil (25873 39693 768694 155000) 0 nil])
([nil nil ((#("  " 0 2 (part-side javascript)) . -50469) (50471 . 50472)) nil (25873 39693 768693 108000) 0 nil])
([nil nil ((50460 . 50471)) nil (25873 39693 768691 848000) 0 nil])
([nil nil ((50485 . 50487) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-5-face))) . -50485) (50471 . 50486)) nil (25873 39693 768690 839000) 0 nil])
([nil nil ((50488 . 50498) (#("            " 0 12 (part-side javascript face whitespace-trailing)) . 50487) (undo-tree-id4 . -10) (undo-tree-id5 . 12) (50497 . 50499) (50486 . 50498)) nil (25873 39693 768689 135000) 0 nil])
([nil nil ((50499 . 50510)) nil (25873 39693 768685 513000) 0 nil])
([nil nil ((50510 . 50523)) nil (25873 39693 768684 422000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -50522) (undo-tree-id3 . -1) 50523) nil (25873 39693 768683 266000) 0 nil])
([nil nil ((50487 . 50499)) nil (25873 39693 768680 714000) 0 nil])
([nil nil ((50499 . 50504)) nil (25873 39693 768679 922000) 0 nil])
([nil nil ((50505 . 50507) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-6-face))) . -50505) (50504 . 50506)) nil (25873 39693 768678 796000) 0 nil])
([nil nil ((50506 . 50519)) nil (25873 39693 768677 511000) 0 nil])
([nil nil ((50508 . 50520) (#("              " 0 14 (part-side javascript face whitespace-trailing)) . 50507) (undo-tree-id1 . -12) (undo-tree-id2 . 14) (50519 . 50521) (50519 . 50520)) nil (25873 39693 768676 202000) 0 nil])
([nil nil ((50507 . 50521)) nil (25873 39693 768671 669000) 0 nil])
([nil nil ((50521 . 50528)) nil (25873 39693 768670 782000) 0 nil])
([nil nil ((50528 . 50530)) nil (25873 39693 768669 883000) 0 nil])
([nil nil ((nil rear-nonsticky nil 50577 . 50578) (nil part-side javascript 50577 . 50578) (nil face (rainbow-delimiters-depth-7-face) 50577 . 50578) (nil part-side javascript 50576 . 50577) (nil part-token string 50576 . 50577) (nil syntax-table (15) 50576 . 50577) (nil font-lock-face web-mode-javascript-string-face 50576 . 50577) (nil part-side javascript 50539 . 50576) (nil part-token string 50539 . 50576) (nil font-lock-face web-mode-javascript-string-face 50539 . 50576) (nil part-side javascript 50538 . 50539) (nil part-token string 50538 . 50539) (nil syntax-table (15) 50538 . 50539) (nil font-lock-face web-mode-javascript-string-face 50538 . 50539) (nil part-side javascript 50537 . 50538) (nil face (rainbow-delimiters-depth-7-face) 50537 . 50538) (nil part-side javascript 50534 . 50537) (nil part-side javascript 50530 . 50534) (nil face web-mode-constant-face 50530 . 50534) (50530 . 50578)) nil (25873 39693 768667 974000) 0 nil])
([nil nil ((19891 . 19904)) nil (25873 39693 768663 138000) 0 nil])
([nil nil ((19904 . 19908)) nil (25873 39693 768661 999000) 0 nil])
([nil nil ((nil rear-nonsticky nil 19917 . 19918) (nil tag-attr t 19906 . 19918) (nil tag-name "logtab" 19906 . 19918) (nil tag-type void 19906 . 19918) (nil font-lock-face web-mode-html-attr-value-face 19906 . 19918) (nil face (whitespace-line web-mode-html-attr-value-face) 19906 . 19918) (19906 . 19918)) nil (25873 39693 768660 716000) 0 nil])
([nil nil ((19919 . 19926) (19918 . 19920) (#("[" 0 1 (tag-attr t tag-name "logtab" tag-type void font-lock-face web-mode-html-attr-value-face face (whitespace-line web-mode-html-attr-value-face))) . -19918) (19918 . 19919)) nil (25873 39693 768657 944000) 0 nil])
([nil nil ((19926 . 19931)) nil (25873 39693 768655 520000) 0 nil])
([nil nil ((#(" " 0 1 (tag-attr t tag-name "logtab" tag-type void font-lock-face web-mode-html-attr-value-face face (whitespace-line web-mode-html-attr-value-face))) . -19930) (undo-tree-id0 . -1) 19931) nil (25873 39693 768650 540000) 0 nil])
([nil nil ((#("this.$t('AnalysisNetwork.RightClickMenu.Insert')" 0 4 (part-side javascript face web-mode-constant-face) 4 7 (part-side javascript) 7 8 (part-side javascript face (rainbow-delimiters-depth-7-face)) 8 9 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 9 46 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 46 47 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 47 48 (rear-nonsticky t part-side javascript face (rainbow-delimiters-depth-7-face))) . 50572) (undo-tree-id9 . -48) (undo-tree-id10 . -48) (t 25873 39693 882841 161000)) nil (25873 39992 761419 841000) 0 nil])
([nil nil ((nil rear-nonsticky nil 50579 . 50580) (nil part-side javascript 50579 . 50580) (nil part-side javascript 50578 . 50579) (nil part-side javascript 50577 . 50578) (nil part-side javascript 50576 . 50577) (nil part-side javascript 50575 . 50576) (nil part-side javascript 50574 . 50575) (nil part-side javascript 50573 . 50574) (nil part-side javascript 50572 . 50573) (50572 . 50580)) nil (25873 39992 761407 138000) 0 nil])
([nil nil ((50580 . 50582) (#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . -50580) (50580 . 50581)) nil (25873 39992 761403 828000) 0 nil])
([nil nil ((50572 . 50574) (#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . -50572) (50572 . 50573)) nil (25873 39992 761401 651000) 0 nil])
([nil nil ((#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . 50573)) nil (25873 39992 761399 12000) 0 nil])
([nil nil ((#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . 50582)) nil (25873 39992 761390 540000) 0 nil])
([nil nil ((#("
      mheader_info: {
        cache: false,
        get() {
          const minfo = {
            conn: {
              history: \"dataDiff\"
            }
          }
          return minfo
        }
      }," 0 1 (part-side javascript) 1 7 (part-side javascript) 7 19 (part-side javascript face web-mode-variable-name-face) 19 20 (part-side javascript) 20 21 (part-side javascript) 21 22 (part-side javascript face (rainbow-delimiters-depth-3-face)) 22 23 (part-side javascript) 23 31 (part-side javascript) 31 36 (part-side javascript face web-mode-variable-name-face) 36 38 (part-side javascript) 38 43 (part-side javascript face web-mode-constant-face) 43 53 (part-side javascript) 53 56 (part-side javascript face web-mode-keyword-face) 56 57 (part-side javascript face (rainbow-delimiters-depth-4-face)) 57 58 (part-side javascript face (rainbow-delimiters-depth-4-face)) 58 59 (part-side javascript) 59 60 (rear-nonsticky t part-side javascript face (rainbow-delimiters-depth-4-face)) 60 61 (part-side javascript) 61 71 (part-side javascript) 71 76 (part-side javascript face web-mode-keyword-face) 76 77 (part-side javascript) 77 82 (part-side javascript face web-mode-variable-name-face) 82 84 (part-side javascript) 84 85 (part-side javascript) 85 86 (part-side javascript face (rainbow-delimiters-depth-5-face)) 86 87 (part-side javascript) 87 99 (part-side javascript) 99 103 (part-side javascript face web-mode-variable-name-face) 103 104 (part-side javascript) 104 105 (part-side javascript) 105 106 (part-side javascript face (rainbow-delimiters-depth-6-face)) 106 107 (part-side javascript) 107 121 (part-side javascript) 121 128 (part-side javascript face web-mode-variable-name-face) 128 129 (part-side javascript) 129 130 (part-side javascript) 130 131 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 131 138 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 138 139 (rear-nonsticky t part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 139 140 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 140 141 (part-side javascript syntax-table (15)) 141 153 (part-side javascript) 153 154 (part-side javascript face (rainbow-delimiters-depth-6-face)) 154 155 (part-side javascript) 155 165 (part-side javascript) 165 166 (part-side javascript face (rainbow-delimiters-depth-5-face)) 166 167 (part-side javascript) 167 177 (part-side javascript) 177 183 (part-side javascript face web-mode-keyword-face) 183 189 (part-side javascript) 189 190 (part-side javascript) 190 198 (part-side javascript) 198 199 (part-side javascript face (rainbow-delimiters-depth-4-face)) 199 200 (part-side javascript) 200 206 (part-side javascript) 206 207 (part-side javascript face (rainbow-delimiters-depth-3-face)) 207 208 (part-side javascript)) . 50442) (undo-tree-id32 . -208) (undo-tree-id33 . -23) (undo-tree-id34 . -130) (undo-tree-id35 . -19) (undo-tree-id36 . -44) (undo-tree-id37 . -130) (undo-tree-id38 . -60) (undo-tree-id39 . -44) (undo-tree-id40 . -1) (undo-tree-id41 . -154) (undo-tree-id42 . -130) (undo-tree-id43 . -154) (undo-tree-id44 . -208) (t 25873 39992 907493 813000)) nil (25873 40873 155943 945000) 0 nil])
([nil nil ((48792 . 48793)) nil (25873 40873 155928 941000) 0 nil])
([nil nil ((48795 . 48803) (#("        " 0 8 (part-side javascript)) . 48794) (undo-tree-id31 . -8) (48793 . 48803)) nil (25873 40873 155927 545000) 0 nil])
([nil nil ((48803 . 48817)) nil (25873 40873 155924 619000) 0 nil])
([nil nil ((48817 . 48829)) nil (25873 40873 155923 410000) 0 nil])
([nil nil ((#("t" 0 1 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face)) . -48827) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("a" 0 1 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face)) . -48828) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 48829) nil (25873 40873 155921 779000) 0 nil])
([nil nil ((48827 . 48834)) nil (25873 40873 155915 541000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face)) . -48833) (undo-tree-id26 . -1) 48834) nil (25873 40873 155914 134000) 0 nil])
([nil nil ((48833 . 48842)) nil (25873 40873 155911 457000) 0 nil])
([nil nil ((nil rear-nonsticky nil 48908 . 48909) (nil part-side javascript 48908 . 48909) (nil face (rainbow-delimiters-depth-4-face) 48908 . 48909) (nil part-side javascript 48896 . 48908) (nil part-side javascript 48895 . 48896) (nil syntax-table (15) 48895 . 48896) (nil part-side javascript 48894 . 48895) (nil part-token string 48894 . 48895) (nil font-lock-face web-mode-javascript-string-face 48894 . 48895) (nil rear-nonsticky t 48893 . 48894) (nil part-side javascript 48893 . 48894) (nil part-token string 48893 . 48894) (nil font-lock-face web-mode-javascript-string-face 48893 . 48894) (nil part-side javascript 48886 . 48893) (nil part-token string 48886 . 48893) (nil font-lock-face web-mode-javascript-string-face 48886 . 48893) (nil part-side javascript 48885 . 48886) (nil part-token string 48885 . 48886) (nil syntax-table (15) 48885 . 48886) (nil font-lock-face web-mode-javascript-string-face 48885 . 48886) (nil part-side javascript 48884 . 48885) (nil part-side javascript 48883 . 48884) (nil part-side javascript 48876 . 48883) (nil face web-mode-variable-name-face 48876 . 48883) (nil part-side javascript 48862 . 48876) (nil part-side javascript 48861 . 48862) (nil part-side javascript 48860 . 48861) (nil face (rainbow-delimiters-depth-4-face) 48860 . 48861) (nil part-side javascript 48859 . 48860) (nil part-side javascript 48858 . 48859) (nil part-side javascript 48854 . 48858) (nil face web-mode-variable-name-face 48854 . 48858) (nil part-side javascript 48842 . 48854) (48842 . 48909)) nil (25873 40873 155908 584000) 0 nil])
([nil nil ((#("            " 0 12 (part-side javascript)) . -48842) (undo-tree-id25 . -5) 48847) nil (25873 40873 155899 38000) 0 nil])
([nil nil ((#("    " 0 4 (part-side javascript)) . -48860) 48858) nil (25873 40873 155895 112000) 0 nil])
([nil nil ((#("    " 0 4 (part-side javascript)) . -48888) (undo-tree-id24 . -2) 48890) nil (25873 40873 155893 172000) 0 nil])
([nil nil ((#("dataDiff" 0 8 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . 48870) (undo-tree-id22 . -8) (undo-tree-id23 . -8)) nil (25873 40873 155890 129000) 0 nil])
([nil nil ((48870 . 48876)) nil (25873 40873 155886 617000) 0 nil])
([nil nil ((#("c" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -48870) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("o" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -48871) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("n" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -48872) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("n" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -48873) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("_" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -48874) (undo-tree-id20 . -1) (#("i" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -48875) (undo-tree-id21 . -1) 48876) nil (25873 40873 155883 695000) 0 nil])
([nil nil ((48870 . 48879)) nil (25873 40873 155870 167000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -48878) (undo-tree-id11 . -1) 48879) nil (25873 40873 155868 134000) 0 nil])
([nil nil ((48878 . 48879)) nil (25873 40873 155857 336000) 0 nil])
([nil nil ((48879 . 48882)) nil (25873 40873 155850 809000) 0 nil])
([nil nil ((48833 . 48842) (t 25873 40873 277444 901000)) nil (25873 40923 656094 98000) 0 nil])
([nil nil ((48842 . 48855)) nil (25873 40923 656092 353000) 0 nil])
([nil nil ((48855 . 48857) (#("{" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -48855) (48855 . 48856)) nil (25873 40923 656090 581000) 0 nil])
([nil nil ((48856 . 48865)) nil (25873 40923 656088 595000) 0 nil])
([nil nil ((#("        conn: {
" 0 8 (part-side javascript) 8 12 (part-side javascript face web-mode-variable-name-face) 12 14 (part-side javascript) 14 15 (part-side javascript face (rainbow-delimiters-depth-5-face)) 15 16 (part-side javascript)) . 48883) (undo-tree-id50 . -8) (48873 . 48883) (#("        }
" 0 8 (part-side javascript) 8 9 (part-side javascript face (rainbow-delimiters-depth-4-face)) 9 10 (part-side javascript)) . 48857) (undo-tree-id51 . -8) (48867 . 48883) 48865) nil (25873 40923 656086 140000) 0 nil])
([nil nil ((#("          history: \"conn_history\"
" 0 10 (part-side javascript) 10 17 (part-side javascript face web-mode-variable-name-face) 17 19 (part-side javascript) 19 20 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 20 29 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 29 32 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 32 33 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 33 34 (part-side javascript syntax-table (15))) . 48917) (undo-tree-id46 . -32) (undo-tree-id47 . -20) (undo-tree-id48 . -20) (48907 . 48917) (#("        }
" 0 8 (part-side javascript) 8 9 (part-side javascript face (rainbow-delimiters-depth-5-face)) 9 10 (part-side javascript)) . 48873) (undo-tree-id49 . -8) (48883 . 48917) 48881) nil (25873 40923 656078 864000) 0 nil])
([nil nil ((#("        }
" 0 8 (part-side javascript) 8 9 (rear-nonsticky t part-side javascript face (rainbow-delimiters-depth-3-face)) 9 10 (part-side javascript)) . 48927) (48917 . 48927) (#("        }
" 0 8 (part-side javascript) 8 9 (part-side javascript face (rainbow-delimiters-depth-5-face)) 9 10 (part-side javascript)) . 48907) (undo-tree-id45 . -8) (48917 . 48927) 48915) nil (25873 40923 656067 732000) 0 nil])
([nil nil ((48919 . 48921) (48885 . 48887) (48865 . 48867) 48834) nil (25873 40923 656048 961000) 0 nil])
([nil nil ((48854 . 48856) (t 25873 40923 797557 305000)) nil (25873 40936 611814 498000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -48855) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) 48856) nil (25873 40936 611808 10000) 0 nil])
([nil nil ((#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . -48897) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) 48898 (t 25873 40936 753586 135000)) nil (25873 43053 978382 896000) 0 nil])
([nil nil ((48897 . 48898)) nil (25873 43053 978376 828000) 0 nil])
([nil nil ((#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . -48910) (undo-tree-id72 . -1) 48911) nil (25873 43053 978374 158000) 0 nil])
([nil nil ((48910 . 48911)) nil (25873 43053 978351 173000) 0 nil])
([nil nil ((19904 . 19908) (t 25873 43054 103045 820000)) nil (25873 43269 832412 994000) 0 nil])
([nil nil ((#(" " 0 1 (tag-type start tag-name "v-container")) . 81) (#(" " 0 1 (tag-type start tag-name "v-container")) . 81) (#("
" 0 1 (tag-type start tag-name "v-container")) . 81) (undo-tree-id1 . -1) (t 25873 43269 951576 314000)) nil (25882 48851 695971 755000) 0 nil])
([nil nil ((99297 . 99308)) nil (25882 48885 963984 279000) 0 nil] [nil nil ((99692 . 99705)) ((#("
            " 0 1 (part-side javascript) 1 13 (part-side javascript)) . 99692) (undo-tree-id1040 . -1) (undo-tree-id1041 . -13) (undo-tree-id1042 . -13) (undo-tree-id1043 . -13) (undo-tree-id1044 . -13) (undo-tree-id1045 . -13) (undo-tree-id1046 . -13) (undo-tree-id1047 . -13) (undo-tree-id1048 . -13) (undo-tree-id1049 . -13) (undo-tree-id1050 . -13) (undo-tree-id1051 . -13) (undo-tree-id1052 . -13) (undo-tree-id1053 . -13) (undo-tree-id1054 . -13) (undo-tree-id1055 . -13) (undo-tree-id1056 . -13) (undo-tree-id1057 . -13) (undo-tree-id1058 . -13) (undo-tree-id1059 . -13) (undo-tree-id1060 . -13) (undo-tree-id1061 . -13) (undo-tree-id1062 . -13) (undo-tree-id1063 . -13) (undo-tree-id1064 . -13) (undo-tree-id1065 . -13) (undo-tree-id1066 . -13) (undo-tree-id1067 . -13) (undo-tree-id1068 . -13) (undo-tree-id1069 . -13) (undo-tree-id1070 . -13) (undo-tree-id1071 . -13) (undo-tree-id1072 . -13) (undo-tree-id1073 . -13) (undo-tree-id1074 . -13) (undo-tree-id1075 . -13) (undo-tree-id1076 . -13) (undo-tree-id1077 . -13) (undo-tree-id1078 . -13) (undo-tree-id1079 . -13) (undo-tree-id1080 . -13) (undo-tree-id1081 . -13) (undo-tree-id1082 . -13) (undo-tree-id1083 . -13) (undo-tree-id1084 . -13) (undo-tree-id1085 . -13) (undo-tree-id1086 . -13) (undo-tree-id1087 . -13) (undo-tree-id1088 . -13) (undo-tree-id1089 . -13) (undo-tree-id1090 . -13) (undo-tree-id1091 . -13) (undo-tree-id1092 . -13) (undo-tree-id1093 . -13) (undo-tree-id1094 . -13) (undo-tree-id1095 . -13) (undo-tree-id1096 . -13) (undo-tree-id1097 . -13) (undo-tree-id1098 . -13) (undo-tree-id1099 . -13) (undo-tree-id1100 . -13) (undo-tree-id1101 . -13) (undo-tree-id1102 . -1) (undo-tree-id1103 . -13) (undo-tree-id1104 . -13) (undo-tree-id1105 . -13) (undo-tree-id1106 . -13) (undo-tree-id1107 . -13) (undo-tree-id1108 . -13) (undo-tree-id1109 . -13)) (25882 48851 459472 225000) 0 nil] [nil nil ((99830 . 99845)) ((#("
              " 0 1 (part-side javascript) 1 15 (part-side javascript)) . 99830) (undo-tree-id38 . -1) (undo-tree-id39 . -15) (undo-tree-id40 . -15) (undo-tree-id41 . -15) (undo-tree-id42 . -15) (undo-tree-id43 . -15) (undo-tree-id44 . -15) (undo-tree-id45 . -15) (undo-tree-id46 . -15) (undo-tree-id47 . -15) (undo-tree-id48 . -15) (undo-tree-id49 . -15) (undo-tree-id50 . -15) (undo-tree-id51 . -15) (undo-tree-id52 . -15) (undo-tree-id53 . -15) (undo-tree-id54 . -15) (undo-tree-id55 . -15) (undo-tree-id56 . -15) (undo-tree-id57 . -15) (undo-tree-id58 . -15)) (25882 48730 416242 843000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) part-side javascript)) . 99321) (99320 . 99321) (99319 . 99321) (#("(" 0 1 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . -99319) (99308 . 99320)) nil (25882 48885 963982 684000) 0 nil])
([nil nil ((99705 . 99711)) ((#("this.m" 0 4 (face web-mode-constant-face part-side javascript) 4 5 (part-side javascript) 5 6 (part-side javascript)) . 99705) (undo-tree-id979 . -6) (undo-tree-id980 . -5) (undo-tree-id981 . -5) (undo-tree-id982 . -5) (undo-tree-id983 . -5) (undo-tree-id984 . -5) (undo-tree-id985 . -5) (undo-tree-id986 . -5) (undo-tree-id987 . -5) (undo-tree-id988 . -5) (undo-tree-id989 . -5) (undo-tree-id990 . -5) (undo-tree-id991 . -5) (undo-tree-id992 . -5) (undo-tree-id993 . -5) (undo-tree-id994 . -5) (undo-tree-id995 . -5) (undo-tree-id996 . -5) (undo-tree-id997 . -5) (undo-tree-id998 . -5) (undo-tree-id999 . -5) (undo-tree-id1000 . -5) (undo-tree-id1001 . -5) (undo-tree-id1002 . -5) (undo-tree-id1003 . -5) (undo-tree-id1004 . -5) (undo-tree-id1005 . -5) (undo-tree-id1006 . -5) (undo-tree-id1007 . -5) (undo-tree-id1008 . -5) (undo-tree-id1009 . -5) (undo-tree-id1010 . -5) (undo-tree-id1011 . -5) (undo-tree-id1012 . -5) (undo-tree-id1013 . -5) (undo-tree-id1014 . -5) (undo-tree-id1015 . -5) (undo-tree-id1016 . -5) (undo-tree-id1017 . -5) (undo-tree-id1018 . -5) (undo-tree-id1019 . -5) (undo-tree-id1020 . -5) (undo-tree-id1021 . -5) (undo-tree-id1022 . -5) (undo-tree-id1023 . -5) (undo-tree-id1024 . -5) (undo-tree-id1025 . -5) (undo-tree-id1026 . -5) (undo-tree-id1027 . -5) (undo-tree-id1028 . -5) (undo-tree-id1029 . -5) (undo-tree-id1030 . -5) (undo-tree-id1031 . -5) (undo-tree-id1032 . -5) (undo-tree-id1033 . -6) (undo-tree-id1034 . -6) (undo-tree-id1035 . -6) (undo-tree-id1036 . -6) (undo-tree-id1037 . -6) (undo-tree-id1038 . -6) (undo-tree-id1039 . -6)) (25882 48851 261461 941000) 0 nil])
([nil nil ((99850 . 99851) (#(")" 0 1 (face (rainbow-delimiters-mismatched-face) part-side javascript)) . 99850) (99849 . 99850) (99848 . 99850) (#("(" 0 1 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . -99848) (99845 . 99849)) ((#("if (" 0 2 (face web-mode-keyword-face part-side javascript) 2 3 (part-side javascript) 3 4 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . 99845) (undo-tree-id2 . -3) (undo-tree-id3 . -3) (undo-tree-id4 . -3) (undo-tree-id5 . -3) (undo-tree-id6 . -3) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (undo-tree-id9 . -3) (undo-tree-id10 . -3) (99848 . 99849) (#("()" 0 1 (face (rainbow-delimiters-depth-9-face) part-side javascript) 1 2 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . 99848) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . 99849) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (99850 . 99851) (#(" " 0 1 (part-side javascript)) . 99850) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1)) (25882 48730 166819 640000) 0 nil])
([nil nil ((99321 . 99323) (nil part-token string 99321 . 99322) (nil font-lock-face web-mode-javascript-string-face 99321 . 99322) (nil part-side javascript 99321 . 99322) (99320 . 99322) (#("\"" 0 1 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript)) . -99320) (99320 . 99321)) nil (25882 48885 963980 57000) 0 nil])
([nil nil ((#("m" 0 1 (part-side javascript)) . -99710) (undo-tree-id81 . -1) 99711) ((99710 . 99711)) (25882 48851 59721 570000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -99850) (undo-tree-id0 . -1) 99851) ((99850 . 99851)) (25882 48730 165712 733000) 0 nil])
([nil nil ((99323 . 99330)) nil (25882 48885 963977 633000) 0 nil])
([nil nil ((99710 . 99721)) ((#("tempHeader " 0 10 (part-side javascript) 10 11 (part-side javascript)) . 99710) (undo-tree-id931 . -11) (undo-tree-id932 . -10) (undo-tree-id933 . -10) (undo-tree-id934 . -10) (undo-tree-id935 . -10) (undo-tree-id936 . -10) (undo-tree-id937 . -10) (undo-tree-id938 . -10) (undo-tree-id939 . -10) (undo-tree-id940 . -10) (undo-tree-id941 . -10) (undo-tree-id942 . -10) (undo-tree-id943 . -10) (undo-tree-id944 . -10) (undo-tree-id945 . -10) (undo-tree-id946 . -10) (undo-tree-id947 . -10) (undo-tree-id948 . -10) (undo-tree-id949 . -10) (undo-tree-id950 . -10) (undo-tree-id951 . -10) (undo-tree-id952 . -10) (undo-tree-id953 . -10) (undo-tree-id954 . -10) (undo-tree-id955 . -10) (undo-tree-id956 . -10) (undo-tree-id957 . -10) (undo-tree-id958 . -10) (undo-tree-id959 . -10) (undo-tree-id960 . -10) (undo-tree-id961 . -10) (undo-tree-id962 . -10) (undo-tree-id963 . -10) (undo-tree-id964 . -10) (undo-tree-id965 . -10) (undo-tree-id966 . -10) (undo-tree-id967 . -10) (undo-tree-id968 . -10) (undo-tree-id969 . -10) (undo-tree-id970 . -10) (undo-tree-id971 . -10) (undo-tree-id972 . -11) (undo-tree-id973 . -11) (undo-tree-id974 . -11) (undo-tree-id975 . -11) (undo-tree-id976 . -11) (undo-tree-id977 . -11) (undo-tree-id978 . -11)) (25882 48850 810641 492000) 0 nil])
nil
([nil nil ((#(" " 0 1 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . -99329) (undo-tree-id1110 . -1) 99330) nil (25882 48885 963975 683000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -99720) (undo-tree-id80 . -1) 99721) ((99720 . 99721)) (25882 48850 574511 14000) 0 nil])
([nil nil ((99330 . 99332)) nil (25882 48885 963964 675000) 0 nil])
([nil nil ((99720 . 99722)) ((#(". " 0 1 (part-side javascript) 1 2 (part-side javascript)) . 99720) (undo-tree-id897 . -2) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -2) (undo-tree-id925 . -2) (undo-tree-id926 . -2) (undo-tree-id927 . -2) (undo-tree-id928 . -2) (undo-tree-id929 . -2) (undo-tree-id930 . -2)) (25882 48850 343386 555000) 0 nil])
([nil nil ((nil rear-nonsticky nil 99350 . 99351) (nil part-side javascript 99332 . 99351) (99332 . 99351)) nil (25882 48885 963957 544000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -99721) (undo-tree-id79 . -1) 99722) ((99721 . 99722)) (25882 48850 83186 413000) 0 nil])
([nil nil ((99642 . 99644) (99641 . 99643) (#("[" 0 1 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . -99641) (99633 . 99642) (t 25882 48886 96360 164000)) nil (25882 49099 429 195000) 0 nil])
([nil nil ((99721 . 99726)) ((#("forea" 0 3 (part-side javascript) 3 4 (part-side javascript) 4 5 (part-side javascript)) . 99721) (undo-tree-id882 . -5) (undo-tree-id883 . -3) (undo-tree-id884 . -3) (undo-tree-id885 . -3) (undo-tree-id886 . -3) (undo-tree-id887 . -3) (undo-tree-id888 . -3) (undo-tree-id889 . -3) (undo-tree-id890 . -5) (undo-tree-id891 . -5) (undo-tree-id892 . -5) (undo-tree-id893 . -5) (undo-tree-id894 . -5) (undo-tree-id895 . -5) (undo-tree-id896 . -5)) (25882 48849 844493 244000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -99643) (undo-tree-id1112 . -1) 99644) nil (25882 49099 426 878000) 0 nil])
([nil nil ((#("e" 0 1 (part-side javascript)) . -99724) (undo-tree-id77 . -1) (#("a" 0 1 (part-side javascript)) . -99725) (undo-tree-id78 . -1) 99726) ((99724 . 99726)) (25882 48849 595030 202000) 0 nil])
([nil nil ((99644 . 99648)) nil (25882 49099 423 675000) 0 nil])
([nil nil ((99724 . 99729)) ((#("Each " 0 4 (part-side javascript) 4 5 (part-side javascript)) . 99724) (undo-tree-id808 . -5) (undo-tree-id809 . -4) (undo-tree-id810 . -4) (undo-tree-id811 . -4) (undo-tree-id812 . -4) (undo-tree-id813 . -4) (undo-tree-id814 . -4) (undo-tree-id815 . -4) (undo-tree-id816 . -4) (undo-tree-id817 . -4) (undo-tree-id818 . -4) (undo-tree-id819 . -4) (undo-tree-id820 . -4) (undo-tree-id821 . -4) (undo-tree-id822 . -4) (undo-tree-id823 . -4) (undo-tree-id824 . -4) (undo-tree-id825 . -4) (undo-tree-id826 . -4) (undo-tree-id827 . -4) (undo-tree-id828 . -4) (undo-tree-id829 . -4) (undo-tree-id830 . -4) (undo-tree-id831 . -4) (undo-tree-id832 . -4) (undo-tree-id833 . -4) (undo-tree-id834 . -4) (undo-tree-id835 . -4) (undo-tree-id836 . -4) (undo-tree-id837 . -4) (undo-tree-id838 . -4) (undo-tree-id839 . -4) (undo-tree-id840 . -4) (undo-tree-id841 . -4) (undo-tree-id842 . -4) (undo-tree-id843 . -4) (undo-tree-id844 . -4) (undo-tree-id845 . -4) (undo-tree-id846 . -4) (undo-tree-id847 . -4) (undo-tree-id848 . -4) (undo-tree-id849 . -4) (undo-tree-id850 . -4) (undo-tree-id851 . -4) (undo-tree-id852 . -4) (undo-tree-id853 . -4) (undo-tree-id854 . -4) (undo-tree-id855 . -4) (undo-tree-id856 . -4) (undo-tree-id857 . -4) (undo-tree-id858 . -4) (undo-tree-id859 . -4) (undo-tree-id860 . -4) (undo-tree-id861 . -4) (undo-tree-id862 . -4) (undo-tree-id863 . -4) (undo-tree-id864 . -4) (undo-tree-id865 . -4) (undo-tree-id866 . -4) (undo-tree-id867 . -4) (undo-tree-id868 . -4) (undo-tree-id869 . -4) (undo-tree-id870 . -4) (undo-tree-id871 . -4) (undo-tree-id872 . -4) (undo-tree-id873 . -4) (undo-tree-id874 . -4) (undo-tree-id875 . -5) (undo-tree-id876 . -5) (undo-tree-id877 . -5) (undo-tree-id878 . -5) (undo-tree-id879 . -5) (undo-tree-id880 . -5) (undo-tree-id881 . -5)) (25882 48849 366774 205000) 0 nil])
([nil nil ((#("5" 0 1 (part-side javascript)) . -99642) (undo-tree-id1111 . -1) 99643) nil (25882 49099 422 100000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -99728) (undo-tree-id76 . -1) 99729) ((99728 . 99729)) (25882 48849 170975 946000) 0 nil])
([nil nil ((99642 . 99643)) nil (25882 49099 413 867000) 0 nil])
([nil nil ((99730 . 99731) (#(")" 0 1 (face (rainbow-delimiters-mismatched-face) part-side javascript)) . 99730) (99729 . 99730) (99728 . 99730) (#("(" 0 1 (face (rainbow-delimiters-depth-7-face) part-side javascript)) . -99728) (99728 . 99729)) ((#("(" 0 1 (face (rainbow-delimiters-depth-7-face) part-side javascript)) . 99728) (99728 . 99729) (#("()" 0 1 (face (rainbow-delimiters-depth-7-face) part-side javascript) 1 2 (face (rainbow-delimiters-depth-7-face) part-side javascript)) . 99728) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-7-face) part-side javascript)) . 99729) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (99730 . 99731) (#(" " 0 1 (part-side javascript)) . 99730) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1)) (25882 48848 961519 781000) 0 nil])
([nil nil ((99650 . 99658) (99649 . 99651) (#("[" 0 1 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . -99649) (99637 . 99650)) nil (25882 49099 412 240000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -99730) (undo-tree-id75 . -1) 99731) ((99730 . 99731)) (25882 48848 783607 89000) 0 nil])
([nil nil ((99658 . 99666)) nil (25882 49099 410 221000) 0 nil])
([nil nil ((99729 . 99736)) ((#("ele 0> " 0 3 (part-side javascript) 3 4 (part-side javascript) 4 5 (part-side javascript) 5 6 (part-side javascript) 6 7 (part-side javascript)) . 99729) (undo-tree-id688 . -7) (undo-tree-id689 . -4) (undo-tree-id690 . -4) (undo-tree-id691 . -4) (undo-tree-id692 . -4) (undo-tree-id693 . -4) (undo-tree-id694 . -4) (undo-tree-id695 . -4) (undo-tree-id696 . -4) (undo-tree-id697 . -4) (undo-tree-id698 . -4) (undo-tree-id699 . -4) (undo-tree-id700 . -4) (undo-tree-id701 . -4) (undo-tree-id702 . -4) (undo-tree-id703 . -4) (undo-tree-id704 . -4) (undo-tree-id705 . -4) (undo-tree-id706 . -4) (undo-tree-id707 . -4) (undo-tree-id708 . -4) (undo-tree-id709 . -4) (undo-tree-id710 . -4) (undo-tree-id711 . -4) (undo-tree-id712 . -4) (undo-tree-id713 . -4) (undo-tree-id714 . -4) (undo-tree-id715 . -4) (undo-tree-id716 . -4) (undo-tree-id717 . -4) (undo-tree-id718 . -4) (undo-tree-id719 . -4) (undo-tree-id720 . -4) (undo-tree-id721 . -4) (undo-tree-id722 . -4) (undo-tree-id723 . -4) (undo-tree-id724 . -4) (undo-tree-id725 . -4) (undo-tree-id726 . -7) (undo-tree-id727 . -7) (undo-tree-id728 . -7) (undo-tree-id729 . -7) (undo-tree-id730 . -7) (undo-tree-id731 . -7) (undo-tree-id732 . -7)) (25882 48848 608864 229000) 0 nil])
([nil nil ((99676 . 99678) (#("(" 0 1 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . -99676) (99667 . 99677)) nil (25882 49099 408 761000) 0 nil])
([nil nil ((#("0" 0 1 (part-side javascript)) . -99733) (undo-tree-id72 . -1) (#(">" 0 1 (part-side javascript)) . -99734) (undo-tree-id73 . -1) (#(" " 0 1 (part-side javascript)) . -99735) (undo-tree-id74 . -1) 99736) ((99733 . 99736)) (25882 48848 420424 118000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . 99677)) nil (25882 49099 406 980000) 0 nil])
([nil nil ((99733 . 99737)) ((#("?=> " 0 1 (part-side javascript) 1 2 (part-side javascript) 2 3 (part-side javascript) 3 4 (part-side javascript)) . 99733) (undo-tree-id680 . -4) (undo-tree-id681 . -4) (undo-tree-id682 . -4) (undo-tree-id683 . -4) (undo-tree-id684 . -4) (undo-tree-id685 . -4) (undo-tree-id686 . -4) (undo-tree-id687 . -4)) (25882 48848 223477 493000) 0 nil])
([nil nil ((99684 . 99685)) nil (25882 49099 405 142000) 0 nil])
([nil nil ((#("?" 0 1 (part-side javascript)) . -99733) (undo-tree-id68 . -1) (#("=" 0 1 (part-side javascript)) . -99734) (undo-tree-id69 . -1) (#(">" 0 1 (part-side javascript)) . -99735) (undo-tree-id70 . -1) (#(" " 0 1 (part-side javascript)) . -99736) (undo-tree-id71 . -1) 99737) ((99733 . 99737)) (25882 48847 973693 570000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . 99685) (#("n" 0 1 (part-side javascript)) . 99685) (#("i" 0 1 (part-side javascript)) . 99685) (#(" " 0 1 (part-side javascript)) . 99685)) nil (25882 49099 397 273000) 0 nil])
([nil nil ((99736 . 99738) (#("{" 0 1 (face (rainbow-delimiters-depth-8-face) part-side javascript)) . -99736) (99733 . 99737)) ((#("=> {" 0 3 (part-side javascript) 3 4 (face (rainbow-delimiters-depth-8-face) part-side javascript)) . 99733) (undo-tree-id646 . -3) (undo-tree-id647 . -3) (undo-tree-id648 . -3) (undo-tree-id649 . -3) (undo-tree-id650 . -3) (undo-tree-id651 . -3) (undo-tree-id652 . -3) (undo-tree-id653 . -3) (undo-tree-id654 . -3) (undo-tree-id655 . -3) (undo-tree-id656 . -3) (undo-tree-id657 . -3) (undo-tree-id658 . -3) (undo-tree-id659 . -3) (undo-tree-id660 . -3) (undo-tree-id661 . -3) (undo-tree-id662 . -3) (99736 . 99737) (#("{}" 0 1 (face (rainbow-delimiters-depth-8-face) part-side javascript) 1 2 (face (rainbow-delimiters-depth-8-face) part-side javascript)) . 99736) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1)) (25882 48847 699132 671000) 0 nil])
([nil nil ((99761 . 99771) (#("          " 0 10 (face whitespace-trailing part-side javascript)) . 99760) (99760 . 99770) (99760 . 99761) (t 25882 49099 117620 190000)) nil (25882 49208 708691 405000) 0 nil])
([nil nil ((99739 . 99751) (#("              " 0 14 (face whitespace-trailing part-side javascript)) . 99738) (undo-tree-id66 . -12) (undo-tree-id67 . 14) (99750 . 99752) (99737 . 99751)) ((#("
            
" 0 1 (part-side javascript) 1 13 (face whitespace-trailing part-side javascript) 13 14 (part-side javascript)) . 99737) (undo-tree-id638 . -1) (undo-tree-id639 . -14) (undo-tree-id640 . -13) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (#("  " 0 2 (face whitespace-trailing part-side javascript)) . 99750) (99738 . 99752) (#("            " 0 12 (part-side javascript)) . 99739)) (25882 48847 458976 455000) 0 nil])
([nil nil ((99784 . 99788) (nil part-token string 99784 . 99785) (nil font-lock-face web-mode-javascript-string-face 99784 . 99785) (nil part-side javascript 99784 . 99785) (99783 . 99785) (#("\"" 0 1 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript)) . -99783) (99783 . 99784) (99782 . 99784) (#("(" 0 1 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . -99782) (99771 . 99783)) nil (25882 49208 708688 487000) 0 nil])
([nil nil ((99738 . 99752)) ((#("              " 0 14 (part-side javascript)) . 99738) (undo-tree-id534 . -14) (undo-tree-id535 . -14) (undo-tree-id536 . -14) (undo-tree-id537 . -14) (undo-tree-id538 . -14) (undo-tree-id539 . -14) (undo-tree-id540 . -14) (undo-tree-id541 . -14) (undo-tree-id542 . -14) (undo-tree-id543 . -14) (undo-tree-id544 . -14) (undo-tree-id545 . -14) (undo-tree-id546 . -14) (undo-tree-id547 . -14) (undo-tree-id548 . -14) (undo-tree-id549 . -14) (undo-tree-id550 . -14) (undo-tree-id551 . -14) (undo-tree-id552 . -14) (undo-tree-id553 . -14) (undo-tree-id554 . -14) (undo-tree-id555 . -14) (undo-tree-id556 . -14) (undo-tree-id557 . -14) (undo-tree-id558 . -14) (undo-tree-id559 . -14) (undo-tree-id560 . -14) (undo-tree-id561 . -14) (undo-tree-id562 . -14) (undo-tree-id563 . -14) (undo-tree-id564 . -14) (undo-tree-id565 . -14) (undo-tree-id566 . -14) (undo-tree-id567 . -14) (undo-tree-id568 . -14) (undo-tree-id569 . -14) (undo-tree-id570 . -14) (undo-tree-id571 . -14) (undo-tree-id572 . -14) (undo-tree-id573 . -14) (undo-tree-id574 . -14) (undo-tree-id575 . -14) (undo-tree-id576 . -14) (undo-tree-id577 . -14) (undo-tree-id578 . -14) (undo-tree-id579 . -14) (undo-tree-id580 . -14) (undo-tree-id581 . -14) (undo-tree-id582 . -14) (undo-tree-id583 . -14) (undo-tree-id584 . -14) (undo-tree-id585 . -14) (undo-tree-id586 . -14) (undo-tree-id587 . -14) (undo-tree-id588 . -14) (undo-tree-id589 . -14) (undo-tree-id590 . -14) (undo-tree-id591 . -14) (undo-tree-id592 . -14) (undo-tree-id593 . -14) (undo-tree-id594 . -14) (undo-tree-id595 . -14) (undo-tree-id596 . -14) (undo-tree-id597 . -14) (undo-tree-id598 . -14) (undo-tree-id599 . -14) (undo-tree-id600 . -14) (undo-tree-id601 . -14) (undo-tree-id602 . -14) (undo-tree-id603 . -14) (undo-tree-id604 . -14) (undo-tree-id605 . -14) (undo-tree-id606 . -14) (undo-tree-id607 . -14) (undo-tree-id608 . -14) (undo-tree-id609 . -14) (undo-tree-id610 . -14) (undo-tree-id611 . -14) (undo-tree-id612 . -14) (undo-tree-id613 . -14) (undo-tree-id614 . -14) (undo-tree-id615 . -14) (undo-tree-id616 . -14) (undo-tree-id617 . -14) (undo-tree-id618 . -14) (undo-tree-id619 . -14) (undo-tree-id620 . -14) (undo-tree-id621 . -14) (undo-tree-id622 . -14) (undo-tree-id623 . -14) (undo-tree-id624 . -14) (undo-tree-id625 . -14) (undo-tree-id626 . -14) (undo-tree-id627 . -14) (undo-tree-id628 . -14) (undo-tree-id629 . -14) (undo-tree-id630 . -14) (undo-tree-id631 . -14) (undo-tree-id632 . -14) (undo-tree-id633 . -14) (undo-tree-id634 . -14) (undo-tree-id635 . -14) (undo-tree-id636 . -14) (undo-tree-id637 . -14)) (25882 48847 266252 100000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . -99787) (undo-tree-id1122 . -1) 99788) nil (25882 49208 708684 696000) 0 nil])
([nil nil ((99756 . 99763) (99755 . 99757) (#("(" 0 1 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . -99755) (99752 . 99756)) ((#("if (" 0 2 (face web-mode-keyword-face part-side javascript) 2 3 (part-side javascript) 3 4 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . 99752) (undo-tree-id290 . -3) (undo-tree-id291 . -3) (undo-tree-id292 . -3) (undo-tree-id293 . -3) (undo-tree-id294 . -3) (undo-tree-id295 . -3) (undo-tree-id296 . -3) (undo-tree-id297 . -3) (undo-tree-id298 . -3) (undo-tree-id299 . -3) (undo-tree-id300 . -3) (undo-tree-id301 . -3) (undo-tree-id302 . -3) (undo-tree-id303 . -3) (undo-tree-id304 . -3) (undo-tree-id305 . -3) (undo-tree-id306 . -3) (undo-tree-id307 . -3) (undo-tree-id308 . -3) (undo-tree-id309 . -3) (undo-tree-id310 . -3) (undo-tree-id311 . -3) (undo-tree-id312 . -3) (undo-tree-id313 . -3) (undo-tree-id314 . -3) (undo-tree-id315 . -3) (undo-tree-id316 . -3) (undo-tree-id317 . -3) (undo-tree-id318 . -3) (undo-tree-id319 . -3) (undo-tree-id320 . -3) (undo-tree-id321 . -3) (undo-tree-id322 . -3) (undo-tree-id323 . -3) (undo-tree-id324 . -3) (undo-tree-id325 . -3) (undo-tree-id326 . -3) (undo-tree-id327 . -3) (undo-tree-id328 . -3) (undo-tree-id329 . -3) (undo-tree-id330 . -3) (undo-tree-id331 . -3) (undo-tree-id332 . -3) (undo-tree-id333 . -3) (undo-tree-id334 . -3) (undo-tree-id335 . -3) (undo-tree-id336 . -3) (undo-tree-id337 . -3) (undo-tree-id338 . -3) (undo-tree-id339 . -3) (undo-tree-id340 . -3) (undo-tree-id341 . -3) (undo-tree-id342 . -3) (undo-tree-id343 . -3) (undo-tree-id344 . -3) (undo-tree-id345 . -3) (undo-tree-id346 . -3) (undo-tree-id347 . -3) (undo-tree-id348 . -3) (undo-tree-id349 . -3) (undo-tree-id350 . -3) (undo-tree-id351 . -3) (undo-tree-id352 . -3) (undo-tree-id353 . -3) (undo-tree-id354 . -3) (undo-tree-id355 . -3) (undo-tree-id356 . -3) (undo-tree-id357 . -3) (undo-tree-id358 . -3) (undo-tree-id359 . -3) (undo-tree-id360 . -3) (undo-tree-id361 . -3) (undo-tree-id362 . -3) (undo-tree-id363 . -3) (undo-tree-id364 . -3) (undo-tree-id365 . -3) (undo-tree-id366 . -3) (undo-tree-id367 . -3) (undo-tree-id368 . -3) (undo-tree-id369 . -3) (undo-tree-id370 . -3) (undo-tree-id371 . -3) (undo-tree-id372 . -3) (undo-tree-id373 . -3) (undo-tree-id374 . -3) (undo-tree-id375 . -3) (undo-tree-id376 . -3) (undo-tree-id377 . -3) (undo-tree-id378 . -3) (undo-tree-id379 . -3) (undo-tree-id380 . -3) (undo-tree-id381 . -3) (undo-tree-id382 . -3) (undo-tree-id383 . -3) (undo-tree-id384 . -3) (undo-tree-id385 . -3) (undo-tree-id386 . -3) (99755 . 99756) (#("()" 0 1 (face (rainbow-delimiters-depth-9-face) part-side javascript) 1 2 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . 99755) (undo-tree-id387 . -1) (undo-tree-id388 . -2) (undo-tree-id389 . -2) (undo-tree-id390 . -2) (undo-tree-id391 . -2) (undo-tree-id392 . -2) (undo-tree-id393 . -2) (undo-tree-id394 . -2) (undo-tree-id395 . -2) (undo-tree-id396 . -2) (undo-tree-id397 . -2) (undo-tree-id398 . -2) (undo-tree-id399 . -2) (undo-tree-id400 . -2) (undo-tree-id401 . -2) (undo-tree-id402 . -2) (undo-tree-id403 . -2) (undo-tree-id404 . -2) (undo-tree-id405 . -2) (undo-tree-id406 . -2) (undo-tree-id407 . -2) (undo-tree-id408 . -2) (undo-tree-id409 . -2) (undo-tree-id410 . -2) (undo-tree-id411 . -2) (undo-tree-id412 . -2) (undo-tree-id413 . -2) (undo-tree-id414 . -2) (undo-tree-id415 . -2) (undo-tree-id416 . -2) (undo-tree-id417 . -2) (undo-tree-id418 . -2) (undo-tree-id419 . -2) (undo-tree-id420 . -2) (undo-tree-id421 . -2) (undo-tree-id422 . -2) (undo-tree-id423 . -2) (undo-tree-id424 . -2) (undo-tree-id425 . -2) (undo-tree-id426 . -2) (undo-tree-id427 . -2) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (#("this.me" 0 4 (face web-mode-constant-face part-side javascript) 4 6 (part-side javascript) 6 7 (part-side javascript)) . 99756) (undo-tree-id484 . -7) (undo-tree-id485 . -6) (undo-tree-id486 . -6) (undo-tree-id487 . -6) (undo-tree-id488 . -6) (undo-tree-id489 . -6) (undo-tree-id490 . -6) (undo-tree-id491 . -6) (undo-tree-id492 . -6) (undo-tree-id493 . -6) (undo-tree-id494 . -6) (undo-tree-id495 . -6) (undo-tree-id496 . -6) (undo-tree-id497 . -6) (undo-tree-id498 . -6) (undo-tree-id499 . -6) (undo-tree-id500 . -6) (undo-tree-id501 . -6) (undo-tree-id502 . -6) (undo-tree-id503 . -6) (undo-tree-id504 . -6) (undo-tree-id505 . -6) (undo-tree-id506 . -6) (undo-tree-id507 . -6) (undo-tree-id508 . -6) (undo-tree-id509 . -6) (undo-tree-id510 . -6) (undo-tree-id511 . -6) (undo-tree-id512 . -6) (undo-tree-id513 . -6) (undo-tree-id514 . -6) (undo-tree-id515 . -6) (undo-tree-id516 . -6) (undo-tree-id517 . -6) (undo-tree-id518 . -6) (undo-tree-id519 . -6) (undo-tree-id520 . -6) (undo-tree-id521 . -6) (undo-tree-id522 . -6) (undo-tree-id523 . -6) (undo-tree-id524 . -6) (undo-tree-id525 . -6) (undo-tree-id526 . -6) (undo-tree-id527 . -7) (undo-tree-id528 . -7) (undo-tree-id529 . -7) (undo-tree-id530 . -7) (undo-tree-id531 . -7) (undo-tree-id532 . -7) (undo-tree-id533 . -7)) (25882 48847 56826 118000) 0 nil])
([nil nil ((99787 . 99796)) nil (25882 49208 708682 190000) 0 nil])
([nil nil ((#("e" 0 1 (part-side javascript)) . -99762) (undo-tree-id64 . -1) (undo-tree-id65 . -1) 99763) ((99762 . 99763)) (25882 48846 798836 866000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . -99795) (undo-tree-id1121 . -1) 99796) nil (25882 49208 708680 629000) 0 nil])
([nil nil ((99762 . 99769)) ((#("header " 0 6 (part-side javascript) 6 7 (part-side javascript)) . 99762) (undo-tree-id254 . -7) (undo-tree-id255 . -6) (undo-tree-id256 . -6) (undo-tree-id257 . -6) (undo-tree-id258 . -6) (undo-tree-id259 . -6) (undo-tree-id260 . -6) (undo-tree-id261 . -6) (undo-tree-id262 . -6) (undo-tree-id263 . -6) (undo-tree-id264 . -6) (undo-tree-id265 . -6) (undo-tree-id266 . -6) (undo-tree-id267 . -6) (undo-tree-id268 . -6) (undo-tree-id269 . -6) (undo-tree-id270 . -6) (undo-tree-id271 . -6) (undo-tree-id272 . -6) (undo-tree-id273 . -6) (undo-tree-id274 . -6) (undo-tree-id275 . -6) (undo-tree-id276 . -6) (undo-tree-id277 . -6) (undo-tree-id278 . -6) (undo-tree-id279 . -6) (undo-tree-id280 . -6) (undo-tree-id281 . -6) (undo-tree-id282 . -6) (undo-tree-id283 . -7) (undo-tree-id284 . -7) (undo-tree-id285 . -7) (undo-tree-id286 . -7) (undo-tree-id287 . -7) (undo-tree-id288 . -7) (undo-tree-id289 . -7)) (25882 48846 539632 819000) 0 nil])
([nil nil ((99796 . 99809)) nil (25882 49208 708676 847000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -99768) (undo-tree-id63 . -1) 99769) ((99768 . 99769)) (25882 48846 343025 549000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -99808) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) 99809) nil (25882 49208 708671 422000) 0 nil])
([nil nil ((99768 . 99778)) ((#(".includes " 0 1 (part-side javascript) 1 9 (part-side javascript) 9 10 (part-side javascript)) . 99768) (undo-tree-id232 . -10) (undo-tree-id233 . -9) (undo-tree-id234 . -9) (undo-tree-id235 . -9) (undo-tree-id236 . -9) (undo-tree-id237 . -9) (undo-tree-id238 . -9) (undo-tree-id239 . -9) (undo-tree-id240 . -9) (undo-tree-id241 . -9) (undo-tree-id242 . -9) (undo-tree-id243 . -9) (undo-tree-id244 . -9) (undo-tree-id245 . -9) (undo-tree-id246 . -9) (undo-tree-id247 . -10) (undo-tree-id248 . -10) (undo-tree-id249 . -10) (undo-tree-id250 . -10) (undo-tree-id251 . -10) (undo-tree-id252 . -10) (undo-tree-id253 . -10)) (25882 48846 155155 939000) 0 nil])
([nil nil ((99352 . 99363) (t 25882 49208 826306 192000)) nil (25882 49305 40723 382000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -99777) (undo-tree-id62 . -1) 99778) ((99777 . 99778)) (25882 48845 964976 126000) 0 nil])
([nil nil ((99374 . 99376) (#("(" 0 1 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . -99374) (99363 . 99375)) nil (25882 49305 40722 90000) 0 nil])
([nil nil ((99778 . 99782) (99777 . 99779) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) part-side javascript)) . -99777) (99777 . 99778)) ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) part-side javascript)) . 99777) (99777 . 99778) (#("()" 0 1 (face (rainbow-delimiters-depth-1-face) part-side javascript) 1 2 (face (rainbow-delimiters-depth-1-face) part-side javascript)) . 99777) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("ele " 0 3 (part-side javascript) 3 4 (part-side javascript)) . 99778) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4)) (25882 48845 781057 291000) 0 nil])
([nil nil ((nil rear-nonsticky nil 99404 . 99405) (nil part-side javascript 99404 . 99405) (nil face (rainbow-delimiters-depth-7-face) 99404 . 99405) (nil part-side javascript 99392 . 99404) (nil part-side javascript 99388 . 99392) (nil face web-mode-constant-face 99388 . 99392) (nil part-side javascript 99387 . 99388) (nil face (rainbow-delimiters-depth-7-face) 99387 . 99388) (nil part-side javascript 99379 . 99387) (nil part-side javascript 99375 . 99379) (nil face web-mode-constant-face 99375 . 99379) (99375 . 99405)) nil (25882 49305 40720 38000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -99781) (undo-tree-id61 . -1) 99782) ((99781 . 99782)) (25882 48845 588041 175000) 0 nil])
([nil nil ((99375 . 99377) (#("\"" 0 1 (font-lock-face web-mode-javascript-string-face syntax-table (15) part-token string part-side javascript)) . -99375) (99375 . 99376)) nil (25882 49305 40716 114000) 0 nil])
([nil nil ((99756 . 99757)) ((#("!" 0 1 (part-side javascript)) . 99756)) (25882 48845 445316 452000) 0 nil])
([nil nil ((99376 . 99393)) nil (25882 49305 40714 480000) 0 nil])
([nil nil ((99785 . 99787) (#("{" 0 1 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . -99785) (99784 . 99786)) ((#(" {" 0 1 (part-side javascript) 1 2 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . 99784) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (99785 . 99786) (#("{}" 0 1 (face (rainbow-delimiters-depth-9-face) part-side javascript) 1 2 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . 99785) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1)) (25882 48845 93417 934000) 0 nil])
([nil nil ((#(" " 0 1 (font-lock-face web-mode-javascript-string-face part-token string part-side javascript)) . -99392) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) 99393) nil (25882 49305 40711 390000) 0 nil])
([nil nil ((99788 . 99802) (#("                " 0 16 (face whitespace-trailing part-side javascript)) . 99787) (undo-tree-id59 . 16) (99787 . 99803) (#("              " 0 14 (part-side javascript)) . 99787) (undo-tree-id60 . -14) (99786 . 99802)) ((#("
              
" 0 1 (part-side javascript) 1 15 (face whitespace-trailing part-side javascript) 15 16 (part-side javascript)) . 99786) (undo-tree-id123 . -1) (undo-tree-id124 . -16) (undo-tree-id125 . -15) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (99787 . 99801) (#("                " 0 16 (face whitespace-trailing part-side javascript)) . 99787) (99787 . 99803) (#("              " 0 14 (part-side javascript)) . 99788)) (25882 48844 623353 16000) 0 nil])
([nil nil ((99393 . 99395)) nil (25882 49305 40684 626000) 0 nil])
([nil nil ((99787 . 99803)) ((#("                " 0 16 (part-side javascript)) . 99787) (undo-tree-id111 . -16) (undo-tree-id112 . -16) (undo-tree-id113 . -16) (undo-tree-id114 . -16) (undo-tree-id115 . -16) (undo-tree-id116 . -16) (undo-tree-id117 . -16) (undo-tree-id118 . -16) (undo-tree-id119 . -16) (undo-tree-id120 . -16) (undo-tree-id121 . -16) (undo-tree-id122 . -16)) (25882 48844 255221 947000) 0 nil])
([nil nil ((#(" && this.mheader[this.current_log].includes(item[1])" 0 4 (part-side javascript) 4 8 (face web-mode-constant-face part-side javascript) 8 16 (part-side javascript) 16 17 (face (rainbow-delimiters-depth-9-face) part-side javascript) 17 21 (face web-mode-constant-face part-side javascript) 21 33 (part-side javascript) 33 34 (face (rainbow-delimiters-depth-9-face) part-side javascript) 34 35 (part-side javascript) 35 43 (face web-mode-function-call-face part-side javascript) 43 44 (face (rainbow-delimiters-depth-9-face) part-side javascript) 44 48 (part-side javascript) 48 49 (face (rainbow-delimiters-depth-1-face) part-side javascript) 49 50 (part-side javascript) 50 51 (face (rainbow-delimiters-depth-1-face) part-side javascript) 51 52 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . 99707) (undo-tree-id1135 . -52) (undo-tree-id1136 . -34) (undo-tree-id1137 . -52) (t 25882 49305 158924 300000)) nil (25882 49571 77993 442000) 0 nil])
([nil nil ((99803 . 99804)) ((#("t" 0 1 (part-side javascript)) . 99803)) (25882 48842 628446 265000) 0 nil])
([nil nil ((#("[item[5]]" 0 1 (face (rainbow-delimiters-depth-9-face) part-side javascript) 1 5 (part-side javascript) 5 6 (face (rainbow-delimiters-depth-1-face) part-side javascript) 6 7 (part-side javascript) 7 8 (face (rainbow-delimiters-depth-1-face) part-side javascript) 8 9 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . 99735) (undo-tree-id1208 . -9) (undo-tree-id1209 . -9) (undo-tree-id1210 . -9) (undo-tree-id1211 . -9) (t 25882 49571 192687 912000)) nil (25882 50615 475170 341000) 0 nil])
([nil nil ((99654 . 99664) (#("          " 0 10 (face whitespace-trailing part-side javascript)) . 99653) (99653 . 99663) (99653 . 99654)) ((#("
" 0 1 (part-side javascript)) . 99653) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#("          " 0 10 (face whitespace-trailing part-side javascript)) . 99653) (99653 . 99663) (#("          " 0 10 (part-side javascript)) . 99654) (undo-tree-id100 . -10) (undo-tree-id101 . -10) (undo-tree-id102 . -10) (undo-tree-id103 . -10) (undo-tree-id104 . -10) (undo-tree-id105 . -10) (undo-tree-id106 . -10) (undo-tree-id107 . -10) (undo-tree-id108 . -10) (undo-tree-id109 . -10) (undo-tree-id110 . -10)) (25882 48842 373361 717000) 0 nil])
([nil nil ((99740 . 99742) (#("(" 0 1 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . -99740) (99735 . 99741)) nil (25882 50615 475164 747000) 0 nil])
([nil nil ((99676 . 99681) (99675 . 99677) (#("(" 0 1 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . -99675) (99664 . 99676)) ((#("console.log(" 0 8 (part-side javascript) 8 11 (face web-mode-function-name-face part-side javascript) 11 12 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . 99664) (undo-tree-id82 . -11) (undo-tree-id83 . -11) (99675 . 99676) (#("()" 0 1 (face (rainbow-delimiters-depth-6-face) part-side javascript) 1 2 (face (rainbow-delimiters-depth-6-face) part-side javascript)) . 99675) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("this." 0 4 (face web-mode-constant-face part-side javascript) 4 5 (part-side javascript)) . 99676) (undo-tree-id86 . -3) (undo-tree-id87 . -3)) (25882 48842 369673 979000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . 99741) (#("=" 0 1 (part-side javascript)) . 99741) (#(" " 0 1 (part-side javascript)) . 99741) (#(")" 0 1 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . 99741)) nil (25882 50615 475162 612000) 0 nil])
nil
([nil nil ((99748 . 99750)) nil (25882 50615 475161 52000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -99749) (undo-tree-id1207 . -1) 99750) nil (25882 50615 475159 954000) 0 nil])
([nil nil ((99707 . 99718)) nil (25882 50615 475157 817000) 0 nil])
([nil nil ((#("," 0 1 (part-side javascript)) . -99715) (undo-tree-id1204 . -1) (#("." 0 1 (part-side javascript)) . -99716) (undo-tree-id1205 . -1) (#(" " 0 1 (part-side javascript)) . -99717) (undo-tree-id1206 . -1) 99718) nil (25882 50615 475156 248000) 0 nil])
([nil nil ((99715 . 99717)) nil (25882 50615 475151 538000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -99716) (undo-tree-id1203 . -1) 99717) nil (25882 50615 475150 383000) 0 nil])
([nil nil ((99716 . 99718)) nil (25882 50615 475148 76000) 0 nil])
([nil nil ((#("i" 0 1 (part-side javascript)) . -99716) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (#("n" 0 1 (part-side javascript)) . -99717) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) 99718) nil (25882 50615 475146 435000) 0 nil])
([nil nil ((99724 . 99737) (99723 . 99725) (#("[" 0 1 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . -99723) (99716 . 99724)) nil (25882 50615 475140 82000) 0 nil])
([nil nil ((99737 . 99740)) nil (25882 50615 475137 922000) 0 nil])
([nil nil ((99750 . 99752) (#("(" 0 1 (face (rainbow-delimiters-depth-9-face) part-side javascript)) . -99750) (99741 . 99751)) nil (25882 50615 475136 497000) 0 nil])
([nil nil ((99756 . 99758) (99755 . 99757) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) part-side javascript)) . -99755) (99751 . 99756)) nil (25882 50615 475134 797000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -99757) (undo-tree-id1198 . -1) 99758) nil (25882 50615 475132 916000) 0 nil])
([nil nil ((99995 . 100008)) nil (25882 50615 475130 636000) 0 nil])
([nil nil ((nil rear-nonsticky nil 100062 . 100063) (nil part-side javascript 100062 . 100063) (nil part-side javascript 100061 . 100062) (nil face (rainbow-delimiters-depth-7-face) 100061 . 100062) (nil part-side javascript 100060 . 100061) (nil face (rainbow-delimiters-depth-8-face) 100060 . 100061) (nil part-side javascript 100059 . 100060) (nil part-side javascript 100058 . 100059) (nil face (rainbow-delimiters-depth-8-face) 100058 . 100059) (nil part-side javascript 100050 . 100058) (nil face web-mode-function-call-face 100050 . 100058) (nil part-side javascript 100041 . 100050) (nil part-side javascript 100040 . 100041) (nil face web-mode-function-name-face 100040 . 100041) (nil part-side javascript 100039 . 100040) (nil face (rainbow-delimiters-depth-7-face) 100039 . 100040) (nil part-side javascript 100033 . 100039) (nil face web-mode-function-call-face 100033 . 100039) (nil part-side javascript 100025 . 100033) (nil part-side javascript 100013 . 100025) (nil face web-mode-variable-name-face 100013 . 100025) (nil part-side javascript 100012 . 100013) (nil part-side javascript 100009 . 100012) (nil face web-mode-keyword-face 100009 . 100012) (nil part-side javascript 100008 . 100009) (100008 . 100063)) nil (25882 50615 475128 278000) 0 nil])
([nil nil ((100063 . 100075) (#(" " 0 1 (part-side javascript)) . -100008) (100063 . 100064)) nil (25882 50615 475121 684000) 0 nil])
([nil nil ((#("a" 0 1 (part-side javascript)) . -100027) (undo-tree-id1194 . -1) (#("r" 0 1 (part-side javascript)) . -100028) (undo-tree-id1195 . -1) (#("r" 0 1 (part-side javascript)) . -100029) (undo-tree-id1196 . -1) (#("1" 0 1 (part-side javascript)) . -100030) (undo-tree-id1197 . -1) 100031) nil (25882 50615 475119 431000) 0 nil])
([nil nil ((100027 . 100032)) nil (25882 50615 475112 757000) 0 nil])
([nil nil ((#("," 0 1 (part-side javascript)) . -100029) (undo-tree-id1191 . -1) (#("å" 0 1 (part-side javascript)) . -100030) (undo-tree-id1192 . -1) (#("p" 0 1 (part-side javascript)) . -100031) (undo-tree-id1193 . -1) 100032) nil (25882 50615 475111 106000) 0 nil])
([nil nil ((100029 . 100031)) nil (25882 50615 475106 436000) 0 nil])
([nil nil ((#("t" 0 1 (part-side javascript)) . -100027) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (#("e" 0 1 (part-side javascript)) . -100028) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (#("m" 0 1 (part-side javascript)) . -100029) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (#("p" 0 1 (part-side javascript)) . -100030) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) 100031) nil (25882 50615 475104 342000) 0 nil])
([nil nil ((100027 . 100035)) nil (25882 50615 475094 815000) 0 nil])
([nil nil ((#("e" 0 1 (part-side javascript)) . -100033) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (#("h" 0 1 (part-side javascript)) . -100034) (undo-tree-id1182 . -1) 100035) nil (25882 50615 475093 391000) 0 nil])
([nil nil ((100033 . 100040)) nil (25882 50615 475088 569000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -100039) (undo-tree-id1179 . -1) 100040) nil (25882 50615 475087 365000) 0 nil])
([nil nil ((100040 . 100050) (100039 . 100041) (#("[" 0 1 (face (rainbow-delimiters-depth-7-face) part-side javascript)) . -100039) (100039 . 100040)) nil (25882 50615 475085 39000) 0 nil])
([nil nil ((#("e" 0 1 (part-side javascript)) . -100048) (undo-tree-id1177 . -1) (#("r" 0 1 (part-side javascript)) . -100049) (undo-tree-id1178 . -1) 100050) nil (25882 50615 475082 945000) 0 nil])
([nil nil ((100048 . 100056)) nil (25882 50615 475078 422000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -100055) (undo-tree-id1176 . -1) 100056) nil (25882 50615 475075 54000) 0 nil])
([nil nil ((100053 . 100054)) nil (25882 50615 475067 870000) 0 nil])
([nil nil ((#("a" 0 1 (part-side javascript)) . -100070) (undo-tree-id1172 . -1) (#("r" 0 1 (part-side javascript)) . -100071) (undo-tree-id1173 . -1) (#("r" 0 1 (part-side javascript)) . -100072) (undo-tree-id1174 . -1) (#("2" 0 1 (part-side javascript)) . -100073) (undo-tree-id1175 . -1) 100074) nil (25882 50615 475064 479000) 0 nil])
([nil nil ((100070 . 100076)) nil (25882 50615 475051 831000) 0 nil])
([nil nil ((#("p" 0 1 (part-side javascript)) . -100073) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (#("h" 0 1 (part-side javascript)) . -100074) (undo-tree-id1170 . -1) (#("e" 0 1 (part-side javascript)) . -100075) (undo-tree-id1171 . -1) 100076) nil (25882 50615 475049 242000) 0 nil])
([nil nil ((100073 . 100081)) nil (25882 50615 475036 101000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -100080) (undo-tree-id1167 . -1) 100081) nil (25882 50615 475033 528000) 0 nil])
([nil nil ((100070 . 100071)) nil (25882 50615 475025 7000) 0 nil])
([nil nil ((100284 . 100297) (100265 . 100278) (100222 . 100235) (100172 . 100185) (100121 . 100252) (#("this.mheader[this.current_log].forEach(ele => {
              if (!tempHeader.includes(ele)) {
                tempHeader.unshift(ele)
              }
            })" 0 4 (face web-mode-constant-face part-side javascript) 4 12 (part-side javascript) 12 13 (face (rainbow-delimiters-depth-7-face) part-side javascript) 13 17 (face web-mode-constant-face part-side javascript) 17 29 (part-side javascript) 29 30 (face (rainbow-delimiters-depth-7-face) part-side javascript) 30 31 (part-side javascript) 31 38 (face web-mode-function-call-face part-side javascript) 38 39 (face (rainbow-delimiters-depth-7-face) part-side javascript) 39 42 (face web-mode-function-name-face part-side javascript) 42 46 (part-side javascript) 46 47 (face (rainbow-delimiters-depth-8-face) part-side javascript) 47 48 (part-side javascript) 48 62 (part-side javascript) 62 64 (face web-mode-keyword-face part-side javascript) 64 65 (part-side javascript) 65 66 (face (rainbow-delimiters-depth-9-face) part-side javascript) 66 78 (part-side javascript) 78 86 (face web-mode-function-call-face part-side javascript) 86 87 (face (rainbow-delimiters-depth-1-face) part-side javascript) 87 90 (part-side javascript) 90 91 (face (rainbow-delimiters-depth-1-face) part-side javascript) 91 92 (face (rainbow-delimiters-depth-9-face) part-side javascript) 92 93 (part-side javascript) 93 94 (face (rainbow-delimiters-depth-9-face) part-side javascript) 94 95 (part-side javascript) 95 122 (part-side javascript) 122 129 (face web-mode-function-call-face part-side javascript) 129 130 (face (rainbow-delimiters-depth-1-face) part-side javascript) 130 133 (part-side javascript) 133 134 (face (rainbow-delimiters-depth-1-face) part-side javascript) 134 149 (part-side javascript) 149 150 (face (rainbow-delimiters-depth-9-face) part-side javascript) 150 163 (part-side javascript) 163 164 (face (rainbow-delimiters-depth-8-face) part-side javascript) 164 165 (face (rainbow-delimiters-depth-7-face) part-side javascript)) . 100121) (undo-tree-id1162 . -165) (undo-tree-id1163 . -47) (undo-tree-id1164 . -47) (undo-tree-id1165 . -48) (undo-tree-id1166 . -165)) nil (25882 50618 136677 574000) 0 nil])
([nil nil ((100108 . 100112)) nil (25882 50669 834542 353000) 0 nil] [nil nil ((99108 . 99113)) ((#("Shide" 0 5 (part-side javascript)) . 99108) (undo-tree-id1247 . -5)) (25882 50618 134756 654000) 0 nil] [nil nil ((99108 . 99109)) ((#("H" 0 1 (part-side javascript)) . 99108) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1)) (25882 50615 477127 422000) 0 nil])
([nil nil ((#("h" 0 1 (part-side javascript)) . -100108) (undo-tree-id1252 . -1) (#("t" 0 1 (part-side javascript)) . -100109) (undo-tree-id1253 . -1) (#("i" 0 1 (part-side javascript)) . -100110) (undo-tree-id1254 . -1) (#("s" 0 1 (part-side javascript)) . -100111) (undo-tree-id1255 . -1) 100112) nil (25882 50669 834540 295000) 0 nil])
nil
([nil nil ((#("H" 0 1 (part-side javascript)) . -99108) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) 99109) ((99108 . 99109)) (25882 50615 475007 576000) 0 nil])
([nil nil ((100108 . 100116)) nil (25882 50669 834532 741000) 0 nil])
nil
([nil nil ((#("e" 0 1 (part-side javascript)) . -100115) (undo-tree-id1251 . -1) 100116) nil (25882 50669 834531 399000) 0 nil])
([nil nil ((100115 . 100119)) nil (25882 50669 834528 873000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -100118) (undo-tree-id1250 . -1) 100119) nil (25882 50669 834527 590000) 0 nil])
([nil nil ((100126 . 100128) (100125 . 100127) (#("(" 0 1 (face (rainbow-delimiters-depth-7-face) part-side javascript)) . -100125) (100118 . 100126)) nil (25882 50669 834524 214000) 0 nil])
([nil nil ((100128 . 100139)) nil (25882 50669 834522 44000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -100138) (undo-tree-id1249 . -1) 100139) nil (25882 50669 834519 652000) 0 nil])
([nil nil ((#(";" 0 1 (part-side javascript rear-nonsticky t)) . -100094) (undo-tree-id1248 . -1) 100095) nil (25882 50669 834512 323000) 0 nil])
([nil nil ((100107 . 100120) (t 25882 50669 958001 480000)) nil (25882 50944 751255 910000) 0 nil])
([nil nil ((#("const" 0 5 (face web-mode-keyword-face part-side javascript)) . 99119) (undo-tree-id1256 . -5) (undo-tree-id1257 . -5) (t 25882 50944 874588 204000)) nil (25882 51000 974803 135000) 0 nil])
([nil nil ((99119 . 99122)) nil (25882 51000 974785 689000) 0 nil])
([nil nil ((#("          console.log(\"Log data\", result.data.logData)
          console.log(\"Original mheader\", this.mheader[this.current_log])" 0 18 (part-side javascript) 18 21 (part-side javascript face web-mode-function-call-face) 21 22 (part-side javascript face (rainbow-delimiters-depth-6-face)) 22 23 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 23 31 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 31 32 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 32 53 (part-side javascript) 53 54 (part-side javascript face (rainbow-delimiters-depth-6-face)) 54 73 (part-side javascript) 73 76 (part-side javascript face web-mode-function-call-face) 76 77 (part-side javascript face (rainbow-delimiters-depth-6-face)) 77 78 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 78 94 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 94 95 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 95 97 (part-side javascript) 97 101 (part-side javascript face web-mode-constant-face) 101 109 (part-side javascript) 109 110 (part-side javascript face (rainbow-delimiters-depth-7-face)) 110 114 (part-side javascript face web-mode-constant-face) 114 126 (part-side javascript) 126 127 (part-side javascript face (rainbow-delimiters-depth-7-face)) 127 128 (part-side javascript face (rainbow-delimiters-depth-6-face))) . 99296) (undo-tree-id27 . -55) (undo-tree-id28 . -128) (undo-tree-id29 . -128) (undo-tree-id30 . -128) (t 25882 51001 98749 467000)) nil (25883 55648 839081 973000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript syntax-table (12))) . -99295) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) 99296) nil (25883 55648 839075 518000) 0 nil])
([nil nil ((#("            /* this.mheader[this.current_log].forEach(ele => {
             *   if (!tempHeader.includes(ele)) {
             *     tempHeader.unshift(ele)
             *   }
             * }) */" 0 12 (part-side javascript) 12 13 (part-side javascript part-token comment syntax-table (11) font-lock-face web-mode-javascript-comment-face) 13 15 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 15 19 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 19 28 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 28 32 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 32 46 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 46 53 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 53 54 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 54 57 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 57 80 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 80 82 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 82 96 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 96 104 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 104 143 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 143 150 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 150 195 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face)) . 100021) (undo-tree-id19 . -63) (undo-tree-id20 . -195) (undo-tree-id21 . -195) (undo-tree-id22 . -195)) nil (25883 55648 839069 366000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . -100020) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 100021) nil (25883 55648 839061 491000) 0 nil])
([nil nil ((#(" if tempHeader exist, it inserts the new elements to the front" 0 1 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 1 3 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 3 37 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 37 40 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 40 41 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 41 49 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face) 49 62 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face)) . 99801) (undo-tree-id12 . -62) (undo-tree-id13 . -62) (undo-tree-id14 . -62)) nil (25883 55648 839054 572000) 0 nil])
([nil nil ((99801 . 99814)) nil (25883 55648 839049 922000) 0 nil])
([nil nil ((#("t" 0 1 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face)) . -99813) (undo-tree-id11 . -1) 99814) nil (25883 55648 839048 692000) 0 nil])
([nil nil ((99813 . 99834)) nil (25883 55648 839045 836000) 0 nil])
([nil nil ((99834 . 99846)) nil (25883 55648 839044 747000) 0 nil])
([nil nil ((99846 . 99857)) nil (25883 55648 839043 553000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face)) . -99856) (undo-tree-id10 . -1) 99857) nil (25883 55648 839042 188000) 0 nil])
([nil nil ((99856 . 99870)) nil (25883 55648 839039 488000) 0 nil])
([nil nil ((#("a" 0 1 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face)) . -99867) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#("t" 0 1 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face)) . -99868) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("h" 0 1 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face)) . -99869) (undo-tree-id9 . -1) 99870) nil (25883 55648 839037 499000) 0 nil])
([nil nil ((99867 . 99888)) nil (25883 55648 839029 549000) 0 nil])
([nil nil ((99888 . 99893)) nil (25883 55648 839028 392000) 0 nil])
([nil nil ((#("h" 0 1 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face)) . -99892) (undo-tree-id3 . -1) (undo-tree-id4 . -1) 99893) nil (25883 55648 839026 482000) 0 nil])
([nil nil ((99892 . 99893)) nil (25883 55648 839022 530000) 0 nil])
([nil nil ((#("t" 0 1 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face)) . -99892) (undo-tree-id2 . -1) 99893) nil (25883 55648 839021 82000) 0 nil])
([nil nil ((99892 . 99906)) nil (25883 55648 839018 250000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face)) . -99905) (undo-tree-id1 . -1) 99906) nil (25883 55648 839016 909000) 0 nil])
([nil nil ((99905 . 99920)) nil (25883 55648 839013 193000) 0 nil])
([nil nil ((99920 . 99923)) nil (25883 55648 839012 0) 0 nil])
([nil nil ((#("  " 0 2 (part-side javascript)) . -99918) 99923) nil (25883 55648 839010 359000) 0 nil])
([nil nil ((99921 . 99941)) nil (25883 55648 839008 105000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript part-token comment font-lock-face web-mode-javascript-comment-face)) . -99940) (undo-tree-id0 . -1) 99941) nil (25883 55648 839002 526000) 0 nil])
([nil nil ((#("
          console.log(\"Temp header\", tempHeader)" 0 19 (part-side javascript) 19 22 (part-side javascript face web-mode-function-call-face) 22 23 (part-side javascript face (rainbow-delimiters-depth-6-face)) 23 24 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 24 35 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 35 36 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 36 48 (part-side javascript) 48 49 (part-side javascript face (rainbow-delimiters-depth-6-face))) . 99698) (undo-tree-id31 . -1) (undo-tree-id32 . -49) (undo-tree-id33 . -40) (undo-tree-id34 . -49) (undo-tree-id35 . -49) (t 25883 55648 972379 405000)) nil (25883 55764 297410 972000) 0 nil])
([nil nil ((#("l" 0 1 (part-side javascript)) . -99905) (undo-tree-id41 . -1) (#("e" 0 1 (part-side javascript)) . -99906) (undo-tree-id42 . -1) (#("t" 0 1 (part-side javascript face web-mode-keyword-face)) . -99907) (undo-tree-id43 . -1) 99908 (t 25883 55764 432593 443000)) nil (25883 55782 962234 755000) 0 nil])
([nil nil ((99905 . 99912)) nil (25883 55782 962227 988000) 0 nil])
([nil nil ((#("b" 0 1 (part-side javascript)) . -99908) (undo-tree-id37 . -1) (#("s" 0 1 (part-side javascript)) . -99909) (undo-tree-id38 . -1) (#("t" 0 1 (part-side javascript)) . -99910) (undo-tree-id39 . -1) (#(" " 0 1 (part-side javascript)) . -99911) (undo-tree-id40 . -1) 99912) nil (25883 55782 962225 204000) 0 nil])
([nil nil ((99908 . 99911)) nil (25883 55782 962215 621000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -99910) (undo-tree-id36 . -1) 99911) nil (25883 55782 962209 519000) 0 nil])
([nil nil ((79553 . 79566) (t 25883 55783 92627 756000)) nil (25883 57584 278697 729000) 0 nil])
([nil nil ((79566 . 79571)) nil (25883 57584 278696 526000) 0 nil])
([nil nil ((#("i" 0 1 (part-side javascript)) . -79567) (undo-tree-id57 . -1) (#("b" 0 1 (part-side javascript)) . -79568) (undo-tree-id58 . -1) (#("s" 0 1 (part-side javascript)) . -79569) (undo-tree-id59 . -1) (#("i" 0 1 (part-side javascript)) . -79570) (undo-tree-id60 . -1) 79571) nil (25883 57584 278694 317000) 0 nil])
([nil nil ((79578 . 79586) (79577 . 79579) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-7-face))) . -79577) (79567 . 79578)) nil (25883 57584 278687 128000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -79585) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) 79586) nil (25883 57584 278680 590000) 0 nil])
([nil nil ((35523 . 35544) (t 25883 57584 423986 755000)) nil (25883 57872 263017 730000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35618 . 35619) (nil tag-name "v-tooltip" 35618 . 35619) (nil tag-type start 35618 . 35619) (nil tag-end t 35618 . 35619) (nil font-lock-face web-mode-html-tag-bracket-face 35618 . 35619) (nil tag-name "v-tooltip" 35607 . 35618) (nil tag-type start 35607 . 35618) (nil tag-attr t 35606 . 35607) (nil tag-attr-end 0 35606 . 35607) (nil tag-name "v-tooltip" 35606 . 35607) (nil tag-type start 35606 . 35607) (nil font-lock-face web-mode-html-attr-name-face 35606 . 35607) (nil tag-attr t 35602 . 35606) (nil tag-name "v-tooltip" 35602 . 35606) (nil tag-type start 35602 . 35606) (nil font-lock-face web-mode-html-attr-name-face 35602 . 35606) (nil tag-attr-beg 0 35601 . 35602) (nil tag-attr t 35601 . 35602) (nil tag-name "v-tooltip" 35601 . 35602) (nil tag-type start 35601 . 35602) (nil font-lock-face web-mode-html-attr-name-face 35601 . 35602) (nil tag-name "v-tooltip" 35588 . 35601) (nil tag-type start 35588 . 35601) (nil tag-attr t 35587 . 35588) (nil tag-attr-end 7 35587 . 35588) (nil tag-name "v-tooltip" 35587 . 35588) (nil tag-type start 35587 . 35588) (nil font-lock-face web-mode-html-attr-value-face 35587 . 35588) (nil tag-attr t 35585 . 35587) (nil tag-name "v-tooltip" 35585 . 35587) (nil tag-type start 35585 . 35587) (nil font-lock-face web-mode-html-attr-value-face 35585 . 35587) (nil tag-attr t 35584 . 35585) (nil tag-name "v-tooltip" 35584 . 35585) (nil tag-type start 35584 . 35585) (nil font-lock-face web-mode-html-attr-equal-face 35584 . 35585) (nil tag-attr t 35578 . 35584) (nil tag-name "v-tooltip" 35578 . 35584) (nil tag-type start 35578 . 35584) (nil font-lock-face web-mode-html-attr-name-face 35578 . 35584) (nil tag-attr-beg 0 35577 . 35578) (nil tag-attr t 35577 . 35578) (nil tag-name "v-tooltip" 35577 . 35578) (nil tag-type start 35577 . 35578) (nil font-lock-face web-mode-html-attr-name-face 35577 . 35578) (nil tag-name "v-tooltip" 35564 . 35577) (nil tag-type start 35564 . 35577) (nil tag-name "v-tooltip" 35555 . 35564) (nil tag-type start 35555 . 35564) (nil font-lock-face web-mode-html-tag-custom-face 35555 . 35564) (nil tag-name "v-tooltip" 35554 . 35555) (nil tag-type start 35554 . 35555) (nil tag-beg 19 35554 . 35555) (nil font-lock-face web-mode-html-tag-bracket-face 35554 . 35555) (35544 . 35619)) nil (25883 57872 263013 702000) 0 nil])
([nil nil ((35618 . 35638) (#("          " 0 10 (tag-name "v-tooltip" tag-type start)) . 35618) (35589 . 35611) (#("            " 0 12 (tag-name "v-tooltip" tag-type start)) . 35589) (35555 . 35577) (#("            " 0 12 (tag-name "v-tooltip" tag-type start)) . 35555) ("          " . -35544) 35524) nil (25883 57872 263000 655000) 0 nil])
([nil nil ((35639 . 35662)) nil (25883 57872 262998 305000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35704 . 35705) (nil tag-name "template" 35704 . 35705) (nil tag-type start 35704 . 35705) (nil tag-end t 35704 . 35705) (nil font-lock-face web-mode-html-tag-bracket-face 35704 . 35705) (nil block-side t 35703 . 35704) (nil block-end t 35703 . 35704) (nil block-token delimiter-end 35703 . 35704) (nil tag-attr t 35703 . 35704) (nil tag-attr-end 16 35703 . 35704) (nil tag-name "template" 35703 . 35704) (nil tag-type start 35703 . 35704) (nil font-lock-face web-mode-block-delimiter-face 35703 . 35704) (nil block-side t 35701 . 35703) (nil tag-attr t 35701 . 35703) (nil tag-name "template" 35701 . 35703) (nil tag-type start 35701 . 35703) (nil block-side t 35700 . 35701) (nil tag-attr t 35700 . 35701) (nil tag-name "template" 35700 . 35701) (nil tag-type start 35700 . 35701) (nil face web-mode-variable-name-face 35700 . 35701) (nil block-side t 35699 . 35700) (nil tag-attr t 35699 . 35700) (nil tag-name "template" 35699 . 35700) (nil tag-type start 35699 . 35700) (nil face web-mode-variable-name-face 35699 . 35700) (nil block-side t 35698 . 35699) (nil tag-attr t 35698 . 35699) (nil tag-name "template" 35698 . 35699) (nil tag-type start 35698 . 35699) (nil face web-mode-variable-name-face 35698 . 35699) (nil block-side t 35697 . 35698) (nil tag-attr t 35697 . 35698) (nil tag-name "template" 35697 . 35698) (nil tag-type start 35697 . 35698) (nil face web-mode-variable-name-face 35697 . 35698) (nil block-side t 35696 . 35697) (nil tag-attr t 35696 . 35697) (nil tag-name "template" 35696 . 35697) (nil tag-type start 35696 . 35697) (nil face web-mode-variable-name-face 35696 . 35697) (nil block-side t 35694 . 35696) (nil tag-attr t 35694 . 35696) (nil tag-name "template" 35694 . 35696) (nil tag-type start 35694 . 35696) (nil block-side t 35693 . 35694) (nil tag-attr t 35693 . 35694) (nil tag-name "template" 35693 . 35694) (nil tag-type start 35693 . 35694) (nil face web-mode-variable-name-face 35693 . 35694) (nil block-side t 35692 . 35693) (nil tag-attr t 35692 . 35693) (nil tag-name "template" 35692 . 35693) (nil tag-type start 35692 . 35693) (nil face web-mode-variable-name-face 35692 . 35693) (nil block-side t 35690 . 35692) (nil tag-attr t 35690 . 35692) (nil tag-name "template" 35690 . 35692) (nil tag-type start 35690 . 35692) (nil block-side t 35689 . 35690) (nil block-token delimiter-beg 35689 . 35690) (nil tag-attr t 35689 . 35690) (nil tag-name "template" 35689 . 35690) (nil tag-type start 35689 . 35690) (nil font-lock-face web-mode-block-delimiter-face 35689 . 35690) (nil block-side t 35688 . 35689) (nil block-token delimiter-beg 35688 . 35689) (nil tag-attr t 35688 . 35689) (nil tag-name "template" 35688 . 35689) (nil tag-type start 35688 . 35689) (nil font-lock-face web-mode-block-delimiter-face 35688 . 35689) (nil block-side t 35687 . 35688) (nil block-token delimiter-beg 35687 . 35688) (nil tag-attr t 35687 . 35688) (nil tag-name "template" 35687 . 35688) (nil tag-type start 35687 . 35688) (nil font-lock-face web-mode-block-delimiter-face 35687 . 35688) (nil block-side t 35686 . 35687) (nil block-token delimiter-beg 35686 . 35687) (nil tag-attr t 35686 . 35687) (nil tag-name "template" 35686 . 35687) (nil tag-type start 35686 . 35687) (nil font-lock-face web-mode-block-delimiter-face 35686 . 35687) (nil block-side t 35685 . 35686) (nil block-token delimiter-beg 35685 . 35686) (nil tag-attr t 35685 . 35686) (nil tag-name "template" 35685 . 35686) (nil tag-type start 35685 . 35686) (nil font-lock-face web-mode-block-delimiter-face 35685 . 35686) (nil block-side t 35684 . 35685) (nil block-token delimiter-beg 35684 . 35685) (nil tag-attr t 35684 . 35685) (nil tag-name "template" 35684 . 35685) (nil tag-type start 35684 . 35685) (nil font-lock-face web-mode-block-delimiter-face 35684 . 35685) (nil block-side t 35683 . 35684) (nil block-token delimiter-beg 35683 . 35684) (nil tag-attr t 35683 . 35684) (nil tag-name "template" 35683 . 35684) (nil tag-type start 35683 . 35684) (nil font-lock-face web-mode-block-delimiter-face 35683 . 35684) (nil block-side t 35682 . 35683) (nil block-token delimiter-beg 35682 . 35683) (nil tag-attr t 35682 . 35683) (nil tag-name "template" 35682 . 35683) (nil tag-type start 35682 . 35683) (nil font-lock-face web-mode-block-delimiter-face 35682 . 35683) (nil block-side t 35681 . 35682) (nil block-token delimiter-beg 35681 . 35682) (nil tag-attr t 35681 . 35682) (nil tag-name "template" 35681 . 35682) (nil tag-type start 35681 . 35682) (nil font-lock-face web-mode-block-delimiter-face 35681 . 35682) (nil block-side t 35680 . 35681) (nil block-token delimiter-beg 35680 . 35681) (nil tag-attr t 35680 . 35681) (nil tag-name "template" 35680 . 35681) (nil tag-type start 35680 . 35681) (nil font-lock-face web-mode-block-delimiter-face 35680 . 35681) (nil block-side t 35679 . 35680) (nil block-token delimiter-beg 35679 . 35680) (nil tag-attr t 35679 . 35680) (nil tag-name "template" 35679 . 35680) (nil tag-type start 35679 . 35680) (nil font-lock-face web-mode-block-delimiter-face 35679 . 35680) (nil block-beg 0 35678 . 35679) (nil block-controls 0 35678 . 35679) (nil block-side t 35678 . 35679) (nil block-token delimiter-beg 35678 . 35679) (nil tag-attr t 35678 . 35679) (nil tag-name "template" 35678 . 35679) (nil tag-type start 35678 . 35679) (nil font-lock-face web-mode-block-delimiter-face 35678 . 35679) (nil tag-attr t 35673 . 35678) (nil tag-name "template" 35673 . 35678) (nil tag-type start 35673 . 35678) (nil font-lock-face web-mode-html-attr-engine-face 35673 . 35678) (nil tag-attr-beg 2 35672 . 35673) (nil tag-attr t 35672 . 35673) (nil tag-name "template" 35672 . 35673) (nil tag-type start 35672 . 35673) (nil font-lock-face web-mode-html-attr-engine-face 35672 . 35673) (nil tag-name "template" 35671 . 35672) (nil tag-type start 35671 . 35672) (nil tag-name "template" 35663 . 35671) (nil tag-type start 35663 . 35671) (nil font-lock-face web-mode-html-tag-face 35663 . 35671) (nil tag-name "template" 35662 . 35663) (nil tag-type start 35662 . 35663) (nil tag-beg 17 35662 . 35663) (nil font-lock-face web-mode-html-tag-bracket-face 35662 . 35663) (35662 . 35705)) nil (25883 57872 262990 26000) 0 nil])
([nil nil ((35706 . 35730) ("                    " . 35706) 35771) nil (25883 57872 262957 729000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35775 . 35776) (nil tag-attr t 35775 . 35776) (nil tag-attr-end 4 35775 . 35776) (nil tag-name "span" 35775 . 35776) (nil tag-type start 35775 . 35776) (nil font-lock-face web-mode-html-attr-value-face 35775 . 35776) (nil tag-attr t 35772 . 35775) (nil tag-name "span" 35772 . 35775) (nil tag-type start 35772 . 35775) (nil font-lock-face web-mode-html-attr-value-face 35772 . 35775) (nil tag-attr t 35771 . 35772) (nil tag-name "span" 35771 . 35772) (nil tag-type start 35771 . 35772) (nil font-lock-face web-mode-html-attr-equal-face 35771 . 35772) (nil tag-attr t 35768 . 35771) (nil tag-name "span" 35768 . 35771) (nil tag-type start 35768 . 35771) (nil font-lock-face web-mode-html-attr-engine-face 35768 . 35771) (nil tag-attr-beg 2 35767 . 35768) (nil tag-attr t 35767 . 35768) (nil tag-name "span" 35767 . 35768) (nil tag-type start 35767 . 35768) (nil font-lock-face web-mode-html-attr-engine-face 35767 . 35768) (nil tag-name "span" 35750 . 35767) (nil tag-type start 35750 . 35767) (nil tag-attr t 35749 . 35750) (nil tag-attr-end 6 35749 . 35750) (nil tag-name "span" 35749 . 35750) (nil tag-type start 35749 . 35750) (nil font-lock-face web-mode-html-attr-value-face 35749 . 35750) (nil tag-attr t 35743 . 35749) (nil tag-name "span" 35743 . 35749) (nil tag-type start 35743 . 35749) (nil font-lock-face web-mode-html-attr-value-face 35743 . 35749) (nil tag-attr t 35742 . 35743) (nil tag-name "span" 35742 . 35743) (nil tag-type start 35742 . 35743) (nil font-lock-face web-mode-html-attr-equal-face 35742 . 35743) (nil tag-attr t 35737 . 35742) (nil tag-name "span" 35737 . 35742) (nil tag-type start 35737 . 35742) (nil font-lock-face web-mode-html-attr-engine-face 35737 . 35742) (nil tag-attr-beg 2 35736 . 35737) (nil tag-attr t 35736 . 35737) (nil tag-name "span" 35736 . 35737) (nil tag-type start 35736 . 35737) (nil font-lock-face web-mode-html-attr-engine-face 35736 . 35737) (35736 . 35776)) nil (25883 57872 262954 3000) 0 nil])
([nil nil ((35776 . 35777)) nil (25883 57872 262943 303000) 0 nil])
([nil nil ((35791 . 35821) (#(" " 0 1 (tag-name "span" tag-type start face whitespace-trailing)) . 35790) (undo-tree-id73 . -1) (35751 . 35781) (#("                " 0 16 (tag-name "span" tag-type start)) . 35751) (35777 . 35778)) nil (25883 57872 262941 800000) 0 nil])
([nil nil ((35843 . 35870)) nil (25883 57872 262938 564000) 0 nil])
([nil nil ((35884 . 35909)) nil (25883 57872 262937 405000) 0 nil])
([nil nil ((35916 . 35941)) nil (25883 57872 262936 514000) 0 nil])
([nil nil (("  " . -35939) (35941 . 35952)) nil (25883 57872 262935 408000) 0 nil])
([nil nil ((35950 . 35973)) nil (25883 57872 262934 276000) 0 nil])
([nil nil ((35973 . 35986)) nil (25883 57872 262933 369000) 0 nil])
([nil nil ((35986 . 36009)) nil (25883 57872 262932 398000) 0 nil])
([nil nil (("  " . -36007) (36009 . 36021)) nil (25883 57872 262931 199000) 0 nil])
([nil nil ((nil rear-nonsticky nil 35992 . 35993) (nil block-side t 35992 . 35993) (nil block-end t 35992 . 35993) (nil block-token delimiter-end 35992 . 35993) (nil font-lock-face web-mode-block-delimiter-face 35992 . 35993) (nil face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) 35992 . 35993) (nil block-side t 35991 . 35992) (nil block-token delimiter-end 35991 . 35992) (nil font-lock-face web-mode-block-delimiter-face 35991 . 35992) (nil face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) 35991 . 35992) (nil block-side t 35990 . 35991) (nil block-side t 35989 . 35990) (nil face (rainbow-delimiters-depth-3-face) 35989 . 35990) (nil block-side t 35988 . 35989) (nil block-side t 35987 . 35988) (nil face (rainbow-delimiters-depth-3-face) 35987 . 35988) (nil block-side t 35986 . 35987) (nil face web-mode-variable-name-face 35986 . 35987) (nil block-side t 35985 . 35986) (nil face web-mode-variable-name-face 35985 . 35986) (nil block-side t 35984 . 35985) (nil face web-mode-variable-name-face 35984 . 35985) (nil block-side t 35983 . 35984) (nil face web-mode-variable-name-face 35983 . 35984) (nil block-side t 35982 . 35983) (nil face web-mode-variable-name-face 35982 . 35983) (nil block-side t 35981 . 35982) (nil block-side t 35980 . 35981) (nil block-token delimiter-beg 35980 . 35981) (nil font-lock-face web-mode-block-delimiter-face 35980 . 35981) (nil face (rainbow-delimiters-depth-2-face web-mode-block-delimiter-face) 35980 . 35981) (nil block-beg 0 35979 . 35980) (nil block-controls 0 35979 . 35980) (nil block-side t 35979 . 35980) (nil block-token delimiter-beg 35979 . 35980) (nil font-lock-face web-mode-block-delimiter-face 35979 . 35980) (nil face (rainbow-delimiters-depth-1-face web-mode-block-delimiter-face) 35979 . 35980) (35979 . 35993)) nil (25883 57872 262928 93000) 0 nil])
([nil nil ((35989 . 35990)) nil (25883 57872 262919 459000) 0 nil])
([nil nil ((#("2" 0 1 (block-side t)) . -35988) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("5" 0 1 (block-side t)) . -35989) (undo-tree-id72 . -1) 35990) nil (25883 57872 262917 789000) 0 nil])
([nil nil ((35988 . 35989)) nil (25883 57872 262912 614000) 0 nil])
([nil nil ((35990 . 35996)) nil (25883 57872 262910 882000) 0 nil])
([nil nil ((#(" " 0 1 (block-side t)) . -35995) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) 35996) nil (25883 57872 262905 217000) 0 nil])
([nil nil ((#("bottom" 0 1 (tag-attr-beg 0 tag-attr t tag-name "v-tooltip" tag-type start font-lock-face web-mode-html-attr-name-face) 1 5 (tag-attr t tag-name "v-tooltip" tag-type start font-lock-face web-mode-html-attr-name-face) 5 6 (tag-attr t tag-attr-end 0 tag-name "v-tooltip" tag-type start font-lock-face web-mode-html-attr-name-face)) . 35611) (undo-tree-id74 . -6) (undo-tree-id75 . -6) (t 25883 57872 396938 245000)) nil (25883 57880 47563 132000) 0 nil])
([nil nil ((35611 . 35614)) nil (25883 57880 47516 960000) 0 nil])
([nil nil ((#("5" 0 1 (block-side t)) . -35985) (undo-tree-id76 . -1) (undo-tree-id77 . -1) 35986 (t 25883 57880 184962 613000)) nil (25883 57931 609609 642000) 0 nil])
([nil nil ((35985 . 35986)) nil (25883 57931 609593 25000) 0 nil])
([nil nil ((#("
                      z-index=\"5\"" 0 23 (tag-name "v-tooltip" tag-type start) 23 24 (tag-attr-beg 0 tag-attr t tag-name "v-tooltip" tag-type start font-lock-face web-mode-html-attr-name-face) 24 30 (tag-attr t tag-name "v-tooltip" tag-type start font-lock-face web-mode-html-attr-name-face) 30 31 (tag-attr t tag-name "v-tooltip" tag-type start font-lock-face web-mode-html-attr-equal-face) 31 33 (tag-attr t tag-name "v-tooltip" tag-type start font-lock-face web-mode-html-attr-value-face) 33 34 (tag-attr t tag-attr-end 7 tag-name "v-tooltip" tag-type start font-lock-face web-mode-html-attr-value-face)) . 35554) (undo-tree-id78 . -34) (undo-tree-id79 . -1) (undo-tree-id80 . -34) (undo-tree-id81 . -34) (undo-tree-id82 . -34) (t 25883 57931 745122 514000)) nil (25883 58012 949884 296000) 0 nil])
([nil nil ((#("            console.log(element)" 0 20 (part-side javascript) 20 23 (part-side javascript face web-mode-function-call-face) 23 24 (part-side javascript face (rainbow-delimiters-depth-7-face)) 24 31 (part-side javascript) 31 32 (part-side javascript face (rainbow-delimiters-depth-7-face))) . 79962) (undo-tree-id99 . -32) (undo-tree-id100 . -29) (undo-tree-id101 . -32) (t 25883 58013 89370 151000)) nil (25883 65215 797193 786000) 0 nil])
([nil nil ((#("
" 0 1 (part-side javascript)) . -79961) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) 79962) nil (25883 65215 797183 603000) 0 nil])
([nil nil ((79545 . 79554) (t 25883 65215 939187 375000)) nil (25884 1901 451449 6000) 0 nil])
([nil nil ((#(")" 0 1 (part-side javascript face (rainbow-delimiters-mismatched-face))) . 79567) (79566 . 79567) (79565 . 79567) (#("(" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -79565) (79554 . 79566)) nil (25884 1901 451446 567000) 0 nil])
([nil nil ((79566 . 79571)) nil (25884 1901 451444 92000) 0 nil])
([nil nil ((#("," 0 1 (part-side javascript)) . -79570) (undo-tree-id105 . -1) 79571) nil (25884 1901 451441 978000) 0 nil])
([nil nil ((79570 . 79581)) nil (25884 1901 451437 219000) 0 nil])
([nil nil ((79571 . 79586) (#("raw_filter" 0 10 (part-side javascript)) . -79571) (undo-tree-id102 . -3) (undo-tree-id103 . -10) (undo-tree-id104 . -10) 79581) nil (25884 1901 451431 183000) 0 nil])
([nil nil ((79568 . 79569) (#("\"" 0 1 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face)) . 79567) (79566 . 79567) (79566 . 79567) (t 25884 1901 613841 943000)) nil (25884 1909 291311 767000) 0 nil])
([nil nil ((#("t" 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . 79567) (undo-tree-id107 . -1)) nil (25884 1909 291309 149000) 0 nil])
([nil nil ((79567 . 79583)) nil (25884 1909 291306 160000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face)) . -79582) (undo-tree-id106 . -1) 79583) nil (25884 1909 291303 619000) 0 nil])
([nil nil ((79583 . 79585)) nil (25884 1909 291286 393000) 0 nil])
([nil nil ((79585 . 79586) (t 25884 1909 425864 474000)) nil (25884 1930 452743 680000) 0 nil])
([nil nil ((57785 . 57802) (t 25884 1930 589925 432000)) nil (25884 2291 858887 825000) 0 nil])
([nil nil ((57802 . 57806)) nil (25884 2291 858886 230000) 0 nil])
([nil nil ((#(" " 0 1 (part-side javascript)) . -57805) (undo-tree-id115 . -1) 57806) nil (25884 2291 858884 664000) 0 nil])
([nil nil ((#("rawFilterList" 0 13 (part-side javascript)) . 57792) (undo-tree-id112 . -13) (undo-tree-id113 . -3) (undo-tree-id114 . -13)) nil (25884 2291 858881 26000) 0 nil])
([nil nil ((57792 . 57796)) nil (25884 2291 858867 99000) 0 nil])
([nil nil ((57792 . 57807) (#("raw_" 0 4 (part-side javascript)) . -57792) (undo-tree-id110 . -4) (undo-tree-id111 . -4) 57796) nil (25884 2291 858861 531000) 0 nil])
([nil nil ((58544 . 58553)) nil (25884 2291 858853 101000) 0 nil])
([nil nil ((58553 . 58574)) nil (25884 2291 858849 556000) 0 nil])
([nil nil ((58584 . 58586) (58583 . 58585) (#("[" 0 1 (part-side javascript face (rainbow-delimiters-depth-4-face))) . -58583) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (58574 . 58584)) nil (25884 2291 858840 231000) 0 nil])
([nil current ((#("
        console.log(\"Raw filter list\", this.raw_filter_list)" 0 1 (part-side javascript) 1 17 (part-side javascript) 17 20 (part-side javascript face web-mode-function-call-face) 20 21 (part-side javascript face (rainbow-delimiters-depth-4-face)) 21 22 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 22 37 (part-side javascript part-token string font-lock-face web-mode-javascript-string-face) 37 38 (part-side javascript part-token string syntax-table (15) font-lock-face web-mode-javascript-string-face) 38 40 (part-side javascript) 40 41 (part-side javascript face web-mode-constant-face) 41 44 (part-side javascript face web-mode-constant-face) 44 45 (part-side javascript) 45 60 (part-side javascript) 60 61 (part-side javascript face (rainbow-delimiters-depth-4-face))) . 79610) (undo-tree-id116 . -61) (undo-tree-id117 . -22) (undo-tree-id118 . -1) (undo-tree-id119 . -16) (undo-tree-id120 . -16) (undo-tree-id121 . -16) (undo-tree-id122 . -16) (undo-tree-id123 . -16) (undo-tree-id124 . -16) (undo-tree-id125 . -16) (undo-tree-id126 . -16) (undo-tree-id127 . -16) (undo-tree-id128 . -16) (undo-tree-id129 . -16) (undo-tree-id130 . -16) (undo-tree-id131 . -16) (undo-tree-id132 . -16) (undo-tree-id133 . -16) (undo-tree-id134 . -16) (undo-tree-id135 . -61) (undo-tree-id136 . -61) (undo-tree-id137 . -61) (undo-tree-id138 . -61) (undo-tree-id139 . -61) (undo-tree-id140 . -61) (undo-tree-id141 . -61) (undo-tree-id142 . -61) (undo-tree-id143 . -61) (undo-tree-id144 . -61) (t 25884 2291 998951 840000)) nil (25884 2378 434792 488000) 0 nil])
nil
